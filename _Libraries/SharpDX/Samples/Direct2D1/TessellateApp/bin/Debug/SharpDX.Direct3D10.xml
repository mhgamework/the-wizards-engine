<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct3D10</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Direct3D10.Asynchronous">
            <summary>	
            This interface encapsulates methods for retrieving data from the GPU asynchronously.	
            </summary>	
            <unmanaged>ID3D10Asynchronous</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DeviceChild">
            <summary>	
            A device-child interface accesses data used by a device.	
            </summary>	
            <unmanaged>ID3D10DeviceChild</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.DeviceChild.GetDevice(SharpDX.Direct3D10.Device@)">
            <summary>	
            Get a reference to the device that created this interface.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one, so be sure to call ::release() on the returned reference(s) before they are freed or else you will have a memory leak. 	
            </remarks>	
            <param name="deviceRef">Address of a reference to a device (see <see cref="T:SharpDX.Direct3D10.Device"/>). </param>
            <unmanaged>void ID3D10DeviceChild::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            Get application-defined data from a device child.	
            </summary>	
            <remarks>	
            The data stored in the device child is set with <see cref="M:SharpDX.Direct3D10.DeviceChild.SetPrivateData(System.Guid,System.Int32,System.IntPtr)"/>. 	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSizeRef">Size of the data. </param>
            <param name="dataRef">Pointer to the data stored with the device child. If pData is NULL, DataSize must also be 0, and any data previously associated with the guid will be destroyed. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10DeviceChild::GetPrivateData([In] GUID* guid,[InOut] int* pDataSize,[Out, Buffer, Optional] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DeviceChild.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            Set application-defined data to a device child and associate that data with an application-defined guid.	
            </summary>	
            <remarks>	
            The data stored in the device child with this method can be retrieved with <see cref="M:SharpDX.Direct3D10.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. 	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSize">Size of the data. </param>
            <param name="dataRef">Pointer to the data to be stored with this device child. If pData is NULL, DataSize must also be 0, and any data previously associated with the specified guid will be destroyed. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10DeviceChild::SetPrivateData([In] GUID* guid,[In] int DataSize,[In, Buffer, Optional] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DeviceChild.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            Associate an <see cref="T:SharpDX.ComObject"/>-derived interface with this device child and associate that interface with an application-defined guid.	
            </summary>	
            <remarks>	
            When this method is called ::addref() will be called on the <see cref="T:SharpDX.ComObject"/>-derived interface, and when the device child is detroyed ::release() will be called on the IUnknown-derived interface. 	
            </remarks>	
            <param name="guid">Guid associated with the interface. </param>
            <param name="dataRef">Pointer to an <see cref="T:SharpDX.ComObject"/>-derived interface to be associated with the device child. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10DeviceChild::SetPrivateDataInterface([In] GUID* guid,[In, Optional] const IUnknown* pData)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.DeviceChild.Device">
            <summary>	
            Get a reference to the device that created this interface.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one, so be sure to call ::release() on the returned reference(s) before they are freed or else you will have a memory leak. 	
            </remarks>	
            <unmanaged>void ID3D10DeviceChild::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.GetData">
            <summary>	
            Get data from the GPU asynchronously.	
            </summary>	
            <remarks>	
            GetData retrieves the data collected between calls to <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/>.  Certain queries only require a call to ID3D10Asynchronous::End in which case the data returned by GetData is accurate up to the last call to ID3D10Asynchronous::End (See <see cref="T:SharpDX.Direct3D10.Query"/>). If DataSize is 0, GetData is only used to check status where a return value of S_OK indicates that data is available to give to an application, and a return value of S_FALSE indicates data is not yet available. It is invalid to invoke this function on a predicate created with the flag D3D10_QUERY_MISCFLAG_PREDICATEHINT. If the asynchronous interface that calls this function is <see cref="T:SharpDX.Direct3D10.Query"/>, then the following table applies.  Query TypeOutput Data TypeSupports Begin Method EVENTBOOLNO OCCLUSIONUINT64YES TIMESTAMPUINT64NO TIMESTAMP_DISJOINTQUERYDATA_TIMESTAMP_DISJOINTYES PIPELINE_STATISTICSQUERYDATA_PIPELINE_STATISTICSYES OCCLUSION_PREDICATEBOOLYES SO_STATISTICSQUERYDATA_SO_STATISTICSYES SO_OVERFLOW_PREDICATEBOOLYES  ? If the asynchronous interface that calls this API is <see cref="T:SharpDX.Direct3D10.Counter"/>, then the following applies.  Counter TypeOutput Data TypeUnits GPU_IDLEFLOAT32fraction of time VERTEX_PROCESSINGFLOAT32fraction of time GEOMETRY_PROCESSINGFLOAT32fraction of time PIXEL_PROCESSINGFLOAT32fraction of time OTHER_GPU_PROCESSINGFLOAT32fraction of time HOST_ADAPTER_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum LOCAL_VIDMEM_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEX_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum TRISETUP_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum FILLRATE_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEXSHADER_MEMORY_LIMITEDFLOAT32fraction of time VERTEXSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_MEMORY_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time PIXELSHADER_MEMORY_LIMITEDFLOAT32fraction of time PIXELSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time POST_TRANSFORM_CACHE_HIT_RATEFLOAT32fraction TEXTURE_CACHE_HIT_RATEFLOAT32fraction  ? The value returned by a GPU_IDLE, VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, or OTHER_GPU_PROCESSING counter may be different depending on the number of parallel counters that exist on a video card, and those values can be interpreted with the following equation:  ?  Equation to interpret the number of parallel counters ? The number of parallel counters that a video card has is available from NumDetectableParallelUnits in <see cref="T:SharpDX.Direct3D10.CounterMetadata"/>, and it can be retrieved by calling <see cref="M:SharpDX.Direct3D10.Device.CheckCounter(SharpDX.Direct3D10.CounterDescription,SharpDX.Direct3D10.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/>. 	
            </remarks>	
            <returns>If this function succeeds, returns a <see cref="T:SharpDX.DataStream"/> containing the asynchronous data sent from the GPU. </returns>
            <unmanaged>HRESULT ID3D10Asynchronous::GetData([Out, Buffer, Optional] void* pData,[In] int DataSize,[In] int GetDataFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.GetData(SharpDX.Direct3D10.AsynchronousFlags)">
            <summary>	
            Get data from the GPU asynchronously.	
            </summary>	
            <remarks>	
            GetData retrieves the data collected between calls to <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/>.  Certain queries only require a call to ID3D10Asynchronous::End in which case the data returned by GetData is accurate up to the last call to ID3D10Asynchronous::End (See <see cref="T:SharpDX.Direct3D10.Query"/>). If DataSize is 0, GetData is only used to check status where a return value of S_OK indicates that data is available to give to an application, and a return value of S_FALSE indicates data is not yet available. It is invalid to invoke this function on a predicate created with the flag D3D10_QUERY_MISCFLAG_PREDICATEHINT. If the asynchronous interface that calls this function is <see cref="T:SharpDX.Direct3D10.Query"/>, then the following table applies.  Query TypeOutput Data TypeSupports Begin Method EVENTBOOLNO OCCLUSIONUINT64YES TIMESTAMPUINT64NO TIMESTAMP_DISJOINTQUERYDATA_TIMESTAMP_DISJOINTYES PIPELINE_STATISTICSQUERYDATA_PIPELINE_STATISTICSYES OCCLUSION_PREDICATEBOOLYES SO_STATISTICSQUERYDATA_SO_STATISTICSYES SO_OVERFLOW_PREDICATEBOOLYES  ? If the asynchronous interface that calls this API is <see cref="T:SharpDX.Direct3D10.Counter"/>, then the following applies.  Counter TypeOutput Data TypeUnits GPU_IDLEFLOAT32fraction of time VERTEX_PROCESSINGFLOAT32fraction of time GEOMETRY_PROCESSINGFLOAT32fraction of time PIXEL_PROCESSINGFLOAT32fraction of time OTHER_GPU_PROCESSINGFLOAT32fraction of time HOST_ADAPTER_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum LOCAL_VIDMEM_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEX_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum TRISETUP_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum FILLRATE_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEXSHADER_MEMORY_LIMITEDFLOAT32fraction of time VERTEXSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_MEMORY_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time PIXELSHADER_MEMORY_LIMITEDFLOAT32fraction of time PIXELSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time POST_TRANSFORM_CACHE_HIT_RATEFLOAT32fraction TEXTURE_CACHE_HIT_RATEFLOAT32fraction  ? The value returned by a GPU_IDLE, VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, or OTHER_GPU_PROCESSING counter may be different depending on the number of parallel counters that exist on a video card, and those values can be interpreted with the following equation:  ?  Equation to interpret the number of parallel counters ? The number of parallel counters that a video card has is available from NumDetectableParallelUnits in <see cref="T:SharpDX.Direct3D10.CounterMetadata"/>, and it can be retrieved by calling <see cref="M:SharpDX.Direct3D10.Device.CheckCounter(SharpDX.Direct3D10.CounterDescription,SharpDX.Direct3D10.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/>. 	
            </remarks>	
            <param name="flags">Optional flags. Can be 0 or any combination of the flags enumerated by <see cref="T:SharpDX.Direct3D10.AsynchronousFlags"/>. </param>
            <returns>If this function succeeds, returns a <see cref="T:SharpDX.DataStream"/> containing the asynchronous data sent from the GPU. </returns>
            <unmanaged>HRESULT ID3D10Asynchronous::GetData([Out, Buffer, Optional] void* pData,[In] int DataSize,[In] int GetDataFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Asynchronous"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.Begin">
            <summary>	
            Starts the collection of GPU data.	
            </summary>	
            <remarks>	
            Calling Begin starts the asynchronous collection of GPU data. Calling <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/> causes data collection to stop.   See <see cref="T:SharpDX.Direct3D10.Asynchronous"/> for additional information. 	
            </remarks>	
            <unmanaged>void ID3D10Asynchronous::Begin()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.End">
            <summary>	
            Ends the collection of GPU data.	
            </summary>	
            <remarks>	
            Calling <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> starts the asynchronous collection of GPU data. Calling ID3D10Asynchronous::End causes data  collection to stop. See <see cref="T:SharpDX.Direct3D10.Asynchronous"/> for additional information. 	
            </remarks>	
            <unmanaged>void ID3D10Asynchronous::End()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.GetData(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Get data from the GPU asynchronously.	
            </summary>	
            <remarks>	
            GetData retrieves the data collected between calls to <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/>.  Certain queries only require a call to ID3D10Asynchronous::End in which case the data returned by GetData is accurate up to the last call to ID3D10Asynchronous::End (See <see cref="T:SharpDX.Direct3D10.Query"/>). If DataSize is 0, GetData is only used to check status where a return value of S_OK indicates that data is available to give to an application, and a return value of S_FALSE indicates data is not yet available. It is invalid to invoke this function on a predicate created with the flag D3D10_QUERY_MISCFLAG_PREDICATEHINT. If the asynchronous interface that calls this function is <see cref="T:SharpDX.Direct3D10.Query"/>, then the following table applies.  Query TypeOutput Data TypeSupports Begin Method EVENTBOOLNO OCCLUSIONUINT64YES TIMESTAMPUINT64NO TIMESTAMP_DISJOINTQUERYDATA_TIMESTAMP_DISJOINTYES PIPELINE_STATISTICSQUERYDATA_PIPELINE_STATISTICSYES OCCLUSION_PREDICATEBOOLYES SO_STATISTICSQUERYDATA_SO_STATISTICSYES SO_OVERFLOW_PREDICATEBOOLYES  ? If the asynchronous interface that calls this API is <see cref="T:SharpDX.Direct3D10.Counter"/>, then the following applies.  Counter TypeOutput Data TypeUnits GPU_IDLEFLOAT32fraction of time VERTEX_PROCESSINGFLOAT32fraction of time GEOMETRY_PROCESSINGFLOAT32fraction of time PIXEL_PROCESSINGFLOAT32fraction of time OTHER_GPU_PROCESSINGFLOAT32fraction of time HOST_ADAPTER_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum LOCAL_VIDMEM_BANDWIDTH_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEX_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum TRISETUP_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum FILLRATE_THROUGHPUT_UTILIZATIONFLOAT32fraction of theoretical maximum VERTEXSHADER_MEMORY_LIMITEDFLOAT32fraction of time VERTEXSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_MEMORY_LIMITEDFLOAT32fraction of time GEOMETRYSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time PIXELSHADER_MEMORY_LIMITEDFLOAT32fraction of time PIXELSHADER_COMPUTATION_LIMITEDFLOAT32fraction of time POST_TRANSFORM_CACHE_HIT_RATEFLOAT32fraction TEXTURE_CACHE_HIT_RATEFLOAT32fraction  ? The value returned by a GPU_IDLE, VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, or OTHER_GPU_PROCESSING counter may be different depending on the number of parallel counters that exist on a video card, and those values can be interpreted with the following equation:  ?  Equation to interpret the number of parallel counters ? The number of parallel counters that a video card has is available from NumDetectableParallelUnits in <see cref="T:SharpDX.Direct3D10.CounterCapabilities"/>, and it can be retrieved by calling <see cref="M:SharpDX.Direct3D10.Device.GetCounterCapabilities"/>. 	
            </remarks>	
            <param name="dataRef">Address of memory that will receive the data. If NULL, GetData will be used only to check status. The type of data output depends on the type of asynchronous interface. See Remarks. </param>
            <param name="dataSize">Size of the data to retrieve or 0. This value can be obtained with <see cref="M:SharpDX.Direct3D10.Asynchronous.GetDataSize"/>. Must be 0 when pData is NULL. </param>
            <param name="getDataFlags">Optional flags. Can be 0 or any combination of the flags enumerated by <see cref="T:SharpDX.Direct3D10.AsynchronousFlags"/>. </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, possible  return values are the following:  S_FALSE DXGI_ERROR_DEVICE_REMOVED DXGI_ERROR_INVALID_CALL  </returns>
            <unmanaged>HRESULT ID3D10Asynchronous::GetData([Out, Buffer, Optional] void* pData,[In] int DataSize,[In] int GetDataFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Asynchronous.GetDataSize">
            <summary>	
            Get the size of the data (in bytes) that is output when calling <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/>.	
            </summary>	
            <returns>Size of the data (in bytes) that is output when calling GetData. </returns>
            <unmanaged>int ID3D10Asynchronous::GetDataSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Asynchronous.IsDataAvailable">
            <summary>
            Gets a value indicating whether or not data is available for consumption.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendState">
            <summary>	
            This blend-state interface accesses blending state for a Direct3D 10.0 device for the {{output-merger}} stage.	
            </summary>	
            <unmanaged>ID3D10BlendState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.BlendStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.BlendState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.BlendStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.BlendState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.BlendState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState.GetDescription(SharpDX.Direct3D10.BlendStateDescription@)">
            <summary>	
            Get the blend state.	
            </summary>	
            <param name="descRef">A reference to the blend state (see <see cref="T:SharpDX.Direct3D10.BlendStateDescription"/>). </param>
            <unmanaged>void ID3D10BlendState::GetDesc([Out] D3D10_BLEND_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendState.Description">
            <summary>	
            Get the blend state.	
            </summary>	
            <unmanaged>void ID3D10BlendState::GetDesc([Out] D3D10_BLEND_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendState1">
            <summary>	
            This blend-state interface accesses blending state for a Direct3D 10.1 device for the {{output-merger}} stage.	
            </summary>	
            <unmanaged>ID3D10BlendState1</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState1.#ctor(SharpDX.Direct3D10.Device1,SharpDX.Direct3D10.BlendStateDescription1)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.BlendState1" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState1.#ctor(SharpDX.Direct3D10.Device1,SharpDX.Direct3D10.BlendStateDescription1@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.BlendState1" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.BlendState1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.BlendState1.GetDescription1(SharpDX.Direct3D10.BlendStateDescription1@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="descRef">No documentation.</param>
            <unmanaged>void ID3D10BlendState1::GetDesc1([Out] D3D10_BLEND_DESC1* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendState1.Description1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void ID3D10BlendState1::GetDesc1([Out] D3D10_BLEND_DESC1* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Buffer">
            <summary>	
            A buffer interface accesses a {{buffer resource}}, which is unstructured memory. Buffers typically store vertex or index data.	
            </summary>	
            <unmanaged>ID3D10Buffer</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Resource">
            <summary>	
            A resource interface provides common actions on all {{resources}}.	
            </summary>	
            <unmanaged>ID3D10Resource</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumMipLevels">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.ResourceSizeInMegabytes">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTexture1DArraySize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTexture2DArraySize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTexture1DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTexture2DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTexture3DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Resource.MaximumTextureCubeSize">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.GetTypeInfo(SharpDX.Direct3D10.ResourceDimension@)">
            <summary>	
            Get the type of the resource.	
            </summary>	
            <param name="rType">Pointer to the resource type (see <see cref="T:SharpDX.Direct3D10.ResourceDimension"/>). </param>
            <unmanaged>void ID3D10Resource::GetType([Out] D3D10_RESOURCE_DIMENSION* rType)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            Set the eviction priority of a resource.	
            </summary>	
            <remarks>	
            Resource priorities determine which resource to evict from video memory when the system has run out of video memory. The resource will not be lost; it will be removed from video memory and placed into system memory, or possibly placed onto the hard drive. The resource will be loaded back into video memory when it is required. A resource that is set to the maximum priority, DXGI_RESOURCE_PRIORITY_MAXIMUM, is only evicted if there is no other way of resolving the incoming memory request. The Windows Display Driver Model (WDDM) tries to split an incoming memory request to its minimum size and evict lower-priority resources before evicting a resource with maximum priority. Changing the priorities of resources should be done carefully. The wrong eviction priorities could be a detriment to performance rather than an improvement. See {{QueryResourceResidency}} for additional information. This method is a wrapper for {{SetEvictionPriority}} and is provided in the <see cref="T:SharpDX.Direct3D10.Resource"/> interface for convenience. 	
            </remarks>	
            <param name="evictionPriority">Eviction priority for the resource, which is one of the following values:  DXGI_RESOURCE_PRIORITY_MINIMUM DXGI_RESOURCE_PRIORITY_LOW DXGI_RESOURCE_PRIORITY_NORMAL DXGI_RESOURCE_PRIORITY_HIGH DXGI_RESOURCE_PRIORITY_MAXIMUM  </param>
            <unmanaged>void ID3D10Resource::SetEvictionPriority([In] int EvictionPriority)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.GetEvictionPriority">
            <summary>	
            Get the eviction priority of a resource.	
            </summary>	
            <remarks>	
            This method is a wrapper for {{GetEvictionPriority}} and is provided in the <see cref="T:SharpDX.Direct3D10.Resource"/> interface for convenience. 	
            </remarks>	
            <returns>One of the following values, which specifies the eviction priority for the resource:  DXGI_RESOURCE_PRIORITY_MINIMUM DXGI_RESOURCE_PRIORITY_LOW DXGI_RESOURCE_PRIORITY_NORMAL DXGI_RESOURCE_PRIORITY_HIGH DXGI_RESOURCE_PRIORITY_MAXIMUM  </returns>
            <unmanaged>int ID3D10Resource::GetEvictionPriority()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromSwapChain``1(SharpDX.DXGI.SwapChain,System.Int32)">
            <summary>
              Gets a swap chain back buffer.
            </summary>
            <typeparam name = "T">The type of the buffer.</typeparam>
            <param name = "swapChain">The swap chain to get the buffer from.</param>
            <param name = "index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromFile``1(SharpDX.Direct3D10.Device,System.String)">
            <summary>
              Loads a texture from an image file.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "fileName">Path to the file on disk.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromFile``1(SharpDX.Direct3D10.Device,System.String,SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>
              Loads a texture from an image file.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "fileName">Path to the file on disk.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromMemory``1(SharpDX.Direct3D10.Device,System.Byte[])">
            <summary>
              Loads a texture from an image in memory.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "memory">Array of memory containing the image data to load.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromMemory``1(SharpDX.Direct3D10.Device,System.Byte[],SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>
              Loads a texture from an image in memory.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "memory">Array of memory containing the image data to load.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromStream``1(SharpDX.Direct3D10.Device,System.IO.Stream,System.Int32)">
            <summary>
              Loads a texture from a stream of data.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "stream">A stream containing the image data to load.</param>
            <param name = "sizeInBytes">Size of the image to load.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FromStream``1(SharpDX.Direct3D10.Device,System.IO.Stream,System.Int32,SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>
              Loads a texture from a stream of data.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "stream">A stream containing the image data to load.</param>
            <param name = "sizeInBytes">Size of the image to load.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.ToFile``1(``0,SharpDX.Direct3D10.ImageFileFormat,System.String)">
            <summary>
              Saves a texture to file.
            </summary>
            <param name = "texture">The texture to save.</param>
            <param name = "format">The format the texture will be saved as.</param>
            <param name = "fileName">Name of the destination output file where the texture will be saved.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.ToStream``1(``0,SharpDX.Direct3D10.ImageFileFormat,System.IO.Stream)">
            <summary>
              Saves a texture to a stream.
            </summary>
            <param name = "texture">The texture to save.</param>
            <param name = "format">The format the texture will be saved as.</param>
            <param name = "stream">Destination memory stream where the image will be saved.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.LoadTextureFromTexture(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.TextureLoadInformation)">
            <summary>	
            Load a texture from a texture.	
            </summary>	
            <param name="source">Pointer to the source texture. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="destination">Pointer to the destination texture. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="loadInformation">Pointer to texture loading parameters. See <see cref="T:SharpDX.Direct3D10.TextureLoadInformation"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10LoadTextureFromTexture([None] ID3D10Resource* pSrcTexture,[None] D3DX10_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D10Resource* pDstTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.AsSurface">
            <summary>
            Returns a DXGI Surface for this resource.
            </summary>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.CalculateSubresourceIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a subresource index.
            </summary>
            <param name="mipSlice">The index of the desired mip slice.</param>
            <param name="arraySlice">The index of the desired array slice.</param>
            <param name="mipLevels">The total number of mip levels.</param>
            <returns>The subresource index (equivalent to mipSlice + (arraySlice * mipLevels)).</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.FilterTexture(SharpDX.Direct3D10.Resource,System.Int32,SharpDX.Direct3D10.FilterFlags)">
            <summary>	
            Generates mipmap chain using a particular texture filter.	
            </summary>	
            <param name="texture">The texture object to be filtered. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="sourceLevel">The mipmap level whose data is used to generate the rest of the mipmap chain. </param>
            <param name="mipFilter">Flags controlling how each miplevel is filtered (or D3DX10_DEFAULT for D3DX10_FILTER_BOX). See <see cref="T:SharpDX.Direct3D10.FilterFlags"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10FilterTexture([None] ID3D10Resource* pTexture,[None] int SrcLevel,[None] int MipFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Resource.GetMipSize(System.Int32,System.Int32)">
            <summary>
            Calculate the MipSize
            </summary>
            <param name="mipSlice"></param>
            <param name="baseSliceSize"></param>
            <returns></returns>
        </member>
        <member name="P:SharpDX.Direct3D10.Resource.TypeInfo">
            <summary>	
            Get the type of the resource.	
            </summary>	
            <unmanaged>void ID3D10Resource::GetType([Out] D3D10_RESOURCE_DIMENSION* rType)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Resource.EvictionPriority">
            <summary>	
            Get the eviction priority of a resource.	
            </summary>	
            <remarks>	
            This method is a wrapper for {{GetEvictionPriority}} and is provided in the <see cref="T:SharpDX.Direct3D10.Resource"/> interface for convenience. 	
            </remarks>	
            <unmanaged>int ID3D10Resource::GetEvictionPriority()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.BufferDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.#ctor(SharpDX.Direct3D10.Device,SharpDX.DataStream,SharpDX.Direct3D10.BufferDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.#ctor(SharpDX.Direct3D10.Device,System.Int32,SharpDX.Direct3D10.ResourceUsage,SharpDX.Direct3D10.BindFlags,SharpDX.Direct3D10.CpuAccessFlags,SharpDX.Direct3D10.ResourceOptionFlags)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "optionFlags">Miscellaneous resource options.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.#ctor(SharpDX.Direct3D10.Device,SharpDX.DataStream,System.Int32,SharpDX.Direct3D10.ResourceUsage,SharpDX.Direct3D10.BindFlags,SharpDX.Direct3D10.CpuAccessFlags,SharpDX.Direct3D10.ResourceOptionFlags)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "optionFlags">Miscellaneous resource options.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode)">
            <summary>	
            Get a reference to the data contained in the resource and deny GPU access to the resource.	
            </summary>	
            <remarks>	
            For the CPU to write the contents of a resource, the resource must be created with the dynamic usage flag, D3D10_USAGE_DYNAMIC.  To both read and write those contents, the resource must be created with the staging usage flag, D3D10_USAGE_STAGING. (For more information about  these flags, see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>.) ID3D10Buffer::Map will retrieve a reference to the resource data.  For a discussion on how to access resources efficiently, see {{Copying and Accessing Resource Data (Direct3D 10)}}. Call <see cref="M:SharpDX.Direct3D10.Buffer.Unmap"/> to signify that the application has finished accessing the resource. ID3D10Buffer::Map has a few other restrictions. For example:  The same buffer cannot be mapped multiple times; in other words, do not call ID3D10Buffer::Map on a buffer that is already mapped. Any buffer that is bound to the pipeline must be unmapped before any rendering operation (that is, <see cref="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)"/>)  can be executed.    Differences between Direct3D 9 and Direct3D 10: ID3D10Buffer::Map in Direct3D 10 is analogous to resource {{Lock}} in Direct3D 9.   ? 	
            </remarks>	
            <param name="mapType">Flag that specifies the CPU's permissions for the reading and writing of a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <returns>If this function succeeds returns a <see cref="T:SharpDX.DataStream"/> with the size this buffer.</returns>
            <unmanaged>HRESULT ID3D10Buffer::Map([In] D3D10_MAP MapType,[In] int MapFlags,[Out] void** ppData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags)">
            <summary>	
            Get a reference to the data contained in the resource and deny GPU access to the resource.	
            </summary>	
            <remarks>	
            For the CPU to write the contents of a resource, the resource must be created with the dynamic usage flag, D3D10_USAGE_DYNAMIC.  To both read and write those contents, the resource must be created with the staging usage flag, D3D10_USAGE_STAGING. (For more information about  these flags, see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>.) ID3D10Buffer::Map will retrieve a reference to the resource data.  For a discussion on how to access resources efficiently, see {{Copying and Accessing Resource Data (Direct3D 10)}}. Call <see cref="M:SharpDX.Direct3D10.Buffer.Unmap"/> to signify that the application has finished accessing the resource. ID3D10Buffer::Map has a few other restrictions. For example:  The same buffer cannot be mapped multiple times; in other words, do not call ID3D10Buffer::Map on a buffer that is already mapped. Any buffer that is bound to the pipeline must be unmapped before any rendering operation (that is, <see cref="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)"/>)  can be executed.    Differences between Direct3D 9 and Direct3D 10: ID3D10Buffer::Map in Direct3D 10 is analogous to resource {{Lock}} in Direct3D 9.   ? 	
            </remarks>	
            <param name="mode">Flag that specifies the CPU's permissions for the reading and writing of a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <param name="mapFlags">Flag that specifies what the CPU should do when the GPU is busy (see <see cref="T:SharpDX.Direct3D10.MapFlags"/>). This flag is optional. </param>
            <returns>If this function succeeds returns a <see cref="T:SharpDX.DataStream"/> with the size this buffer.</returns>
            <unmanaged>HRESULT ID3D10Buffer::Map([In] D3D10_MAP MapType,[In] int MapFlags,[Out] void** ppData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Buffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)">
            <summary>	
            Get a reference to the data contained in the resource and deny GPU access to the resource.	
            </summary>	
            <remarks>	
            For the CPU to write the contents of a resource, the resource must be created with the dynamic usage flag, D3D10_USAGE_DYNAMIC.  To both read and write those contents, the resource must be created with the staging usage flag, D3D10_USAGE_STAGING. (For more information about  these flags, see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>.) ID3D10Buffer::Map will retrieve a reference to the resource data.  For a discussion on how to access resources efficiently, see {{Copying and Accessing Resource Data (Direct3D 10)}}. Call <see cref="M:SharpDX.Direct3D10.Buffer.Unmap"/> to signify that the application has finished accessing the resource. ID3D10Buffer::Map has a few other restrictions. For example:  The same buffer cannot be mapped multiple times; in other words, do not call ID3D10Buffer::Map on a buffer that is already mapped. Any buffer that is bound to the pipeline must be unmapped before any rendering operation (that is, <see cref="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)"/>)  can be executed.    Differences between Direct3D 9 and Direct3D 10: ID3D10Buffer::Map in Direct3D 10 is analogous to resource {{Lock}} in Direct3D 9.   ? 	
            </remarks>	
            <param name="mapType">Flag that specifies the CPU's permissions for the reading and writing of a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <param name="mapFlags">Flag that specifies what the CPU should do when the GPU is busy (see <see cref="T:SharpDX.Direct3D10.MapFlags"/>). This flag is optional. </param>
            <param name="dataRef">Pointer to the buffer resource data. </param>
            <returns>If this function succeeds, it returns S_OK. The following list contains some of the reasons that Map can fail:   If MapFlags specifies D3D10_MAP_FLAG_DO_NOT_WAIT and the GPU is not yet finished with the resource, ID3D10Buffer::Map returns DXGI_ERROR_WAS_STILL_DRAWING. ID3D10Buffer::Map returns DXGI_ERROR_DEVICE_REMOVED if MapType includes any flags that permit reading and the hardware  device (that is, the video card) has been removed.  For more information about the preceding return values, see <see cref="T:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT ID3D10Buffer::Map([In] D3D10_MAP MapType,[In] D3D10_MAP_FLAG MapFlags,[Out] void** ppData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.Unmap">
            <summary>	
            Invalidate the reference to the resource retrieved by <see cref="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode)"/> and reenable GPU access to the resource.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 10: Unmap() in Direct3D 10 is analogous to resource Unlock() in Direct3D 9.   ? 	
            </remarks>	
            <unmanaged>void ID3D10Buffer::Unmap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Buffer.GetDescription(SharpDX.Direct3D10.BufferDescription@)">
            <summary>	
            Get the properties of a buffer resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D10.BufferDescription"/>) filled in by the method. This reference cannot be NULL. </param>
            <unmanaged>void ID3D10Buffer::GetDesc([Out] D3D10_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Buffer.Description">
            <summary>	
            Get the properties of a buffer resource.	
            </summary>	
            <unmanaged>void ID3D10Buffer::GetDesc([Out] D3D10_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BufferDescription">
            <summary>	
            Describes a {{buffer}} resource.	
            </summary>	
            <remarks>	
            This structure is used by <see cref="M:SharpDX.Direct3D10.Device.CreateBuffer(SharpDX.Direct3D10.BufferDescription@,System.Nullable{SharpDX.Direct3D10.SubResourceData},SharpDX.Direct3D10.Buffer@)"/> to create buffer resources. In addition to this structure, there is also a derived structure in D3D10.h (CD3D10_BUFFER_DESC) which behaves like an inherited class to help create a buffer description. 	
            </remarks>	
            <unmanaged>D3D10_BUFFER_DESC</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.BufferDescription.#ctor(System.Int32,SharpDX.Direct3D10.ResourceUsage,SharpDX.Direct3D10.BindFlags,SharpDX.Direct3D10.CpuAccessFlags,SharpDX.Direct3D10.ResourceOptionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="bindFlags">The bind flags.</param>
            <param name="cpuAccessFlags">The cpu access flags.</param>
            <param name="optionFlags">The option flags.</param>
        </member>
        <member name="F:SharpDX.Direct3D10.BufferDescription.SizeInBytes">
            <summary>	
            Size of the buffer in bytes. 	
            </summary>	
            <unmanaged>int ByteWidth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BufferDescription.Usage">
            <summary>	
            Identify how the buffer is expected to be read from and written to. Frequency of update is a key factor. The most common value is typically D3D10_USAGE_DEFAULT; see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D10_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BufferDescription.BindFlags">
            <summary>	
            Identify how the buffer will be bound to the {{pipeline}}. Applications can logicaly OR flags together (see <see cref="T:SharpDX.Direct3D10.BindFlags"/>) to indicate that the buffer can be accessed in different ways. 	
            </summary>	
            <unmanaged>D3D10_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BufferDescription.CpuAccessFlags">
            <summary>	
            CPU access flags (see <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>) or 0 if no CPU access is necessary. Applications can logicaly OR flags together. 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BufferDescription.OptionFlags">
            <summary>	
            Miscellaneous flags (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>) or 0 if unused. Applications can logically OR flags together. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device">
            <summary>	
            The device interface represents a virtual adapter for Direct3D 10.0; it is used to perform rendering and create Direct3D resources.	
            </summary>	
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.#ctor(SharpDX.Direct3D10.DriverType)">
            <summary>
              Constructor for a D3D10 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> for more information.
            </summary>
            <param name="driverType"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.#ctor(SharpDX.DXGI.Adapter)">
            <summary>
              Constructor for a D3D10 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> for more information.
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.#ctor(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D10 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> for more information.
            </summary>
            <param name="driverType"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.#ctor(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D10 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> for more information.
            </summary>
            <param name="adapter"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ClearRenderTargetView(SharpDX.Direct3D10.RenderTargetView,System.Drawing.Color)">
            <summary>	
            Set all the elements in a render target to one value.	
            </summary>	
            <remarks>	
            Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.   Differences between Direct3D 9 and Direct3D 10: Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.   ? 	
            </remarks>	
            <param name="renderTargetViewRef">Pointer to the rendertarget. </param>
            <param name="color">A 4-component array that represents the color to fill the render target with. </param>
            <unmanaged>void ID3D10Device::ClearRenderTargetView([In] ID3D10RenderTargetView* pRenderTargetView,[In] const float* ColorRGBA)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateWithSwapChain(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "driverType">The type of device to create.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "adapter">The video adapter on which the device should be created.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              This overload has been deprecated. Use one of the alternatives that does not take both an adapter and a driver type.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetCounterMetadata(SharpDX.Direct3D10.CounterDescription)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.	
            </summary>
            <param name="counterDescription">The counter description.</param>
            <returns>Description of the counter</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetPredication(System.Boolean@)">
            <summary>	
            Get the rendering predicate state.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="predicateValue">a boolean to fill with the predicate comparison value. FALSE upon device creation. </param>
            <returns>a reference to a predicate (see <see cref="T:SharpDX.Direct3D10.Predicate"/>).</returns>
            <unmanaged>void ID3D10Device::GetPredication([Out, Optional] ID3D10Predicate** ppPredicate,[Out, Optional] BOOL* pPredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OpenSharedResource``1(System.IntPtr)">
            <summary>
            Give a device access to a shared resource created on a different Direct3d device.
            </summary>
            <typeparam name="T">The type of the resource we are gaining access to.</typeparam>
            <param name="resourceHandle">A resource handle. See remarks.</param>
            <returns>
            This method returns a reference to the resource we are gaining access to.
            </returns>
            <remarks>
            To share a resource between two Direct3D 10 devices the resource must have been created with the  <see cref="F:SharpDX.Direct3D10.ResourceOptionFlags.Shared"/> flag, if it was created using the ID3D10Device interface.  If it was created using the IDXGIDevice interface, then the resource is always shared. The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro.  For example, __uuidof(ID3D10Buffer) will get the GUID of the interface to a buffer resource. When sharing a resource between two Direct3D 10 devices the unique handle of the resource can be obtained by querying the resource for the <see cref="T:SharpDX.DXGI.Resource"/> interface and then calling {{GetSharedHandle}}.
            <code> IDXGIResource* pOtherResource(NULL);
            hr = pOtherDeviceResource-&gt;QueryInterface( __uuidof(IDXGIResource), (void**)&amp;pOtherResource );
            HANDLE sharedHandle;
            pOtherResource-&gt;GetSharedHandle(&amp;sharedHandle); </code>
            The only resources that can be shared are 2D non-mipmapped textures. To share a resource between a Direct3D 9 device and a Direct3D 10 device the texture must have been created using  the pSharedHandle argument of {{CreateTexture}}.   The shared Direct3D 9 handle is then passed to OpenSharedResource in the hResource argument. The following code illustrates the method calls involved.
            <code> sharedHandle = NULL; // must be set to NULL to create, can use a valid handle here to open in D3D9
            pDevice9-&gt;CreateTexture(..., pTex2D_9, &amp;sharedHandle);
            ...
            pDevice10-&gt;OpenSharedResource(sharedHandle, __uuidof(ID3D10Resource), (void**)(&amp;tempResource10));
            tempResource10-&gt;QueryInterface(__uuidof(ID3D10Texture2D), (void**)(&amp;pTex2D_10));
            tempResource10-&gt;Release();
            // now use pTex2D_10 with pDevice10    </code>
            Textures being shared from D3D9 to D3D10 have the following restrictions.  Textures must be 2D Only 1 mip level is allowed Texture must have default usage Texture must be write only MSAA textures are not allowed Bind flags must have SHADER_RESOURCE and RENDER_TARGET set Only R10G10B10A2_UNORM, R16G16B16A16_FLOAT and R8G8B8A8_UNORM formats are allowed  If a shared texture is updated on one device <see cref="M:SharpDX.Direct3D10.Device.Flush"/> must be called on that device.
            </remarks>
            <unmanaged>HRESULT ID3D10Device::OpenSharedResource([In] void* hResource,[In] GUID* ReturnedInterface,[Out, Optional] void** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CopyResource(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource)">
            <summary>	
            Copy the entire contents of the source resource to the destination resource using the GPU. 	
            </summary>	
            <remarks>	
            This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:  Must be different resources. Must be the same {{type}}. Must have identical dimensions (including width, height, depth, and size as appropriate). Will only be copied. CopyResource does not support any stretch, color key, blend, or format conversions. Must have compatible {{formats}}, which means the formats must be identical or at least from the same type group. For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently {{mapped}}.   {{Immutable}}, and {{depth-stencil}} resources cannot be used as a destination.  Resources created with {{multisampling capability}} cannot be used as either a source or destination. The method is an asynchronous call which may be added to the command-buffer queue. This attempts to remove pipeline stalls that may occur when copying data. See {{performance considerations}} for more details. An application that only needs to copy a portion of the data in a resource should use <see cref="M:SharpDX.Direct3D10.Device.CopySubresourceRegion_(SharpDX.Direct3D10.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion})"/> instead.   Differences between Direct3D 10 and Direct3D 10.1: Direct3D 10.1 enables depth-stencil resources to be used as either a source or destination. Direct3D 10.1 enables multisampled resources to be used as source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if the source is multisampled and the destination is not multisampled (or vice versa), the call to ID3D10Device::CopyResource fails. It is possible to copy between prestructured+typed resources and block-compressed textures. See {{Format Conversion using Direct3D 10.1}}.   ? 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <unmanaged>void ID3D10Device::CopyResource([In] ID3D10Resource* pDstResource,[In] ID3D10Resource* pSrcResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CopySubresourceRegion(SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion},SharpDX.Direct3D10.Resource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination location is an absolute value (not a relative value). The destination location can be offset from the source location; however, the size of the region to copy (including the destination location) must fit in the destination resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels.   {{D3D10CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources must meet the following criteria:  Must be different subresources (although they can be from the same resource). Must be the same {{type}}. Must have compatible {{formats}} (the formats must either be identical or be from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture because both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently {{mapped}}.  CopySubresourceRegion supports only copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D10.Device.CopyResource_(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource)"/> instead. CopySubresourceRegion is an asynchronous call that the runtime can add  to the command-buffer queue. This asynchronous behaviorattempts to remove pipeline stalls that may occur when copying data. See {{performance considerations}} for more details.   Differences between Direct3D 10 and Direct3D 10.1: Direct3D 10 has the following limitations:  You cannot use a depth-stencil resource as a destination. You cannot use an immutable resource as a destination. You cannot use a multisampled texture as either a source or a destination  Direct3D 10.1 has added support for the following features:  You can use a depth-stencil buffer as a source or a destination. You can use multisampled resources as  source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if the source is multisampled and the destination is not multisampled (or vice versa), the call to ID3D10Device::CopySubresourceRegion fails. You can copy between uncompressed and compressed resources. During copy, the format conversions that are specified in  {{Format Conversion using Direct3D 10.1}} are supported automatically. The uncompressed resource must be at least prestructured, and typed. You must also account for the difference between the virtual and the physical size of the mipmaps levels.    ? Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. You must also pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters respectively, must have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (130,120),(210,240) in a destination texture. 	
            <code> D3D10_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDevice-&gt;CopySubresourceRegion( pDestTexture, 0, 130, 120, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice that, for a 2D texture, front and back are always set to 0 and 1 respectively. 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="sourceSubresource">index of the source. </param>
            <param name="sourceRegion">A 3D box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="destinationSubResource">index of the destination. </param>
            <param name="dstX">The x coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y coordinate of the upper left corner of the destination region. </param>
            <param name="dstZ">The z coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <unmanaged>void ID3D10Device::CopySubresourceRegion([In] ID3D10Resource* pDstResource,[In] int DstSubresource,[In] int DstX,[In] int DstY,[In] int DstZ,[In] ID3D10Resource* pSrcResource,[In] int SrcSubresource,[In, Optional] const D3D10_BOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ResolveSubresource(SharpDX.Direct3D10.Resource,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,SharpDX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource. This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass.	
            </summary>	
            <remarks>	
            Both the source and destination resources must be the same {{resource type}} and have the same dimensions. The source and destination must have compatible formats. There are three scenarios for this:  ScenarioRequirements Source and destination are prestructured and typedBoth the source and destination must have identical formats and that format must be specified in the Format parameter. One resource is prestructured and typed and the other is prestructured and typelessThe typed resource must have a format that is compatible with the typeless resource (i.e. the typed resource is DXGI_FORMAT_R32_FLOAT and the typeless resource is DXGI_FORMAT_R32_TYPELESS). The format of the typed resource must be specified in the Format parameter. Source and destination are prestructured and typelessBoth the source and desintation must have the same typeless format (i.e. both must have DXGI_FORMAT_R32_TYPELESS), and the Format parameter must specify a format that is compatible with the source and destination (i.e. if both are DXGI_FORMAT_R32_TYPELESS then DXGI_FORMAT_R32_FLOAT or DXGI_FORMAT_R32_UINT could be specified in the Format parameter).  ? 	
            </remarks>	
            <param name="source">Source resource. Must be multisampled. </param>
            <param name="sourceSubresource">The source subresource of the source resource. </param>
            <param name="destination">Destination resource. Must be a created with the <see cref="F:SharpDX.Direct3D10.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource. See {{D3D10CalcSubresource}} for more details. </param>
            <param name="format">that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks. </param>
            <unmanaged>void ID3D10Device::ResolveSubresource([In] ID3D10Resource* pDstResource,[In] int DstSubresource,[In] ID3D10Resource* pSrcResource,[In] int SrcSubresource,[In] DXGI_FORMAT Format)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D10.Resource,System.Int32)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name="source">The source data.</param>
            <param name="resource">The destination resource.</param>
            <param name="subresource">The destination subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D10.Resource,System.Int32,SharpDX.Direct3D10.ResourceRegion)">
            <summary>
            Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name="source">The source data.</param>
            <param name="resource">The destination resource.</param>
            <param name="subresource">The destination subresource.</param>
            <param name="region">The destination region within the resource.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.NativePointerUpdated">
            <summary>Update nested inner interfaces pointer</summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.DrawIndexed(System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw indexed, non-instanced primitives.	
            </summary>	
            <remarks>	
            A {{draw API}} submits work to the rendering pipeline. If the sum of both indices is negative, the result of the function call is undefined. 	
            </remarks>	
            <param name="indexCount">Number of indices to draw. </param>
            <param name="startIndexLocation">Index of the first index to use when accesssing the vertex buffer; begin at StartIndexLocation to index vertices from the vertex buffer. </param>
            <param name="baseVertexLocation">Offset from the start of the vertex buffer to the first vertex. </param>
            <unmanaged>void ID3D10Device::DrawIndexed([In] int IndexCount,[In] int StartIndexLocation,[In] int BaseVertexLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)">
            <summary>	
            Draw non-indexed, non-instanced primitives.	
            </summary>	
            <remarks>	
            A {{draw API}} submits work to the rendering pipeline. The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has vertex data marked with the SV_VertexId?{{system-value semantic}}. 	
            </remarks>	
            <param name="vertexCount">Number of vertices to draw. </param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the SV_TargetId?{{system-value semantic}}. </param>
            <unmanaged>void ID3D10Device::Draw([In] int VertexCount,[In] int StartVertexLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw indexed, instanced primitives.	
            </summary>	
            <remarks>	
            A {{draw API}} submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. Indexing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data. For an example of instancing, see the {{Instancing10 Sample}}. 	
            </remarks>	
            <param name="indexCountPerInstance">Size of the index buffer used in each instance. </param>
            <param name="instanceCount">Number of instances to draw. </param>
            <param name="startIndexLocation">Index of the first index. </param>
            <param name="baseVertexLocation">Index of the first vertex. The index is signed, which allows a negative index. If the negative index plus the index value from the index buffer are less than 0, the result is undefined. </param>
            <param name="startInstanceLocation">Index of the first instance. </param>
            <unmanaged>void ID3D10Device::DrawIndexedInstanced([In] int IndexCountPerInstance,[In] int InstanceCount,[In] int StartIndexLocation,[In] int BaseVertexLocation,[In] int StartInstanceLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw non-indexed, instanced primitives.	
            </summary>	
            <remarks>	
            A {{draw API}} submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. For an example of instancing, see the {{Instancing10 Sample}}. The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has instanced data identified with a {{system-value semantic}} (SV_InstanceID). 	
            </remarks>	
            <param name="vertexCountPerInstance">Number of vertices to draw. </param>
            <param name="instanceCount">Number of instances to draw. </param>
            <param name="startVertexLocation">Index of the first vertex. </param>
            <param name="startInstanceLocation">Index of the first instance. </param>
            <unmanaged>void ID3D10Device::DrawInstanced([In] int VertexCountPerInstance,[In] int InstanceCount,[In] int StartVertexLocation,[In] int StartInstanceLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.SetPredication(SharpDX.Direct3D10.Predicate,System.Boolean)">
            <summary>	
            Set a rendering predicate.	
            </summary>	
            <remarks>	
            The predicate must be in the "issued" or "signaled" state to be used for predication. While the predicate is set for predication, calls to <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/> are invalid. This method is used to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting Predicate data of the Predicate is equal to the PredicateValue. However, some Predicates are only hints, so they may not actually prevent operations from being performed.  The primary usefulness of Predication is to allow an application to issue graphics commands without taking the performance hit of spinning, waiting for <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> to return. So, Predication can occur while ID3D10Asynchronous::GetData returns S_FALSE. Another way to think of it: an application can also use Predication as a fallback, if it is possible that ID3D10Asynchronous::GetData returns S_FALSE. If ID3D10Asynchronous::GetData returns S_OK, the application can skip calling the graphics commands manually with it's own application logic. 	
            </remarks>	
            <param name="redicateRef">Pointer to a predicate (see <see cref="T:SharpDX.Direct3D10.Predicate"/>). A NULL value indicates "no" predication; in this case, the value of PredicateValue is irrelevent but will be preserved for <see cref="M:SharpDX.Direct3D10.Device.GetPredication(System.Boolean@)"/>. </param>
            <param name="predicateValue">If TRUE, rendering will be affected by when the predicate's conditions are met. If FALSE, rendering will be affected when the conditions are not met. </param>
            <unmanaged>void ID3D10Device::SetPredication([In, Optional] ID3D10Predicate* pPredicate,[In] BOOL PredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.DrawAuto">
            <summary>	
            Draw geometry of an unknown size that was created by the geometry shader stage. See remarks.	
            </summary>	
            <remarks>	
            A {{draw API}} submits work to the rendering pipeline. After data has been streamed out to {{SO stage}} buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler. The following diagram shows the DrawAuto process.  ?  Diagram of DrawAuto as data moves through several stages to a buffer and then back to the Input Assembler stage ? Calling DrawAuto does not change the state of the streaming-output buffers that were bound again as inputs. DrawAuto only works when drawing with one input buffer bound as an input to the IA stage at slot 0. Applications must create the SO buffer resource with both binding flags, <see cref="F:SharpDX.Direct3D10.BindFlags.VertexBuffer"/> and D3D10_BIND_STREAM_OUTPUT. This API does not support indexing or instancing. If an application needs to retrieve the size of the streaming-output buffer, it can query for statistics on streaming output by using <see cref="F:SharpDX.Direct3D10.QueryType.StreamOutputStatistics"/>. Example of using DrawAuto can be found in the {{ParticlesGS Sample}} and {{PipesGS Sample}}. 	
            </remarks>	
            <unmanaged>void ID3D10Device::DrawAuto()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CopySubresourceRegion_(SharpDX.Direct3D10.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion})">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination location is an absolute value (not a relative value). The destination location can be offset from the source location; however, the size of the region to copy (including the destination location) must fit in the destination resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels.   {{D3D10CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources must meet the following criteria:  Must be different subresources (although they can be from the same resource). Must be the same {{type}}. Must have compatible {{formats}} (the formats must either be identical or be from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture because both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently {{mapped}}.  CopySubresourceRegion supports only copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D10.Device.CopyResource_(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource)"/> instead. CopySubresourceRegion is an asynchronous call that the runtime can add  to the command-buffer queue. This asynchronous behaviorattempts to remove pipeline stalls that may occur when copying data. See {{performance considerations}} for more details.   Differences between Direct3D 10 and Direct3D 10.1: Direct3D 10 has the following limitations:  You cannot use a depth-stencil resource as a destination. You cannot use an immutable resource as a destination. You cannot use a multisampled texture as either a source or a destination  Direct3D 10.1 has added support for the following features:  You can use a depth-stencil buffer as a source or a destination. You can use multisampled resources as  source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if the source is multisampled and the destination is not multisampled (or vice versa), the call to ID3D10Device::CopySubresourceRegion fails. You can copy between uncompressed and compressed resources. During copy, the format conversions that are specified in  {{Format Conversion using Direct3D 10.1}} are supported automatically. The uncompressed resource must be at least prestructured, and typed. You must also account for the difference between the virtual and the physical size of the mipmaps levels.    ? Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. You must also pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters respectively, must have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (130,120),(210,240) in a destination texture. 	
            <code> D3D10_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDevice-&gt;CopySubresourceRegion( pDestTexture, 0, 130, 120, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice that, for a 2D texture, front and back are always set to 0 and 1 respectively. 	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="dstSubresource">index of the destination. </param>
            <param name="dstX">The x coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y coordinate of the upper left corner of the destination region. </param>
            <param name="dstZ">The z coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <param name="srcResourceRef">A reference to the source resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="srcSubresource">index of the source. </param>
            <param name="srcBoxRef">A 3D box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <unmanaged>void ID3D10Device::CopySubresourceRegion([In] ID3D10Resource* pDstResource,[In] int DstSubresource,[In] int DstX,[In] int DstY,[In] int DstZ,[In] ID3D10Resource* pSrcResource,[In] int SrcSubresource,[In, Optional] const D3D10_BOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CopyResource_(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource)">
            <summary>	
            Copy the entire contents of the source resource to the destination resource using the GPU. 	
            </summary>	
            <remarks>	
            This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:  Must be different resources. Must be the same {{type}}. Must have identical dimensions (including width, height, depth, and size as appropriate). Will only be copied. CopyResource does not support any stretch, color key, blend, or format conversions. Must have compatible {{formats}}, which means the formats must be identical or at least from the same type group. For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently {{mapped}}.   {{Immutable}}, and {{depth-stencil}} resources cannot be used as a destination.  Resources created with {{multisampling capability}} cannot be used as either a source or destination. The method is an asynchronous call which may be added to the command-buffer queue. This attempts to remove pipeline stalls that may occur when copying data. See {{performance considerations}} for more details. An application that only needs to copy a portion of the data in a resource should use <see cref="M:SharpDX.Direct3D10.Device.CopySubresourceRegion_(SharpDX.Direct3D10.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion})"/> instead.   Differences between Direct3D 10 and Direct3D 10.1: Direct3D 10.1 enables depth-stencil resources to be used as either a source or destination. Direct3D 10.1 enables multisampled resources to be used as source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if the source is multisampled and the destination is not multisampled (or vice versa), the call to ID3D10Device::CopyResource fails. It is possible to copy between prestructured+typed resources and block-compressed textures. See {{Format Conversion using Direct3D 10.1}}.   ? 	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="srcResourceRef">A reference to the source resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <unmanaged>void ID3D10Device::CopyResource([In] ID3D10Resource* pDstResource,[In] ID3D10Resource* pSrcResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.UpdateSubresource(SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion},System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            The CPU copies data from memory to a {{subresource}} created in non-mappable memory. See remarks.	
            </summary>	
            <remarks>	
            For a shader-constant buffer; set pDstBox to NULL. It is not possible to use this method to partially update a shader-constant buffer. A resource cannot be used as a destination if:  the resource is created with {{immutable}} usage. the resource is created as a {{depth-stencil resource}}. the resource is created with multisampling capability (see <see cref="T:SharpDX.DXGI.SampleDescription"/>).  When UpdateSubresource returns, the application is free to change or even free the data pointed to by pSrcData because the method has already copied/snapped away the original contents. The performance of UpdateSubresource depends on whether or not there is contention for the destination resource. For example, contention for a vertex buffer resource occurs when the application executes a Draw call and later calls UpdateSubresource on the same vertex buffer before the Draw call is actually executed by the GPU.  When there is contention for the resource, UpdateSubresource will perform 2 copies of the source data. First, the data is copied by the CPU to a temporary storage space accessible by the command buffer. This copy happens before the method returns.  A second copy is then performed by the GPU to copy the source data into non-mappable memory. This second copy happens asynchronously because it is executed by GPU when the command buffer is flushed. When there is no resource contention, the behavior of UpdateSubresource is dependent on which is faster (from the CPU's perspective): copying the data to the command buffer and then having a second copy execute when the command buffer is flushed, or having the CPU copy the data to the final resource location. This is dependent on the architecture of the underlying system.  To better understand the source row pitch and source depth pitch parameters, consider the following illustration of a 3D volume texture.  ?  Illustration of a 3D volume texture ? Each block in this visual represents an element of data, and the size of each element is dependent on the resource's format. For example, if the resource format is DXGI_FORMAT_R32G32B32A32_FLOAT, then the size of each element would be 128 bits, or 16 bytes. This 3D volume texture has a width of two, a height of three, and a depth of four. To calculate the source row pitch and source depth pitch for a given resource, use the following formulas:  Source Row Pitch = [size of one element in bytes] * [number of elements in one row] Source Depth Pitch = [Source Row Pitch] * [number of rows (height)]  In the case of this example 3D volume texture where the size of each element is 16 bytes, the formulas are as follows:  Source Row Pitch = 16 * 2 = 32 Source Depth Pitch = 16 * 2 * 3 = 96  The following illustration shows the resource as it is laid out in memory.  ?  Illustration of a 3D volume texture in memory ? For example, the following code snippet shows how to specify a destination region in a 2D texture. Assume the destination texture is 512x512 and the operation will copy the data pointed to by pData to  [(120,100)..(200,220)] in the destination texture. Also assume that rowPitch has been initialized with the proper value (as explained above). Front and back are set to 0 and 1 respectively, because by having front equal to back, the box is technically empty. 	
            <code> D3D10_BOX destRegion;	
            destRegion.left = 120;	
            destRegion.right = 200;	
            destRegion.top = 100;	
            destRegion.bottom = 220;	
            destRegion.front = 0;	
            destRegion.back = 1; pd3dDevice-&gt;UpdateSubresource( pDestTexture, 0, &amp;destRegion, pData, rowPitch, 0 ); </code>	
            	
             The 1D case is similar. The following snippet shows how to specify a destination region in a 1D texture. Use the same assumptions as above, except that the texture is 512 in length. 	
            <code> D3D10_BOX destRegion;	
            destRegion.left = 120	
            destRegion.right = 200;	
            destRegion.top = 0;	
            destRegion.bottom = 1;	
            destRegion.front = 0;	
            destRegion.back = 1; pd3dDevice-&gt;UpdateSubresource( pDestTexture, 0, &amp;destRegion, pData, rowPitch, 0 ); </code>	
            	
               Differences between Direct3D 10 and Direct3D 10.1: Direct3D 10.1 enables depth-stencil resources to be used as either a source or destination.   ? 	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="dstSubresource">A zero-based index, that identifies the destination subresource. See {{D3D10CalcSubresource}} for more details. </param>
            <param name="dstBoxRef">A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If NULL, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>). </param>
            <param name="srcDataRef">A reference to the source data in memory. </param>
            <param name="srcRowPitch">The size of one row of the source data. </param>
            <param name="srcDepthPitch">The size of one depth slice of source data. </param>
            <unmanaged>void ID3D10Device::UpdateSubresource([In] ID3D10Resource* pDstResource,[In] int DstSubresource,[In, Optional] const D3D10_BOX* pDstBox,[In] const void* pSrcData,[In] int SrcRowPitch,[In] int SrcDepthPitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ClearRenderTargetView(SharpDX.Direct3D10.RenderTargetView,SharpDX.Color4)">
            <summary>	
            Set all the elements in a render target to one value.	
            </summary>	
            <remarks>	
            Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.   Differences between Direct3D 9 and Direct3D 10: Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.   ? 	
            </remarks>	
            <param name="renderTargetViewRef">Pointer to the rendertarget. </param>
            <param name="colorRGBA">A 4-component array that represents the color to fill the render target with. </param>
            <unmanaged>void ID3D10Device::ClearRenderTargetView([In] ID3D10RenderTargetView* pRenderTargetView,[In] const SHARPDX_COLOR4* ColorRGBA)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ClearDepthStencilView(SharpDX.Direct3D10.DepthStencilView,SharpDX.Direct3D10.DepthStencilClearFlags,System.Single,System.Byte)">
            <summary>	
            Clears the depth-stencil resource.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 10: Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.   ? 	
            </remarks>	
            <param name="depthStencilViewRef">Pointer to the depth stencil to be cleared. </param>
            <param name="clearFlags">Which parts of the buffer to clear. See <see cref="T:SharpDX.Direct3D10.DepthStencilClearFlags"/>. </param>
            <param name="depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1. </param>
            <param name="stencil">Clear the stencil buffer with this value. </param>
            <unmanaged>void ID3D10Device::ClearDepthStencilView([In] ID3D10DepthStencilView* pDepthStencilView,[In] D3D10_CLEAR_FLAG ClearFlags,[In] float Depth,[In] byte Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GenerateMips(SharpDX.Direct3D10.ShaderResourceView)">
            <summary>	
            Generate mipmaps for the given shader resource.	
            </summary>	
            <remarks>	
            GenerateMips may be called on any ID3D10ShaderResourceView in order to generate the lower mipmap levels. GenerateMips uses the largest mipmap level of the view to recursively generate the lower levels of the mip, stopping with the smallest level specified by the view. If the base resource was not created with <see cref="F:SharpDX.Direct3D10.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D10.ResourceOptionFlags.GenerateMipMaps"/>, this call has no effect. All video adapters will automatically generate mipmaps if you are using one of the following formats: 	
            <code> DXGI_FORMAT_A8_UNORM	
            DXGI_FORMAT_R10G10B10A2_UNORM	
            DXGI_FORMAT_R11G11B10_FLOAT	
            DXGI_FORMAT_R16_FLOAT	
            DXGI_FORMAT_R16_SNORM	
            DXGI_FORMAT_R16_UNORM	
            DXGI_FORMAT_R16G16_FLOAT	
            DXGI_FORMAT_R16G16_SNORM	
            DXGI_FORMAT_R16G16_UNORM	
            DXGI_FORMAT_R16G16B16A16_FLOAT	
            DXGI_FORMAT_R16G16B16A16_SNORM	
            DXGI_FORMAT_R16G16B16A16_UNORM	
            DXGI_FORMAT_R32_FLOAT	
            DXGI_FORMAT_R32G32_FLOAT	
            DXGI_FORMAT_R32G32B32A32_FLOAT	
            DXGI_FORMAT_R8_SNORM	
            DXGI_FORMAT_R8_UNORM	
            DXGI_FORMAT_R8G8_SNORM	
            DXGI_FORMAT_R8G8_UNORM	
            DXGI_FORMAT_R8G8B8A8_SNORM	
            DXGI_FORMAT_R8G8B8A8_UNORM	
            DXGI_FORMAT_R8G8B8A8_UNORM_SRGB </code>	
            	
             Some video adapters will automatically generate mipmaps for this format. 	
            <code> DXGI_FORMAT_R32G32B32_FLOAT </code>	
            	
             For all other unsupported formats, this method will silently fail. 	
            </remarks>	
            <param name="shaderResourceViewRef">Pointer to an <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. The mipmaps will be generated for this shader resource. </param>
            <unmanaged>void ID3D10Device::GenerateMips([In] ID3D10ShaderResourceView* pShaderResourceView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ResolveSubresource_(SharpDX.Direct3D10.Resource,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,SharpDX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource. This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass.	
            </summary>	
            <remarks>	
            Both the source and destination resources must be the same {{resource type}} and have the same dimensions. The source and destination must have compatible formats. There are three scenarios for this:  ScenarioRequirements Source and destination are prestructured and typedBoth the source and destination must have identical formats and that format must be specified in the Format parameter. One resource is prestructured and typed and the other is prestructured and typelessThe typed resource must have a format that is compatible with the typeless resource (i.e. the typed resource is DXGI_FORMAT_R32_FLOAT and the typeless resource is DXGI_FORMAT_R32_TYPELESS). The format of the typed resource must be specified in the Format parameter. Source and destination are prestructured and typelessBoth the source and desintation must have the same typeless format (i.e. both must have DXGI_FORMAT_R32_TYPELESS), and the Format parameter must specify a format that is compatible with the source and destination (i.e. if both are DXGI_FORMAT_R32_TYPELESS then DXGI_FORMAT_R32_FLOAT or DXGI_FORMAT_R32_UINT could be specified in the Format parameter).  ? 	
            </remarks>	
            <param name="dstResourceRef">Destination resource. Must be a created with the <see cref="F:SharpDX.Direct3D10.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="dstSubresource">A zero-based index, that identifies the destination subresource. See {{D3D10CalcSubresource}} for more details. </param>
            <param name="srcResourceRef">Source resource. Must be multisampled. </param>
            <param name="srcSubresource">The source subresource of the source resource. </param>
            <param name="format">that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks. </param>
            <unmanaged>void ID3D10Device::ResolveSubresource([In] ID3D10Resource* pDstResource,[In] int DstSubresource,[In] ID3D10Resource* pSrcResource,[In] int SrcSubresource,[In] DXGI_FORMAT Format)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetPredication(SharpDX.Direct3D10.Predicate@,System.Int32@)">
            <summary>	
            Get the rendering predicate state.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="predicateRef">Address of a reference to a predicate (see <see cref="T:SharpDX.Direct3D10.Predicate"/>). Value stored here will be NULL upon device creation. </param>
            <param name="redicateValueRef">Address of a boolean to fill with the predicate comparison value. FALSE upon device creation. </param>
            <unmanaged>void ID3D10Device::GetPredication([Out, Optional] ID3D10Predicate** ppPredicate,[Out, Optional] BOOL* pPredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetDeviceRemovedReason">
            <summary>	
            Get the reason why the device was removed.	
            </summary>	
            <returns>Possible return values include:    DXGI_ERROR_DEVICE_HUNG DXGI_ERROR_DEVICE_REMOVED DXGI_ERROR_DEVICE_RESET DXGI_ERROR_DRIVER_INTERNAL_ERROR DXGI_ERROR_INVALID_CALL S_OK  For more detail on these return codes, see <see cref="T:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT ID3D10Device::GetDeviceRemovedReason()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.SetExceptionMode(System.Int32)">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            Set an exception-mode flag to elevate an error condition to a non-continuable exception.  Whenever an error occurs, a Direct3D device enters the DEVICEREMOVED state and if the appropriate exception flag has been set, an exception is raised. A raised exception is designed to terminate an application. Before termination, the last chance an application has to persist data is by using an UnhandledExceptionFilter (see {{Structured Exception Handling}}). In general, UnhandledExceptionFilters are leveraged to try to persist data when an application is crashing (to disk, for example). Any code that executes during an UnhandledExceptionFilter is not guaranteed to reliably execute (due to possible process corruption). Any data that the UnhandledExceptionFilter manages to persist, before the UnhandledExceptionFilter crashes again, should be treated as suspect, and therefore inspected by a new, non-corrupted process to see if it is usable. 	
            </remarks>	
            <param name="raiseFlags">A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in {{D3D10_RAISE_FLAG}}. A default value of 0 means there are no flags. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::SetExceptionMode([None] int RaiseFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetExceptionMode">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            An exception-mode flag is used to elevate an error condition to a non-continuable exception.  	
            </remarks>	
            <returns>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in {{D3D10_RAISE_FLAG}}. A default value of 0 means there are no flags. </returns>
            <unmanaged>int ID3D10Device::GetExceptionMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="guid">No documentation.</param>
            <param name="dataSizeRef">No documentation.</param>
            <param name="dataRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3D10Device::GetPrivateData([In] GUID* guid,[InOut] int* pDataSize,[Out, Buffer, Optional] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            Set data to a device and associate that data with a guid.	
            </summary>	
            <remarks>	
            The data stored in the device with this method can be retrieved with <see cref="M:SharpDX.Direct3D10.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. The data and guid set with this method will typically be application-defined. If an application uses this method to change the device type using GUID_DeviceType, results are undefined. However, GUID_DeviceType can be used to retrieve the device type using <see cref="M:SharpDX.Direct3D10.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. 	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSize">Size of the data. </param>
            <param name="dataRef">Pointer to the data to be stored with this device. If pData is NULL, DataSize must also be 0, and any data previously associated with the guid will be destroyed. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::SetPrivateData([In] GUID* guid,[In] int DataSize,[In, Buffer, Optional] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="guid">No documentation.</param>
            <param name="dataRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3D10Device::SetPrivateDataInterface([In] GUID* guid,[In, Optional] const IUnknown* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.ClearState">
            <summary>	
            Restore all default device settings; return the device to the state it was in when it was created. This will set all set all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to NULL. The primitive topology will be set to UNDEFINED.	
            </summary>	
            <unmanaged>void ID3D10Device::ClearState()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.Flush">
            <summary>	
            Send queued-up commands in the command buffer to the GPU.	
            </summary>	
            <remarks>	
            Most applications will not need to call this method. Calling this method when not necessary will incur a performance penalty. Each call to Flush incurs a significant amount of overhead. When Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer. Flush sends those commands to the GPU for processing. Normally, these commands are sent to the GPU automatically whenever Direct3D determines that they need to be, such as when the command buffer is full or when mapping a resource. Flush will send the commands manually. Flush should be used when the CPU waits for an arbitrary amount of time (such as when calling {{Sleep}}, {{ID3DX10ThreadPump::WaitForAllItems}}, or {{WaitForVBlank}}. For more information about how flushing works, see {{Accurately Profiling Direct3D API Calls (Direct3D 9)}}. 	
            </remarks>	
            <unmanaged>void ID3D10Device::Flush()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateBuffer(SharpDX.Direct3D10.BufferDescription@,System.Nullable{SharpDX.Direct3D10.SubResourceData},SharpDX.Direct3D10.Buffer@)">
            <summary>	
            Create a {{buffer}} (vertex buffer, index buffer, or shader-constant buffer).	
            </summary>	
            <remarks>	
            For example code, see:   {{Create a Vertex Buffer}}   {{Create an Index Buffer}}   	
            </remarks>	
            <param name="descRef">Pointer to a buffer description (see <see cref="T:SharpDX.Direct3D10.BufferDescription"/>). </param>
            <param name="initialDataRef">Pointer to the initialization data (see <see cref="T:SharpDX.Direct3D10.SubResourceData"/>); use NULL to allocate space only. </param>
            <param name="bufferRef">Address of a reference to the buffer created (see <see cref="T:SharpDX.Direct3D10.Buffer"/>). Set this parameter to NULL to validate the other input parameters (S_FALSE indicates a pass). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateBuffer([In] const D3D10_BUFFER_DESC* pDesc,[In, Optional] const D3D10_SUBRESOURCE_DATA* pInitialData,[Out, Optional] ID3D10Buffer** ppBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateTexture1D(SharpDX.Direct3D10.Texture1DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture1D@)">
            <summary>	
            Create an array of 1D textures (see {{Texture1D}}).	
            </summary>	
            <remarks>	
            CreateTexture1D creates a 1D texture resource, which contains an array of 1D textures. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more {{subresources}}. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D10.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the {{Texturing Functions}} supplied by the SDK. 	
            </remarks>	
            <param name="descRef">Pointer to a 1D texture description (see <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of {{subresource}} descriptions (see <see cref="T:SharpDX.Direct3D10.SubResourceData"/>); one for each subresource (ordered by texture array index). Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture1DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D10.Texture1D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 10 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateTexture1D([In] const D3D10_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D10_SUBRESOURCE_DATA* pInitialData,[Out] ID3D10Texture1D** ppTexture1D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateTexture2D(SharpDX.Direct3D10.Texture2DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture2D@)">
            <summary>	
            Create an array of 2D textures (see {{Texture2D}}).	
            </summary>	
            <remarks>	
            CreateTexture2D creates a 2D texture resource, which contains an array of 1D textures. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more {{subresources}}. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D10.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the {{Texturing Functions}} supplied by the SDK. 	
            </remarks>	
            <param name="descRef">Pointer to a 2D texture description (see <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of {{subresource}} descriptions (see <see cref="T:SharpDX.Direct3D10.SubResourceData"/>); one for each subresource (ordered by texture array index, then mip level). Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture2DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D10.Texture2D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 10 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateTexture2D([In] const D3D10_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D10_SUBRESOURCE_DATA* pInitialData,[Out] ID3D10Texture2D** ppTexture2D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateTexture3D(SharpDX.Direct3D10.Texture3DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture3D@)">
            <summary>	
            Create a single 3D texture (see {{Texture3D}}).	
            </summary>	
            <remarks>	
            CreateTexture3D creates a 3D texture resource, which contains an array of 1D textures. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more {{subresources}}. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D10.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the {{Texturing Functions}} supplied by the SDK. 	
            </remarks>	
            <param name="descRef">Pointer to a 3D texture description (see <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of {{subresource}} descriptions (see <see cref="T:SharpDX.Direct3D10.SubResourceData"/>); one for each subresource (ordered by texture array index, then slice index, then mip level). Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture3DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D10.Texture3D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 10 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateTexture3D([In] const D3D10_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D10_SUBRESOURCE_DATA* pInitialData,[Out] ID3D10Texture3D** ppTexture3D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)">
            <summary>	
            Create a shader-resource {{view}} for accessing data in a resource.	
            </summary>	
            <remarks>	
            A resource is made up of one or more {{subresources}}, a view identifies which subresources to allow the pipeline to access. In addition, each resource is bound to the pipeline using a view. A shader-resource view is designed to bind any buffer or texture resource to the {{shader stages}} using the following API methods: {{VSSetShaderResources}}, {{GSSetShaderResources}} and {{PSSetShaderResources}}. Since a view is fully typed, this means that typeless resources become fully typed when bound to the pipeline. 	
            </remarks>	
            <param name="resourceRef">Pointer to the {{resource}} that will serve as input to a shader. This resource must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.ShaderResource"/> flag. </param>
            <param name="descRef">Pointer to a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). Set this parameter to NULL to create a view that accesses the entire resource (using the format the resource was created with). </param>
            <param name="sRViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateShaderResourceView([In] ID3D10Resource* pResource,[In, Optional] const D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc,[Out, Optional] ID3D10ShaderResourceView** ppSRView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateRenderTargetView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.RenderTargetViewDescription},SharpDX.Direct3D10.RenderTargetView@)">
            <summary>	
            Create a render-target {{view}} for accessing resource data.	
            </summary>	
            <remarks>	
            A rendertarget view can be bound to the {{output merger stage}} by calling <see cref="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D10.RenderTargetView[],SharpDX.Direct3D10.DepthStencilView)"/>. 	
            </remarks>	
            <param name="resourceRef">Pointer to the {{resource}} that will serve as the render target. This resource must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.RenderTarget"/> flag. </param>
            <param name="descRef">Pointer to a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). Set this parameter to NULL to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with). </param>
            <param name="rTViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateRenderTargetView([In] ID3D10Resource* pResource,[In, Optional] const D3D10_RENDER_TARGET_VIEW_DESC* pDesc,[Out, Optional] ID3D10RenderTargetView** ppRTView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateDepthStencilView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.DepthStencilViewDescription},SharpDX.Direct3D10.DepthStencilView@)">
            <summary>	
            Create a depth-stencil {{view}} for accessing resource data.	
            </summary>	
            <remarks>	
            A depth-stencil view can be bound to the {{output-merger stage}} by calling <see cref="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D10.RenderTargetView[],SharpDX.Direct3D10.DepthStencilView)"/>. For more background information, see the {{programming guide page}} about depth stencils. 	
            </remarks>	
            <param name="resourceRef">Pointer to the {{resource}} that will serve as the depth-stencil surface. This resource must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.DepthStencil"/> flag. </param>
            <param name="descRef">Pointer to a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). Set this parameter to NULL to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with). </param>
            <param name="depthStencilViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateDepthStencilView([In] ID3D10Resource* pResource,[In, Optional] const D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateInputLayout(SharpDX.Direct3D10.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.InputLayout@)">
            <summary>	
            Create an input-layout object to describe the input-buffer data for the {{input-assembler stage}}.	
            </summary>	
            <remarks>	
            After creating an input layout object, it must be bound to the input-assembler stage before calling a draw API. See {{Getting Started with the Input-Assembler Stage (Direct3D 10)}} for example code. Once an input-layout object is created from a shader signature, the input-layout object can be reused with any other shader that has an identical input signature (semantics included). This can simplify the creation of input-layout objects when you are working with many shaders with identical inputs. If a data type in the input-layout declaration does not match the data type in a shader-input signature, CreateInputLayout will generate a warning during compilation. The warning is simply to call attention to the fact that the data may be reinterpreted when read from a register. You may either disregard this warning (if reinterpretation is intentional) or make the data types match in both declarations to eliminate the warning.  The {{Data Conversion Rules}} overview describes the rules applied for data type conversion.   Differences between Direct3D 9 and Direct3D 10: Mapping the vertex data to the shader inputs with an input layout is a new way of doing things in Direct3D 10 that improves performance. In Direct3D 10 the vertex data is mapped to the shader inputs when the input layout object is created, whereas in Direct3D 9 this mapping was done at Draw time based on the currently bound vertex declarations, vertex buffers, and vertex shaders. Doing this mapping when the input layout object is created reduces or eliminates extra linkage work for drivers at Draw time because this re-mapping is no longer necessary.   ? 	
            </remarks>	
            <param name="inputElementDescsRef">An array of the input-assembler stage input data types; each type is described by an element description (see <see cref="T:SharpDX.Direct3D10.InputElement"/>). </param>
            <param name="numElements">The number of input-data types in the array of input-elements. </param>
            <param name="shaderBytecodeWithInputSignatureRef">A reference to the compiled shader. To get this reference see {{Getting a Pointer to a Compiled Shader}}. The compiled shader code contains a {{input signature}} which is validated against the array of elements. See remarks. </param>
            <param name="bytecodeLength">Size of the compiled shader. </param>
            <param name="inputLayoutRef">A reference to the input-layout object created (see <see cref="T:SharpDX.Direct3D10.InputLayout"/>). To validate the other input parameters, set this reference to be NULL and verify that the method returns S_FALSE. </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 10 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateInputLayout([In, Buffer] const D3D10_INPUT_ELEMENT_DESC* pInputElementDescs,[In] int NumElements,[In] const void* pShaderBytecodeWithInputSignature,[In] SIZE_T BytecodeLength,[Out, Optional] ID3D10InputLayout** ppInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateVertexShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.VertexShader@)">
            <summary>	
            Create a vertex-shader object from a compiled shader.	
            </summary>	
            <param name="shaderBytecodeRef">A reference to the compiled shader. To get this reference see {{Getting a Pointer to a Compiled Shader}}. </param>
            <param name="bytecodeLength">Size of the compiled vertex shader. </param>
            <param name="vertexShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.VertexShader"/>. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateVertexShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[Out, Optional] ID3D10VertexShader** ppVertexShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateGeometryShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.GeometryShader@)">
            <summary>	
            Create a geometry shader.	
            </summary>	
            <remarks>	
            Once created, the shader can be set to the device by calling <see cref="M:SharpDX.Direct3D10.Device.GeometryShaderStage.Set(SharpDX.Direct3D10.GeometryShader)"/>. 	
            </remarks>	
            <param name="shaderBytecodeRef">A reference to the compiled shader. To get this reference see {{Getting a Pointer to a Compiled Shader}}. </param>
            <param name="bytecodeLength">Size of the compiled geometry shader. </param>
            <param name="geometryShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.GeometryShader"/>.  If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateGeometryShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[Out, Optional] ID3D10GeometryShader** ppGeometryShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateGeometryShaderWithStreamOutput(System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.StreamOutputElement[],System.Int32,System.Int32,SharpDX.Direct3D10.GeometryShader@)">
            <summary>	
            Create a geometry shader that can write to streaming output buffers.	
            </summary>	
            <param name="shaderBytecodeRef">A reference to the compiled shader. To get this reference see {{Getting a Pointer to a Compiled Shader}}. </param>
            <param name="bytecodeLength">Size of the compiled geometry shader. </param>
            <param name="sODeclarationRef">Pointer to a <see cref="T:SharpDX.Direct3D10.StreamOutputElement"/> array. Cannot be NULL if NumEntries&gt; 0. </param>
            <param name="numEntries">The number of entries in the array pointed to by pSODeclaration. Minimum 0, maximum 64. </param>
            <param name="outputStreamStride">The size, in bytes, of each element in the array pointed to by pSODeclaration. This parameter is only used when the output slot is 0 for all entries in pSODeclaration. </param>
            <param name="geometryShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.GeometryShader"/>. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateGeometryShaderWithStreamOutput([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Buffer, Optional] const D3D10_SO_DECLARATION_ENTRY* pSODeclaration,[In] int NumEntries,[In] int OutputStreamStride,[Out, Optional] ID3D10GeometryShader** ppGeometryShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreatePixelShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.PixelShader@)">
            <summary>	
            Create a pixel shader.	
            </summary>	
            <remarks>	
            After creating the pixel shader, you can set it to the device using <see cref="M:SharpDX.Direct3D10.Device.PixelShaderStage.Set(SharpDX.Direct3D10.PixelShader)"/>. 	
            </remarks>	
            <param name="shaderBytecodeRef">A reference to the compiled shader. To get this reference see {{Getting a Pointer to a Compiled Shader}}. </param>
            <param name="bytecodeLength">Size of the compiled pixel shader. </param>
            <param name="pixelShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.PixelShader"/>. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreatePixelShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[Out, Optional] ID3D10PixelShader** ppPixelShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateBlendState(SharpDX.Direct3D10.BlendStateDescription@,SharpDX.Direct3D10.BlendState@)">
            <summary>	
            Create a blend-state object that encapsules blend state for the output-merger stage.	
            </summary>	
            <remarks>	
            An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object. 	
            </remarks>	
            <param name="blendStateDescRef">Pointer to a blend-state description (see <see cref="T:SharpDX.Direct3D10.BlendStateDescription"/>). </param>
            <param name="blendStateRef">Address of a reference to the blend-state object created (see <see cref="T:SharpDX.Direct3D10.BlendState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateBlendState([In] const D3D10_BLEND_DESC* pBlendStateDesc,[Out, Optional] ID3D10BlendState** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateDepthStencilState(SharpDX.Direct3D10.DepthStencilStateDescription@,SharpDX.Direct3D10.DepthStencilState@)">
            <summary>	
            Create a depth-stencil state object that encapsulates {{depth-stencil test}} information for the output-merger stage.	
            </summary>	
            <remarks>	
            4096 unique depth-stencil state objects can be created on a device at a time. If an application attempts to create a depth-stencil state with the same description as an already existing depth-stencil state, then the same interface with an incremented reference count will be returned and the total number of unique depth-stencil state objects will stay the same. 	
            </remarks>	
            <param name="depthStencilDescRef">Pointer to a depth-stencil state description (see <see cref="T:SharpDX.Direct3D10.DepthStencilStateDescription"/>). </param>
            <param name="depthStencilStateRef">Address of a reference to the depth-stencil state object created (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateDepthStencilState([In] const D3D10_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Optional] ID3D10DepthStencilState** ppDepthStencilState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateRasterizerState(SharpDX.Direct3D10.RasterizerStateDescription@,SharpDX.Direct3D10.RasterizerState@)">
            <summary>	
            Create a rasterizer state object that tells the {{rasterizer stage}} how to behave.	
            </summary>	
            <remarks>	
            4096 unique rasterizer state objects can be created on a device at a time. If an application attempts to create a rasterizer state with the same description as an already existing rasterizer state, then the same interface with an incremented reference count will be returned and the total number of unique rasterizer state objects will stay the same. 	
            </remarks>	
            <param name="rasterizerDescRef">Pointer to a rasterizer state description (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). </param>
            <param name="rasterizerStateRef">Address of a reference to the rasterizer state object created (see <see cref="T:SharpDX.Direct3D10.RasterizerState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateRasterizerState([In] const D3D10_RASTERIZER_DESC* pRasterizerDesc,[Out, Optional] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateSamplerState(SharpDX.Direct3D10.SamplerStateDescription@,SharpDX.Direct3D10.SamplerState@)">
            <summary>	
            Create a sampler-state object that encapsulates sampling information for a {{texture}}.	
            </summary>	
            <remarks>	
            4096 unique sampler state objects can be created on a device at a time. If an application attempts to create a sampler state with the same description as an already existing sampler state, then the same interface with an incremented reference count will be returned and the total number of unique sampler state objects will stay the same. 	
            </remarks>	
            <param name="samplerDescRef">Pointer to a sampler state description (see <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/>). </param>
            <param name="samplerStateRef">Address of a reference to the sampler state object created (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateSamplerState([In] const D3D10_SAMPLER_DESC* pSamplerDesc,[Out, Optional] ID3D10SamplerState** ppSamplerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateQuery(SharpDX.Direct3D10.QueryDescription,SharpDX.Direct3D10.Query@)">
            <summary>	
            This interface encapsulates methods for querying information from the GPU.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="queryDescRef">Pointer to a query description (see <see cref="T:SharpDX.Direct3D10.QueryDescription"/>). </param>
            <param name="queryRef">Address of a reference to the query object created (see <see cref="T:SharpDX.Direct3D10.Query"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateQuery([In] const D3D10_QUERY_DESC* pQueryDesc,[Out, Optional] ID3D10Query** ppQuery)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreatePredicate(SharpDX.Direct3D10.QueryDescription,SharpDX.Direct3D10.Predicate@)">
            <summary>	
            Creates a predicate.	
            </summary>	
            <param name="redicateDescRef">Pointer to a query description where the type of query must be a D3D10_QUERY_SO_OVERFLOW_PREDICATE or D3D10_QUERY_OCCLUSION_PREDICATE (see <see cref="T:SharpDX.Direct3D10.QueryDescription"/>). </param>
            <param name="predicateRef">Address of a reference to a predicate (see <see cref="T:SharpDX.Direct3D10.Predicate"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CreatePredicate([In] const D3D10_QUERY_DESC* pPredicateDesc,[Out, Optional] ID3D10Predicate** ppPredicate)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CreateCounter(SharpDX.Direct3D10.CounterDescription,SharpDX.Direct3D10.Counter@)">
            <summary>	
            Create a counter object for measuring GPU performance.	
            </summary>	
            <param name="counterDescRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D10.CounterDescription"/>). </param>
            <param name="counterRef">Address of a reference to a counter (see <see cref="T:SharpDX.Direct3D10.Counter"/>). </param>
            <returns>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG. DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it. DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment. E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted. </returns>
            <unmanaged>HRESULT ID3D10Device::CreateCounter([In] const D3D10_COUNTER_DESC* pCounterDesc,[Out, Optional] ID3D10Counter** ppCounter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CheckFormatSupport(SharpDX.DXGI.Format)">
            <summary>	
            Get the support of a given format on the installed video device.	
            </summary>	
            <remarks>	
            Most format support is based on the Direct3D feature level. Only a few specific use cases require checking for support.  See {{Hardware Support for Direct3D 10 Formats}} and {{Hardware Support for Direct3D 10.1 Formats}} for additional information. 	
            </remarks>	
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> enumeration that describes a format for which to check for support. </param>
            <returns>A bitfield of <see cref="T:SharpDX.Direct3D10.FormatSupport"/> enumeration values describing how the specified format is supported on the installed device.  The values are ORed together. </returns>
            <unmanaged>HRESULT ID3D10Device::CheckFormatSupport([In] DXGI_FORMAT Format,[Out] D3D10_FORMAT_SUPPORT* pFormatSupport)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CheckMultisampleQualityLevels(SharpDX.DXGI.Format,System.Int32)">
            <summary>	
            Get the number of quality levels available during multisampling.	
            </summary>	
            <remarks>	
            When multisampling a texture, the number of quality levels available for an adapter is dependent on the texture format used and the number of samples requested. The maximum sample count defined by D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT in d3d10.h is 32. If the returned value of pNumQualityLevels is 0, the format and sample count combination is not supported for the installed adapter. Furthermore, the definition of a quality level is up to each hardware vendor to define, however no facility is provided by Direct3D to help discover  this information. Direct3D 10.1 devices are required to support 4x MSAA for all formats except R32G32B32A32 and R32G32B32 formats. 	
            </remarks>	
            <param name="format">The texture format. See <see cref="T:SharpDX.DXGI.Format"/>. </param>
            <param name="sampleCount">The number of samples during multisampling. </param>
            <returns>Number of quality levels supported by the adapter. See remarks. </returns>
            <unmanaged>HRESULT ID3D10Device::CheckMultisampleQualityLevels([In] DXGI_FORMAT Format,[In] int SampleCount,[Out] int* pNumQualityLevels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetCounterCapabilities">
            <summary>	
            Get a counter's information.	
            </summary>	
            <unmanaged>void ID3D10Device::CheckCounterInfo([Out] D3D10_COUNTER_INFO* pCounterInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CheckCounter(SharpDX.Direct3D10.CounterDescription,SharpDX.Direct3D10.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            Get the type, name, units of measure, and a description of an existing counter.	
            </summary>	
            <remarks>	
            Length parameters can be NULL, which indicates the application is not interested in the length nor the corresponding string value. When a length parameter is non-NULL and the corresponding string is NULL, the input value of the length parameter is ignored, and the length of the corresponding string (including terminating NULL) will be returned through the length parameter. When length and the corresponding parameter are both non-NULL, the input value of length is checked to ensure there is enough room, and then the length of the string (including terminating NULL character) is passed out through the length parameter. 	
            </remarks>	
            <param name="descRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D10.CounterDescription"/>). Specifies which counter information is to be retrieved about. </param>
            <param name="typeRef">Pointer to the data type of a counter (see <see cref="T:SharpDX.Direct3D10.CounterType"/>). Specifies the data type of the counter being retrieved. </param>
            <param name="activeCountersRef">Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters. </param>
            <param name="szName">String to be filled with a brief name for the counter. May be NULL if the application is not interested in the name of the counter. </param>
            <param name="nameLengthRef">Length of the string returned to szName. Can be NULL. </param>
            <param name="szUnits">Name of the units a counter measures, provided the memory the reference points to has enough room to hold the string. Can be NULL. The returned string will always be in English. </param>
            <param name="unitsLengthRef">Length of the string returned to szUnits. Can be NULL. </param>
            <param name="szDescription">A description of the counter, provided the memory the reference points to has enough room to hold the string. Can be NULL. The returned string will always be in English. </param>
            <param name="descriptionLengthRef">Length of the string returned to szDescription. Can be NULL. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::CheckCounter([In] const D3D10_COUNTER_DESC* pDesc,[Out] D3D10_COUNTER_TYPE* pType,[Out] int* pActiveCounters,[Out, Buffer, Optional] char* szName,[InOut, Optional] int* pNameLength,[Out, Buffer, Optional] char* szUnits,[InOut, Optional] int* pUnitsLength,[Out, Buffer, Optional] char* szDescription,[InOut, Optional] int* pDescriptionLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GetCreationFlags">
            <summary>	
            Get the flags used during the call to create the device with <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/>.	
            </summary>	
            <returns>A bitfield containing the flags used to create the device. See <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>. </returns>
            <unmanaged>int ID3D10Device::GetCreationFlags()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OpenSharedResource(System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>	
            Give a device access to a shared resource created on a different Direct3d device. 	
            </summary>	
            <remarks>	
            To share a resource between two Direct3D 10 devices the resource must have been created with the  <see cref="F:SharpDX.Direct3D10.ResourceOptionFlags.Shared"/> flag, if it was created using the ID3D10Device interface.  If it was created using the IDXGIDevice interface, then the resource is always shared. The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro.  For example, __uuidof(ID3D10Buffer) will get the GUID of the interface to a buffer resource. When sharing a resource between two Direct3D 10 devices the unique handle of the resource can be obtained by querying the resource for the <see cref="T:SharpDX.DXGI.Resource"/> interface and then calling {{GetSharedHandle}}. 	
            <code> IDXGIResource* pOtherResource(NULL);	
            hr = pOtherDeviceResource-&gt;QueryInterface( __uuidof(IDXGIResource), (void**)&amp;pOtherResource );	
            HANDLE sharedHandle;	
            pOtherResource-&gt;GetSharedHandle(&amp;sharedHandle); </code>	
            	
             The only resources that can be shared are 2D non-mipmapped textures. To share a resource between a Direct3D 9 device and a Direct3D 10 device the texture must have been created using  the pSharedHandle argument of {{CreateTexture}}.   The shared Direct3D 9 handle is then passed to OpenSharedResource in the hResource argument. The following code illustrates the method calls involved. 	
            <code> sharedHandle = NULL; // must be set to NULL to create, can use a valid handle here to open in D3D9 	
            pDevice9-&gt;CreateTexture(..., pTex2D_9, &amp;sharedHandle); 	
            ... 	
            pDevice10-&gt;OpenSharedResource(sharedHandle, __uuidof(ID3D10Resource), (void**)(&amp;tempResource10)); 	
            tempResource10-&gt;QueryInterface(__uuidof(ID3D10Texture2D), (void**)(&amp;pTex2D_10)); 	
            tempResource10-&gt;Release(); 	
            // now use pTex2D_10 with pDevice10    </code>	
            	
             Textures being shared from D3D9 to D3D10 have the following restrictions.  Textures must be 2D Only 1 mip level is allowed Texture must have default usage Texture must be write only MSAA textures are not allowed Bind flags must have SHADER_RESOURCE and RENDER_TARGET set Only R10G10B10A2_UNORM, R16G16B16A16_FLOAT and R8G8B8A8_UNORM formats are allowed  If a shared texture is updated on one device <see cref="M:SharpDX.Direct3D10.Device.Flush"/> must be called on that device. 	
            </remarks>	
            <param name="hResource">A resource handle. See remarks. </param>
            <param name="returnedInterface">The globally unique identifier (GUID) for the resource interface. See remarks. </param>
            <param name="resourceRef">Address of a reference to the resource we are gaining access to. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device::OpenSharedResource([In] void* hResource,[In] GUID* ReturnedInterface,[Out, Optional] void** ppResource)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.CreationFlags">
            <summary>	
            Get the flags used during the call to create the device with <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/>.	
            </summary>	
            <returns>A bitfield containing the flags used to create the device. See <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>. </returns>
            <unmanaged>int ID3D10Device::GetCreationFlags()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.InputAssembler">
            <summary>Inner interface giving access to InputAssemblerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.VertexShader">
            <summary>Inner interface giving access to VertexShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.PixelShader">
            <summary>Inner interface giving access to PixelShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.GeometryShader">
            <summary>Inner interface giving access to GeometryShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.StreamOutput">
            <summary>Inner interface giving access to StreamOutputStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.Rasterizer">
            <summary>Inner interface giving access to RasterizerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMerger">
            <summary>Inner interface giving access to OutputMergerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.DeviceRemovedReason">
            <summary>	
            Get the reason why the device was removed.	
            </summary>	
            <unmanaged>HRESULT ID3D10Device::GetDeviceRemovedReason()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.ExceptionMode">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            An exception-mode flag is used to elevate an error condition to a non-continuable exception.  	
            </remarks>	
            <unmanaged>int ID3D10Device::GetExceptionMode()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.InputAssemblerStage">
            <summary>Inner interface InputAssemblerStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetVertexBuffers(System.Int32,SharpDX.Direct3D10.VertexBufferBinding)">
            <summary>
              Binds a single vertex buffer to the input assembler.
            </summary>
            <param name = "slot">Index of the slot to which to bind the vertex buffer.</param>
            <param name = "vertexBufferBinding">A binding for the input vertex buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetVertexBuffers(System.Int32,SharpDX.Direct3D10.VertexBufferBinding[])">
            <summary>
              Binds an array of vertex buffers to the input assembler.
            </summary>
            <param name = "firstSlot">Index of the first input slot to use for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots.</param>
            <param name = "vertexBufferBindings">An array of bindings for input vertex buffers.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.InputAssemblerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetInputLayout(SharpDX.Direct3D10.InputLayout)">
            <summary>	
            Bind an input-layout object to the {{input-assembler stage}}.	
            </summary>	
            <remarks>	
            Input-layout objects describe how vertex buffer data is streamed into the IA pipeline stage. To create an input-layout object, call <see cref="M:SharpDX.Direct3D10.Device.CreateInputLayout(SharpDX.Direct3D10.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.InputLayout@)"/>. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="inputLayoutRef">A reference to the input-layout object (see <see cref="T:SharpDX.Direct3D10.InputLayout"/>), which describes the input buffers that will be read by the IA stage. </param>
            <unmanaged>void IASetInputLayout([In, Optional] ID3D10InputLayout* pInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetVertexBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            Bind an array of {{vertex buffers}} to the {{input-assembler}} stage.	
            </summary>	
            <remarks>	
            For information about creating vertex buffers, see {{Create a Vertex Buffer}}. Calling this method using a buffer that is currently bound for writing (i.e. bound to the {{stream output}} pipeline stage) will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The {{Debug Layer}} will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">The first {{input slot}} for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots. </param>
            <param name="numBuffers">The number of vertex buffers in the array. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots. </param>
            <param name="vertexBuffersRef">A reference to an array of vertex buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>). The vertex buffers must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.VertexBuffer"/> flag. </param>
            <param name="stridesRef">Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer. </param>
            <param name="offsetsRef">Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used. </param>
            <unmanaged>void IASetVertexBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D10Buffer** ppVertexBuffers,[In, Buffer] const int* pStrides,[In, Buffer] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetIndexBuffer(SharpDX.Direct3D10.Buffer,SharpDX.DXGI.Format,System.Int32)">
            <summary>	
            Bind an {{index buffer}} to the {{input-assembler}} stage.	
            </summary>	
            <remarks>	
            For information about creating index buffers, see {{Create an Index Buffer}}. Calling this method using a buffer that is currently bound for writing (i.e. bound to the {{stream output}} pipeline stage) will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The {{Debug Layer}} will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="indexBufferRef">A reference to a buffer (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) that contains indices. The index buffer must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.IndexBuffer"/> flag. </param>
            <param name="format">Specifies format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (<see cref="F:SharpDX.DXGI.Format.R16_UInt"/>) and 32-bit (DXGI_FORMAT_R32_UINT) integers. </param>
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use. </param>
            <unmanaged>void IASetIndexBuffer([In, Optional] ID3D10Buffer* pIndexBuffer,[In] DXGI_FORMAT Format,[In] int Offset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.SetPrimitiveTopology(SharpDX.Direct3D.PrimitiveTopology)">
            <summary>	
            Bind information about the {{primitive type}}, and data order that describes input data for the {{input assembler}} stage.	
            </summary>	
            <param name="topology">The type of primitive and ordering of the primitive data (see <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>). </param>
            <unmanaged>void IASetPrimitiveTopology([In] D3D10_PRIMITIVE_TOPOLOGY Topology)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.GetInputLayout(SharpDX.Direct3D10.InputLayout@)">
            <summary>	
            Get a reference to the input-layout object that is bound to the {{input-assembler stage}}.	
            </summary>	
            <remarks>	
            For information about creating an input-layout object, see {{Creating the Input-Layout Object}}. Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="inputLayoutRef">A reference to the input-layout object (see <see cref="T:SharpDX.Direct3D10.InputLayout"/>), which describes the input buffers that will be read by the IA stage. </param>
            <unmanaged>void IAGetInputLayout([Out] ID3D10InputLayout** ppInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.GetVertexBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            Get the {{vertex buffers}} bound to the {{input-assembler}} stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">The {{input slot}} of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots. </param>
            <param name="numBuffers">The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots. </param>
            <param name="vertexBuffersRef">A reference to an array of vertex buffers returned by the method (see <see cref="T:SharpDX.Direct3D10.Buffer"/>). </param>
            <param name="stridesRef">Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer. </param>
            <param name="offsetsRef">Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used. </param>
            <unmanaged>void IAGetVertexBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer, Optional] ID3D10Buffer** ppVertexBuffers,[Out, Buffer, Optional] int* pStrides,[Out, Buffer, Optional] int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.GetIndexBuffer(SharpDX.Direct3D10.Buffer@,SharpDX.DXGI.Format@,System.Int32@)">
            <summary>	
            Get a reference to the {{index buffer}} that is bound to the {{input-assembler}} stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="indexBufferRef">A reference to an index buffer returned by the method (see <see cref="T:SharpDX.Direct3D10.Buffer"/>). </param>
            <param name="format">Specifies format of the data in the index buffer (see <see cref="T:SharpDX.DXGI.Format"/>). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers. </param>
            <param name="offset">Offset (in bytes) from the start of the index buffer, to the first index to use. </param>
            <unmanaged>void IAGetIndexBuffer([Out, Optional] ID3D10Buffer** pIndexBuffer,[Out, Optional] DXGI_FORMAT* Format,[Out, Optional] int* Offset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.InputAssemblerStage.GetPrimitiveTopology(SharpDX.Direct3D.PrimitiveTopology@)">
            <summary>	
            Get information about the {{primitive type}}, and data order that describes input data for the {{input assembler}} stage.	
            </summary>	
            <param name="topologyRef">A reference to the type of primitive, and ordering of the primitive data (see <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>). </param>
            <unmanaged>void IAGetPrimitiveTopology([Out] D3D10_PRIMITIVE_TOPOLOGY* pTopology)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.CommonShaderStage`1">
            <summary>
            Common Shader class. Provides a common set of methods for a Shader Stage.
            TODO: check if usage of abstract is not introducing an unacceptable overhead...
            </summary>
            <typeparam name = "T">Type of the shader</typeparam>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.CommonShaderStage`1.MaximumConstantBufferSlotCount">
            <summary>
            Maximum number of bindable constant buffers to a pipeline stage.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.CommonShaderStage`1.MaximumResourceSlotCount">
            <summary>
            Maximum number of bindable resources to a pipeline stage.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.CommonShaderStage`1.MaximumSamplerSlotCount">
            <summary>
            Maximum number of bindable samplers to a pipeline stage.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.CommonShaderStage`1"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetConstantBuffers(System.Int32,System.Int32)">
            <summary>
              Gets the constant buffers used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving constant buffers.</param>
            <param name = "count">Number of buffers to retrieve.</param>
            <returns>An array of constant buffers.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetSamplers(System.Int32,System.Int32)">
            <summary>
              Gets the sampler states used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving samplers.</param>
            <param name = "count">Number of samplers to retrieve.</param>
            <returns>An array of sampler states.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetShaderResources(System.Int32,System.Int32)">
            <summary>
              Gets the shader resources used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving shader resources.</param>
            <param name = "count">Number of resources to retrieve.</param>
            <returns>An array of shader resources.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetConstantBuffer(System.Int32,SharpDX.Direct3D10.Buffer)">
            <summary>
              Sets a single constant buffer to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the constant buffer.</param>
            <param name = "constantBuffer">constant buffer to set</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetSampler(System.Int32,SharpDX.Direct3D10.SamplerState)">
            <summary>
              Sets a single sampler to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the sampler.</param>
            <param name = "sampler">sampler state to set</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetShaderResource(System.Int32,SharpDX.Direct3D10.ShaderResourceView)">
            <summary>
              Sets a single shader resource to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the resource.</param>
            <param name = "resourceView">Resource view to attach</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>
              Get the shader resources.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name = "startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device.</param>
            <unmanaged>void PSGetShaderResources([In] UINT StartSlot,[In] UINT NumViews,[Out, Buffer] ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>
              Get an array of sampler states from the shader pipeline stage.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplersRef">Arry of sampler-state interface pointers (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>) to be returned by the device.</param>
            <unmanaged>void PSGetSamplers([In] UINT StartSlot,[In] UINT NumSamplers,[Out, Buffer] ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>
              Get the constant buffers used by the shader pipeline stage.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffersRef">Array of constant buffer interface pointers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to be returned by the method.</param>
            <unmanaged>void PSGetConstantBuffers([In] UINT StartSlot,[In] UINT NumBuffers,[Out, Buffer] ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>
              Bind an array of shader resources to the shader stage.
            </summary>
            <remarks>
              If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with NULL.For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device.</param>
            <unmanaged>void PSSetShaderResources([In] UINT StartSlot,[In] UINT NumViews,[In, Buffer] const ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>
              Set an array of sampler states to the shader pipeline stage.
            </summary>
            <remarks>
              Any sampler may be set to NULL; this invokes the default state, which is defined to be the following.StateDefault ValueFilterD3D10_FILTER_MIN_MAG_MIP_LINEARAddressUD3D10_TEXTURE_ADDRESS_CLAMPAddressVD3D10_TEXTURE_ADDRESS_CLAMPAddressWD3D10_TEXTURE_ADDRESS_CLAMPMipLODBias0MaxAnisotropy1ComparisonFuncD3D10_COMPARISON_NEVERBorderColor[0]1.0fBorderColor[1]1.0fBorderColor[2]1.0fBorderColor[3]1.0fMinLOD-FLT_MAXMaxLODFLT_MAX  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). See Remarks.</param>
            <unmanaged>void PSSetSamplers([In] UINT StartSlot,[In] UINT NumSamplers,[In, Buffer] const ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.CommonShaderStage`1.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>
              Set the constant buffers used by the shader pipeline stage.
            </summary>
            <remarks>
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) being given to the device.</param>
            <unmanaged>void PSSetConstantBuffers([In] UINT StartSlot,[In] UINT NumBuffers,[In, Buffer] const ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.StreamOutputStage">
            <summary>Inner interface StreamOutputStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.BufferMaximumStrideInBytes">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.BufferMaximumWriteWindowInBytes">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.BufferSlotCount">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.DdiRegisterIndexDenotingGap">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.MultipleBufferElementsPerBuffer">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.Device.StreamOutputStage.SingleBufferComponentLimit">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.StreamOutputStage.SetTargets(SharpDX.Direct3D10.StreamOutputBufferBinding[])">
            <summary>	
            Set the target output {{buffers}} for the {{StreamOutput}} stage, which enables/disables the pipeline to stream-out data.	
            </summary>	
            <remarks>	
            Call ID3D10Device::SOSetTargets (before any draw calls) to stream data out; call SOSetTargets with NULL to stop streaming data out. For an example, see Exercise 01 from the GDC 2007 workshop, which sets the stream output rendertargets before calling draw methods in the RenderInstanceToStream function. An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The {{Debug Layer}} will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="bufferBindings">an array of output buffers (see <see cref="T:SharpDX.Direct3D10.StreamOutputBufferBinding"/>) to bind to the device. The buffers must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.StreamOutput"/> flag. </param>
            <unmanaged>void SOSetTargets([In] int NumBuffers,[In, Buffer, Optional] const ID3D10Buffer** ppSOTargets,[In, Buffer, Optional] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.StreamOutputStage.GetTargets(System.Int32)">
            <summary>	
            Get the target output {{buffers}} for the {{StreamOutput}} stage of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numBuffers">Number of buffers to get. A maximum of four output buffers can be retrieved. </param>
            <returns>an array of output buffers (see <see cref="T:SharpDX.Direct3D10.StreamOutputBufferBinding"/>) to bind to the device.</returns>
            <unmanaged>void SOGetTargets([In] int NumBuffers,[Out, Buffer, Optional] ID3D10Buffer** ppSOTargets,[Out, Buffer, Optional] int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.StreamOutputStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.StreamOutputStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.StreamOutputStage.SetTargets(System.Int32,SharpDX.Direct3D10.Buffer[],System.Int32[])">
            <summary>	
            Set the target output {{buffers}} for the {{StreamOutput}} stage, which enables/disables the pipeline to stream-out data.	
            </summary>	
            <remarks>	
            Call ID3D10Device::SOSetTargets (before any draw calls) to stream data out; call SOSetTargets with NULL to stop streaming data out. For an example, see Exercise 01 from the GDC 2007 workshop, which sets the stream output rendertargets before calling draw methods in the RenderInstanceToStream function. An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The {{Debug Layer}} will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="numBuffers">The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to NULL. See Remarks. </param>
            <param name="sOTargetsRef">The array of output buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to bind to the device. The buffers must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.StreamOutput"/> flag. </param>
            <param name="offsetsRef">Array of offsets to the output buffers from ppSOTargets, one offset for each buffer. The offset values must be in bytes. </param>
            <unmanaged>void SOSetTargets([In] int NumBuffers,[In, Buffer, Optional] const ID3D10Buffer** ppSOTargets,[In, Buffer, Optional] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.StreamOutputStage.GetTargets(System.Int32,SharpDX.Direct3D10.Buffer[],System.Int32[])">
            <summary>	
            Get the target output {{buffers}} for the {{StreamOutput}} stage of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numBuffers">Number of buffers to get. A maximum of four output buffers can be retrieved. </param>
            <param name="sOTargetsRef">An array of output buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to be retrieved from the device. </param>
            <param name="offsetsRef">Array of offsets to the output buffers from ppSOTargets, one offset for each buffer. The offset values are in bytes. </param>
            <unmanaged>void SOGetTargets([In] int NumBuffers,[Out, Buffer, Optional] ID3D10Buffer** ppSOTargets,[Out, Buffer, Optional] int* pOffsets)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.OutputMergerStage">
            <summary>Inner interface OutputMergerStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetRenderTargets(SharpDX.Direct3D10.DepthStencilView@)">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <returns>a depth-stencil view (see <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>) to be filled with the depth-stencil information from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetRenderTargets(System.Int32)">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <returns>an array of render targets views (see <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>) to be filled with the render targets from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetRenderTargets(System.Int32,SharpDX.Direct3D10.DepthStencilView@)">
            <summary>	
            Get references to the render targets and the depth-stencil buffer that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <param name="depthStencilViewRef">Pointer to a depth-stencil view (see <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>) to be filled with the depth-stencil information from the device.</param>
            <returns>an array of render targets views (see <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>) to be filled with the render targets from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetBlendState(SharpDX.Color4@,System.Int32@)">
            <summary>	
            Get the {{blend state}} of the output-merger stage.	
            </summary>	
            <remarks>	
            The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned reference(s) when they are no longer needed, or else there will be a memory leak. 	
            </remarks>	
            <param name="blendFactor">Array of blend factors, one for each RGBA component. </param>
            <param name="sampleMaskRef">Pointer to a {{sample mask}}. </param>
            <returns>a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.BlendState"/>).</returns>
            <unmanaged>void OMGetBlendState([Out, Optional] ID3D10BlendState** ppBlendState,[Out, Optional] float BlendFactor[4],[Out, Optional] int* pSampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetDepthStencilState(System.Int32@)">
            <summary>	
            Gets the {{depth-stencil}} state of the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="stencilRefRef">Pointer to the stencil reference value used in the {{depth-stencil}} test. </param>
            <returns>a reference to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>) to be filled with information from the device.</returns>
            <unmanaged>void OMGetDepthStencilState([Out, Optional] ID3D10DepthStencilState** ppDepthStencilState,[Out, Optional] int* pStencilRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetTargets(SharpDX.Direct3D10.RenderTargetView[])">
            <summary>
              Binds a set of render targets to the output-merger stage.
            </summary>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetTargets(SharpDX.Direct3D10.RenderTargetView)">
            <summary>
              Binds a single render target to the output-merger stage.
            </summary>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetTargets(SharpDX.Direct3D10.DepthStencilView,SharpDX.Direct3D10.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetTargets(SharpDX.Direct3D10.DepthStencilView,SharpDX.Direct3D10.RenderTargetView)">
            <summary>
              Binds a depth-stencil buffer and a single render target to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.OutputMergerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D10.RenderTargetView[],SharpDX.Direct3D10.DepthStencilView)">
            <summary>	
            Bind one or more render targets and the depth-stencil buffer to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            A call to OMSetRenderTargets overrides all bounded render targets and the depth stencil target regardless of the number of render targets in ppRenderTargetViews. The maximum number of render targets a device can have active at any given time is set by a #define in D3D10.h called D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same {{subresource}} to multiple render target slots. If any subresources are also currently bound for reading or writing (perhaps in a different part of the {{pipeline}}), those bind points will be NULL'ed out to prevent the same subresource from being read and written simultaneously in a single rendering operation. The method will not hold references to the interfaces passed in. For that reason, applications should be careful not to release interfaces currently in use by the device. See {{Binding Resources and Pipeline stages}} for more information on binding resources. 	
            </remarks>	
            <param name="numViews">Number of render targets to bind. </param>
            <param name="renderTargetViewsRef">Pointer to an array of render targets (see <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>) to bind to the device. If this parameter is NULL, no render targets are bound. See Remarks. </param>
            <param name="depthStencilViewRef">Pointer to a depth-stencil view (see <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>) to bind to the device. If this parameter is NULL, the depth-stencil state is not bound. </param>
            <unmanaged>void OMSetRenderTargets([In] int NumViews,[In, Buffer, Optional] const ID3D10RenderTargetView** ppRenderTargetViews,[In, Optional] ID3D10DepthStencilView* pDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetBlendState(SharpDX.Direct3D10.BlendState,SharpDX.Color4,System.Int32)">
            <summary>	
            Set the {{blend state}} of the output-merger stage.	
            </summary>	
            <remarks>	
            Blend state is used by the {{output-merger}} stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the {{blend operation}} to control where the two pixel values come from and how they are mathematically combined. To create a blend-state interface, call <see cref="M:SharpDX.Direct3D10.Device.CreateBlendState(SharpDX.Direct3D10.BlendStateDescription@,SharpDX.Direct3D10.BlendState@)"/>. Passing in NULL for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.  StateDefault Value AlphaToCoverageEnableFALSE BlendEnableFALSE[8] SrcBlendD3D10_BLEND_ONE DstBlendD3D10_BLEND_ZERO BlendOpD3D10_BLEND_OP_ADD SrcBlendAlphaD3D10_BLEND_ONE DstBlendAlphaD3D10_BLEND_ZERO BlendOpAlphaD3D10_BLEND_OP_ADD RenderTargetWriteMask[8]D3D10_COLOR_WRITE_ENABLE_ALL[8]  ? A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="blendStateRef">Pointer to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.BlendState"/>). Passing in NULL implies a default blend state. See remarks for further details. </param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. This requires a blend state object that specifies the <see cref="F:SharpDX.Direct3D10.BlendOption.BlendFactor"/> option. </param>
            <param name="sampleMask">32-bit sample coverage. The default value is 0xffffffff. See remarks. </param>
            <unmanaged>void OMSetBlendState([In, Optional] ID3D10BlendState* pBlendState,[In] const SHARPDX_COLOR4* BlendFactor,[In] int SampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetDepthStencilState(SharpDX.Direct3D10.DepthStencilState,System.Int32)">
            <summary>	
            Sets the {{depth-stencil}} state of  the output-merger stage.	
            </summary>	
            <remarks>	
            To create a depth-stencil state interface, call <see cref="M:SharpDX.Direct3D10.Device.CreateDepthStencilState(SharpDX.Direct3D10.DepthStencilStateDescription@,SharpDX.Direct3D10.DepthStencilState@)"/>. Depth-stencil state is used by the {{output-merger}} stage to  setup depth-stencil testing.  The stencil reference value is the control value used in the depth-stencil test. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an  interface currently in use by the device. 	
            </remarks>	
            <param name="depthStencilStateRef">Pointer to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>) to bind to the device. </param>
            <param name="stencilRef">Reference value to perform against when doing a depth-stencil test. See remarks. </param>
            <unmanaged>void OMSetDepthStencilState([In, Optional] ID3D10DepthStencilState* pDepthStencilState,[In] int StencilRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetRenderTargets(System.Int32,SharpDX.Direct3D10.RenderTargetView[],SharpDX.Direct3D10.DepthStencilView@)">
            <summary>	
            Get references to the render targets and the depth-stencil buffer that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <param name="renderTargetViewsRef">Pointer to an array of render targets views (see <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>) to be filled with the render targets from the device. Specify NULL for this parameter when retrieval of a render target is not needed.  </param>
            <param name="depthStencilViewRef">Pointer to a depth-stencil view (see <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>) to be filled with the depth-stencil information from the device. Specify NULL for this parameter when retrieval of the depth-stencil view is not needed. </param>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetBlendState(SharpDX.Direct3D10.BlendState@,SharpDX.Color4@,System.Int32@)">
            <summary>	
            Get the {{blend state}} of the output-merger stage.	
            </summary>	
            <remarks>	
            The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned reference(s) when they are no longer needed, or else there will be a memory leak. 	
            </remarks>	
            <param name="blendStateRef">Address of a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.BlendState"/>). </param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. </param>
            <param name="sampleMaskRef">Pointer to a {{sample mask}}. </param>
            <unmanaged>void OMGetBlendState([Out, Optional] ID3D10BlendState** ppBlendState,[Out, Optional] SHARPDX_COLOR4* BlendFactor,[Out, Optional] int* pSampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.OutputMergerStage.GetDepthStencilState(SharpDX.Direct3D10.DepthStencilState@,System.Int32@)">
            <summary>	
            Gets the {{depth-stencil}} state of the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="depthStencilStateRef">Address of a reference to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>) to be filled with information from the device. </param>
            <param name="stencilRefRef">Pointer to the stencil reference value used in the {{depth-stencil}} test. </param>
            <unmanaged>void OMGetDepthStencilState([Out, Optional] ID3D10DepthStencilState** ppDepthStencilState,[Out, Optional] int* pStencilRef)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMergerStage.BlendFactor">
            <summary>
            Gets or sets the blend factor.
            </summary>
            <value>The blend factor.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMergerStage.BlendSampleMask">
            <summary>
            Gets or sets the blend sample mask.
            </summary>
            <value>The blend sample mask.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMergerStage.BlendState">
            <summary>
            Gets or sets the state of the blend.
            </summary>
            <value>The state of the blend.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMergerStage.DepthStencilReference">
            <summary>
            Gets or sets the depth stencil reference.
            </summary>
            <value>The depth stencil reference.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.OutputMergerStage.DepthStencilState">
            <summary>
            Gets or sets the state of the depth stencil.
            </summary>
            <value>The state of the depth stencil.</value>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.RasterizerStage">
            <summary>Inner interface RasterizerStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetViewports">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:SharpDX.Direct3D10.Viewport"/>).</returns>
            <unmanaged>void RSGetViewports([InOut] int* NumViewports,[Out, Buffer, Optional] D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetViewports(SharpDX.Direct3D10.Viewport[])">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:SharpDX.Direct3D10.Viewport"/>).</returns>
            <unmanaged>void RSGetViewports([InOut] int* NumViewports,[Out, Buffer, Optional] D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetScissorRectangles">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
            <returns>An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>).</returns>
            <unmanaged>void RSGetScissorRects([InOut] int* NumRects,[Out, Buffer, Optional] D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetScissorRectangles(SharpDX.Rectangle[])">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
            <returns>An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>).</returns>
            <unmanaged>void RSGetScissorRects([InOut] int* NumRects,[Out, Buffer, Optional] D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetScissorRectangles(SharpDX.Rectangle)">
            <summary>
              Binds a single scissor rectangle to the rasterizer stage.
            </summary>
            <param name = "scissorRectangle">The scissor rectangle to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetScissorRectangles(SharpDX.Rectangle[])">
            <summary>
              Binds a set of scissor rectangles to the rasterizer stage.
            </summary>
            <param name = "scissorRectangles">The set of scissor rectangles to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetViewports(SharpDX.Direct3D10.Viewport[])">
            <summary>
              Binds a set of viewports to the rasterizer stage.
            </summary>
            <param name = "viewports">The set of viewports to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetViewports(SharpDX.Direct3D10.Viewport)">
            <summary>
              Binds a single viewport to the rasterizer stage.
            </summary>
            <param name = "viewport">The viewport to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.RasterizerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetState(SharpDX.Direct3D10.RasterizerState)">
            <summary>	
            Set the {{rasterizer state}} for the {{rasterizer stage}} of the pipeline.	
            </summary>	
            <remarks>	
            To create a rasterizer state interface, call <see cref="M:SharpDX.Direct3D10.Device.CreateRasterizerState(SharpDX.Direct3D10.RasterizerStateDescription@,SharpDX.Direct3D10.RasterizerState@)"/>. For more details on setting up the rasterizer state, see {{Set Rasterizer State}}. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="rasterizerStateRef">Pointer to a rasterizer-state interface (see <see cref="T:SharpDX.Direct3D10.RasterizerState"/>) to bind to the pipeline. </param>
            <unmanaged>void RSSetState([In, Optional] ID3D10RasterizerState* pRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetViewports(System.Int32,SharpDX.Direct3D10.Viewport[])">
            <summary>	
            Bind an array of {{viewports}} to the {{rasterizer stage}} of the pipeline.	
            </summary>	
            <remarks>	
            All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled. Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see {{shader semantic syntax}}). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first viewport in the array. 	
            </remarks>	
            <param name="numViewports">Number of viewports to bind. </param>
            <param name="viewportsRef">An array of viewports (see <see cref="T:SharpDX.Direct3D10.Viewport"/>) to bind to the device. Each viewport must have its extents within the allowed ranges: D3D10_VIEWPORT_BOUNDS_MIN, D3D10_VIEWPORT_BOUNDS_MAX, D3D10_MIN_DEPTH, and D3D10_MAX_DEPTH. </param>
            <unmanaged>void RSSetViewports([In] int NumViewports,[In, Buffer, Optional] const D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.SetScissorRects(System.Int32,SharpDX.Rectangle[])">
            <summary>	
            Bind an array of {{scissor rectangles}} to the {{rasterizer stage}}.	
            </summary>	
            <remarks>	
            The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see {{shader semantic syntax}}). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array. Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <see cref="M:SharpDX.Direct3D10.Device.RasterizerStage.SetViewports(SharpDX.Direct3D10.Viewport[])"/>). 	
            </remarks>	
            <param name="numRects">Number of scissor rectangles to bind. </param>
            <param name="rectsRef">An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>). </param>
            <unmanaged>void RSSetScissorRects([In] int NumRects,[In, Buffer, Optional] const D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetState(SharpDX.Direct3D10.RasterizerState@)">
            <summary>	
            Get the {{rasterizer state}} from the {{rasterizer stage}} of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="rasterizerStateRef">Address of a reference to a rasterizer-state interface (see <see cref="T:SharpDX.Direct3D10.RasterizerState"/>) to fill with information from the device. </param>
            <unmanaged>void RSGetState([Out] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetViewports(System.Int32@,SharpDX.Direct3D10.Viewport[])">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <param name="numViewports">Number of viewports in pViewports.   If pViewports is NULL, this will be filled with the number of viewports currently bound. </param>
            <param name="viewportsRef">An array of viewports (see <see cref="T:SharpDX.Direct3D10.Viewport"/>) to be filled with information from the device. If NumViewports is greater than  the actual number of viewports currently bound, then unused members of the array will contain 0. </param>
            <unmanaged>void RSGetViewports([InOut] int* NumViewports,[Out, Buffer, Optional] D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.RasterizerStage.GetScissorRects(System.Int32@,SharpDX.Rectangle[])">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
            <param name="numRects">Number of scissor rectangles to get. If pRects is NULL, this will be filled with the number of scissor rectangles currently bound. </param>
            <param name="rectsRef">An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0. </param>
            <unmanaged>void RSGetScissorRects([InOut] int* NumRects,[Out, Buffer, Optional] D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device.RasterizerStage.State">
            <summary>	
            Get the {{rasterizer state}} from the {{rasterizer stage}} of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <unmanaged>void RSGetState([Out] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.VertexShaderStage">
            <summary>Inner interface VertexShaderStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.VertexShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Set the {{constant buffers}} used by the {{vertex shader}} pipeline stage.	
            </summary>	
            <remarks>	
            The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to. </param>
            <param name="numBuffers">Number of buffers to set. </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) being given to the device. </param>
            <unmanaged>void VSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.Set(SharpDX.Direct3D10.VertexShader)">
            <summary>	
            Set a vertex shader to the device.	
            </summary>	
            <remarks>	
            The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="vertexShaderRef">Pointer to a vertex shader (see <see cref="T:SharpDX.Direct3D10.VertexShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <unmanaged>void VSSetShader([In, Optional] ID3D10VertexShader* pVertexShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the {{vertex shader stage}}.	
            </summary>	
            <remarks>	
            If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with NULL. The debug layer (when active) will alert you if this is true. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/>. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to. </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void VSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Set an array of sampler states to the {{vertex shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D10_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D10_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D10_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
             The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to. </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). See Remarks. </param>
            <unmanaged>void VSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Get the {{constant buffers}} used by the {{vertex shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from. </param>
            <param name="numBuffers">Number of buffers to retrieve. </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void VSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.Get(SharpDX.Direct3D10.VertexShader@)">
            <summary>	
            Get the vertex shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="vertexShaderRef">Address of a reference to a vertex shader (see <see cref="T:SharpDX.Direct3D10.VertexShader"/>) to be returned by the method. </param>
            <unmanaged>void VSGetShader([Out] ID3D10VertexShader** ppVertexShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Get the vertex shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from. </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void VSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.VertexShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Get an array of sampler states from the {{vertex shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting samplers from. </param>
            <param name="numSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Arry of sampler-state interface references (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>) to be returned by the device. </param>
            <unmanaged>void VSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.PixelShaderStage">
            <summary>Inner interface PixelShaderStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.PixelShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the {{pixel shader stage}}.	
            </summary>	
            <remarks>	
            If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with NULL. The debug layer (when active) will alert you if this is true. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/>. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to. </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void PSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.Set(SharpDX.Direct3D10.PixelShader)">
            <summary>	
            Sets a pixel shader to the device.	
            </summary>	
            <remarks>	
            The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="ixelShaderRef">Pointer to a pixel shader (see <see cref="T:SharpDX.Direct3D10.PixelShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <unmanaged>void PSSetShader([In, Optional] ID3D10PixelShader* pPixelShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Set an array of sampler states to the {{pixel shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following.  StateDefault Value FilterD3D10_FILTER_MIN_MAG_MIP_LINEAR AddressUD3D10_TEXTURE_ADDRESS_CLAMP AddressVD3D10_TEXTURE_ADDRESS_CLAMP AddressWD3D10_TEXTURE_ADDRESS_CLAMP MipLODBias0 MaxAnisotropy1 ComparisonFuncD3D10_COMPARISON_NEVER BorderColor[0]1.0f BorderColor[1]1.0f BorderColor[2]1.0f BorderColor[3]1.0f MinLOD-FLT_MAX MaxLODFLT_MAX  ? The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to. </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). See Remarks. </param>
            <unmanaged>void PSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Set the {{constant buffers}} used by the {{pixel shader}} pipeline stage.	
            </summary>	
            <remarks>	
            The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to. </param>
            <param name="numBuffers">Number of buffers to set. </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) being given to the device. </param>
            <unmanaged>void PSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Get the pixel shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from. </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void PSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.Get(SharpDX.Direct3D10.PixelShader@)">
            <summary>	
            Get the pixel shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="pixelShaderRef">Address of a reference to a pixel shader (see <see cref="T:SharpDX.Direct3D10.PixelShader"/>) to be returned by the method. </param>
            <unmanaged>void PSGetShader([Out] ID3D10PixelShader** ppPixelShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Get an array of sampler states from the {{pixel shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting samplers from. </param>
            <param name="numSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Arry of sampler-state interface references (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>) to be returned by the device. </param>
            <unmanaged>void PSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.PixelShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Get the {{constant buffers}} used by the {{pixel shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from. </param>
            <param name="numBuffers">Number of buffers to retrieve. </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void PSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device.GeometryShaderStage">
            <summary>Inner interface GeometryShaderStage.</summary>
            <unmanaged>ID3D10Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device.GeometryShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Set the {{constant buffers}} used by the {{geometry shader}} pipeline stage.	
            </summary>	
            <remarks>	
            The method will not hold references to the interfaces passed in. For that reason, applications should be careful not to release interfaces currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to. </param>
            <param name="numBuffers">Number of buffers to set. </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) being given to the device. </param>
            <unmanaged>void GSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.Set(SharpDX.Direct3D10.GeometryShader)">
            <summary>	
            Set a geometry shader to the device.	
            </summary>	
            <remarks>	
            The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="shaderRef">Pointer to a geometry shader (see <see cref="T:SharpDX.Direct3D10.GeometryShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <unmanaged>void GSSetShader([In, Optional] ID3D10GeometryShader* pShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the {{geometry shader stage}}.	
            </summary>	
            <remarks>	
            If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with NULL. The debug layer (when active) will alert you if this is true. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/>. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to. </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void GSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Set an array of sampler states to the {{geometry shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D10_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D10_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D10_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D10_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
             The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to. </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). See Remarks. </param>
            <unmanaged>void GSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D10.Buffer[])">
            <summary>	
            Get the {{constant buffers}} used by the {{geometry shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from. </param>
            <param name="numBuffers">Number of buffers to retrieve. </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D10.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void GSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D10Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.Get(SharpDX.Direct3D10.GeometryShader@)">
            <summary>	
            Get the geometry shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="geometryShaderRef">Address of a reference to a geometry shader (see <see cref="T:SharpDX.Direct3D10.GeometryShader"/>) to be returned by the method. </param>
            <unmanaged>void GSGetShader([Out] ID3D10GeometryShader** ppGeometryShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Get the geometry shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from. </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources. </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void GSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D10ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device.GeometryShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D10.SamplerState[])">
            <summary>	
            Get an array of sampler states from the {{geometry shader}} pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting samplers from. </param>
            <param name="numSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available. </param>
            <param name="samplersRef">Arry of sampler-state references (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>) to be returned by the device. </param>
            <unmanaged>void GSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D10SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Counter">
            <summary>	
            This interface encapsulates methods for measuring GPU performance.	
            </summary>	
            <unmanaged>ID3D10Counter</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Counter.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.CounterDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.Counter" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The counter description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Counter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Counter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Counter.GetDescription(SharpDX.Direct3D10.CounterDescription@)">
            <summary>	
            Get a counter description.	
            </summary>	
            <param name="descRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D10.CounterDescription"/>). </param>
            <unmanaged>void ID3D10Counter::GetDesc([Out] D3D10_COUNTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Counter.Description">
            <summary>	
            Get a counter description.	
            </summary>	
            <unmanaged>void ID3D10Counter::GetDesc([Out] D3D10_COUNTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CounterMetadata">
            <summary>
            Counter metadata that contains the type, name, units of measure, and a description of an existing counter.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.CounterMetadata.Type">
            <summary>
            Gets the data type of a counter (see <see cref="T:SharpDX.Direct3D10.CounterType"/>).
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.CounterMetadata.HardwareCounterCount">
            <summary>
            Gets the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.
            </summary>
            <value>The hardware counter count.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.CounterMetadata.Name">
            <summary>
            Gets a brief name for the counter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.CounterMetadata.Units">
            <summary>
            Gets the units a counter measures.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.CounterMetadata.Description">
            <summary>
            Gets a description of the counter.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:SharpDX.Direct3D10.Debug">
            <summary>	
            A debug interface controls debug settings, validates pipeline state and can only be used if the {{debug layer}} is turned on.	
            </summary>	
            <unmanaged>ID3D10Debug</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.#ctor(SharpDX.Direct3D10.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Debug"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Debug"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.SetFeatureFlags(System.Int32)">
            <summary>	
            Set a bitfield of flags that will turn debug features on and off.	
            </summary>	
            <remarks>	
            Setting a feature-mask flag will cause a rendering-operation method (listed below) to do some extra task when called. The possible feature flags are:  D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OPApplication will wait for the GPU to finish processing the rendering operation before continuing. D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OPRuntime will additionally call <see cref="M:SharpDX.Direct3D10.Device.Flush"/>. D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OPRuntime will call {{Present}}. Presentation of render buffers will occur according to the settings established by prior calls to <see cref="M:SharpDX.Direct3D10.Debug.SetSwapChain(SharpDX.DXGI.SwapChain)"/> and <see cref="M:SharpDX.Direct3D10.Debug.SetPresentPerRenderOpDelay(System.Int32)"/>.  ? These feature-mask flags apply to the following rendering-operation methods:   <see cref="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Device.DrawIndexed(System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Device.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Device.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Device.DrawAuto"/>   <see cref="M:SharpDX.Direct3D10.Device.ClearRenderTargetView(SharpDX.Direct3D10.RenderTargetView,System.Drawing.Color)"/>   <see cref="M:SharpDX.Direct3D10.Device.ClearDepthStencilView(SharpDX.Direct3D10.DepthStencilView,SharpDX.Direct3D10.DepthStencilClearFlags,System.Single,System.Byte)"/>   <see cref="M:SharpDX.Direct3D10.Device.CopySubresourceRegion_(SharpDX.Direct3D10.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,System.Nullable{SharpDX.Direct3D10.ResourceRegion})"/>   <see cref="M:SharpDX.Direct3D10.Device.CopyResource_(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.Resource)"/>   <see cref="M:SharpDX.Direct3D10.Device.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D10.Resource,System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Device.GenerateMips(SharpDX.Direct3D10.ShaderResourceView)"/>   <see cref="M:SharpDX.Direct3D10.Device.ResolveSubresource_(SharpDX.Direct3D10.Resource,System.Int32,SharpDX.Direct3D10.Resource,System.Int32,SharpDX.DXGI.Format)"/>   	
            </remarks>	
            <param name="mask">Feature-mask flags bitwise ORed together. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off. See remarks for a list of flags. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Debug::SetFeatureMask([None] int Mask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.GetFeatureFlags">
            <summary>	
            Get a bitfield of flags that indicates which debug features are on or off.	
            </summary>	
            <returns>Mask of feature-mask flags bitwise ORed together. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off. See <see cref="M:SharpDX.Direct3D10.Debug.SetFeatureFlags(System.Int32)"/> for a list of possible feature-mask flags. </returns>
            <unmanaged>int ID3D10Debug::GetFeatureMask()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.SetPresentPerRenderOpDelay(System.Int32)">
            <summary>	
            Set the number of milliseconds to sleep after {{Present}} is called.	
            </summary>	
            <remarks>	
            The application will only sleep if D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is a set in the {{feature mask}}. If that flag is not set the number of milliseconds is set but ignored and the application does not sleep. 10ms is used as a default value if this method is never called. 	
            </remarks>	
            <param name="milliseconds">Number of milliseconds to sleep after Present is called. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Debug::SetPresentPerRenderOpDelay([None] int Milliseconds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.GetPresentPerRenderOpDelay">
            <summary>	
            Get the number of milliseconds to sleep after {{Present}} is called.	
            </summary>	
            <remarks>	
            Value is set with <see cref="M:SharpDX.Direct3D10.Debug.SetPresentPerRenderOpDelay(System.Int32)"/>. 	
            </remarks>	
            <returns>Number of milliseconds to sleep after Present is called. </returns>
            <unmanaged>int ID3D10Debug::GetPresentPerRenderOpDelay()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.SetSwapChain(SharpDX.DXGI.SwapChain)">
            <summary>	
            Set a swap chain that the runtime will use for automatically calling {{Present}}.	
            </summary>	
            <remarks>	
            The swap chain set by this method will only be used if D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <param name="swapChainRef">Swap chain that the runtime will use for automatically calling {{Present}}; must have been created with the <see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/> swap-effect flag. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Debug::SetSwapChain([In, Optional] IDXGISwapChain* pSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.GetSwapChain(SharpDX.DXGI.SwapChain@)">
            <summary>	
            Get the swap chain that the runtime will use for automatically calling {{Present}}.	
            </summary>	
            <remarks>	
            The swap chain retrieved by this method will only be used if D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <param name="swapChainRef">Swap chain that the runtime will use for automatically calling {{Present}}. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Debug::GetSwapChain([Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Debug.Validate">
            <summary>	
            Check the validity of pipeline state.	
            </summary>	
            <remarks>	
            When the {{debug layer}} is turned on all draw functions will do this operation. 	
            </remarks>	
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Debug::Validate()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Debug.FeatureFlags">
            <summary>
            Gets or sets the feature flags that indicates which debug features are on or off.	
            </summary>
            <value>The feature flags.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.Debug.PresentPerRenderOpDelay">
            <summary>	
            Get the number of milliseconds to sleep after {{Present}} is called.	
            </summary>	
            <remarks>	
            Value is set with <see cref="M:SharpDX.Direct3D10.Debug.SetPresentPerRenderOpDelay(System.Int32)"/>. 	
            </remarks>	
            <unmanaged>int ID3D10Debug::GetPresentPerRenderOpDelay()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Debug.SwapChain">
            <summary>	
            Get the swap chain that the runtime will use for automatically calling {{Present}}.	
            </summary>	
            <remarks>	
            The swap chain retrieved by this method will only be used if D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10Debug::GetSwapChain([Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilState">
            <summary>	
            A depth-stencil-state interface accesses depth-stencil state which sets up the {{depth-stencil test}} for the output-merger stage.	
            </summary>	
            <unmanaged>ID3D10DepthStencilState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.DepthStencilStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.DepthStencilState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.DepthStencilStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.DepthStencilState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.DepthStencilState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilState.GetDescription(SharpDX.Direct3D10.DepthStencilStateDescription@)">
            <summary>	
            Get the depth-stencil state.	
            </summary>	
            <param name="descRef">A reference to the depth-stencil state (see <see cref="T:SharpDX.Direct3D10.DepthStencilStateDescription"/>). </param>
            <unmanaged>void ID3D10DepthStencilState::GetDesc([Out] D3D10_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.DepthStencilState.Description">
            <summary>	
            Get the depth-stencil state.	
            </summary>	
            <unmanaged>void ID3D10DepthStencilState::GetDesc([Out] D3D10_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilView">
            <summary>	
            A {{depth-stencil-view}} interface accesses a texture resource during  {{depth-stencil testing}}.	
            </summary>	
            <unmanaged>ID3D10DepthStencilView</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ResourceView">
            <summary>	
            A view interface specifies the parts of a resource the pipeline can access during rendering (see {{view}}).	
            </summary>	
            <unmanaged>ID3D10View</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.ResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.ResourceView.GetResource(SharpDX.Direct3D10.Resource@)">
            <summary>	
            Get the resource that is accessed through this view.	
            </summary>	
            <remarks>	
            This function increments the reference count of the resource by one, so it is necessary to call Release on the returned reference when the application is done with it. Destroying (or losing) the returned reference before Release is called will result in a memory leak. 	
            </remarks>	
            <param name="resourceRef">Address of a reference to the resource that is accessed through this view. (See <see cref="T:SharpDX.Direct3D10.Resource"/>.) </param>
            <unmanaged>void ID3D10View::GetResource([Out] ID3D10Resource** ppResource)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.ResourceView.Resource">
            <summary>	
            Get the resource that is accessed through this view.	
            </summary>	
            <remarks>	
            This function increments the reference count of the resource by one, so it is necessary to call Release on the returned reference when the application is done with it. Destroying (or losing) the returned reference before Release is called will result in a memory leak. 	
            </remarks>	
            <unmanaged>void ID3D10View::GetResource([Out] ID3D10Resource** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">DepthStencil</see> flag.</param>
            <unmanaged>ID3D10Device::CreateDepthStencilView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.DepthStencilViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">DepthStencil</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D10.DepthStencilView" /> to be created.</param>
            <unmanaged>ID3D10Device::CreateDepthStencilView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.DepthStencilView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.DepthStencilView.GetDescription(SharpDX.Direct3D10.DepthStencilViewDescription@)">
            <summary>	
            Get the depth-stencil {{view}}.	
            </summary>	
            <param name="descRef">Pointer to a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). </param>
            <unmanaged>void ID3D10DepthStencilView::GetDesc([Out] D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.DepthStencilView.Description">
            <summary>	
            Get the depth-stencil {{view}}.	
            </summary>	
            <unmanaged>void ID3D10DepthStencilView::GetDesc([Out] D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Device1">
            <summary>	
            The device interface represents a virtual adapter for Direct3D 10.1; it is used to perform rendering and create Direct3D resources.	
            </summary>	
            <unmanaged>ID3D10Device1</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.Direct3D10.DriverType)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="driverType"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.DXGI.Adapter)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="driverType"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="adapter"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="driverType"></param>
            <param name="flags"></param>
            <param name="featureLevel"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel)">
            <summary>
              Constructor for a D3D10.1 Device. See <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> for more information.
            </summary>
            <param name="adapter"></param>
            <param name="flags"></param>
            <param name="featureLevel"></param>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateWithSwapChain(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.Device1@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device1" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "driverType">The type of device to create.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.Device1@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device1" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "adapter">The video adapter on which the device should be created.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateWithSwapChain(SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.FeatureLevel,SharpDX.Direct3D10.Device1@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device1" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "driverType">The type of device to create.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name="featureLevel">Desired feature level</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.FeatureLevel,SharpDX.Direct3D10.Device1@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Device1" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "adapter">The video adapter on which the device should be created.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name="featureLevel">Desired feature level</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D10.FeatureLevel,SharpDX.Direct3D10.Device1@,SharpDX.DXGI.SwapChain@)">
            <summary>
              This overload has been deprecated. Use one of the alternatives that does not take both an adapter and a driver type.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateShaderResourceView1(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription1},SharpDX.Direct3D10.ShaderResourceView1@)">
            <summary>	
            Create a shader-resource {{view}} for accessing data in a resource.	
            </summary>	
            <remarks>	
            A resource is made up of one or more {{subresources}}, a view identifies which subresources to allow the pipeline to access. In addition, each resource is bound to the pipeline using a view. A shader-resource view is designed to bind any buffer or texture resource to the {{shader stages}} using the following API methods: {{VSSetShaderResources}}, {{GSSetShaderResources}} and {{PSSetShaderResources}}. Since a view is fully typed, this means that typeless resources become fully typed when bound to the pipeline. This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <param name="resourceRef">Pointer to the {{resource}} that will serve as input to a shader. This resource must have been created with the <see cref="F:SharpDX.Direct3D10.BindFlags.ShaderResource"/> flag. </param>
            <param name="descRef">Pointer to a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription1"/>). Set this parameter to NULL to create a view that accesses the entire resource (using the format the resource was created with). </param>
            <param name="sRViewRef">Address of a reference to a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView1"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device1::CreateShaderResourceView1([In] ID3D10Resource* pResource,[In, Optional] const D3D10_SHADER_RESOURCE_VIEW_DESC1* pDesc,[Out, Optional] ID3D10ShaderResourceView1** ppSRView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.CreateBlendState1(SharpDX.Direct3D10.BlendStateDescription1@,SharpDX.Direct3D10.BlendState1@)">
            <summary>	
            Create a blend-state object that encapsules blend state for the output-merger stage.	
            </summary>	
            <remarks>	
            An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object. This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <param name="blendStateDescRef">Pointer to a blend-state description (see <see cref="T:SharpDX.Direct3D10.BlendStateDescription1"/>). </param>
            <param name="blendStateRef">Address of a reference to the blend-state object created (see <see cref="T:SharpDX.Direct3D10.BlendState1"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Device1::CreateBlendState1([In] const D3D10_BLEND_DESC1* pBlendStateDesc,[Out, Optional] ID3D10BlendState1** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Device1.GetFeatureLevel">
            <summary>	
            Gets the feature level of the hardware device.	
            </summary>	
            <remarks>	
            This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <returns>The feature level (see <see cref="T:SharpDX.Direct3D10.FeatureLevel"/>). </returns>
            <unmanaged>D3D10_FEATURE_LEVEL1 ID3D10Device1::GetFeatureLevel()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Device1.FeatureLevel">
            <summary>	
            Gets the feature level of the hardware device.	
            </summary>	
            <remarks>	
            This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <unmanaged>D3D10_FEATURE_LEVEL1 ID3D10Device1::GetFeatureLevel()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Effect">
            <summary>	
            An ID3D10Effect interface manages a set of state objects, resources and shaders for implementing a rendering effect.	
            </summary>	
            <unmanaged>ID3D10Effect</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
            <param name="fxFlags">Effect compile options</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D10.EffectPool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
            <param name="fxFlags">Effect compile options</param>
            <param name="effectPool">Optional. A reference to an memory space for effect variables that are shared across effects (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>).</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Effect"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.IsValid_">
            <summary>	
            Test an effect to see if it contains valid syntax.	
            </summary>	
            <returns>TRUE if the code syntax is valid; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10Effect::IsValid()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.IsPool_">
            <summary>	
            Test an effect to see if it is part of a memory pool.	
            </summary>	
            <returns>TRUE if the effect is pooled; otherwise FALSE. See <see cref="T:SharpDX.Direct3D10.EffectPool"/>. </returns>
            <unmanaged>BOOL ID3D10Effect::IsPool()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetDevice(SharpDX.Direct3D10.Device@)">
            <summary>	
            Get the device that created the effect.	
            </summary>	
            <remarks>	
            An effect is created for a specific device, by calling a function such as {{D3DX10CreateEffectFromFile}}. 	
            </remarks>	
            <param name="deviceRef">A reference to an <see cref="T:SharpDX.Direct3D10.Device"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Effect::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetDescription(SharpDX.Direct3D10.EffectDescription@)">
            <summary>	
            Get an effect description.	
            </summary>	
            <remarks>	
            An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires. 	
            </remarks>	
            <param name="descRef">A reference to an effect description (see <see cref="T:SharpDX.Direct3D10.EffectDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Effect::GetDesc([Out] D3D10_EFFECT_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetConstantBufferByIndex(System.Int32)">
            <summary>	
            Get a constant buffer by index.	
            </summary>	
            <remarks>	
            An effect that contains a variable that will be read/written by an application requires at least one constant buffer. For best performance, an effect should organize variables into one or more constant buffers based on their frequency of update. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10Effect::GetConstantBufferByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetConstantBufferByName(System.String)">
            <summary>	
            Get a constant buffer by name.	
            </summary>	
            <remarks>	
            An effect that contains a variable that will be read/written by an application requires at least one constant buffer. For best performance, an effect should organize variables into one or more constant buffers based on their frequency of update. 	
            </remarks>	
            <param name="name">The constant-buffer name. </param>
            <returns>A reference to the constant buffer indicated by the Name. See <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10Effect::GetConstantBufferByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetVariableByIndex(System.Int32)">
            <summary>	
            Get a variable by index.	
            </summary>	
            <remarks>	
            An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a technique are local to that technique. You can access any local non-static effect variable using its name or with an index. The method returns a reference to an {{effect-variable interface}} if a variable is not found; you can call <see cref="M:SharpDX.Direct3D10.Effect.IsValid_"/> to verify whether or not the index exists. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10Effect::GetVariableByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetVariableByName(System.String)">
            <summary>	
            Get a variable by name.	
            </summary>	
            <remarks>	
            An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a technique are local to that technique. You can access an effect variable using its name or with an index. The method returns a reference to an {{effect-variable interface}} if a variable is not found; you can call <see cref="M:SharpDX.Direct3D10.Effect.IsValid_"/> to verify whether or not the name exists. 	
            </remarks>	
            <param name="name">The variable name. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10Effect::GetVariableByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetVariableBySemantic(System.String)">
            <summary>	
            Get a variable by semantic.	
            </summary>	
            <remarks>	
            Each effect variable can have a semantic attached, which is a user defined metadata string. Some {{system-value semantics}} are reserved words that trigger built in functionality by pipeline stages. The method returns a reference to an {{effect-variable interface}} if a variable is not found; you can call <see cref="M:SharpDX.Direct3D10.Effect.IsValid_"/> to verify whether or not the semantic exists. 	
            </remarks>	
            <param name="semantic">The semantic name. </param>
            <returns>A reference to the effect variable indicated by the Semantic. See <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10Effect::GetVariableBySemantic([None] const char* Semantic)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetTechniqueByIndex(System.Int32)">
            <summary>	
            Get a technique by index.	
            </summary>	
            <remarks>	
            An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index.  For more about techniques, see {{techniques and passes}}. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectTechnique"/>. </returns>
            <unmanaged>ID3D10EffectTechnique* ID3D10Effect::GetTechniqueByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.GetTechniqueByName(System.String)">
            <summary>	
            Get a technique by name.	
            </summary>	
            <remarks>	
            An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index. For more about techniques, see {{techniques and passes}}. 	
            </remarks>	
            <param name="name">The name of the technique. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectTechnique"/>, or NULL if the technique is not found. </returns>
            <unmanaged>ID3D10EffectTechnique* ID3D10Effect::GetTechniqueByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.Optimize">
            <summary>	
            Minimize the amount of memory required for an effect.	
            </summary>	
            <remarks>	
            An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata  required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by  calling ID3D10Effect::Optimize which removes the reflection metadata from memory. API methods to read variables will no  longer work once reflection data has been removed. The following methods will fail after Optimize has been called on an effect.   <see cref="M:SharpDX.Direct3D10.Effect.GetConstantBufferByIndex(System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetConstantBufferByName(System.String)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetDescription(SharpDX.Direct3D10.EffectDescription@)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetDevice(SharpDX.Direct3D10.Device@)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetTechniqueByIndex(System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetTechniqueByName(System.String)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetVariableByIndex(System.Int32)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetVariableByName(System.String)"/>   <see cref="M:SharpDX.Direct3D10.Effect.GetVariableBySemantic(System.String)"/>   Note that references retrieved with these methods before calling ID3D10Effect::Optimize are still valid  after ID3D10Effect::Optimize is called.  This allows the application to get all the variables, techniques, and passes it will use,  call Optimize, and then use the effect. 	
            </remarks>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10Effect::Optimize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Effect.IsOptimized_">
            <summary>	
            Test an effect to see if the reflection metadata has been removed from memory.	
            </summary>	
            <remarks>	
            An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by calling <see cref="M:SharpDX.Direct3D10.Effect.Optimize"/> which removes the reflection metadata from memory. Of course, API methods to read variables will no longer work once reflection data has been removed. 	
            </remarks>	
            <returns>TRUE if the effect is optimized; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10Effect::IsOptimized()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Effect.IsValid">
            <summary>	
            Test an effect to see if it contains valid syntax.	
            </summary>	
            <unmanaged>BOOL ID3D10Effect::IsValid()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Effect.IsPool">
            <summary>	
            Test an effect to see if it is part of a memory pool.	
            </summary>	
            <unmanaged>BOOL ID3D10Effect::IsPool()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Effect.Device">
            <summary>	
            Get the device that created the effect.	
            </summary>	
            <remarks>	
            An effect is created for a specific device, by calling a function such as {{D3DX10CreateEffectFromFile}}. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10Effect::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Effect.Description">
            <summary>	
            Get an effect description.	
            </summary>	
            <remarks>	
            An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10Effect::GetDesc([Out] D3D10_EFFECT_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Effect.IsOptimized">
            <summary>	
            Test an effect to see if the reflection metadata has been removed from memory.	
            </summary>	
            <remarks>	
            An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by calling <see cref="M:SharpDX.Direct3D10.Effect.Optimize"/> which removes the reflection metadata from memory. Of course, API methods to read variables will no longer work once reflection data has been removed. 	
            </remarks>	
            <unmanaged>BOOL ID3D10Effect::IsOptimized()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectBlendVariable">
            <summary>	
            The blend-variable interface accesses blend state.	
            </summary>	
            <unmanaged>ID3D10EffectBlendVariable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectVariable">
            <summary>	
            The ID3D10EffectVariable interface is the base class for all effect variables.	
            </summary>	
            <unmanaged>ID3D10EffectVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.SetRawValue(SharpDX.DataStream,System.Int32)">
            <summary>
            Set data.
            </summary>
            <param name="data">A reference to the variable.</param>
            <param name="count">size in bytes of data to write.</param>
            <returns>
            Returns one of the following {{Direct3D 10 Return Codes}}.
            </returns>
            <remarks>
            This method does no conversion or type checking; it is therefore a very quick way to access array items.
            </remarks>
            <unmanaged>HRESULT ID3D10EffectVariable::SetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetRawValue(System.Int32)">
            <summary>	
            Get data.	
            </summary>	
            <remarks>	
            This method does no conversion or type checking; it is therefore a very quick way to access array items. 	
            </remarks>	
            <param name="count">The number of bytes to get. </param>
            <returns>Returns a <see cref="T:SharpDX.DataStream"/> filled with the value. </returns>
            <unmanaged>HRESULT ID3D10EffectVariable::GetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsScalar">
            <summary>	
            Get a scalar variable.	
            </summary>	
            <remarks>	
            AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain scalar data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a scalar variable. See <see cref="T:SharpDX.Direct3D10.EffectScalarVariable"/>. </returns>
            <unmanaged>ID3D10EffectScalarVariable* ID3D10EffectVariable::AsScalar()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsVector">
            <summary>	
            Get a vector variable.	
            </summary>	
            <remarks>	
            AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain vector data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a vector variable. See <see cref="T:SharpDX.Direct3D10.EffectVectorVariable"/>. </returns>
            <unmanaged>ID3D10EffectVectorVariable* ID3D10EffectVariable::AsVector()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsMatrix">
            <summary>	
            Get a matrix variable.	
            </summary>	
            <remarks>	
            AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain matrix data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a matrix variable. See <see cref="T:SharpDX.Direct3D10.EffectMatrixVariable"/>. </returns>
            <unmanaged>ID3D10EffectMatrixVariable* ID3D10EffectVariable::AsMatrix()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsString">
            <summary>	
            Get a string variable.	
            </summary>	
            <remarks>	
            AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain string data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a string variable. See <see cref="T:SharpDX.Direct3D10.EffectStringVariable"/>. </returns>
            <unmanaged>ID3D10EffectStringVariable* ID3D10EffectVariable::AsString()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsShaderResource">
            <summary>	
            Get a shader-resource variable.	
            </summary>	
            <remarks>	
            AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader-resource variable. See <see cref="T:SharpDX.Direct3D10.EffectShaderResourceVariable"/>. </returns>
            <unmanaged>ID3D10EffectShaderResourceVariable* ID3D10EffectVariable::AsShaderResource()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsRenderTargetView">
            <summary>	
            Get a render-target-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a render-target-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a render-target-view variable. See <see cref="T:SharpDX.Direct3D10.EffectRenderTargetViewVariable"/>. </returns>
            <unmanaged>ID3D10EffectRenderTargetViewVariable* ID3D10EffectVariable::AsRenderTargetView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsDepthStencilView">
            <summary>	
            Get a depth-stencil-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil-view variable. See <see cref="T:SharpDX.Direct3D10.EffectDepthStencilViewVariable"/>. </returns>
            <unmanaged>ID3D10EffectDepthStencilViewVariable* ID3D10EffectVariable::AsDepthStencilView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsConstantBuffer">
            <summary>	
            Get a constant buffer.	
            </summary>	
            <remarks>	
            AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a constant buffer. See <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10EffectVariable::AsConstantBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsShader">
            <summary>	
            Get a shader variable.	
            </summary>	
            <remarks>	
            AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader variable. See <see cref="T:SharpDX.Direct3D10.EffectShaderVariable"/>. </returns>
            <unmanaged>ID3D10EffectShaderVariable* ID3D10EffectVariable::AsShader()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsBlend">
            <summary>	
            Get a effect-blend variable.	
            </summary>	
            <remarks>	
            AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to an effect blend variable. See <see cref="T:SharpDX.Direct3D10.EffectBlendVariable"/>. </returns>
            <unmanaged>ID3D10EffectBlendVariable* ID3D10EffectVariable::AsBlend()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsDepthStencil">
            <summary>	
            Get a depth-stencil variable.	
            </summary>	
            <remarks>	
            AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil variable. See <see cref="T:SharpDX.Direct3D10.EffectDepthStencilVariable"/>. </returns>
            <unmanaged>ID3D10EffectDepthStencilVariable* ID3D10EffectVariable::AsDepthStencil()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsRasterizer">
            <summary>	
            Get a rasterizer variable.	
            </summary>	
            <remarks>	
            AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain rasterizer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a rasterizer variable. See <see cref="T:SharpDX.Direct3D10.EffectRasterizerVariable"/>. </returns>
            <unmanaged>ID3D10EffectRasterizerVariable* ID3D10EffectVariable::AsRasterizer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsSampler">
            <summary>	
            Get a sampler variable.	
            </summary>	
            <remarks>	
            AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain sampler data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a sampler variable. See <see cref="T:SharpDX.Direct3D10.EffectSamplerVariable"/>. </returns>
            <unmanaged>ID3D10EffectSamplerVariable* ID3D10EffectVariable::AsSampler()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.IsValid_">
            <summary>	
            Compare the data type with the data stored.	
            </summary>	
            <remarks>	
            This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods). 	
            </remarks>	
            <returns>TRUE if the syntax is valid; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10EffectVariable::IsValid()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetTypeInfo">
            <summary>	
            Get type information.	
            </summary>	
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectType"/>. </returns>
            <unmanaged>ID3D10EffectType* ID3D10EffectVariable::GetType()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetDescription(SharpDX.Direct3D10.EffectVariableDescription@)">
            <summary>	
            Get a description.	
            </summary>	
            <param name="descRef">A reference to an effect-variable description (see <see cref="T:SharpDX.Direct3D10.EffectVariableDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVariable::GetDesc([Out] D3D10_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetAnnotationByIndex(System.Int32)">
            <summary>	
            Get an annotation by index.	
            </summary>	
            <remarks>	
            Annonations can be attached to a technique, a pass or a gloval variable. For the syntax, see {{Annotation Syntax (Direct3D 10)}}. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetAnnotationByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetAnnotationByName(System.String)">
            <summary>	
            Get an annotation by name.	
            </summary>	
            <remarks>	
            Annonations can be attached to a technique, a pass or a gloval variable. For the syntax, see {{Annotation Syntax (Direct3D 10)}}. 	
            </remarks>	
            <param name="name">The annotation name. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>.  Note that if the annotation is not found the ID3D10EffectVariable Interface returned will be empty. The <see cref="M:SharpDX.Direct3D10.EffectVariable.IsValid_"/> method should be called to determine whether the annotation was found. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetAnnotationByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetMemberByIndex(System.Int32)">
            <summary>	
            Get a structure member by index.	
            </summary>	
            <remarks>	
            If the effect variable is an structure, use this method to look up a member by index. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetMemberByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetMemberByName(System.String)">
            <summary>	
            Get a structure member by name.	
            </summary>	
            <remarks>	
            If the effect variable is an structure, use this method to look up a member by name. 	
            </remarks>	
            <param name="name">Member name. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetMemberByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetMemberBySemantic(System.String)">
            <summary>	
            Get a structure member by semantic.	
            </summary>	
            <remarks>	
            If the effect variable is an structure, use this method to look up a member by attached semantic. 	
            </remarks>	
            <param name="semantic">The semantic. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetMemberBySemantic([None] const char* Semantic)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetElement(System.Int32)">
            <summary>	
            Get an array element.	
            </summary>	
            <remarks>	
            If the effect variable is an array, use this method to return one of the elements. 	
            </remarks>	
            <param name="index">A zero-based index; otherwise 0. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectVariable::GetElement([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetParentConstantBuffer">
            <summary>	
            Get a constant buffer.	
            </summary>	
            <remarks>	
            Effect variables are read-from or written-to a constant buffer. 	
            </remarks>	
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10EffectVariable::GetParentConstantBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsScalar_">
            <summary>	
            Get a scalar variable.	
            </summary>	
            <remarks>	
            AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain scalar data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a scalar variable. See <see cref="T:SharpDX.Direct3D10.EffectScalarVariable"/>. </returns>
            <unmanaged>ID3D10EffectScalarVariable* ID3D10EffectVariable::AsScalar()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsVector_">
            <summary>	
            Get a vector variable.	
            </summary>	
            <remarks>	
            AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain vector data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a vector variable. See <see cref="T:SharpDX.Direct3D10.EffectVectorVariable"/>. </returns>
            <unmanaged>ID3D10EffectVectorVariable* ID3D10EffectVariable::AsVector()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsMatrix_">
            <summary>	
            Get a matrix variable.	
            </summary>	
            <remarks>	
            AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain matrix data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a matrix variable. See <see cref="T:SharpDX.Direct3D10.EffectMatrixVariable"/>. </returns>
            <unmanaged>ID3D10EffectMatrixVariable* ID3D10EffectVariable::AsMatrix()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsString_">
            <summary>	
            Get a string variable.	
            </summary>	
            <remarks>	
            AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain string data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a string variable. See <see cref="T:SharpDX.Direct3D10.EffectStringVariable"/>. </returns>
            <unmanaged>ID3D10EffectStringVariable* ID3D10EffectVariable::AsString()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsShaderResource_">
            <summary>	
            Get a shader-resource variable.	
            </summary>	
            <remarks>	
            AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader-resource variable. See <see cref="T:SharpDX.Direct3D10.EffectShaderResourceVariable"/>. </returns>
            <unmanaged>ID3D10EffectShaderResourceVariable* ID3D10EffectVariable::AsShaderResource()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsRenderTargetView_">
            <summary>	
            Get a render-target-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a render-target-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a render-target-view variable. See <see cref="T:SharpDX.Direct3D10.EffectRenderTargetViewVariable"/>. </returns>
            <unmanaged>ID3D10EffectRenderTargetViewVariable* ID3D10EffectVariable::AsRenderTargetView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsDepthStencilView_">
            <summary>	
            Get a depth-stencil-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil-view variable. See <see cref="T:SharpDX.Direct3D10.EffectDepthStencilViewVariable"/>. </returns>
            <unmanaged>ID3D10EffectDepthStencilViewVariable* ID3D10EffectVariable::AsDepthStencilView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsConstantBuffer_">
            <summary>	
            Get a constant buffer.	
            </summary>	
            <remarks>	
            AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a constant buffer. See <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10EffectVariable::AsConstantBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsShader_">
            <summary>	
            Get a shader variable.	
            </summary>	
            <remarks>	
            AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader variable. See <see cref="T:SharpDX.Direct3D10.EffectShaderVariable"/>. </returns>
            <unmanaged>ID3D10EffectShaderVariable* ID3D10EffectVariable::AsShader()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsBlend_">
            <summary>	
            Get a effect-blend variable.	
            </summary>	
            <remarks>	
            AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to an effect blend variable. See <see cref="T:SharpDX.Direct3D10.EffectBlendVariable"/>. </returns>
            <unmanaged>ID3D10EffectBlendVariable* ID3D10EffectVariable::AsBlend()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsDepthStencil_">
            <summary>	
            Get a depth-stencil variable.	
            </summary>	
            <remarks>	
            AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil variable. See <see cref="T:SharpDX.Direct3D10.EffectDepthStencilVariable"/>. </returns>
            <unmanaged>ID3D10EffectDepthStencilVariable* ID3D10EffectVariable::AsDepthStencil()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsRasterizer_">
            <summary>	
            Get a rasterizer variable.	
            </summary>	
            <remarks>	
            AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain rasterizer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a rasterizer variable. See <see cref="T:SharpDX.Direct3D10.EffectRasterizerVariable"/>. </returns>
            <unmanaged>ID3D10EffectRasterizerVariable* ID3D10EffectVariable::AsRasterizer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.AsSampler_">
            <summary>	
            Get a sampler variable.	
            </summary>	
            <remarks>	
            AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain sampler data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a sampler variable. See <see cref="T:SharpDX.Direct3D10.EffectSamplerVariable"/>. </returns>
            <unmanaged>ID3D10EffectSamplerVariable* ID3D10EffectVariable::AsSampler()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.SetRawValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Set data.	
            </summary>	
            <remarks>	
            This method does no conversion or type checking; it is therefore a very quick way to access array items. 	
            </remarks>	
            <param name="dataRef">A reference to the variable. </param>
            <param name="offset">The offset (in bytes) from the beginning of the reference to the data. </param>
            <param name="count">The number of bytes to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVariable::SetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVariable.GetRawValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Get data.	
            </summary>	
            <remarks>	
            This method does no conversion or type checking; it is therefore a very quick way to access array items. 	
            </remarks>	
            <param name="dataRef">A reference to the variable. </param>
            <param name="offset">The offset (in bytes) from the beginning of the reference to the data. </param>
            <param name="count">The number of bytes to get. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVariable::GetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectVariable.IsValid">
            <summary>	
            Compare the data type with the data stored.	
            </summary>	
            <remarks>	
            This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods). 	
            </remarks>	
            <unmanaged>BOOL ID3D10EffectVariable::IsValid()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectVariable.TypeInfo">
            <summary>	
            Get type information.	
            </summary>	
            <unmanaged>ID3D10EffectType* ID3D10EffectVariable::GetType()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectVariable.Description">
            <summary>	
            Get a description.	
            </summary>	
            <unmanaged>HRESULT ID3D10EffectVariable::GetDesc([Out] D3D10_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectVariable.ParentConstantBuffer">
            <summary>	
            Get a constant buffer.	
            </summary>	
            <remarks>	
            Effect variables are read-from or written-to a constant buffer. 	
            </remarks>	
            <unmanaged>ID3D10EffectConstantBuffer* ID3D10EffectVariable::GetParentConstantBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectBlendVariable.GetBlendState">
            <summary>	
            Get a pointer to a blend-state interface.
            </summary>	
            <returns>Returns <see cref="T:SharpDX.Direct3D10.BlendState"/>.</returns>
            <unmanaged>HRESULT ID3D10EffectBlendVariable::GetBlendState([None] int Index,[Out] ID3D10BlendState** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectBlendVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectBlendVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectBlendVariable.GetBlendState(System.Int32)">
            <summary>	
            Get a reference to a blend-state interface.	
            </summary>	
            <param name="index">Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0. </param>
            <returns>The address of a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.BlendState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectBlendVariable::GetBlendState([None] int Index,[Out] ID3D10BlendState** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectBlendVariable.GetBackingStore(System.Int32,SharpDX.Direct3D10.BlendStateDescription@)">
            <summary>	
            Get a reference to a blend-state variable.	
            </summary>	
            <remarks>	
            Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device. Backing store data can used to recreate the variable when necessary. 	
            </remarks>	
            <param name="index">Index into an array of blend-state descriptions. If there is only one blend-state variable in the effect, use 0. </param>
            <param name="blendDescRef">A reference to a blend-state description (see <see cref="T:SharpDX.Direct3D10.BlendStateDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectBlendVariable::GetBackingStore([None] int Index,[Out] D3D10_BLEND_DESC* pBlendDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectDepthStencilVariable">
            <summary>	
            A depth-stencil-variable interface accesses depth-stencil state.	
            </summary>	
            <unmanaged>ID3D10EffectDepthStencilVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilVariable.GetDepthStencilState">
            <summary>	
            Get a pointer to a depth-stencil interface.	
            </summary>	
            <returns>Returns a pointer to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilVariable::GetDepthStencilState([None] int Index,[Out] ID3D10DepthStencilState** ppDepthStencilState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectDepthStencilVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilVariable.GetDepthStencilState(System.Int32)">
            <summary>	
            Get a reference to a depth-stencil interface.	
            </summary>	
            <param name="index">Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0. </param>
            <returns>The address of a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D10.DepthStencilState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilVariable::GetDepthStencilState([None] int Index,[Out] ID3D10DepthStencilState** ppDepthStencilState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilVariable.GetBackingStore(System.Int32)">
            <summary>	
            Get a reference to a variable that contains depth-stencil state.	
            </summary>	
            <remarks>	
            Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device. Backing store data can used to recreate the variable when necessary. 	
            </remarks>	
            <param name="index">Index into an array of depth-stencil-state descriptions. If there is only one depth-stencil variable in the effect, use 0. </param>
            <returns>A reference to a depth-stencil-state description (see <see cref="T:SharpDX.Direct3D10.DepthStencilStateDescription"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilVariable::GetBackingStore([None] int Index,[Out] D3D10_DEPTH_STENCIL_DESC* pDepthStencilDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectDepthStencilViewVariable">
            <summary>	
            A depth-stencil-view-variable interface accesses a depth-stencil view.	
            </summary>	
            <unmanaged>ID3D10EffectDepthStencilViewVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D10.DepthStencilView[])">
            <summary>	
            Set an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef"> A pointer to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D10.DepthStencilView[],System.Int32)">
            <summary>	
            Set an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef"> A pointer to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </param>
            <param name="offset"> The zero-based array index to set the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.GetDepthStencilArray(System.Int32)">
            <summary>	
            Get an array of depth-stencil-view resources.	
            </summary>	
            <param name="count"> The number of elements in the array. </param>
            <returns>Returns an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.GetDepthStencilArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of depth-stencil-view resources.	
            </summary>	
            <param name="offset"> The zero-based array index to get the first interface. </param>
            <param name="count"> The number of elements in the array. </param>
            <returns>Returns an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectDepthStencilViewVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.SetDepthStencil(SharpDX.Direct3D10.DepthStencilView)">
            <summary>	
            Set a depth-stencil-view resource.	
            </summary>	
            <param name="resourceRef">A reference to a depth-stencil-view interface. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencil([None] ID3D10DepthStencilView* pResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.GetDepthStencil">
            <summary>	
            Get a depth-stencil-view resource.	
            </summary>	
            <returns>The address of a reference to a depth-stencil-view interface. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencil([None] ID3D10DepthStencilView** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D10.DepthStencilView[],System.Int32,System.Int32)">
            <summary>	
            Set an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef">A reference to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </param>
            <param name="offset">The zero-based array index to set the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectDepthStencilViewVariable.GetDepthStencilArray(SharpDX.Direct3D10.DepthStencilView[],System.Int32,System.Int32)">
            <summary>	
            Get an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef">A reference to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D10.DepthStencilView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectMatrixVariable">
            <summary>	
            A matrix-variable interface accesses a matrix.	
            </summary>	
            <unmanaged>ID3D10EffectMatrixVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrix(SharpDX.Matrix)">
            <summary>	
            Set a floating-point matrix.	
            </summary>	
            <param name="dataRef"> A pointer to the first element in the matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrix([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrix(SharpDX.Matrix[])">
            <summary>	
            Set an array of floating-point matrices.	
            </summary>	
            <param name="matrixArray"> A pointer to the first matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrix(SharpDX.Matrix[],System.Int32)">
            <summary>	
            Set an array of floating-point matrices.	
            </summary>	
            <param name="matrixArray"> A pointer to the first matrix. </param>
            <param name="offset"> The number of matrix elements to skip from the start of the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixArray(System.Int32)">
            <summary>	
            Get an array of matrices.	
            </summary>	
            <param name="count"> The number of matrices in the returned array. </param>
            <returns>Returns an array of matrix. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of matrices.	
            </summary>	
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix returned. </param>
            <param name="count"> The number of matrices in the returned array. </param>
            <returns>Returns an array of matrix. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixTranspose(SharpDX.Matrix)">
            <summary>	
            Transpose and set a floating-point matrix.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrix"> A pointer to the first element of a matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixTranspose([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixTranspose(SharpDX.Matrix[])">
            <summary>	
            Transpose and set an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrixArray"> A pointer to an array of matrices. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixTransposeArray([In] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixTranspose(SharpDX.Matrix[],System.Int32)">
            <summary>	
            Transpose and set an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrixArray"> A pointer to an array of matrices. </param>
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixTransposeArray([In] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixTransposeArray(System.Int32)">
            <summary>	
            Transpose and get an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="count"> The number of matrices in the array to get. </param>
            <returns>Returns an array of transposed <see cref="T:SharpDX.Matrix"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixTransposeArray(System.Int32,System.Int32)">
            <summary>	
            Transpose and get an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix to get. </param>
            <param name="count"> The number of matrices in the array to get. </param>
            <returns>Returns an array of transposed <see cref="T:SharpDX.Matrix"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectMatrixVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrix(SharpDX.Matrix@)">
            <summary>	
            Set a floating-point matrix.	
            </summary>	
            <param name="dataRef">A reference to the first element in the matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrix([In] SHARPDX_MATRIX* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrix">
            <summary>	
            Get a matrix.	
            </summary>	
            <returns>A reference to the first element in a matrix. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixArray(SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>	
            Set an array of floating-point matrices.	
            </summary>	
            <param name="dataRef">A reference to the first matrix. </param>
            <param name="offset">The number of matrix elements to skip from the start of the array. </param>
            <param name="count">The number of elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixArray([In, Buffer] SHARPDX_MATRIX* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixArray(SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>	
            Get an array of matrices.	
            </summary>	
            <param name="dataRef">A reference to the first element of the first matrix in an array of matrices. </param>
            <param name="offset">The offset (in number of matrices) between the start of the array and the first matrix returned. </param>
            <param name="count">The number of matrices in the returned array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixArray([Out, Buffer] SHARPDX_MATRIX* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixTranspose(SharpDX.Matrix@)">
            <summary>	
            Transpose and set a floating-point matrix.	
            </summary>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="dataRef">A reference to the first element of a matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixTranspose([In] SHARPDX_MATRIX* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixTranspose">
            <summary>	
            Transpose and get a floating-point matrix.	
            </summary>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <returns>A reference to the first element of a transposed matrix. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.SetMatrixTransposeArray(SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>	
            Transpose and set an array of floating-point matrices.	
            </summary>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="dataRef">A reference to an array of matrices. </param>
            <param name="offset">The offset (in number of matrices) between the start of the array and the first matrix to set. </param>
            <param name="count">The number of matrices in the array to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::SetMatrixTransposeArray([In, Buffer] SHARPDX_MATRIX* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectMatrixVariable.GetMatrixTransposeArray(SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>	
            Transpose and get an array of floating-point matrices.	
            </summary>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="dataRef">A reference to the first element of an array of tranposed matrices. </param>
            <param name="offset">The offset (in number of matrices) between the start of the array and the first matrix to get. </param>
            <param name="count">The number of matrices in the array to get. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] SHARPDX_MATRIX* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectPass">
            <summary>	
            A pass interface encapsulates state assignments within a technique.	
            </summary>	
            <unmanaged>ID3D10EffectPass</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.Apply">
            <summary>	
            Set the state contained in a pass to the device.	
            </summary>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
            <unmanaged>HRESULT Apply([None] UINT Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectPass"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.IsValid_">
            <summary>	
            Test a pass to see if it contains valid syntax.	
            </summary>	
            <returns>TRUE if the code syntax is valid; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10EffectPass::IsValid()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetDescription(SharpDX.Direct3D10.EffectPassDescription@)">
            <summary>	
            Get a pass description.	
            </summary>	
            <remarks>	
            A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures). An effect technique contains one or more passes. See {{techniques and passes}}. 	
            </remarks>	
            <param name="descRef">A reference to a pass description (see <see cref="T:SharpDX.Direct3D10.EffectPassDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::GetDesc([Out] D3D10_PASS_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetVertexShaderDescription(SharpDX.Direct3D10.EffectPassShaderDescription@)">
            <summary>	
            Get a vertex-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <param name="descRef">A reference to a vertex-shader description (see <see cref="T:SharpDX.Direct3D10.EffectPassShaderDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::GetVertexShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetGeometryShaderDescription(SharpDX.Direct3D10.EffectPassShaderDescription@)">
            <summary>	
            Get a geometry-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <param name="descRef">A reference to a geometry-shader description (see <see cref="T:SharpDX.Direct3D10.EffectPassShaderDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::GetGeometryShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetPixelShaderDescription(SharpDX.Direct3D10.EffectPassShaderDescription@)">
            <summary>	
            Get a pixel-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <param name="descRef">A reference to a pixel-shader description (see <see cref="T:SharpDX.Direct3D10.EffectPassShaderDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::GetPixelShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetAnnotationByIndex(System.Int32)">
            <summary>	
            Get an annotation by index.	
            </summary>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectPass::GetAnnotationByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.GetAnnotationByName(System.String)">
            <summary>	
            Get an annotation by name.	
            </summary>	
            <param name="name">The name of the annotation. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectPass::GetAnnotationByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.Apply(System.Int32)">
            <summary>	
            Set the state contained in a pass to the device.	
            </summary>	
            <param name="flags">Unused. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::Apply([None] int Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPass.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Generate a mask for allowing/preventing state changes.	
            </summary>	
            <param name="stateBlockMaskRef">A reference to a state-block mask (see <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectPass::ComputeStateBlockMask([None] D3D10_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPass.IsValid">
            <summary>	
            Test a pass to see if it contains valid syntax.	
            </summary>	
            <unmanaged>BOOL ID3D10EffectPass::IsValid()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPass.Description">
            <summary>	
            Get a pass description.	
            </summary>	
            <remarks>	
            A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures). An effect technique contains one or more passes. See {{techniques and passes}}. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10EffectPass::GetDesc([Out] D3D10_PASS_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPass.VertexShaderDescription">
            <summary>	
            Get a vertex-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10EffectPass::GetVertexShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPass.GeometryShaderDescription">
            <summary>	
            Get a geometry-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10EffectPass::GetGeometryShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPass.PixelShaderDescription">
            <summary>	
            Get a pixel-shader description.	
            </summary>	
            <remarks>	
            An effect pass can contain render state assignments and shader object assignments. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10EffectPass::GetPixelShaderDesc([Out] D3D10_PASS_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectPassDescription">
            <summary>	
            Describes an effect pass, which contains pipeline state.	
            </summary>	
            <remarks>	
            Get a pass description by calling <see cref="M:SharpDX.Direct3D10.EffectPass.GetDescription(SharpDX.Direct3D10.EffectPassDescription@)"/>; an effect technique contains one or more passes. 	
            </remarks>	
            <unmanaged>D3D10_PASS_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.Name">
            <summary>	
            A string that contains the name of the pass; otherwise NULL. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.AnnotationCount">
            <summary>	
            The number of annotations. 	
            </summary>	
            <unmanaged>int Annotations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.PIAInputSignature">
            <summary>	
            A reference to the input signature or the vertex shader; otherwise NULL. 	
            </summary>	
            <unmanaged>byte* pIAInputSignature</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.IAInputSignatureSize">
            <summary>	
            The size of the input signature (in bytes). 	
            </summary>	
            <unmanaged>SIZE_T IAInputSignatureSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.StencilReference">
            <summary>	
            The stencil-reference value used in the depth-stencil state (see {{Configuring Depth-Stencil Functionality (Direct3D 10)}}). 	
            </summary>	
            <unmanaged>int StencilRef</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.SampleMask">
            <summary>	
            The sample mask for the blend state (see {{Configuring Blending Functionality (Direct3D 10)}}). 	
            </summary>	
            <unmanaged>int SampleMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassDescription.BlendFactor">
            <summary>	
            The per-component blend factors (RGBA) for the blend state (see {{Configuring Blending Functionality (Direct3D 10)}}). 	
            </summary>	
            <unmanaged>SHARPDX_COLOR4 BlendFactor</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPassDescription.Signature">
            <summary>
            Returns the signature of this Effect pass.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectPassShaderDescription">
            <summary>	
            Describes an effect variable that contains a shader.	
            </summary>	
            <remarks>	
            To get a shader description, call a method like <see cref="M:SharpDX.Direct3D10.EffectPass.GetVertexShaderDescription(SharpDX.Direct3D10.EffectPassShaderDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_PASS_SHADER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassShaderDescription.VariablePointer">
            <summary>	
            A reference to the variable that the shader came from. If it is an inline shader assignment, the returned interface will be an anonymous shader variable, which is not retrievable any other way.  Its name in the variable description will be "$Anonymous". If there is no assignment of this type in the pass block, this will point to a shader variable that returns false when IsValid is called. 	
            </summary>	
            <unmanaged>ID3D10EffectShaderVariable* pShaderVariable</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectPassShaderDescription.Index">
            <summary>	
            A zero-based array index; otherwise 0. 	
            </summary>	
            <unmanaged>int ShaderIndex</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectPassShaderDescription.Variable">
            <summary>	
            A reference to the variable that the shader came from. If it is an inline shader assignment, the returned interface will be an anonymous shader variable, which is not retrievable any other way.  Its name in the variable description will be "$Anonymous". If there is no assignment of this type in the pass block, this will point to a shader variable that returns false when IsValid is called. 	
            </summary>	
            <unmanaged>ID3D10EffectShaderVariable* pShaderVariable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectPool">
            <summary>	
            A pool interface represents a common memory space (or pool) for sharing variables between effects.	
            </summary>	
            <unmanaged>ID3D10EffectPool</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPool.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectPool"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPool.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectPool"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
            <param name="fxFlags">Effect compile options</param>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPool.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectPool"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectPool.AsEffect">
            <summary>	
            Get the effect that created the effect pool.	
            </summary>	
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.Effect"/> interface. </returns>
            <unmanaged>ID3D10Effect* ID3D10EffectPool::AsEffect()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectRasterizerVariable">
            <summary>	
            A rasterizer-variable interface accesses rasterizer state.	
            </summary>	
            <unmanaged>ID3D10EffectRasterizerVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRasterizerVariable.GetRasterizerState">
            <summary>	
            Get a pointer to a rasterizer interface.	
            </summary>	
            <returns>Returns a pointer to a rasterizer interface (see <see cref="T:SharpDX.Direct3D10.RasterizerState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectRasterizerVariable::GetRasterizerState([None] int Index,[Out] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRasterizerVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectRasterizerVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRasterizerVariable.GetRasterizerState(System.Int32)">
            <summary>	
            Get a reference to a rasterizer interface.	
            </summary>	
            <param name="index">Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </param>
            <returns>The address of a reference to a rasterizer interface (see <see cref="T:SharpDX.Direct3D10.RasterizerState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectRasterizerVariable::GetRasterizerState([None] int Index,[Out] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRasterizerVariable.GetBackingStore(System.Int32,SharpDX.Direct3D10.RasterizerStateDescription@)">
            <summary>	
            Get a reference to a variable that contains rasteriser state.	
            </summary>	
            <remarks>	
            Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device. Backing store data can used to recreate the variable when necessary. 	
            </remarks>	
            <param name="index">Index into an array of rasteriser-state descriptions. If there is only one rasteriser variable in the effect, use 0. </param>
            <param name="rasterizerDescRef">A reference to a rasteriser-state description (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRasterizerVariable::GetBackingStore([None] int Index,[Out] D3D10_RASTERIZER_DESC* pRasterizerDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectRenderTargetViewVariable">
            <summary>	
            A render-target-view interface accesses a render target.	
            </summary>	
            <unmanaged>ID3D10EffectRenderTargetViewVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D10.RenderTargetView[])">
            <summary>	
            Set an array of render-targets.	
            </summary>	
            <param name="resourcesRef">Set an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D10.RenderTargetView[],System.Int32)">
            <summary>	
            Set an array of render-targets.	
            </summary>	
            <param name="resourcesRef">Set an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </param>
            <param name="offset">The zero-based array index to store the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.GetRenderTargetArray(System.Int32)">
            <summary>	
            Get an array of render-targets.	
            </summary>	
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.GetRenderTargetArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of render-targets.	
            </summary>	
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectRenderTargetViewVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.SetRenderTarget(SharpDX.Direct3D10.RenderTargetView)">
            <summary>	
            Set a render-target.	
            </summary>	
            <param name="resourceRef">A reference to a render-target-view interface. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTarget([None] ID3D10RenderTargetView* pResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.GetRenderTarget">
            <summary>	
            Get a render-target.	
            </summary>	
            <returns>The address of a reference to a render-target-view interface. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTarget([Out] ID3D10RenderTargetView** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D10.RenderTargetView[],System.Int32,System.Int32)">
            <summary>	
            Set an array of render-targets.	
            </summary>	
            <param name="resourcesRef">Set an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </param>
            <param name="offset">The zero-based array index to store the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectRenderTargetViewVariable.GetRenderTargetArray(SharpDX.Direct3D10.RenderTargetView[],System.Int32,System.Int32)">
            <summary>	
            Get an array of render-targets.	
            </summary>	
            <param name="resourcesRef">A reference to an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D10.RenderTargetView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectSamplerVariable">
            <summary>	
            A sampler interface accesses sampler state.	
            </summary>	
            <unmanaged>ID3D10EffectSamplerVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectSamplerVariable.GetSampler">
            <summary>	
            Get a reference to a sampler interface.	
            </summary>	
            <returns>Returns a reference to a sampler interface (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>).  </returns>
            <unmanaged>HRESULT ID3D10EffectSamplerVariable::GetSampler([None] int Index,[Out] ID3D10SamplerState** ppSampler)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectSamplerVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectSamplerVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectSamplerVariable.GetSampler(System.Int32)">
            <summary>	
            Get a reference to a sampler interface.	
            </summary>	
            <param name="index">Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </param>
            <returns>The address of a reference to a sampler interface (see <see cref="T:SharpDX.Direct3D10.SamplerState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectSamplerVariable::GetSampler([None] int Index,[Out] ID3D10SamplerState** ppSampler)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectSamplerVariable.GetBackingStore(System.Int32,SharpDX.Direct3D10.SamplerStateDescription@)">
            <summary>	
            Get a reference to a variable that contains sampler state.	
            </summary>	
            <param name="index">Index into an array of sampler descriptions. If there is only one sampler variable in the effect, use 0. </param>
            <param name="samplerDescRef">A reference to a sampler description (see <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectSamplerVariable::GetBackingStore([None] int Index,[Out] D3D10_SAMPLER_DESC* pSamplerDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectShaderDescription">
            <summary>	
            Describes an effect shader.	
            </summary>	
            <remarks>	
            To get an effect-shader description, call <see cref="M:SharpDX.Direct3D10.EffectShaderVariable.GetShaderDescription(System.Int32)"/>. 	
            </remarks>	
            <unmanaged>D3D10_EFFECT_SHADER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.InputSignaturePointer">
            <summary>	
            Passed into CreateInputLayout. Only valid on a vertex shader or geometry shader. See {{ID3D10Device_CreateInputLayout}}. 	
            </summary>	
            <unmanaged>const byte* pInputSignature</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.BytecodePointer">
            <summary>	
            A reference to the compiled shader. 	
            </summary>	
            <unmanaged>const byte* pBytecode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.BytecodeLength">
            <summary>	
            The length of pBytecode. 	
            </summary>	
            <unmanaged>int BytecodeLength</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.StreamOutputDeclaration">
            <summary>	
            A string that constains a declaration of the {{stream output}} from a geometry shader. 	
            </summary>	
            <unmanaged>const char* SODecl</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.InputParameterCount">
            <summary>	
            The number of entries in the input signature. 	
            </summary>	
            <unmanaged>int NumInputSignatureEntries</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectShaderDescription.OutputParameterCount">
            <summary>	
            The number of entries in the output signature. 	
            </summary>	
            <unmanaged>int NumOutputSignatureEntries</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectShaderDescription.Signature">
            <summary>
            Gets the signature passed into InputLayout. Only valid on a vertex shader or geometry shader.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectShaderDescription.Bytecode">
            <summary>
            Gets the bytecode from the compiled shader.
            </summary>
            <value>The bytecode.</value>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectShaderDescription.IsInline">
            <summary>	
            TRUE is the shader is defined inline; otherwise FALSE. 	
            </summary>	
            <unmanaged>BOOL IsInline</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectShaderResourceVariable">
            <summary>	
            A shader-resource interface accesses a shader resource.	
            </summary>	
            <unmanaged>ID3D10EffectShaderResourceVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D10.ShaderResourceView[])">
            <summary>	
            Set an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResourceArray([None] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D10.ShaderResourceView[],System.Int32)">
            <summary>	
            Set an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResourceArray([None] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.GetResourceArray(System.Int32)">
            <summary>	
            Get an array of shader resources.	
            </summary>	
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResourceArray([Out] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.GetResourceArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of shader resources.	
            </summary>	
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResourceArray([Out] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectShaderResourceVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.SetResource(SharpDX.Direct3D10.ShaderResourceView)">
            <summary>	
            Set a shader resource.	
            </summary>	
            <param name="resourceRef">The address of a reference to a shader-resource-view interface. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResource([None] ID3D10ShaderResourceView* pResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.GetResource">
            <summary>	
            Get a shader resource.	
            </summary>	
            <returns>The address of a reference to a shader-resource-view interface. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResource([Out] ID3D10ShaderResourceView** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D10.ShaderResourceView[],System.Int32,System.Int32)">
            <summary>	
            Set an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderResourceVariable.GetResourceArray(SharpDX.Direct3D10.ShaderResourceView[],System.Int32,System.Int32)">
            <summary>	
            Get an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResourceArray([Out, Buffer] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectScalarVariable">
            <summary>	
            An effect-scalar-variable interface accesses scalar values.	
            </summary>	
            <unmanaged>ID3D10EffectScalarVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Single)">
            <summary>	
            Set a floating-point variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloat([None] float Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Single[])">
            <summary>	
            Set an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloatArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Single[],System.Int32)">
            <summary>	
            Set an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloatArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetFloatArray(System.Int32)">
            <summary>	
            Get an array of floating-point variables.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of floats. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetFloatArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of floating-point variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of floats. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Int32)">
            <summary>	
            Set an integer variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetInt([None] int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Int32[])">
            <summary>	
            Set an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Int32[],System.Int32)">
            <summary>	
            Set an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetIntArray(System.Int32)">
            <summary>	
            Get an array of integer variables.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of integer variables. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetIntArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of integer variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of integer variables. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Boolean)">
            <summary>	
            Set a boolean variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBool([None] BOOL Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetBool">
            <summary>	
            Get a boolean variable.	
            </summary>	
            <returns>Returns a boolean. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Boolean[])">
            <summary>	
            Set an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBoolArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.Set(System.Boolean[],System.Int32)">
            <summary>	
            Set an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBoolArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetBoolArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of boolean variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectScalarVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetFloat(System.Single)">
            <summary>	
            Set a floating-point variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloat([None] float Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetFloat">
            <summary>	
            Get a floating-point variable.	
            </summary>	
            <returns>A reference to the variable. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloat([Out] float* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetFloatArray(System.Single[],System.Int32,System.Int32)">
            <summary>	
            Set an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloatArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetFloatArray(System.Single[],System.Int32,System.Int32)">
            <summary>	
            Get an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetInt(System.Int32)">
            <summary>	
            Set an integer variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetInt([None] int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetInt">
            <summary>	
            Get an integer variable.	
            </summary>	
            <returns>A reference to the variable. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetInt([Out] int* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetIntArray(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Set an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetIntArray(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Get an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetBool(System.Boolean)">
            <summary>	
            Set a boolean variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBool([None] BOOL Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetBool(System.Int32@)">
            <summary>	
            Get a boolean variable.	
            </summary>	
            <param name="valueRef">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.SetBoolArray(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Set an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBoolArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectScalarVariable.GetBoolArray(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Get an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectStringVariable">
            <summary>	
            A string-variable interface accesses a string variable.	
            </summary>	
            <unmanaged>ID3D10EffectStringVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.GetString">
            <summary>	
            Get the string.	
            </summary>	
            <returns>Returns a reference to the string.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetString([Out] const char** ppString)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.GetStringArray(System.Int32)">
            <summary>	
            Get an array of strings.	
            </summary>	
            <param name="count">The number of strings in the returned array. </param>
            <returns>Returns a reference to the first string in the array.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.GetStringArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of strings.	
            </summary>	
            <param name="offset">The offset (in number of strings) between the start of the array and the first string to get. </param>
            <param name="count">The number of strings in the returned array. </param>
            <returns>Returns a reference to the first string in the array.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectStringVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.GetString(System.IntPtr@)">
            <summary>	
            Get the string.	
            </summary>	
            <param name="stringRef">A reference to the string. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetString([Out] const void** ppString)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectStringVariable.GetStringArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Get an array of strings.	
            </summary>	
            <param name="stringsRef">A reference to the first string in the array. </param>
            <param name="offset">The offset (in number of strings) between the start of the array and the first string to get. </param>
            <param name="count">The number of strings in the returned array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetStringArray([Out, Buffer] const void** ppStrings,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectVectorVariable">
            <summary>	
            A vector-variable interface accesses a four-component vector.	
            </summary>	
            <unmanaged>ID3D10EffectVectorVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetIntVector">
            <summary>	
            Get a four-component vector that contains integer data.	
            </summary>	
            <returns>Returns a four-component vector that contains integer data </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetIntVector([Out] int* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetFloatVector">
            <summary>	
            Get a four-component vector that contains floating-point data.	
            </summary>	
            <returns>Returns a four-component vector that contains floating-point data.</returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetFloatVector([Out] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetBoolVector">
            <summary>	
            Get a four-component vector that contains boolean data.	
            </summary>	
            <returns>a four-component vector that contains boolean data. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetBoolVector([Out, Buffer] BOOL* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Int4[])">
            <summary>	
            Set an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetIntVectorArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Vector4[])">
            <summary>	
            Set an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVectorArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Vector2)">
            <summary>	
            Set a two-component vector that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Vector3)">
            <summary>	
            Set a three-component vector that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Color4)">
            <summary>	
            Set a four-component color that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Color4[])">
            <summary>	
            Set an array of four-component color that contain floating-point data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVectorArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(System.Boolean[])">
            <summary>	
            Set an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetBoolVectorArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetIntVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of four-component vectors that contain integer data. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetIntVectorArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetFloatVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of four-component vectors that contain floating-point data. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetFloatVectorArray([None] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetBoolVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>an array of four-component vectors that contain boolean data.	 </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetBoolVectorArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectVectorVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(System.Int32[])">
            <summary>	
            Set a four-component vector that contains boolean data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetBoolVector([In, Buffer] BOOL* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Int4)">
            <summary>	
            Set a four-component vector that contains integer data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetIntVector([In] SHARPDX_INT4* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Vector4)">
            <summary>	
            Set a four-component vector that contains floating-point data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVector([In] SHARPDX_VECTOR4* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetBoolVector(System.Int32[])">
            <summary>	
            Get a four-component vector that contains boolean data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetBoolVector([Out, Buffer] BOOL* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetIntVector(SharpDX.Int4@)">
            <summary>	
            Get a four-component vector that contains integer data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetIntVector([Out] SHARPDX_INT4* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetFloatVector(SharpDX.Vector4@)">
            <summary>	
            Get a four-component vector that contains floating-point data.	
            </summary>	
            <param name="dataRef">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetFloatVector([Out] SHARPDX_VECTOR4* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Set an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetBoolVectorArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Int4[],System.Int32,System.Int32)">
            <summary>	
            Set an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetIntVectorArray([In, Buffer] SHARPDX_INT4* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.Set(SharpDX.Vector4[],System.Int32,System.Int32)">
            <summary>	
            Set an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::SetFloatVectorArray([In, Buffer] SHARPDX_VECTOR4* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetBoolVectorArray(System.Int32[],System.Int32,System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetBoolVectorArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetIntVectorArray(SharpDX.Int4[],System.Int32,System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetIntVectorArray([Out, Buffer] SHARPDX_INT4* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectVectorVariable.GetFloatVectorArray(SharpDX.Vector4[],System.Int32,System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectVectorVariable::GetFloatVectorArray([Out, Buffer] SHARPDX_VECTOR4* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Font">
            <summary>	
            The ID3DX10Font interface encapsulates the textures and resources needed to render a specific font on a specific device.	
            </summary>	
            <unmanaged>ID3DX10Font</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.FontDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Font"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="fontDescription">The font description.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.#ctor(SharpDX.Direct3D10.Device,System.Int32,System.Int32,SharpDX.Direct3D10.FontWeight,System.Int32,System.Boolean,SharpDX.Direct3D10.FontCharacterSet,SharpDX.Direct3D10.FontPrecision,SharpDX.Direct3D10.FontQuality,SharpDX.Direct3D10.FontPitchAndFamily,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Font"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="weight">The weight.</param>
            <param name="mipLevels">The mip levels.</param>
            <param name="isItalic">if set to <c>true</c> [is italic].</param>
            <param name="characterSet">The character set.</param>
            <param name="precision">The precision.</param>
            <param name="quality">The quality.</param>
            <param name="pitchAndFamily">The pitch and family.</param>
            <param name="faceName">Name of the face.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.PreloadText(System.String)">
            <summary>	
            Load formatted text into video memory to improve the efficiency of rendering to the device. This method supports ANSI and Unicode strings.	
            </summary>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to PreloadTextW. Otherwise, the function call resolves to PreloadTextA because ANSI strings are being used. This method generates textures that contain glyphs that represent the input text. The glyphs are drawn as a series of triangles. Text will not be rendered to the device; ID3DX10Font::DrawText must still be called to render the text. However, by preloading text into video memory, ID3DX10Font::DrawText will use substantially fewer CPU resources. This method internally converts characters to glyphs using the GDI function {{GetCharacterPlacement}}. 	
            </remarks>	
            <param name="stringRef">Pointer to a string of characters to be loaded into video memory. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR; otherwise, the data type resolves to LPCSTR. See Remarks. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::PreloadTextW([None] const wchar_t* pString,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.DrawText(SharpDX.Direct3D10.Sprite,System.String,SharpDX.Rectangle,SharpDX.Direct3D10.FontDrawFlags,SharpDX.Color4)">
            <summary>	
            Draw formatted text. This method supports ANSI and Unicode strings.	
            </summary>	
            <remarks>	
            The parameters of this method are very similar to those of the {{GDI DrawText}} function. This method supports both ANSI and Unicode strings. Unless the DT_NOCLIP format is used, this method clips the text so that it does not appear outside the specified rectangle. All formatting is assumed to have multiple lines unless the DT_SINGLELINE format is specified. If the selected font is too large for the rectangle, this method does not attempt to substitute a smaller font. This method supports only fonts whose escapement and orientation are both zero. 	
            </remarks>	
            <param name="sprite">Reference to an ID3DX10Sprite object that contains the string you wish to draw. Can be NULL, in which case Direct3D will render the string with its own sprite object. To improve efficiency, a sprite object should be specified if ID3DX10Font::DrawText is to be called more than once in a row. </param>
            <param name="text">Pointer to a string to draw. If UNICODE is defined, this parameter type resolves to an LPCWSTR, otherwise, the type resolves to an LPCSTR. If the Count parameter is -1, the string must be NULL terminated. </param>
            <param name="rect">Pointer to a <see cref="T:SharpDX.Rectangle"/> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted. As with any RECT object, the coordinate value of the rectangle's right side must be greater than that of its left side. Likewise, the coordinate value of the bottom must be greater than that of the top. </param>
            <param name="drawFlags">Specify the method of formatting the text. It can be any combination of the following values:    ItemDescription  DT_BOTTOM  Justify the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.   DT_CALCRECT  Tell DrawText to automatically calculate the width and height of the rectangle based on the length of the string you tell it to draw. If there are multiple lines of text, ID3DX10Font::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DX10Font::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DX10Font::DrawText returns the height of the formatted text but does not draw the text.   DT_CENTER  Center text horizontally in the rectangle.   DT_EXPANDTABS  Expand tab characters. The default number of characters per tab is eight.   DT_LEFT  Align text to the left.   DT_NOCLIP  Draw without clipping. ID3DX10Font::DrawText is somewhat faster when DT_NOCLIP is used.   DT_RIGHT  Align text to the right.   DT_RTLREADING  Display text in right-to-left reading order for bidirectional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.   DT_SINGLELINE  Display text on a single line only. Carriage returns and line feeds do not break the line.   DT_TOP  Top-justify text.   DT_VCENTER  Center text vertically (single line only).   DT_WORDBREAK  Break words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.   ? </param>
            <param name="color">Color of the text. See <see cref="T:SharpDX.Color4"/>. </param>
            <returns>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from pRect (top to the bottom) of the drawn text. If the function fails, the return value is zero. </returns>
            <unmanaged>int ID3DX10Font::DrawTextW([None] LPD3DX10SPRITE pSprite,[None] const wchar_t* pString,[None] int Count,[None] RECT* pRect,[None] int Format,[None] D3DXCOLOR Color)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.Measure(SharpDX.Direct3D10.Sprite,System.String,SharpDX.Rectangle,SharpDX.Direct3D10.FontDrawFlags)">
            <summary>
            Measures the specified sprite.
            </summary>
            <param name="sprite">Reference to an ID3DX10Sprite object that contains the string you wish to draw. Can be NULL, in which case Direct3D will render the string with its own sprite object. To improve efficiency, a sprite object should be specified if ID3DX10Font::DrawText is to be called more than once in a row. </param>
            <param name="text">A string to measure. </param>
            <param name="rect">A <see cref="T:SharpDX.Rectangle"/> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted. As with any RECT object, the coordinate value of the rectangle's right side must be greater than that of its left side. Likewise, the coordinate value of the bottom must be greater than that of the top.</param>
            <param name="drawFlags">Specify the method of formatting the text.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Font"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Font.GetDevice(SharpDX.Direct3D10.Device@)">
            <summary>	
            Retrieve the Direct3D device associated with the font object.	
            </summary>	
            <remarks>	
            Note??Calling this method will increase the internal reference count on the ID3D10Device interface. Be sure to call IUnknown when you are done using this ID3D10Device interface or you will have a memory leak. 	
            </remarks>	
            <param name="deviceRef">Address of a reference to an ID3D10Device interface, representing the Direct3D device object associated with the font object. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.GetDescription(SharpDX.Direct3D10.FontDescription@)">
            <summary>	
            Get a description of the current font object.	
            </summary>	
            <remarks>	
            This method describes Unicode font objects if UNICODE is defined. Otherwise GetDescA is called, which returns a reference to the D3DX10FONT_DESCA structure. 	
            </remarks>	
            <param name="descRef">Pointer to a {{D3DX10_FONT_DESC}} structure that describes the font object. If UNICODE is defined, a reference to a D3DX10FONT_DESCW is returned; otherwise a reference to a D3DX10FONT_DESCA is returned. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Font::GetDescW([Out] D3DX10_FONT_DESCW* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.GetTextMetrics(System.IntPtr)">
            <summary>	
            Retrieve font characteristics.	
            </summary>	
            <param name="textMetricsRef">Pointer to a {{TEXTMETRIC}} structure, which contains font properties. If Unicode is defined, the function returns a TEXTMETRICW structure. Otherwise, the function returns a TEXTMETRICA structure. </param>
            <returns>Nonzero if the function is successful; otherwise 0. </returns>
            <unmanaged>BOOL ID3DX10Font::GetTextMetricsW([In] void* pTextMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.GetDisplayDeviceContext">
            <summary>	
            Return a handle to a display device context (DC) that has the font set onto it.	
            </summary>	
            <returns>Handle to a display DC. </returns>
            <unmanaged>void* ID3DX10Font::GetDC()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.GetGlyphData(System.Int32,SharpDX.Direct3D10.ShaderResourceView@,SharpDX.Rectangle@,System.Drawing.Point@)">
            <summary>	
            Return information about the placement and orientation of a glyph in a character cell.	
            </summary>	
            <param name="glyph">Glyph identifier. </param>
            <param name="textureRef">Address of a reference to a ID3D10Texture object that contains the glyph. </param>
            <param name="blackBoxRef">Pointer to the smallest rectangle object that completely encloses the glyph. See <see cref="T:SharpDX.Rectangle"/>. </param>
            <param name="cellIncRef">Pointer to the two-dimensional vector that connects the origin of the current character cell to the origin of the next character cell. See <see cref="T:System.Drawing.Point"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::GetGlyphData([None] int Glyph,[Out] ID3D10ShaderResourceView** ppTexture,[Out] RECT* pBlackBox,[Out] POINT* pCellInc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.PreloadCharacters(System.Int32,System.Int32)">
            <summary>	
            Load a series of characters into video memory to improve the efficiency of rendering to the device.	
            </summary>	
            <remarks>	
            This method generates textures containing glyphs that represent the input characters. The glyphs are drawn as a series of triangles. Characters will not be rendered to the device; ID3DX10Font::DrawText must still be called to render the characters. However, by pre-loading characters into video memory, ID3DX10Font::DrawText will use substantially fewer CPU resources. This method internally converts characters to glyphs using the GDI function {{GetCharacterPlacement}}. 	
            </remarks>	
            <param name="first">ID of the first character to be loaded into video memory. </param>
            <param name="last">ID of the last character to be loaded into video memory. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::PreloadCharacters([None] int First,[None] int Last)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.PreloadGlyphs(System.Int32,System.Int32)">
            <summary>	
            Load a series of glyphs into video memory to improve the efficiency of rendering to the device.	
            </summary>	
            <remarks>	
            This method generates textures that contain the input glyphs. The glyphs are drawn as a series of triangles. Glyphs will not be rendered to the device; ID3DX10Font::DrawText must still be called to render the glyphs. However, by pre-loading glyphs into video memory, ID3DX10Font::DrawText will use substantially fewer CPU resources. 	
            </remarks>	
            <param name="first">ID of the first glyph to be loaded into video memory. </param>
            <param name="last">ID of the last glyph to be loaded into video memory. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::PreloadGlyphs([None] int First,[None] int Last)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.PreloadText(System.String,System.Int32)">
            <summary>	
            Load formatted text into video memory to improve the efficiency of rendering to the device. This method supports ANSI and Unicode strings.	
            </summary>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to PreloadTextW. Otherwise, the function call resolves to PreloadTextA because ANSI strings are being used. This method generates textures that contain glyphs that represent the input text. The glyphs are drawn as a series of triangles. Text will not be rendered to the device; ID3DX10Font::DrawText must still be called to render the text. However, by preloading text into video memory, ID3DX10Font::DrawText will use substantially fewer CPU resources. This method internally converts characters to glyphs using the GDI function {{GetCharacterPlacement}}. 	
            </remarks>	
            <param name="stringRef">Pointer to a string of characters to be loaded into video memory. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR; otherwise, the data type resolves to LPCSTR. See Remarks. </param>
            <param name="count">Number of characters in the text string. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Font::PreloadTextW([None] const wchar_t* pString,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Font.DrawText(SharpDX.Direct3D10.Sprite,System.String,System.Int32,SharpDX.Rectangle@,System.Int32,SharpDX.Color4)">
            <summary>	
            Draw formatted text. This method supports ANSI and Unicode strings.	
            </summary>	
            <remarks>	
            The parameters of this method are very similar to those of the {{GDI DrawText}} function. This method supports both ANSI and Unicode strings. Unless the DT_NOCLIP format is used, this method clips the text so that it does not appear outside the specified rectangle. All formatting is assumed to have multiple lines unless the DT_SINGLELINE format is specified. If the selected font is too large for the rectangle, this method does not attempt to substitute a smaller font. This method supports only fonts whose escapement and orientation are both zero. 	
            </remarks>	
            <param name="pSprite">Pointer to an ID3DX10Sprite object that contains the string you wish to draw. Can be NULL, in which case Direct3D will render the string with its own sprite object. To improve efficiency, a sprite object should be specified if ID3DX10Font::DrawText is to be called more than once in a row. </param>
            <param name="stringRef">Pointer to a string to draw. If UNICODE is defined, this parameter type resolves to an LPCWSTR, otherwise, the type resolves to an LPCSTR. If the Count parameter is -1, the string must be NULL terminated. </param>
            <param name="count">The number of characters in the string. If Count is -1, then the pString parameter is assumed to be a reference to a sprite containing a NULL-terminated string and ID3DX10Font::DrawText computes the character count automatically. </param>
            <param name="rectRef">Pointer to a <see cref="T:SharpDX.Rectangle"/> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted. As with any RECT object, the coordinate value of the rectangle's right side must be greater than that of its left side. Likewise, the coordinate value of the bottom must be greater than that of the top. </param>
            <param name="format">Specify the method of formatting the text. It can be any combination of the following values:    ItemDescription  DT_BOTTOM  Justify the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.   DT_CALCRECT  Tell DrawText to automatically calculate the width and height of the rectangle based on the length of the string you tell it to draw. If there are multiple lines of text, ID3DX10Font::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DX10Font::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DX10Font::DrawText returns the height of the formatted text but does not draw the text.   DT_CENTER  Center text horizontally in the rectangle.   DT_EXPANDTABS  Expand tab characters. The default number of characters per tab is eight.   DT_LEFT  Align text to the left.   DT_NOCLIP  Draw without clipping. ID3DX10Font::DrawText is somewhat faster when DT_NOCLIP is used.   DT_RIGHT  Align text to the right.   DT_RTLREADING  Display text in right-to-left reading order for bidirectional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.   DT_SINGLELINE  Display text on a single line only. Carriage returns and line feeds do not break the line.   DT_TOP  Top-justify text.   DT_VCENTER  Center text vertically (single line only).   DT_WORDBREAK  Break words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.   ? </param>
            <param name="color">Color of the text. See <see cref="T:SharpDX.Color4"/>. </param>
            <returns>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from pRect (top to the bottom) of the drawn text. If the function fails, the return value is zero. </returns>
            <unmanaged>int ID3DX10Font::DrawTextW([None] LPD3DX10SPRITE pSprite,[None] const wchar_t* pString,[None] int Count,[None] RECT* pRect,[None] int Format,[None] D3DXCOLOR Color)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Font.Device">
            <summary>	
            Retrieve the Direct3D device associated with the font object.	
            </summary>	
            <remarks>	
            Note??Calling this method will increase the internal reference count on the ID3D10Device interface. Be sure to call IUnknown when you are done using this ID3D10Device interface or you will have a memory leak. 	
            </remarks>	
            <unmanaged>HRESULT ID3DX10Font::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Font.Description">
            <summary>	
            Get a description of the current font object.	
            </summary>	
            <remarks>	
            This method describes Unicode font objects if UNICODE is defined. Otherwise GetDescA is called, which returns a reference to the D3DX10FONT_DESCA structure. 	
            </remarks>	
            <unmanaged>HRESULT ID3DX10Font::GetDescW([Out] D3DX10_FONT_DESCW* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Font.DisplayDeviceContext">
            <summary>	
            Return a handle to a display device context (DC) that has the font set onto it.	
            </summary>	
            <unmanaged>void* ID3DX10Font::GetDC()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FontCharacterSet">
            <summary>
            Defines possible character sets for fonts.
            </summary>
            <unmanaged>CHARSET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Ansi">
            <summary>
            The ANSI character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Arabic">
            <summary>
            The Arabic character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Baltic">
            <summary>
            The Baltic character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.ChineseBig5">
            <summary>
            The Chinese character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Default">
            <summary>
            The default system character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.EastEurope">
            <summary>
            The East Europe character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.GB2312">
            <summary>
            The GB2312 character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Greek">
            <summary>
            The Greek character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Hangul">
            <summary>
            The Hangul character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Hebrew">
            <summary>
            The Hebrew character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Johab">
            <summary>
            The Johab character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Mac">
            <summary>
            The Mac character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Oem">
            <summary>
            The OEM character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Russian">
            <summary>
            The Russian character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.ShiftJIS">
            <summary>
            The ShiftJIS character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Symbol">
            <summary>
            The symbol character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Thai">
            <summary>
            The Thai character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Turkish">
            <summary>
            The Turkish character set.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontCharacterSet.Vietnamese">
            <summary>
            The Vietnamese character set.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.FontDrawFlags">
            <summary>
            Specifies formatting options for text rendering.
            </summary>
            <unmanaged>DT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.Bottom">
            <summary>
            Align the text to the bottom.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.Center">
            <summary>
            Align the text to the center.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.ExpandTabs">
            <summary>
            Expand tab characters.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.Left">
            <summary>
            Align the text to the left.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.NoClip">
            <summary>
            Don't clip the text.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.Right">
            <summary>
            Align the text to the right.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.RtlReading">
            <summary>
            Rendering the text in right-to-left reading order.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.SingleLine">
            <summary>
            Force all text to a single line.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.Top">
            <summary>
            Align the text to the top.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.VerticalCenter">
            <summary>
            Vertically align the text to the center.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDrawFlags.WordBreak">
            <summary>
            Allow word breaks.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.FontPitchAndFamily">
            <summary>
            Defines pitch and family settings for fonts.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Decorative">
            <summary>
            Use the Decorative family.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Default">
            <summary>
            Default pitch.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.DontCare">
            <summary>
            The font family doesn't matter.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Fixed">
            <summary>
            Fixed pitch.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Modern">
            <summary>
            Use the Modern family.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Mono">
            <summary>
            Mono pitch.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Roman">
            <summary>
            Use the Roman family.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Script">
            <summary>
            Use the Script family.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Swiss">
            <summary>
            Use the Swiss family.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPitchAndFamily.Variable">
            <summary>
            Variable pitch.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.FontPrecision">
            <summary>
            Defines precision levels for font rendering.
            </summary>
            <unmanaged>OutPrecision</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Character">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Stroke">
            <summary>
            Stroke
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.TrueType">
            <summary>
            TrueType
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Raster">
            <summary>
            Raster
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.TrueTypeOnly">
            <summary>
            TrueTypeOnly
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.Outline">
            <summary>
            Outline
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.ScreenOutline">
            <summary>
            ScreenOutline
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontPrecision.PostScriptOnly">
            <summary>
            PostScriptOnly
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.FontQuality">
            <summary>
            Specifies quality options for font rendering.
            </summary>
            <unmanaged>QUALITY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.Draft">
            <summary>
            Draft
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.Proof">
            <summary>
            Proof
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.NonAntialiased">
            <summary>
            Non antialiased
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.Antialiased">
            <summary>
            Antialiased
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.ClearType">
            <summary>
            ClearType
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontQuality.ClearTypeNatural">
            <summary>
            ClearTypeNatural
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.FontWeight">
            <summary>
            Specifies weights for font rendering.
            </summary>
            <unmanaged>FW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Black">
            <summary>
            Use a black weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Bold">
            <summary>
            Use a bold weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.DemiBold">
            <summary>
            Use a demi-bold weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.DoNotCare">
            <summary>
            The font weight doesn't matter.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.ExtraBold">
            <summary>
            Use an extra bold weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.ExtraLight">
            <summary>
            Make the font extra light.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Heavy">
            <summary>
            Use a heavy weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Light">
            <summary>
            Make the font light.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Medium">
            <summary>
            Use a medium weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Normal">
            <summary>
            Use a normal weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Regular">
            <summary>
            Use a regular weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.SemiBold">
            <summary>
            Use a semi-bold weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.Thin">
            <summary>
            Make the font thin.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.UltraBold">
            <summary>
            Use an ultra bold weight.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.FontWeight.UltraLight">
            <summary>
            Make the font ultra light.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.InputClassification">
            <summary>	
            Type of data contained in an input slot.	
            </summary>	
            <remarks>	
            Use these values to specify the type of data for a particular input element (see <see cref="T:SharpDX.Direct3D10.InputElement"/>) of an input-layout object. 	
            </remarks>	
            <unmanaged>D3D10_INPUT_CLASSIFICATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputClassification.PerVertexData">
            <summary>	
            Input data is per-vertex data. 	
            </summary>	
            <unmanaged>D3D10_INPUT_PER_VERTEX_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputClassification.PerInstanceData">
            <summary>	
            Input data is per-instance data. 	
            </summary>	
            <unmanaged>D3D10_INPUT_PER_INSTANCE_DATA</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FillMode">
            <summary>	
            Determines the fill mode to use when rendering triangles.	
            </summary>	
            <remarks>	
            This enumeration is part of a rasterizer-state object description (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_FILL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FillMode.Wireframe">
            <summary>	
            Draw lines connecting the vertices. {{Adjacent vertices}} are not drawn. 	
            </summary>	
            <unmanaged>D3D10_FILL_WIREFRAME</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FillMode.Solid">
            <summary>	
            Fill the triangles formed by the vertices. Adjacent vertices are not drawn. 	
            </summary>	
            <unmanaged>D3D10_FILL_SOLID</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CullMode">
            <summary>	
            Indicates triangles facing a particular direction are not drawn.	
            </summary>	
            <remarks>	
            This enumeration is part of a rasterizer-state object description (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_CULL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CullMode.None">
            <summary>	
            Always draw all triangles. 	
            </summary>	
            <unmanaged>D3D10_CULL_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CullMode.Front">
            <summary>	
            Do not draw triangles that are front-facing. 	
            </summary>	
            <unmanaged>D3D10_CULL_FRONT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CullMode.Back">
            <summary>	
            Do not draw triangles that are back-facing. 	
            </summary>	
            <unmanaged>D3D10_CULL_BACK</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ResourceDimension">
            <summary>	
            Identifies the type of {{resource}} being used.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="M:SharpDX.Direct3D10.Resource.GetTypeInfo(SharpDX.Direct3D10.ResourceDimension@)"/>, and <see cref="T:SharpDX.Direct3D10.ImageInformation"/>. 	
            </remarks>	
            <unmanaged>D3D10_RESOURCE_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceDimension.Unknown">
            <summary>	
            Resource is of unknown type. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceDimension.Buffer">
            <summary>	
            Resource is a {{buffer}}. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceDimension.Texture1D">
            <summary>	
            Resource is a {{1D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceDimension.Texture2D">
            <summary>	
            Resource is a {{2D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceDimension.Texture3D">
            <summary>	
            Resource is a {{3D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDimension">
            <summary>	
            Specifies how to access a resource used in a depth-stencil {{view}}.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/> to create a depth-stencil view. 	
            </remarks>	
            <unmanaged>D3D10_DSV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Unknown">
            <summary>	
            The resource will be accessed according to its type as determined from the actual instance this enumeration is paired with when the depth-stencil view is created. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture1D">
            <summary>	
            The resource will be accessed as a {{1D texture}}. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture1DArray">
            <summary>	
            The resource will be accessed as an array of 1D textures. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture2D">
            <summary>	
            The resource will be accessed as a {{2D texture}}. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture2DArray">
            <summary>	
            The resource will be accessed as an array of 2D texture. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture2DMultisampled">
            <summary>	
            The resource will be accessed as a 2D texture with multisampling. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDimension.Texture2DMultisampledArray">
            <summary>	
            The resource will be accessed as an array of 2D textures with multisampling. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDimension">
            <summary>	
            Specifies how to access a resource used in a render-target {{view}}.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/> to create a render-target view. 	
            </remarks>	
            <unmanaged>D3D10_RTV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Unknown">
            <summary>	
            The resource will be accessed according to its type as determined from the actual instance this enumeration is paired with when the render-target view is created. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Buffer">
            <summary>	
            The resource will be accessed as a {{buffer}}. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture1D">
            <summary>	
            The resource will be accessed as a {{1D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture1DArray">
            <summary>	
            The resource will be accessed as an array of 1D textures. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture2D">
            <summary>	
            The resource will be accessed as a {{2D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture2DArray">
            <summary>	
            The resource will be accessed as an array of 2D textures. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture2DMultisampled">
            <summary>	
            The resource will be accessed as a 2D texture with multisampling. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture2DMultisampledArray">
            <summary>	
            The resource will be accessed as an array of 2D textures with multisampling. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDimension.Texture3D">
            <summary>	
            The resource will be accessed as a {{3D texture}}. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ResourceUsage">
            <summary>	
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.	
            </summary>	
            <remarks>	
            An application identifies the way a resource is intended to be used (its usage) in a resource description. There are several structures for creating resources including: <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>, <see cref="T:SharpDX.Direct3D10.BufferDescription"/>, and <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>.   Differences between Direct3D 9 and Direct3D 10: In Direct3D 9, you specify the type of memory a resource should be created in at resource creation time (using D3DPOOL). It was an application's job to decide what memory pool would provide the best combination of functionality and performance. In Direct3D 10, an application no longer specifies what type of memory (the pool) to create a resource in. Instead, you specify the intended usage of the resource, and let the runtime (in concert with the driver and a memory manager) choose the type of memory that will achieve the best performance.   ? Resource Usage Restrictions Each usage dictates a tradeoff between functionality and performance. In general, resource accessing is accomplished with the following APIs.  CPU access is done with <see cref="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode)"/>, <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>, <see cref="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture2D@)"/>, or <see cref="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)"/>  GPU access is done with {{CopySubresourceRegion}}, {{CopyResource}}, or {{UpdateSubresource}}.  Use the following table to choose the usage that best describes how the resource will need to be accessed by the CPU and/or the GPU. Of course, there will be performance tradeoffs.  Resource UsageDefaultDynamicImmutableStaging GPU-Readyesyes1yesyes1, 2 GPU-Writeyes1yes1, 2 CPU-Readyes1, 2 CPU-Writeyesyes1, 2  ?  1 - This is restricted to {{CopySubresourceRegion}} and {{CopyResource}}. 2 - Cannot be a depth-stencil buffer or a multisampled render target.  Resource Bind Options To maximize performance, not all resource usage options can be used as input or output resources to the pipeline. This table identifies these limitations.  Resource Can Be Bound AsDefaultDynamicImmutableStaging Input to a Stageyes3yes4yes Output from a Stageyes3  ?  3 - If bound as an input and an output using different views, each view must use different {{subresources}}. 4 - The resource can only be created with a single {{subresource}}. The resource cannot be a texture array. The resource cannot be a mipmap chain.  	
            </remarks>	
            <unmanaged>D3D10_USAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceUsage.Default">
            <summary>	
            A resource that requires read and write access by the GPU. This is likely to be the most common usage choice. 	
            </summary>	
            <unmanaged>D3D10_USAGE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceUsage.Immutable">
            <summary>	
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation. 	
            </summary>	
            <unmanaged>D3D10_USAGE_IMMUTABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceUsage.Dynamic">
            <summary>	
            A resource that is accessible by both the GPU and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To write to a dynamic resource on the CPU, use a Map method. You can write to a dynamic resource on the GPU using {{CopyResource}} or {{CopySubresourceRegion}}. 	
            </summary>	
            <unmanaged>D3D10_USAGE_DYNAMIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceUsage.Staging">
            <summary>	
            A resource that supports data transfer (copy) from the GPU to the CPU. 	
            </summary>	
            <unmanaged>D3D10_USAGE_STAGING</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BindFlags">
            <summary>	
            Identifies how to bind a resource to the pipeline.	
            </summary>	
            <remarks>	
            In general, binding flags can be combined using a logical OR (except the constant-buffer flag); however, you should use a single flag to allow the device to optimize the resource usage. This enumeration is used by a:   {{Buffer description}} when creating a buffer. Texture description when creating a texture (see <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/> or <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/> or <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>).  A shader-resource buffer is NOT a constant buffer; rather, it is a texture or buffer resource that is bound to a shader, that contains texture or buffer data (it is not limited to a single element type in the buffer). A shader-resource buffer is created with the D3D10_BIND_SHADER_RESOURCE flag and is bound to the pipeline using one of these APIs: <see cref="M:SharpDX.Direct3D10.Device.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])"/>, <see cref="M:SharpDX.Direct3D10.Device.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])"/>, or <see cref="M:SharpDX.Direct3D10.Device.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D10.ShaderResourceView[])"/>. Furthermore, a shader-resource buffer cannot use the <see cref="F:SharpDX.Direct3D10.MapMode.WriteNoOverwrite"/> flag. 	
            </remarks>	
            <unmanaged>D3D10_BIND_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.VertexBuffer">
            <summary>	
            Bind a buffer as a {{vertex buffer}} to the {{input-assembler stage}}. 	
            </summary>	
            <unmanaged>D3D10_BIND_VERTEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.IndexBuffer">
            <summary>	
            Bind a buffer as an {{index buffer}} to the {{input-assembler stage}}. 	
            </summary>	
            <unmanaged>D3D10_BIND_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.ConstantBuffer">
            <summary>	
            Bind a buffer as a {{constant buffer}} to a {{shader stage}}; this flag may NOT be combined with any other bind flag. 	
            </summary>	
            <unmanaged>D3D10_BIND_CONSTANT_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.ShaderResource">
            <summary>	
            Bind a buffer or texture to a {{shader stage}}; this flag cannot be used with the <see cref="F:SharpDX.Direct3D10.MapMode.WriteNoOverwrite"/> flag. 	
            </summary>	
            <unmanaged>D3D10_BIND_SHADER_RESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.StreamOutput">
            <summary>	
            Bind an output buffer for the {{stream-output stage}}. 	
            </summary>	
            <unmanaged>D3D10_BIND_STREAM_OUTPUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.RenderTarget">
            <summary>	
            Bind a texture as a render target for the {{output-merger stage}}. 	
            </summary>	
            <unmanaged>D3D10_BIND_RENDER_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.DepthStencil">
            <summary>	
            Bind a texture as a depth-stencil target for the {{output-merger stage}}. 	
            </summary>	
            <unmanaged>D3D10_BIND_DEPTH_STENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BindFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CpuAccessFlags">
            <summary>	
            Specifies the types of CPU access allowed for a resource.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D10.BufferDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>, and <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>. See {{Creating Buffer Resources (Direct3D 10)}} for more details. Applications may combine one or more of these flags with a logical OR. When possible, create resources with no CPU access flags, as this enables better resource optimiztion. 	
            </remarks>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CpuAccessFlags.Write">
            <summary>	
            The resource is to be {{mappable}} so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>). 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CpuAccessFlags.Read">
            <summary>	
            The resource is to be {{mappable}} so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>). 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_READ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CpuAccessFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ResourceOptionFlags">
            <summary>	
            Identifies other, less common options for resources.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D10.BufferDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/>,  <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>, <see cref="T:SharpDX.Direct3D10.ImageInformation"/>, and <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>. These flags can be combined by bitwise OR. D3D10_RESOURCE_MISC_SHARED and D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX are mutually exclusive flags:  either one may be set in the resource creation calls but not both simultaneously. 	
            </remarks>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.GenerateMipMaps">
            <summary>	
            Enables an application to call <see cref="M:SharpDX.Direct3D10.Device.GenerateMips(SharpDX.Direct3D10.ShaderResourceView)"/> on  a {{texture resource}}. The resource must be created  with the {{bind flags}} that specify that the resource is a render target and a shader resource. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_GENERATE_MIPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.Shared">
            <summary>	
            Enables the sharing of resource data between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures. WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_SHARED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.TextureCube">
            <summary>	
            Enables an application to create a cube texture from a  {{Texture2DArray}} that contains 6 textures. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex">
            <summary>	
            Enables the resource created to be synchronized using the IDXGIKeyedMutex::AcquireSync and ReleaseSync APIs.  The following resource creation D3D10 APIs, that all take a D3D10_RESOURCE_MISC_FLAG parameter, have been extended to support the new flag.  ID3D10Device1::CreateTexture1D ID3D10Device1::CreateTexture2D ID3D10Device1::CreateTexture3D ID3D10Device1::CreateBuffer  If any of the listed functions are called with the D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX flag set, the interface returned can be  queried for an IDXGIKeyedMutex interface, which implements AcquireSync and ReleaseSync APIs to synchronize access to the surface.  The device creating the surface, and any other device opening the surface (using OpenSharedResource) is required to  call IDXGIKeyedMutex::AcquireSync before any rendering commands to the surface, and IDXGIKeyedMutex::ReleaseSync when it is done rendering. WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.GdiCompatible">
            <summary>	
            Enables a surface to be used for GDI interoperability.  Setting this flag enables rendering on the surface  via IDXGISurface1::GetDC. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceOptionFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MapMode">
            <summary>	
            Identifies a resource to be accessed for reading and writing by the CPU. Applications may combine one or more of these flags.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode)"/>, <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>, <see cref="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture2D@)"/>, and <see cref="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)"/>. These remarks are divided into the following topics:   {{Meaning of D3D10_MAP_WRITE_NO_OVERWRITE}} {{Common Usage of D3D10_MAP_WRITE_DISCARD with D3D10_MAP_WRITE_NO_OVERWRITE}}  Meaning of D3D10_MAP_WRITE_NO_OVERWRITE D3D10_MAP_WRITE_NO_OVERWRITE signifies that the application promises not to write to data that the {{Input Assembler}} (IA) stage is using. In exchange, the GPU allows the application to write to other parts of the same buffer.  The application must ensure that it does not write over any data in use by the IA stage. For example, consider the buffer illustrated in the following diagram. If a Draw call has been issued that uses vertices 4-6, an application that calls Map on this buffer must ensure that it does not write to the vertices that the Draw call will access during rendering. ?  Diagram of vertex data in different stages of utilization ? However, ensuring this can be difficult, because the GPU is often many frames behind the CPU in terms of which frame it is currently processing. Keeping track of which sections of a resource are being used because of calls made 2 to 5 frames ago is difficult and error-prone. Because of this, it is recommended that applications only write to the uninitialized portions of a resource when using D3D10_MAP_WRITE_NO_OVERWRITE. Common Usage of D3D10_MAP_WRITE_DISCARD with D3D10_MAP_WRITE_NO_OVERWRITE D3D10_MAP_WRITE_DISCARD and D3D10_MAP_WRITE_NO_OVERWRITE are normally used in conjunction with dynamic index/vertex buffers, although they can also be used with dynamic textures. A common use of these two flags involves filling dynamic index/vertex buffers with geometry that can be seen from the camera's current position. The first time that data is entered into the buffer on a given frame, Map is called with D3D10_MAP_WRITE_DISCARD; doing so invalidates the previous contents of the buffer. The buffer is then filled with all available data. Subsequent writes to the buffer within the same frame should use D3D10_MAP_WRITE_NO_OVERWRITE. This will enable the CPU to access a resource that is potentially being used by the GPU as long as the restrictions described previously are respected. 	
            </remarks>	
            <unmanaged>D3D10_MAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapMode.Read">
            <summary>	
            Resource is mapped for reading. The resource must have been created with read access (see <see cref="F:SharpDX.Direct3D10.CpuAccessFlags.Read"/>). 	
            </summary>	
            <unmanaged>D3D10_MAP_READ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapMode.Write">
            <summary>	
            Resource is mapped for writing. The resource must have been created with write access (see <see cref="F:SharpDX.Direct3D10.CpuAccessFlags.Write"/>). 	
            </summary>	
            <unmanaged>D3D10_MAP_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapMode.ReadWrite">
            <summary>	
            Resource is mapped for reading and writing. The resource must have been created with read and write access (see {{D3D10_CPU_ACCESS_READ and D3D10_CPU_ACCESS_WRITE}}). 	
            </summary>	
            <unmanaged>D3D10_MAP_READ_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapMode.WriteDiscard">
            <summary>	
            Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access (see <see cref="F:SharpDX.Direct3D10.CpuAccessFlags.Write"/>). 	
            </summary>	
            <unmanaged>D3D10_MAP_WRITE_DISCARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapMode.WriteNoOverwrite">
            <summary>	
            Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and index buffers. The resource must have been created with write access (see <see cref="F:SharpDX.Direct3D10.CpuAccessFlags.Write"/>). Cannot be used on a resource created with the <see cref="F:SharpDX.Direct3D10.BindFlags.ConstantBuffer"/> flag. 	
            </summary>	
            <unmanaged>D3D10_MAP_WRITE_NO_OVERWRITE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MapFlags">
            <summary>	
            Specifies how the CPU should respond when Map is called on a resource being used by the GPU.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="M:SharpDX.Direct3D10.Buffer.Map(SharpDX.Direct3D10.MapMode)"/>, <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>, <see cref="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture2D@)"/>, and <see cref="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)"/>. D3D10_MAP_FLAG_DO_NOT_WAIT cannot be used with <see cref="F:SharpDX.Direct3D10.MapMode.WriteDiscard"/> or {{D3D10_MAP_WRITE_NOOVERWRITE}}. For more information about potential conflicts between the GPU and CPU during resource mapping, see {{Copying and Accessing Resource Data (Direct3D 10)}}. 	
            </remarks>	
            <unmanaged>D3D10_MAP_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapFlags.DoNotWait">
            <summary>	
            Specifies that Map should return DXGI_ERROR_WAS_STILL_DRAWING when the GPU blocks the CPU from accessing a resource. 	
            </summary>	
            <unmanaged>D3D10_MAP_FLAG_DO_NOT_WAIT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MapFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilClearFlags">
            <summary>	
            Specifies the parts of the depth stencil to clear. Usually used with <see cref="M:SharpDX.Direct3D10.Device.ClearDepthStencilView(SharpDX.Direct3D10.DepthStencilView,SharpDX.Direct3D10.DepthStencilClearFlags,System.Single,System.Byte)"/>.	
            </summary>	
            <remarks>	
            These flags can be bitwise ORed together. 	
            </remarks>	
            <unmanaged>D3D10_CLEAR_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilClearFlags.Depth">
            <summary>	
            Clear the depth buffer. 	
            </summary>	
            <unmanaged>D3D10_CLEAR_DEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilClearFlags.Stencil">
            <summary>	
            Clear the stencil buffer. 	
            </summary>	
            <unmanaged>D3D10_CLEAR_STENCIL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Comparison">
            <summary>	
            Comparison options.	
            </summary>	
            <remarks>	
            A comparison option determines whether how the runtime compares source (new) data against destination (existing) data before storing the new data. The comparison option is declared in a description before an object is created. The API allows you to set a comparison option for a depth-stencil buffer (see <see cref="T:SharpDX.Direct3D10.DepthStencilStateDescription"/>), depth-stencil operations (see <see cref="T:SharpDX.Direct3D10.DepthStencilOperationDescription"/>), or sampler state (see <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_COMPARISON_FUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.Never">
            <summary>	
            Never pass the comparison. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_NEVER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.Less">
            <summary>	
            If the source data is less than the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_LESS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.Equal">
            <summary>	
            If the source data is equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.LessEqual">
            <summary>	
            If the source data is less than or equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_LESS_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.Greater">
            <summary>	
            If the source data is greater than the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_GREATER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.NotEqual">
            <summary>	
            If the source data is not equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_NOT_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.GreaterEqual">
            <summary>	
            If the source data is greater than or equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_GREATER_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Comparison.Always">
            <summary>	
            Always pass the comparison. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_ALWAYS</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthWriteMask">
            <summary>	
            Identify the portion of a {{depth-stencil}} buffer for writing depth data.	
            </summary>	
            <unmanaged>D3D10_DEPTH_WRITE_MASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthWriteMask.Zero">
            <summary>	
            Turn off writes to the depth-stencil buffer. 	
            </summary>	
            <unmanaged>D3D10_DEPTH_WRITE_MASK_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthWriteMask.All">
            <summary>	
            Turn on writes to the depth-stencil buffer. 	
            </summary>	
            <unmanaged>D3D10_DEPTH_WRITE_MASK_ALL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StencilOperation">
            <summary>	
            The stencil operations that can be performed during {{depth-stencil}} testing.	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Keep">
            <summary>	
            Keep the existing stencil data. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_KEEP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Zero">
            <summary>	
            Set the stencil data to 0. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Replace">
            <summary>	
            Set the stencil data to the reference value set by calling <see cref="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetDepthStencilState(SharpDX.Direct3D10.DepthStencilState,System.Int32)"/>. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_REPLACE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.IncrementAndClamp">
            <summary>	
            Increment the stencil value by 1, and clamp the result. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_INCR_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.DecrementAndClamp">
            <summary>	
            Decrement the stencil value by 1, and clamp the result. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_DECR_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Invert">
            <summary>	
            Invert the stencil data. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_INVERT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Increment">
            <summary>	
            Increment the stencil value by 1, and wrap the result if necessary. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_INCR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StencilOperation.Decrement">
            <summary>	
            Increment the stencil value by 1, and wrap the result if necessary. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP_DECR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendOption">
            <summary>	
            Blend options. A blend option identifies the data source and an optional pre-blend operation.	
            </summary>	
            <remarks>	
            Blend operations are specified in a {{blend description}}. 	
            </remarks>	
            <unmanaged>D3D10_BLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.Zero">
            <summary>	
            The data source is the color black (0, 0, 0, 0). No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.One">
            <summary>	
            The data source is the color white (1, 1, 1, 1). No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_ONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.SourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_SRC_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseSourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_SRC_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.SourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_SRC_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseSourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_SRC_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.DestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_DEST_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseDestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_DEST_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.DestinationColor">
            <summary>	
            The data source is color data from a rendertarget. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_DEST_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseDestinationColor">
            <summary>	
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_DEST_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.SourceAlphaSaturate">
            <summary>	
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. 	
             	
            </summary>	
            <unmanaged>D3D10_BLEND_SRC_ALPHA_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.BlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetBlendState(SharpDX.Direct3D10.BlendState,SharpDX.Color4,System.Int32)"/>. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND_BLEND_FACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseBlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="M:SharpDX.Direct3D10.Device.OutputMergerStage.SetBlendState(SharpDX.Direct3D10.BlendState,SharpDX.Color4,System.Int32)"/>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_BLEND_FACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.SecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports {{dual-source color blending}}. 	
            </summary>	
            <unmanaged>D3D10_BLEND_SRC1_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseSecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports {{dual-source color blending}}. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_SRC1_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.SecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports {{dual-source color blending}}. 	
            </summary>	
            <unmanaged>D3D10_BLEND_SRC1_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOption.InverseSecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports {{dual-source color blending}}. 	
            </summary>	
            <unmanaged>D3D10_BLEND_INV_SRC1_ALPHA</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendOperation">
            <summary>	
            RGB or alpha blending operation.	
            </summary>	
            <remarks>	
            The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a {{blend description}}. The two sources ? Source 1, called SrcBlend and SrcBlendAlpha, and Source 2, called DestBlend and DestBlendAlpha ? are shown in the {{blending block diagram}}. 	
            </remarks>	
            <unmanaged>D3D10_BLEND_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOperation.Add">
            <summary>	
            Add source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP_ADD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOperation.Subtract">
            <summary>	
            Subtract source 1 from source 2. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP_SUBTRACT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOperation.ReverseSubtract">
            <summary>	
            Subtract source 2 from source 1. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP_REV_SUBTRACT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOperation.Minimum">
            <summary>	
            Find the minimum of source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP_MIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendOperation.Maximum">
            <summary>	
            Find the maximum of source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP_MAX</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ColorWriteMaskFlags">
            <summary>	
            Identify which components of each pixel of a render target are writable during {{blending}}.	
            </summary>	
            <remarks>	
            These flags can be combined with a bitwise OR. 	
            </remarks>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ColorWriteMaskFlags.Red">
            <summary>	
            Allow data to be stored in the red component. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE_RED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ColorWriteMaskFlags.Green">
            <summary>	
            Allow data to be stored in the green component. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE_GREEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ColorWriteMaskFlags.Blue">
            <summary>	
            Allow data to be stored in the blue component. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE_BLUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ColorWriteMaskFlags.Alpha">
            <summary>	
            Allow data to be stored in the alpha component. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ColorWriteMaskFlags.All">
            <summary>	
            Allow data to be stored in all components. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE_ALL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.TextureCubeFace">
            <summary>	
            The different faces of a cube texture.	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.PositiveX">
            <summary>	
            Positive X face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_X</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.NegativeX">
            <summary>	
            Negative X face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_X</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.PositiveY">
            <summary>	
            Positive Y face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_Y</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.NegativeY">
            <summary>	
            Negative Y face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_Y</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.PositiveZ">
            <summary>	
            Positive Z face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_Z</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureCubeFace.NegativeZ">
            <summary>	
            Negative Z face. 	
            </summary>	
            <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_Z</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Filter">
            <summary>	
            Filtering options during texture sampling.	
            </summary>	
            <remarks>	
            During texture sampling, one or more texels are read and combined (this is calling filtering) to produce a single value. Point sampling reads a single texel while linear sampling reads two texels (endpoints) and linearly interpolates a third value between the endpoints. HLSL texture-sampling functions also support comparison filtering during texture sampling. Comparison filtering compares each sampled texel against a comparison value. The boolean result is blended the same way that normal texture filtering is blended. You can use HLSL intrinsic texture-sampling functions that implement texture filtering only or companion functions that use texture filtering with comparison filtering.  Texture Sampling FunctionTexture Sampling Function with Comparison Filtering  {{sample}}  {{samplecmp}} or {{samplecmplevelzero}}   ? Comparison filters only work with textures that have the following {{formats}}: R32_FLOAT_X8X24_TYPELESS, R32_FLOAT, R24_UNORM_X8_TYPELESS, R16_UNORM. 	
            </remarks>	
            <unmanaged>D3D10_FILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinMagMipPoint">
            <summary>	
            Use point sampling for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinMagPointMipLinear">
            <summary>	
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinPointMagLinearMipPoint">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinPointMagMipLinear">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinLinearMagMipPoint">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinLinearMagPointMipLinear">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinMagLinearMipPoint">
            <summary>	
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.MinMagMipLinear">
            <summary>	
            Use linear interpolation for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.Anisotropic">
            <summary>	
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D10_FILTER_ANISOTROPIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinMagMipPoint">
            <summary>	
            Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinMagPointMipLinear">
            <summary>	
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinPointMagLinearMipPoint">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinPointMagMipLinear">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinLinearMagMipPoint">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinLinearMagPointMipLinear">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinMagLinearMipPoint">
            <summary>	
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonMinMagMipLinear">
            <summary>	
            Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.ComparisonAnisotropic">
            <summary>	
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D10_FILTER_COMPARISON_ANISOTROPIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Filter.Texture1Bit">
            <summary>	
            For use in pixel shaders with textures that have the R1_UNORM format. 	
            </summary>	
            <unmanaged>D3D10_FILTER_TEXT_1BIT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FilterType">
            <summary>	
            Types of magnification or minification sampler filters.	
            </summary>	
            <unmanaged>D3D10_FILTER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterType.Point">
            <summary>	
            Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture.  	
            </summary>	
            <unmanaged>D3D10_FILTER_TYPE_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterType.Linear">
            <summary>	
            Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures.  	
            </summary>	
            <unmanaged>D3D10_FILTER_TYPE_LINEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.TextureAddressMode">
            <summary>	
            Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureAddressMode.Wrap">
            <summary>	
            Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureAddressMode.Mirror">
            <summary>	
            Flip the texture at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.  	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureAddressMode.Clamp">
            <summary>	
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_CLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureAddressMode.Border">
            <summary>	
            Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/> or HLSL code. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_BORDER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureAddressMode.MirrorOnce">
            <summary>	
            Similar to D3D10_TEXTURE_ADDRESS_MIRROR and D3D10_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MIRROR_ONCE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FormatSupport">
            <summary>	
            Which resources are supported for a given format and given device (see <see cref="M:SharpDX.Direct3D10.Device.CheckFormatSupport(SharpDX.DXGI.Format)"/>).	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Buffer">
            <summary>	
            Buffer resources supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.InputAssemblyVertexBuffer">
            <summary>	
            Vertex buffers supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.InputAssemblyIndexBuffer">
            <summary>	
            Index buffers supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.StreamOutputBuffer">
            <summary>	
            Streaming output buffers supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SO_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Texture1D">
            <summary>	
            1D texture resources supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Texture2D">
            <summary>	
            2D texture resources supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Texture3D">
            <summary>	
            3D texture resources supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.TextureCube">
            <summary>	
            Cube texture resources supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.ShaderLoad">
            <summary>	
            The intrinsic HLSL function {{load}} is supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_LOAD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.ShaderSample">
            <summary>	
            The intrinsic HLSL functions {{Sample}} supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.ShaderSampleComparison">
            <summary>	
            The intrinsic HLSL functions {{SampleCmp}} and {{SampleCmpLevelZero}} are supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.ShaderSampleMonoText">
            <summary>	
            Reserved. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Mip">
            <summary>	
            Mipmaps are supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_MIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.MipAutogen">
            <summary>	
            Automatic generation of mipmaps is supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_MIP_AUTOGEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.RenderTarget">
            <summary>	
            Rendertargets are supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_RENDER_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Blendable">
            <summary>	
            Render target blend operations supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_BLENDABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.DepthStencil">
            <summary>	
            Depth stencils supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_DEPTH_STENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.CpuLockable">
            <summary>	
            CPU locking supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_CPU_LOCKABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.MultisampleResolve">
            <summary>	
            Multisampling resolution supported. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.Display">
            <summary>	
            Format can be displayed on screen. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_DISPLAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.CastWithinBitLayout">
            <summary>	
            Format cannot be cast to another format. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.MultisampleRendertarget">
            <summary>	
            Format can be used as a multisampled rendertarget. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.MultisampleLoad">
            <summary>	
            Format can be used as a multisampled texture and read into a shader with the {{load}} function. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.ShaderGather">
            <summary>	
            Format can be used with the {{gather}} function. This value is available in DirectX 10.1 or higher. 	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_GATHER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FormatSupport.BackBufferCast">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.AsynchronousFlags">
            <summary>	
            Optional flags that control the behavior of <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/>.	
            </summary>	
            <unmanaged>D3D10_ASYNC_GETDATA_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.AsynchronousFlags.DoNotFlush">
            <summary>	
            Do not flush the command buffer. This can potentially cause an infinite loop if GetData is continually called until it returns S_OK as there may still be commands in the command buffer that need to be processed in order for GetData to return S_OK. Since the commands in the command buffer are not flushed they will not be processed and therefore GetData will never return S_OK. 	
            </summary>	
            <unmanaged>D3D10_ASYNC_GETDATA_DONOTFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.AsynchronousFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.QueryType">
            <summary>	
            Query types.	
            </summary>	
            <unmanaged>D3D10_QUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.Event">
            <summary>	
            Determines whether or not the GPU is finished processing commands. When the GPU is finished processing commands {{GetData}} will return S_OK, and pData will point to a BOOL with a value of TRUE. When using this type of query, {{Begin}} is disabled. 	
            </summary>	
            <unmanaged>D3D10_QUERY_EVENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.Occlusion">
            <summary>	
            Get the number of samples that passed the depth and stencil tests in between {{Begin}} and {{End}}. {{GetData}} returns a UINT64. If a depth or stencil test is disabled, then each of those tests will be counted as a pass. 	
            </summary>	
            <unmanaged>D3D10_QUERY_OCCLUSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.Timestamp">
            <summary>	
            Get a timestamp value where {{GetData}} returns a UINT64. This kind of query is only useful if two timestamp queries are done in the middle of a D3D10_QUERY_TIMESTAMP_DISJOINT query. The difference of two timestamps can be used to determine how many ticks have elapsed, and the D3D10_QUERY_TIMESTAMP_DISJOINT query will determine if that difference is a reliable value and also has a value that shows how to convert the number of ticks into seconds. See <see cref="T:SharpDX.Direct3D10.QueryDataTimestampDisjoint"/>. When using this type of query, {{Begin}} is disabled. 	
            </summary>	
            <unmanaged>D3D10_QUERY_TIMESTAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.TimestampDisjoint">
            <summary>	
            Determines whether or not a D3D10_QUERY_TIMESTAMP is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds. {{GetData}} will return a <see cref="T:SharpDX.Direct3D10.QueryDataTimestampDisjoint"/>. This type of query should only be invoked once per frame or less. 	
            </summary>	
            <unmanaged>D3D10_QUERY_TIMESTAMP_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.PipelineStatistics">
            <summary>	
            Get pipeline statistics, such as the number of pixel shader invocations in between {{Begin}} and {{End}}. {{GetData}} will return a <see cref="T:SharpDX.Direct3D10.QueryDataPipelineStatistics"/>. 	
            </summary>	
            <unmanaged>D3D10_QUERY_PIPELINE_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.OcclusionPredicate">
            <summary>	
            Similar to D3D10_QUERY_OCCLUSION, except {{GetData}} returns a BOOL indicating whether or not any samples passed the depth and stencil tests - TRUE meaning at least one passed, FALSE meaning none passed. 	
            </summary>	
            <unmanaged>D3D10_QUERY_OCCLUSION_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.StreamOutputStatistics">
            <summary>	
            Get streaming output statistics, such as the number of primitives streamed out in between {{Begin}} and {{End}}. {{GetData}} will return a <see cref="T:SharpDX.Direct3D10.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D10_QUERY_SO_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryType.StreamOutputOverflowPredicate">
            <summary>	
            Determines whether or not any of the streaming output buffers overflowed in between {{Begin}} and {{End}}. {{GetData}} returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D10_QUERY_SO_OVERFLOW_PREDICATE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.QueryFlags">
            <summary>	
            Flags that describe miscellaneous query behavior.	
            </summary>	
            <remarks>	
            This flag is part of a query description (see <see cref="T:SharpDX.Direct3D10.QueryDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_QUERY_MISC_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryFlags.Predicatehint">
            <summary>	
            Tell the hardware that if it is not yet sure if something is hidden or not to draw it anyway. This is only used with an occlusion predicate. Predication data cannot be returned to your application via <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> when using this flag. 	
            </summary>	
            <unmanaged>D3D10_QUERY_MISC_PREDICATEHINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CounterKind">
            <summary>	
            Performance counter types.	
            </summary>	
            <remarks>	
            In addition to these performance counters, independent hardware vendors may define their own set of performance counters for their devices. The enum values for these counters would start after D3D10_COUNTER_DEVICE_DEPENDENT_0 and would be defined by those hardware vendors. 	
            </remarks>	
            <unmanaged>D3D10_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.GpuIdle">
            <summary>	
            Percentage of the time that the GPU is idle. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_GPU_IDLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.VertexProcessing">
            <summary>	
            Percentage of the time that the GPU does vertex processing. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_VERTEX_PROCESSING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.GeometryProcessing">
            <summary>	
            Percentage of the time that the GPU does geometry processing. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_GEOMETRY_PROCESSING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.PixelProcessing">
            <summary>	
            Percentage of the time that the GPU does pixel processing. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_PIXEL_PROCESSING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.OtherGpuProcessing">
            <summary>	
            Percentage of the time that the GPU does other processing (not vertex, geometry, or pixel processing). 	
            </summary>	
            <unmanaged>D3D10_COUNTER_OTHER_GPU_PROCESSING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.HostAdapterBandwidthUtilization">
            <summary>	
            Percentage of bandwidth used on a host adapter. Value returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.LocalVidmemBandwidthUtilization">
            <summary>	
            Percentage of bandwidth used by the local video memory. Value returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter 	
            </summary>	
            <unmanaged>D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.VertexThroughputUtilization">
            <summary>	
            Percentage of throughput used for vertices. Value returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter 	
            </summary>	
            <unmanaged>D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.TriangleSetupThroughputUtilization">
            <summary>	
            Percentage of throughput used for triangle setup. Value returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.FillrateThroughputUtilization">
            <summary>	
            Percentage of throughput used for the fillrate. Value returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.VsMemoryLimited">
            <summary>	
            Percentage of time that a vertex shader spends sampling resources. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_VS_MEMORY_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.VsComputationLimited">
            <summary>	
            Percentage of time that a vertex shader spends doing computations. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_VS_COMPUTATION_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.GsMemoryLimited">
            <summary>	
            Percentage of time that a geometry shader spends sampling resources. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_GS_MEMORY_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.GsComputationLimited">
            <summary>	
            Percentage of time that a geometry shader spends doing computations. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_GS_COMPUTATION_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.PsMemoryLimited">
            <summary>	
            Percentage of time that a pixel shader spends sampling resources. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_PS_MEMORY_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.PsComputationLimited">
            <summary>	
            Percentage of time that a pixel shader spends doing computations. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_PS_COMPUTATION_LIMITED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.PostTransformCacheHitRate">
            <summary>	
            Percentage of vertex data that was read from the vertex cache. For example, if 6 vertices were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.TextureCacheHitRate">
            <summary>	
            Percentage of texel data that was read from the vertex cache. For example, if 6 texels were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterKind.DeviceDependent0">
            <summary>	
            Start of the device-dependent counters. See remarks. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_DEVICE_DEPENDENT_0</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CounterType">
            <summary>	
            Data type of a performance counter.	
            </summary>	
            <remarks>	
            These flags are an output parameter in <see cref="M:SharpDX.Direct3D10.Device.CheckCounter(SharpDX.Direct3D10.CounterDescription,SharpDX.Direct3D10.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/>. 	
            </remarks>	
            <unmanaged>D3D10_COUNTER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterType.Float32">
            <summary>	
            32-bit floating point. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TYPE_FLOAT32</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterType.Uint16">
            <summary>	
            16-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TYPE_UINT16</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterType.Uint32">
            <summary>	
            32-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TYPE_UINT32</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterType.Uint64">
            <summary>	
            64-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D10_COUNTER_TYPE_UINT64</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DeviceCreationFlags">
            <summary>	
            Device creation flags.	
            </summary>	
            <remarks>	
            Device creation flags are used by <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> and <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)"/>. An application might dynamically create (and destroy) threads to improve performance especially on a machine with multiple CPU cores.  There may be cases, however, when an application needs to prevent extra threads from being created. This can happen when you want to simplify  debugging, profile code or develop a tool for instance. For these cases, use D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS to request  that the runtime and video driver not create any additional threads that might interfere with the application. 	
            </remarks>	
            <unmanaged>D3D10_CREATE_DEVICE_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.Singlethreaded">
            <summary>	
            Use this flag if an application will only be calling D3D10 from a single thread. If this flag is not specified, the default behavior of D3D10  is to enter a lock during each API call to prevent multiple threads altering internal state. By using this flag no locks will be taken which can  slightly increase performance, but could result in undefine behavior if D3D10 is called from multiple threads. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_SINGLETHREADED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.Debug">
            <summary>	
            Create a device that supports the {{debug layer}}. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_DEBUG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.SwitchToRef">
            <summary>	
            Create both a software (REF) and hardware (HAL) version of the device simultaneously, which allows an application to switch to a  reference device to enable debugging. See <see cref="T:SharpDX.Direct3D10.SwitchToRef"/> for more information. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_SWITCH_TO_REF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.PreventInternalThreadingOptimizations">
            <summary>	
            Prevents multiple threads from being created. When this flag is used with a WARP device, no additional threads will be created by WARP and all rasterization will occur on the calling thread. This flag is not recommended for general use. See remarks.  	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.AllowNullFromMap">
            <summary>	
            Return a NULL reference instead of triggering an exception on memory exhaustion during invocations to Map.   Without this flag an exception will be raised on memory exhaustion.  Only valid on Winodws 7. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.BgraSupport">
            <summary>	
            Causes device creation to fail if BGRA support is not available. BGRA support enables the following formats.  DXGI_FORMAT_B8G8R8A8_TYPELESS DXGI_FORMAT_B8G8R8A8_UNORM DXGI_FORMAT_B8G8R8A8_UNORM_SRGB DXGI_FORMAT_B8G8R8X8_TYPELESS DXGI_FORMAT_B8G8R8X8_UNORM DXGI_FORMAT_B8G8R8X8_UNORM_SRGB  D3D10_CREATE_DEVICE_BGRA_SUPPORT is only relevant when a device is created with <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> or <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)"/> using the D3D10_FEATURE_LEVEL_10_0 or D3D10_FEATURE_LEVEL_10_1 feature levels, the flag will be ignored when a device is created with other feature levels. Note that BGRA support may be present even if the application didn't specify D3D10_CREATE_DEVICE_BGRA_SUPPORT.  The flag merely causes device creation to fail if BGRA support isn't available. D3D10_CREATE_DEVICE_BGRA_SUPPORT is only valid on Windows 7, Windows Server 2008 R2, and updated Windows Vista (KB971644) systems. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_BGRA_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.StrictValidation">
            <summary>	
            Reserved. This flag is currently not supported. Do not use. 	
            </summary>	
            <unmanaged>D3D10_CREATE_DEVICE_STRICT_VALIDATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceCreationFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DebugFeatureFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_DEBUG_FEATURE_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DebugFeatureFlags.FlushPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DebugFeatureFlags.FinishPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DebugFeatureFlags.PresentPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DriverType">
            <summary>	
            The device-driver type.	
            </summary>	
            <remarks>	
            The device-driver type needs to be specified when the device is created (using <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> or <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)"/>).  For information about limitations creating nonhardware-type devices on certain feature levels, see {{Limitations Creating WARP and Reference Devices}}. 	
            </remarks>	
            <unmanaged>D3D10_DRIVER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DriverType.Hardware">
            <summary>	
            A hardware device; commonly called a HAL device. 	
            </summary>	
            <unmanaged>D3D10_DRIVER_TYPE_HARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DriverType.Reference">
            <summary>	
            A reference device; commonly called a REF device. 	
            </summary>	
            <unmanaged>D3D10_DRIVER_TYPE_REFERENCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DriverType.Null">
            <summary>	
            A NULL device; which is a reference device without render capability. 	
            </summary>	
            <unmanaged>D3D10_DRIVER_TYPE_NULL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DriverType.Software">
            <summary>	
            Reserved for later use. 	
            </summary>	
            <unmanaged>D3D10_DRIVER_TYPE_SOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DriverType.Warp">
            <summary>	
            A WARP driver, which is a high-performance software rasterizer. The rasterizer supports feature level 9_1 through level 10.1 with a  high performance software implementation when hardware is not available. For more information about using a WARP driver, see  {{Windows Advanced Rasterization Platform (WARP) In-Depth Guide}}. Note that WARP is only available with the DirectX 11 Runtime (Windows 7, Windows Server 2008 R2, updated Windows Vista [KB971644]). 	
            </summary>	
            <unmanaged>D3D10_DRIVER_TYPE_WARP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DeviceStateTypes">
            <summary>	
            Effect device-state types.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="M:SharpDX.Direct3D10.D3D10.StateBlockMaskDisableCapture(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32,System.Int32)"/>, <see cref="M:SharpDX.Direct3D10.D3D10.StateBlockMaskEnableCapture(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32,System.Int32)"/>, and <see cref="M:SharpDX.Direct3D10.D3D10.StateBlockMaskGetSetting(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32)"/>. 	
            </remarks>	
            <unmanaged>D3D10_DEVICE_STATE_TYPES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StStreamOutputBuffers">
            <summary>	
            Stream-output buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_SO_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StOmRenderTargets">
            <summary>	
            Render target. 	
            </summary>	
            <unmanaged>D3D10_DST_OM_RENDER_TARGETS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StOmDepthStencilState">
            <summary>	
            Depth-stencil state. 	
            </summary>	
            <unmanaged>D3D10_DST_OM_DEPTH_STENCIL_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StOmBlendState">
            <summary>	
            Blend state. 	
            </summary>	
            <unmanaged>D3D10_DST_OM_BLEND_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StVs">
            <summary>	
            Vertex shader. 	
            </summary>	
            <unmanaged>D3D10_DST_VS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StVsSamplers">
            <summary>	
            Vertex shader sampler. 	
            </summary>	
            <unmanaged>D3D10_DST_VS_SAMPLERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StVsShaderResources">
            <summary>	
            Vertex shader resource. 	
            </summary>	
            <unmanaged>D3D10_DST_VS_SHADER_RESOURCES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StVsConstantBuffers">
            <summary>	
            Vertex shader constant buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_VS_CONSTANT_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StGs">
            <summary>	
            Geometry shader. 	
            </summary>	
            <unmanaged>D3D10_DST_GS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StGsSamplers">
            <summary>	
            Geometry shader sampler. 	
            </summary>	
            <unmanaged>D3D10_DST_GS_SAMPLERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StGsShaderResources">
            <summary>	
            Geometry shader resource. 	
            </summary>	
            <unmanaged>D3D10_DST_GS_SHADER_RESOURCES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StGsConstantBuffers">
            <summary>	
            Geometry shader constant buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_GS_CONSTANT_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StPs">
            <summary>	
            Pixel shader. 	
            </summary>	
            <unmanaged>D3D10_DST_PS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StPsSamplers">
            <summary>	
            Pixel shader sampler. 	
            </summary>	
            <unmanaged>D3D10_DST_PS_SAMPLERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StPsShaderResources">
            <summary>	
            Pixel shader resource. 	
            </summary>	
            <unmanaged>D3D10_DST_PS_SHADER_RESOURCES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StPsConstantBuffers">
            <summary>	
            Pixel shader constant buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_PS_CONSTANT_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StInputAssemblyVertexBuffers">
            <summary>	
            Input-assembler vertex buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_IA_VERTEX_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StInputAssemblyIndexBuffer">
            <summary>	
            Input-assembler index buffer. 	
            </summary>	
            <unmanaged>D3D10_DST_IA_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StInputAssemblyInputLayout">
            <summary>	
            Input-assembler input layout. 	
            </summary>	
            <unmanaged>D3D10_DST_IA_INPUT_LAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StInputAssemblyPrimitiveTopology">
            <summary>	
            Input-assembler primitive topology. 	
            </summary>	
            <unmanaged>D3D10_DST_IA_PRIMITIVE_TOPOLOGY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StRsViewports">
            <summary>	
            Viewport. 	
            </summary>	
            <unmanaged>D3D10_DST_RS_VIEWPORTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StRsScissorRects">
            <summary>	
            Scissor rectangle. 	
            </summary>	
            <unmanaged>D3D10_DST_RS_SCISSOR_RECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StRsRasterizerState">
            <summary>	
            Rasterizer state. 	
            </summary>	
            <unmanaged>D3D10_DST_RS_RASTERIZER_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DeviceStateTypes.StPredication">
            <summary>	
            Predication state. 	
            </summary>	
            <unmanaged>D3D10_DST_PREDICATION</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectVariableFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_EFFECT_VARIABLE_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableFlags.Pooled">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>POOLED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableFlags.Annotation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ANNOTATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableFlags.ExplicitBindPoint">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>EXPLICIT_BIND_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FeatureLevel">
            <summary>	
            The version of hardware acceleration requested.	
            </summary>	
            <remarks>	
            Use this enumeration when creating a device with <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> or <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)"/>. Note that 10level9 feature levels 9_1, 9_2, and 9_3 are only available with the DirectX 11 Runtime (Windows 7, Windows Server 2008 R2, updated  Windows Vista [KB971644]). For information about limitations creating nonhardware-type devices on certain feature levels, see {{Limitations Creating WARP and Reference Devices}}. The following table lists the features available per feature level:  10_110_09_39_29_1 Shader Model4.x4.02.0 (4_0_level_9_3)2.0 (4_0_level_9_1)2.0 (4_0_level_9_1) Geometry ShaderYesYesNoNoNo Stream OutYesYesNoNoNo Texture Resource ArraysYesYesNoNoNo Cubemap Resource ArraysYesNoNoNoNo BC4/BC5 CompressionYesYesNoNoNo Alpha-to-coverageYesYesNoNoNo Extended Formats*(BGRA, etc.)OptionalOptionalYesYesYes 10-bit XR High Color FormatOptionalOptionalN/AN/AN/A Max Texture Dimension81928192409620482048 Max Cubemap Dimension819281924096512512 Max Volume Extent20482048256256256 Max Texture Repeat8192819281922048128 Max Anisotropy161616162 Max Primitive Count2^322^321048575104857565535 Simultaneous Render Targets88411 Occlusion QueriesYesYesYesYesNo Separate Alpha BlendYesYesYesYesNo Mirror OnceYesYesYesYesNo Overlapping Vertex ElementsYesYesYesYesNo Independent Write MasksYesYesYesNoNo InstancingYesYesYesNoNo Nonpowers-of-2 conditionally*NoNoYesYesYes Nonpowers-of-2 unconditionally**YesYesNoNoNo  ? * At feature levels 9_1, 9_2 and 9_3, the display device supports the use of 2-D textures with dimensions that are not powers of two under two conditions. First, only one MIP-map level for each texture can be created, and second, no wrap sampler modes for textures are allowed (that is, the AddressU, AddressV, and AddressW members of <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/> cannot be set to <see cref="F:SharpDX.Direct3D10.TextureAddressMode.Wrap"/>). ** At feature levels 10_0 and 10_1, the display device unconditionally supports the use of 2-D textures with dimensions that are not powers of two. 	
            </remarks>	
            <unmanaged>D3D10_FEATURE_LEVEL1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FeatureLevel.Level_10_0">
            <summary>	
            The hardware supports Direct3D 10.0 features. 	
            </summary>	
            <unmanaged>D3D10_FEATURE_LEVEL_10_0</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FeatureLevel.Level_10_1">
            <summary>	
            The hardware supports Direct3D 10.1 features. 	
            </summary>	
            <unmanaged>D3D10_FEATURE_LEVEL_10_1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FeatureLevel.Level_9_1">
            <summary>	
            The hardware supports Direct3D 9.1 features. 	
            </summary>	
            <unmanaged>D3D10_FEATURE_LEVEL_9_1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FeatureLevel.Level_9_2">
            <summary>	
            The hardware supports Direct3D 9.2 features. 	
            </summary>	
            <unmanaged>D3D10_FEATURE_LEVEL_9_2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FeatureLevel.Level_9_3">
            <summary>	
            The hardware supports Direct3D 9.3 features. 	
            </summary>	
            <unmanaged>D3D10_FEATURE_LEVEL_9_3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StandardMultisampleQualityLevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StandardMultisampleQualityLevels.StandardMultisamplePattern">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_STANDARD_MULTISAMPLE_PATTERN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StandardMultisampleQualityLevels.CenterMultisamplePattern">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D10_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SpriteFlags">
            <summary>	
            Sprite flags that tell the sprite drawing API how to behave. These are passed into <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/>.	
            </summary>	
            <remarks>	
            After a front-to-back or back-to-front sort is done, it will automatically do a secondary sort by texture. This is helpful for when there are many sprites with the same texture all on the same plane, such as when drawing the user interface in a game. 	
            </remarks>	
            <unmanaged>D3DX10_SPRITE_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.GroupByTexture">
            <summary>	
            Sort the sprites by texture before rendering so that when there are many sprites with the same texture that texture all of those sprites will be rendered at the same time, thereby improving performance. 	
            </summary>	
            <unmanaged>D3DX10_SPRITE_SORT_TEXTURE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.SortBackToFront">
            <summary>	
            Sort the sprites from back to front to that those farther away from the camera will be drawn first. 	
            </summary>	
            <unmanaged>D3DX10_SPRITE_SORT_DEPTH_BACK_TO_FRONT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.SortFrontToBack">
            <summary>	
            Sort the sprites from front to back so that those closer to the camera will be drawn first. 	
            </summary>	
            <unmanaged>D3DX10_SPRITE_SORT_DEPTH_FRONT_TO_BACK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.SaveState">
            <summary>	
            Saves the state so that when <see cref="M:SharpDX.Direct3D10.Sprite.End"/> is called, it will restore the state to the way it was before <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/> was called. 	
            </summary>	
            <unmanaged>D3DX10_SPRITE_SAVE_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.IncreaseTextureReferenceCount">
            <summary>	
            Calls AddRef on all of the textures when they are passed into <see cref="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[],System.Int32)"/>. 	
            </summary>	
            <unmanaged>D3DX10_SPRITE_ADDREF_TEXTURES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.FilterFlags">
            <summary>	
            Texture filtering flags.	
            </summary>	
            <remarks>	
            D3DX10 automatically performs gamma correction (to convert color data from RGB space to standard RGB space) when loading texture data. This is automatically done for instance when RGB data is loaded from a .png file into an sRGB texture. Use the SRGB filter flags to indicate if the data does not need to be converted into sRGB space. 	
            </remarks>	
            <unmanaged>D3DX10_FILTER_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.None">
            <summary>	
            No scaling or filtering will take place. Pixels outside the bounds of the source image are assumed to be transparent black. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Point">
            <summary>	
            Each destination pixel is computed by sampling the nearest pixel from the source image. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Linear">
            <summary>	
            Each destination pixel is computed by sampling the four nearest pixels from the source image. This filter works best when the scale on both axes is less than two. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Triangle">
            <summary>	
            Every pixel in the source image contributes equally to the destination image. This is the slowest of the filters. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_TRIANGLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Box">
            <summary>	
            Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_BOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.MirrorU">
            <summary>	
            Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_MIRROR_U</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.MirrorV">
            <summary>	
            Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_MIRROR_V</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.MirrorW">
            <summary>	
            Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_MIRROR_W</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Mirror">
            <summary>	
            Specifying this flag is the same as specifying the D3DX_FILTER_MIRROR_U, D3DX_FILTER_MIRROR_V, and D3DX_FILTER_MIRROR_W flags. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.Dither">
            <summary>	
            The resulting image must be dithered using a 4x4 ordered dither algorithm. This happens when converting from one format to another. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_DITHER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.DitherDiffusion">
            <summary>	
            Do diffuse dithering on the image when changing from one format to another. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_DITHER_DIFFUSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.SRgbIn">
            <summary>	
            Input data is in standard RGB (sRGB) color space. See remarks. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_SRGB_IN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.SRgbOut">
            <summary>	
            Output data is in standard RGB (sRGB) color space. See remarks. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_SRGB_OUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FilterFlags.SRgb">
            <summary>	
            Same as specifying D3DX_FILTER_SRGB_IN | D3DX_FILTER_SRGB_OUT. See remarks. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_SRGB</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.NormalMapFlags">
            <summary>	
            These flags are used to control how <see cref="M:SharpDX.Direct3D10.D3DX10.ComputeNormalMap(SharpDX.Direct3D10.Texture2D,SharpDX.Direct3D10.NormalMapFlags,SharpDX.Direct3D10.Channel,System.Single,SharpDX.Direct3D10.Texture2D)"/> generates normal maps.  Any number of these flags may be OR'd together in any combination.	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.NormalMapFlags.MirrorU">
            <summary>	
            Indicates that pixels off the edge of the texture on the U-axis should be mirrored, not wraped. 	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_MIRROR_U</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.NormalMapFlags.MirrorV">
            <summary>	
            Indicates that pixels off the edge of the texture on the V-axis should be mirrored, not wraped. 	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_MIRROR_V</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.NormalMapFlags.Mirror">
            <summary>	
            Same as D3DX10_NORMALMAP_MIRROR_U | D3DX10_NORMALMAP_MIRROR_V. 	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.NormalMapFlags.Invertsign">
            <summary>	
            Inverts the direction of each normal. 	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_INVERTSIGN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.NormalMapFlags.ComputeOcclusion">
            <summary>	
            Computes the per pixel occlusion term and encodes it into the alpha. An Alpha of 1 means that the pixel is not obscured in any way, and an alpha of 0 would mean that the pixel is completly obscured. 	
            </summary>	
            <unmanaged>D3DX10_NORMALMAP_COMPUTE_OCCLUSION</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Channel">
            <summary>	
            These flags are used by functions which operate on one or more channels in a texture.	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.Red">
            <summary>	
            Indicates the red channel should be used. 	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_RED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.Blue">
            <summary>	
            Indicates the blue channel should be used. 	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_BLUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.Green">
            <summary>	
            Indicates the green channel should be used. 	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_GREEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.Alpha">
            <summary>	
            Indicates the alpha channel should be used. 	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.Luminance">
            <summary>	
            Indicates the luminaces of the red, green, and blue channels should be used. 	
            </summary>	
            <unmanaged>D3DX10_CHANNEL_LUMINANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Channel.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ImageFileFormat">
            <summary>	
            Image file formats supported by D3DXCreatexxx and D3DX10Savexxx functions.	
            </summary>	
            <remarks>	
            See {{Types of Bitmaps (GDI+)}} for more information on some of these formats. D3DX10 makes use of the Windows Imaging Component to implement the majority of the supported bitmap file types. See {{Windows Imaging Component Overview}} for additional information.	
             	
            </remarks>	
            <unmanaged>D3DX10_IMAGE_FILE_FORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Bmp">
            <summary>	
            Windows bitmap (BMP) file format. Contains a header that describes the resolution of the device on which the rectangle of pixels was created, the dimensions of the rectangle, the size of the array of bits, a logical palette, and an array of bits that defines the relationship between pixels in the bitmapped image and entries in the logical palette. 	
            </summary>	
            <unmanaged>D3DX10_IFF_BMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Jpg">
            <summary>	
            Joint Photographic Experts Group (JPEG) compressed file format. Specifies variable compression of 24-bit RGB color and 8-bit gray-scale Tagged Image File Format (TIFF) image document files. 	
            </summary>	
            <unmanaged>D3DX10_IFF_JPG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Png">
            <summary>	
            Portable Network Graphics (PNG) file format. A non-proprietary bitmap format using lossless compression. 	
            </summary>	
            <unmanaged>D3DX10_IFF_PNG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Dds">
            <summary>	
            DirectDraw surface (DDS) file format. Stores textures, volume textures, and cubic environment maps, with or without mipmap levels, and with or without pixel compression. 	
            </summary>	
            <unmanaged>D3DX10_IFF_DDS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Tiff">
            <summary>	
            Tagged Image File Format (TIFF). 	
            </summary>	
            <unmanaged>D3DX10_IFF_TIFF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Gif">
            <summary>	
            Graphics Interchange Format (GIF). 	
            </summary>	
            <unmanaged>D3DX10_IFF_GIF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageFileFormat.Wmp">
            <summary>	
            Windows Media Player format (WMP). 	
            </summary>	
            <unmanaged>D3DX10_IFF_WMP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>_D3DX10_MESH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshFlags.Has32BitIndices">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESH_32_BIT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshFlags.HasAdjacency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESH_GS_ADJACENCY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshDiscardFlags">
            <summary>	
            Specifies which pieces of mesh data to discard from the device. Used with <see cref="M:SharpDX.Direct3D10.Mesh.Discard(SharpDX.Direct3D10.MeshDiscardFlags)"/>.	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshDiscardFlags.AttributeBuffer">
            <summary>	
            Discard the attribute buffer. 	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_ATTRIBUTE_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshDiscardFlags.AttributeTable">
            <summary>	
            Discard the attribute table. 	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_ATTRIBUTE_TABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshDiscardFlags.PointRepresentation">
            <summary>	
            Discard the reference reps buffer. 	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_POINTREPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshDiscardFlags.Adjacency">
            <summary>	
            Discard the adjacency buffer. 	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_ADJACENCY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshDiscardFlags.DeviceBuffers">
            <summary>	
            Discard the buffers committed to the device (with <see cref="M:SharpDX.Direct3D10.Mesh.Commit"/>). 	
            </summary>	
            <unmanaged>D3DX10_MESH_DISCARD_DEVICE_BUFFERS</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshOptimizeFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>_D3DX10_MESHOPT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.Compact">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_COMPACT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.AttributeSort">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_ATTR_SORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.VertexCache">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_VERTEX_CACHE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.StripReorder">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_STRIP_REORDER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.IgnoreVertices">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_IGNORE_VERTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.DoNotSplit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_DO_NOT_SPLIT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshOptimizeFlags.DeviceIndependent">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_MESHOPT_DEVICE_INDEPENDENT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.D3D10">
            <summary>
            D3D10 Functions.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.D3D10.SdkVersion">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D10.D3D10.SdkVersion1">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)">
            <summary>	
            Create a Direct3D 10.0 device that represents the display adapter.	
            </summary>	
            <remarks>	
            This example creates a reference device. 	
            <code> ID3D10Device* g_pd3dDevice = NULL;	
            D3D10CreateDevice( NULL, D3D10_DRIVER_TYPE_REFERENCE, NULL, 0,  D3D10_SDK_VERSION, &amp;g_pd3dDevice );              </code>	
            	
             To create a device and a swap chain at the same time, see <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)"/>. The object returned by D3D10CreateDevice implements the <see cref="T:SharpDX.ComObject"/> interface and can be queried for other  interfaces the object supports. To retrieve the <see cref="T:SharpDX.DXGI.Device"/> interface of the object the following code could be used. 	
            <code> IDXGIDevice * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;pDXGIDevice); </code>	
            	
             	
            </remarks>	
            <param name="adapterRef">Pointer to the display adapter (see <see cref="T:SharpDX.DXGI.Adapter"/>) when creating a hardware device; otherwise set this parameter to NULL.  If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated by {{EnumAdapters}}. </param>
            <param name="driverType">The device-driver type (see <see cref="T:SharpDX.Direct3D10.DriverType"/>). The driver type determines the type of device you will create. </param>
            <param name="software">Reserved. Set to NULL. </param>
            <param name="flags">Optional. Device creation flags (see <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should always be D3D10_SDK_VERSION. </param>
            <param name="deviceRef">Address of a reference to the device created (see <see cref="T:SharpDX.Direct3D10.Device"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D10_CREATE_DEVICE_FLAG Flags,[None] int SDKVersion,[Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)">
            <summary>	
            Create a Direct3D 10.0 device and a swap chain.	
            </summary>	
            <remarks>	
            To create a device without creating a swap chain, see <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/>. 	
            </remarks>	
            <param name="adapterRef">Pointer to a <see cref="T:SharpDX.DXGI.Adapter"/>. </param>
            <param name="driverType">The type of driver for the device. See <see cref="T:SharpDX.Direct3D10.DriverType"/>. </param>
            <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software. The HMODULE of a DLL can be obtained with {{LoadLibrary}}, {{LoadLibraryEx}}, or {{GetModuleHandle}}. </param>
            <param name="flags">Optional. Device creation flags (see <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>) that enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_SDK_VERSION, defined in d3d10.h. </param>
            <param name="swapChainDescRef">Description of the swap chain. See <see cref="T:SharpDX.DXGI.SwapChainDescription"/>. </param>
            <param name="swapChainRef">Address of a reference to an <see cref="T:SharpDX.DXGI.SwapChain"/>. </param>
            <param name="deviceRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.Device"/> that will receive the newly created device. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D10_CREATE_DEVICE_FLAG Flags,[None] int SDKVersion,[In] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskUnion(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Combine two state-block masks with a bitwise OR.	
            </summary>	
            <param name="aRef">State block mask on the left side of the bitwise OR operation. See <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>. </param>
            <param name="bRef">State block mask on the right side of the bitwise OR operation. </param>
            <param name="resultRef">The result of the bitwise OR operation. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskUnion([None] D3D10_STATE_BLOCK_MASK* pA,[None] D3D10_STATE_BLOCK_MASK* pB,[None] D3D10_STATE_BLOCK_MASK* pResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskIntersect(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Combine two state-block masks with a bitwise AND.	
            </summary>	
            <param name="aRef">State block mask on the left side of the bitwise AND operation. See <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>. </param>
            <param name="bRef">State block mask on the right side of the bitwise AND operation. </param>
            <param name="resultRef">The result of the bitwise AND operation. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskIntersect([None] D3D10_STATE_BLOCK_MASK* pA,[None] D3D10_STATE_BLOCK_MASK* pB,[None] D3D10_STATE_BLOCK_MASK* pResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskDifference(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Combine two state-block masks with a bitwise XOR.	
            </summary>	
            <param name="aRef">State block mask on the left side of the bitwise XOR operation. See <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>. </param>
            <param name="bRef">State block mask on the right side of the bitwise XOR operation. </param>
            <param name="resultRef">The result of the bitwise XOR operation. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskDifference([None] D3D10_STATE_BLOCK_MASK* pA,[None] D3D10_STATE_BLOCK_MASK* pB,[None] D3D10_STATE_BLOCK_MASK* pResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskEnableCapture(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32,System.Int32)">
            <summary>	
            Enable a range of state values in a state block mask.	
            </summary>	
            <remarks>	
            This is an example of how to call this function. It create a mask that can capture and apply to geometry-shader samplers in slots 2 ~ 13. 	
            <code> D3D10_STATE_BLOCK_MASK stateBlockMask;	
            D3D10StateBlockMaskEnableCapture(&amp;stateBlockMask,  D3D10_DST_GS_SAMPLERS,  2, 13); </code>	
            	
             	
            </remarks>	
            <param name="maskRef">A state block mask (see <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>). </param>
            <param name="stateType">The type of device state to enable (see <see cref="T:SharpDX.Direct3D10.DeviceStateTypes"/>. </param>
            <param name="rangeStart">The lower end of the range of values to set to true. </param>
            <param name="rangeLength">The upper end of the range of values to set to true. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskEnableCapture([None] D3D10_STATE_BLOCK_MASK* pMask,[None] D3D10_DEVICE_STATE_TYPES StateType,[None] int RangeStart,[None] int RangeLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskDisableCapture(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32,System.Int32)">
            <summary>	
            Disable state capturing with a state-block mask.	
            </summary>	
            <remarks>	
            This is an example of how to call this function. It creates a mask that cannot capture and apply to geometry-shader samplers in slots 2 ~ 23. 	
            <code> D3D10_STATE_BLOCK_MASK stateBlockMask;	
            D3D10StateBlockMaskDisableCapture(&amp;stateBlockMask,  D3D10_DST_GS_SAMPLERS,  2, 23); </code>	
            	
             	
            </remarks>	
            <param name="maskRef">A state block mask (see <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>). </param>
            <param name="stateType">The type of device state to disable (see <see cref="T:SharpDX.Direct3D10.DeviceStateTypes"/>). </param>
            <param name="rangeStart">The lower end of the range of values to set to false. </param>
            <param name="rangeLength">The upper end of the range of values to set to false. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskDisableCapture([None] D3D10_STATE_BLOCK_MASK* pMask,[None] D3D10_DEVICE_STATE_TYPES StateType,[None] int RangeStart,[None] int RangeLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskEnableAll(SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Enable a state-block mask to capture and apply all state variables.	
            </summary>	
            <param name="maskRef">A mask with everything turned on. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskEnableAll([None] D3D10_STATE_BLOCK_MASK* pMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskDisableAll(SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Disable all state capturing with a state-block mask.	
            </summary>	
            <param name="maskRef">A mask filled with all zeroes (see <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10StateBlockMaskDisableAll([None] D3D10_STATE_BLOCK_MASK* pMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.StateBlockMaskGetSetting(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32)">
            <summary>	
            Get an element in a state-block mask; determine if an element is allowed by the mask for capturing and applying.	
            </summary>	
            <param name="maskRef">State block mask. See <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>. </param>
            <param name="stateType">The type of device state. See <see cref="T:SharpDX.Direct3D10.DeviceStateTypes"/>. </param>
            <param name="entry">The entry within the device state. This is only relevant for state types that have more than one entry, such as D3D10_DST_GS_SAMPLERS. </param>
            <returns>Returns true if the specified feature is allowed by the mask for capturing and applying, and false otherwise. </returns>
            <unmanaged>BOOL D3D10StateBlockMaskGetSetting([None] D3D10_STATE_BLOCK_MASK* pMask,[None] D3D10_DEVICE_STATE_TYPES StateType,[None] int Entry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateStateBlock(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.StateBlock@)">
            <summary>	
            Create a state block.	
            </summary>	
            <remarks>	
            A state block is a collection of device state, and is used for saving and restoring device state. Use a state-block mask to enable subsets of state for saving and restoring. The <see cref="T:SharpDX.Direct3D10.StateBlockMask"/> structure can be filled manually or by using any of the D3D10StateBlockMaskXXX APIs. A state block mask can also be obtained by calling <see cref="M:SharpDX.Direct3D10.EffectTechnique.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)"/> or <see cref="M:SharpDX.Direct3D10.EffectPass.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)"/>.   Differences between Direct3D 9 and Direct3D 10: In Direct3D 10, a state block object does not contain any valid information about the state of the device until <see cref="M:SharpDX.Direct3D10.StateBlock.Capture"/> is called. In Direct3D 9, state is saved in a state block object, when it is created.   ? 	
            </remarks>	
            <param name="deviceRef">The device for which the state block will be created. </param>
            <param name="stateBlockMaskRef">Indicates which parts of the device state will be captured when calling <see cref="M:SharpDX.Direct3D10.StateBlock.Capture"/> and reapplied when calling <see cref="M:SharpDX.Direct3D10.StateBlock.Apply"/>. See remarks. </param>
            <param name="stateBlockRef">Address of a reference to the buffer created (see <see cref="T:SharpDX.Direct3D10.StateBlock"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateStateBlock([None] ID3D10Device* pDevice,[None] D3D10_STATE_BLOCK_MASK* pStateBlockMask,[None] ID3D10StateBlock** ppStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateEffectFromMemory(System.IntPtr,SharpDX.Size,System.Int32,SharpDX.Direct3D10.Device,SharpDX.Direct3D10.EffectPool,System.IntPtr@)">
            <summary>	
            Creates an ID3D10Effect from a buffer containing a compiled effect.	
            </summary>	
            <remarks>	
            This method is used to create an <see cref="T:SharpDX.Direct3D10.Effect"/> object from an effect that has been compiled before runtime and loaded into memory.   For help precompiling an effect, see {{Offline Compiling}}.   To load and compile an ASCII .fx file see {{Compile an Effect (Direct3D 10)}}. 	
            </remarks>	
            <param name="dataRef">A reference to a compiled effect. </param>
            <param name="dataLength">Length of pData. </param>
            <param name="fXFlags">Effect {{compile options}}. </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>). </param>
            <param name="effectPoolRef">Optional. A reference to an memory space for effect variables that are shared across effects (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>). </param>
            <param name="effectRef">A reference to an <see cref="T:SharpDX.Direct3D10.Effect"/> which contains the created effect. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateEffectFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[Out] ID3D10Effect** ppEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateEffectPoolFromMemory(System.IntPtr,SharpDX.Size,System.Int32,SharpDX.Direct3D10.Device,SharpDX.Direct3D10.EffectPool@)">
            <summary>	
            Create an effect pool (or shared memory location), to enable sharing variables between effects.	
            </summary>	
            <remarks>	
            A pool is a shared location in memory. Effect variables that are located in a pool can be updated once, and the effect system will take care of updating each effect that uses that variable. To pool an effect variable, tell the effect to locate the variable in a pool when the effect is created, using a helper function such as {{D3DX10CreateEffectFromFile}}. For help compiling an effect, see {{Compile an Effect (Direct3D 10)}}. 	
            </remarks>	
            <param name="dataRef">A reference to a compiled effect. </param>
            <param name="dataLength">Length of pData. </param>
            <param name="fXFlags">Effect {{compile options}}. </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>). </param>
            <param name="effectPoolRef">A reference to the <see cref="T:SharpDX.Direct3D10.EffectPool"/> that contains the effect pool. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateEffectPoolFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool** ppEffectPool)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)">
            <summary>	
            Create a Direct3D 10.1 device that represents the display adapter.	
            </summary>	
            <remarks>	
            To create a device and a swap chain at the same time, see <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)"/>. This method requires Windows Vista Service Pack 1, Windows Server 2008, or later release of Windows. The object returned by D3D10CreateDevice1 implements the <see cref="T:SharpDX.ComObject"/> interface  and can be queried for other  interfaces the object supports. To retrieve the <see cref="T:SharpDX.DXGI.Device"/> interface of the object the following code could be used. 	
            <code> IDXGIDevice * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;pDXGIDevice); </code>	
            	
             	
            </remarks>	
            <param name="adapterRef">Pointer to the display adapter (see <see cref="T:SharpDX.DXGI.Adapter"/>) when creating a hardware device; otherwise set this parameter to  NULL. If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated  by {{EnumAdapters}}. </param>
            <param name="driverType">The device-driver type (see <see cref="T:SharpDX.Direct3D10.DriverType"/>). The driver type determines the type of device you will create. </param>
            <param name="software">This is set to NULL except for D3D10_DRIVER_TYPE_SOFTWARE driver types. </param>
            <param name="flags">Optional. Device creation flags (see <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="hardwareLevel">The version of hardware that is available for acceleration (see <see cref="T:SharpDX.Direct3D10.FeatureLevel"/>). </param>
            <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_1_SDK_VERSION, defined in D3D10.h. </param>
            <param name="deviceRef">Address of a reference to the device created (see <see cref="T:SharpDX.Direct3D10.Device1"/>). </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateDevice1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D10_CREATE_DEVICE_FLAG Flags,[None] D3D10_FEATURE_LEVEL1 HardwareLevel,[None] int SDKVersion,[Out] ID3D10Device1** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)">
            <summary>	
            Create a Direct3D 10.1 device and a swap chain.	
            </summary>	
            <remarks>	
            To create a device without creating a swap chain, see <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/>. This method requires Windows Vista Service Pack 1, Windows Server 2008, or later release of Windows. 	
            </remarks>	
            <param name="adapterRef">Pointer to a <see cref="T:SharpDX.DXGI.Adapter"/>. </param>
            <param name="driverType">The type of driver for the device. See <see cref="T:SharpDX.Direct3D10.DriverType"/>. </param>
            <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software.  The HMODULE of a DLL can be obtained with {{LoadLibrary}},  {{LoadLibraryEx}},  or {{GetModuleHandle}}. </param>
            <param name="flags">Optional. Device creation flags (see <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="hardwareLevel">The version of hardware that is available for acceleration (see <see cref="T:SharpDX.Direct3D10.FeatureLevel"/>). </param>
            <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_1_SDK_VERSION, defined in D3D10.h. </param>
            <param name="swapChainDescRef">Description of the swap chain. See <see cref="T:SharpDX.DXGI.SwapChainDescription"/>. </param>
            <param name="swapChainRef">Address of a reference to an <see cref="T:SharpDX.DXGI.SwapChain"/>. </param>
            <param name="deviceRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.Device1"/> that will receive the newly created device. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D10_CREATE_DEVICE_FLAG Flags,[None] D3D10_FEATURE_LEVEL1 HardwareLevel,[None] int SDKVersion,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device1** ppDevice)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.D3DX10">
            <summary>
            D3DX10 Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,System.Int32,SharpDX.Direct3D10.Device@)">
            <summary>	
            Create the best Direct3D 10 device that represents the display adapter.  If a Direct3D 10.1-compatible device can be created, it will be possible to acquire an <see cref="T:SharpDX.Direct3D10.Device1"/> reference from the returned device interface reference.	
            </summary>	
            <remarks>	
            This function attempts to create the best device for the hardware. First, the function attempts to create a 10.1 device. If a 10.1 device cannot be created, the function attempts to create a 10.0 device. If neither device is successfully created, the function returns E_FAIL. If your application needs to create only a 10.1 device, or a 10.0 device only, use the following functions instead:  Use the <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/> function to create a Direct3D 10.0 device only. Use the <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> function to create a Direct3D 10.1 device only. Use the <see cref="M:SharpDX.Direct3D10.D3DX10.GetFeatureLevel1(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Device1@)"/> function to get an <see cref="T:SharpDX.Direct3D10.Device1"/> interface reference from an <see cref="T:SharpDX.Direct3D10.Device"/> interface reference.  A Direct3D 10.1 device can only be created on computers running Windows Vista Service Pack 1 or later, and with Direct3D 10.1-compatible hardware installed. However, it is legal to call this function on computers running any version of Windows that has the D3DX10 DLL installed. 	
            </remarks>	
            <param name="adapterRef">Pointer to the display adapter (see the <see cref="T:SharpDX.DXGI.Adapter"/> interface) when creating a hardware device; otherwise set this parameter to NULL. If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated by the <see cref="T:SharpDX.DXGI.Factory"/> interface. </param>
            <param name="driverType">The device-driver type (see the <see cref="T:SharpDX.Direct3D10.DriverType"/> enumeration). The driver type determines the type of device you will create. </param>
            <param name="software">A handle to a loaded module that implements a software driver (such as D3D10Ref.dll). To get a handle, call the {{GetModuleHandle}} function. </param>
            <param name="flags">Device creation flags (see the <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/> enumeration) that enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="deviceRef">Address of a reference to the device created (see the <see cref="T:SharpDX.Direct3D10.Device"/> interface). </param>
            <returns>This function returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] int Flags,[None] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)">
            <summary>	
            Create the best Direct3D device and a swap chain.	
            </summary>	
            <remarks>	
            To create the best device, this method implements more than one device creation option. First, the method attempts to create a 10.1 device (and swap chain). If that fails, the method attempts to create a 10.0 device. If that fails, the method will fail. If your application needs to create only a 10.1 device, or a 10.0 device only, use these APIs instead:  Use <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)"/> to create a Direct3D 10.0 (only) device and swap chain. Use <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)"/> to create a Direct3D 10.1 (only) device and swap chain.  This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <param name="adapterRef">Pointer to a <see cref="T:SharpDX.DXGI.Adapter"/>. </param>
            <param name="driverType">The type of driver for the device. See <see cref="T:SharpDX.Direct3D10.DriverType"/>. </param>
            <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software. The HMODULE of a DLL can be obtained with {{LoadLibrary}}, {{LoadLibraryEx}}, or {{GetModuleHandle}}. </param>
            <param name="flags">Optional. Device creation flags (see <see cref="T:SharpDX.Direct3D10.DeviceCreationFlags"/>) that enable {{API layers}}. These flags can be bitwise OR'd together. </param>
            <param name="swapChainDescRef">Description of the swap chain. See <see cref="T:SharpDX.DXGI.SwapChainDescription"/>. </param>
            <param name="swapChainRef">Address of a reference to an <see cref="T:SharpDX.DXGI.SwapChain"/>. </param>
            <param name="deviceRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.Device"/> that will receive the newly created device. </param>
            <returns>This method returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] void* Software,[None] int Flags,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[None] IDXGISwapChain** ppSwapChain,[None] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.GetFeatureLevel1(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Device1@)">
            <summary>	
            Get a Direct3D 10.1 device interface reference from a Direct3D 10.0 interface reference.	
            </summary>	
            <remarks>	
            For this function to succeed, you must have acquired the supplied <see cref="T:SharpDX.Direct3D10.Device"/> reference using a call to the <see cref="M:SharpDX.Direct3D10.D3DX10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,System.Int32,SharpDX.Direct3D10.Device@)"/> function, the <see cref="M:SharpDX.Direct3D10.D3DX10.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device@)"/> function, the <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.Direct3D10.Device1@)"/> function, or the <see cref="M:SharpDX.Direct3D10.D3D10.CreateDeviceAndSwapChain1(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,SharpDX.Direct3D10.FeatureLevel,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D10.Device1@)"/> function. You can only create a Direct3D 10.1 device on computers running Windows Vista Service Pack 1 or later, and with Direct3D 10.1-compatible hardware installed. This function will return E_FAIL on any computer not meeting these requirements.	
            However, you can call this function on any version of Windows that has the D3DX10 DLL installed. 	
            </remarks>	
            <param name="deviceRef">Pointer to the Direct3D 10.0 device (see the <see cref="T:SharpDX.Direct3D10.Device"/> interface). </param>
            <param name="device1Ref">Pointer to the Direct3D 10.1 device (see the <see cref="T:SharpDX.Direct3D10.Device1"/> interface). </param>
            <returns>This function returns one of the following {{Direct3D 10 Return Codes}}.  If a Direct3D 10.1 device interface can be acquired, this function succeeds and passes a reference to the 10.1 interface using the ppDevice parameter. If a Direct3D 10.1 device interface cannot be acquired, this function returns E_FAIL, and will not return anything for the ppDevice parameter. </returns>
            <unmanaged>HRESULT D3DX10GetFeatureLevel1([None] ID3D10Device* pDevice,[None] ID3D10Device1** ppDevice1)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CheckVersion(System.Int32,System.Int32)">
            <summary>	
            Verify that the version of D3DX you compiled with is the version that you are running.	
            </summary>	
            <remarks>	
            Use this function during the initialization of your application. 	
            <code> HRESULT hr; if( FAILED( D3DX10CheckVersion(D3D10_SDK_VERSION, D3DX10_SDK_VERSION) ) ) return E_FAIL; </code>	
            	
             	
            </remarks>	
            <param name="d3DSdkVersion">Use D3D10_SDK_VERSION. See remarks. </param>
            <param name="d3DX10SdkVersion">Use D3DX10_SDK_VERSION. See remarks. </param>
            <returns>If the version doesn't match, the function will return FALSE (a number less than or equal to 0, the number itself has no meaning). </returns>
            <unmanaged>HRESULT D3DX10CheckVersion([None] int D3DSdkVersion,[None] int D3DX10SdkVersion)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateSprite(SharpDX.Direct3D10.Device,System.Int32,SharpDX.Direct3D10.Sprite@)">
            <summary>	
            Create a sprite for drawing a 2D texture.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will draw the sprite. </param>
            <param name="cDeviceBufferSize">The size of the vertex buffer, in number of sprites, that will be sent to the device when <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> or <see cref="M:SharpDX.Direct3D10.Sprite.DrawSpritesImmediate(SharpDX.Direct3D10.SpriteInstance[],System.Int32,System.Int32,System.Int32)"/> is called. This should be a small number if you know you will be rendering a small number of sprites at a time (to save memory) and a large number if you know you will be rendering a large number of sprites at a time. The maximum value is 4096. If 0 is specified, the vertex buffer size will automatically be set to 4096. </param>
            <param name="spriteRef">The address of a reference to a sprite interface (see <see cref="T:SharpDX.Direct3D10.Sprite"/>). </param>
            <returns>If the function succeeds, the return value is S_OK. If the function fails, the return value can be one of the following: D3DERR_INVALIDCALL, E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT D3DX10CreateSprite([None] ID3D10Device* pDevice,[None] int cDeviceBufferSize,[None] LPD3DX10SPRITE* ppSprite)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateFont(SharpDX.Direct3D10.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D10.Font@)">
            <summary>	
            Creates a font object for a device and font.	
            </summary>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DXCreateFontW. Otherwise, the function call resolves to D3DXCreateFontA because ANSI strings are being used. If you want more information about font parameters, see {{The Logical Font}}. 	
            </remarks>	
            <param name="deviceRef">Pointer to an ID3D10Device interface, the device to be associated with the font object. </param>
            <param name="height">The height of the characters in logical units. </param>
            <param name="width">The width of the characters in logical units. </param>
            <param name="weight">Typeface weight. One example is bold. </param>
            <param name="mipLevels">The number of mipmap levels. </param>
            <param name="italic">True for italic font, false otherwise. </param>
            <param name="charSet">The character set of the font. </param>
            <param name="outputPrecision">Specifies how Windows should attempt to match the desired font sizes and characteristics with actual fonts. Use OUT_TT_ONLY_PRECIS for instance, to ensure that you always get a TrueType font. </param>
            <param name="quality">Specifies how Windows should match the desired font with a real font. It applies to raster fonts only and should not affect TrueType fonts. </param>
            <param name="pitchAndFamily">Pitch and family index. </param>
            <param name="faceNameRef">String containing the typeface name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks.  </param>
            <param name="fontRef">Returns a reference to an ID3DX10Font interface, representing the created font object. </param>
            <returns>If the function succeeds, the return value is S_OK. If the function fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA, E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT D3DX10CreateFontW([None] ID3D10Device* pDevice,[None] int Height,[None] int Width,[None] int Weight,[None] int MipLevels,[None] BOOL Italic,[None] int CharSet,[None] int OutputPrecision,[None] int Quality,[None] int PitchAndFamily,[None] const wchar_t* pFaceName,[None] LPD3DX10FONT* ppFont)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateFontIndirect(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.FontDescription@,SharpDX.Direct3D10.Font@)">
            <summary>	
            Creates a font object.	
            </summary>	
            <param name="deviceRef">Pointer to an <see cref="T:SharpDX.Direct3D10.Device"/> interface. </param>
            <param name="descRef">Pointer to a {{D3DX10_FONT_DESC}} structure, describing the attributes of the font object to create. If Unicode is defined, the function call resolves to D3DXCreateFontIndirectW. Otherwise, the function call resolves to D3DXCreateFontIndirectA because ANSI strings are being used. </param>
            <param name="fontRef">Returns a reference to an <see cref="T:SharpDX.Direct3D10.Font"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateFontIndirectW([None] ID3D10Device* pDevice,[None] const D3DX10_FONT_DESCW* pDesc,[None] LPD3DX10FONT* ppFont)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.GetImageInfoFromFile(System.String,System.IntPtr,SharpDX.Direct3D10.ImageInformation@,System.Int32@)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <remarks>	
            This function supports both Unicode and ANSI strings. 	
            </remarks>	
            <param name="srcFileRef">File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Pointer to a D3DX10_IMAGE_INFO structure to be filled with the description of the data in the source file. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL </returns>
            <unmanaged>HRESULT D3DX10GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX10ThreadPump* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.GetImageInfoFromResource(System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D10.ImageInformation@,System.Int32@)">
            <summary>	
            Retrieves information about a given image in a resource.	
            </summary>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DX10GetImageInfoFromResourceW. Otherwise, the function call resolves to D3DX10GetImageInfoFromResourceA because ANSI strings are being used. 	
            </remarks>	
            <param name="hSrcModule">Module where the resource is loaded. Set this parameter to NULL to specify the module associated with the image that the operating system used to create the current process. </param>
            <param name="srcResourceRef">Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Pointer to a D3DX10_IMAGE_INFO structure to be filled with the description of the data in the source file. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL </returns>
            <unmanaged>HRESULT D3DX10GetImageInfoFromResourceW([None] void* hSrcModule,[None] const wchar_t* pSrcResource,[None] ID3DX10ThreadPump* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.GetImageInfoFromMemory(System.IntPtr,SharpDX.Size,System.IntPtr,SharpDX.Direct3D10.ImageInformation@,System.Int32@)">
            <summary>	
            Get information about an image already loaded into memory.	
            </summary>	
            <param name="srcDataRef">Pointer to the image in memory. </param>
            <param name="srcDataSize">Size of the image in memory, in bytes. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Information about the image in memory. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10GetImageInfoFromMemory([None] const void* pSrcData,[None] SIZE_T SrcDataSize,[None] ID3DX10ThreadPump* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateShaderResourceViewFromFile(SharpDX.Direct3D10.Device,System.String,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a file.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="srcFileRef">Name of the file that contains the shader-resource view. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">Pointer to a thread-pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateTextureFromFile(SharpDX.Direct3D10.Device,System.String,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.Resource@,System.Int32@)">
            <summary>	
            Create a texture resource from a file.	
            </summary>	
            <remarks>	
            For a list of supported image formats see <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>. 	
            </remarks>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="srcFileRef">The name of the file containing the resource. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise,  the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously  and will not return until it is finished. </param>
            <param name="textureRef">The address of a reference to the texture resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid  memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateTextureFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateShaderResourceViewFromResource(SharpDX.Direct3D10.Device,System.IntPtr,System.String,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a resource.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="hSrcModule">Handle to the resource module containing the shader-resource view. HMODULE can be obtained with {{GetModuleHandle Function}}. </param>
            <param name="srcResourceRef">Name of the shader resource view in hSrcModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromResourceW([None] ID3D10Device* pDevice,[None] void* hSrcModule,[None] const wchar_t* pSrcResource,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateTextureFromResource(SharpDX.Direct3D10.Device,System.IntPtr,System.String,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.Resource@,System.Int32@)">
            <summary>	
            Create a texture from another resource.	
            </summary>	
            <remarks>	
            For a list of supported image formats see <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>. 	
            </remarks>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="hSrcModule">A handle to the source resource. HMODULE can be obtained with  {{GetModuleHandle Function}}. </param>
            <param name="srcResourceRef">A string that contains the name of the source resource.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.  </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously  and will not return until it is finished. </param>
            <param name="textureRef">The address of a reference to the texture resource (see <see cref="T:SharpDX.Direct3D10.Resource"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a  valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateTextureFromResourceW([None] ID3D10Device* pDevice,[None] void* hSrcModule,[None] const wchar_t* pSrcResource,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateShaderResourceViewFromMemory(SharpDX.Direct3D10.Device,System.IntPtr,SharpDX.Size,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="srcDataRef">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="srcDataSize">Size of the file in memory. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the newly created shader resource view. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateTextureFromMemory(SharpDX.Direct3D10.Device,System.IntPtr,SharpDX.Size,System.Nullable{SharpDX.Direct3D10.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D10.Resource@,System.Int32@)">
            <summary>	
            Create a texture resource from a file residing in system memory.	
            </summary>	
            <remarks>	
            For a list of supported image formats see <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>. 	
            </remarks>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="srcDataRef">Pointer to the resource in system memory. </param>
            <param name="srcDataSize">Size of the resource in system memory. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously  and will not return until it is finished. </param>
            <param name="textureRef">Address of a reference to the created resource. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a  valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateTextureFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.LoadTextureFromTexture(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.TextureLoadInformation@,SharpDX.Direct3D10.Resource)">
            <summary>	
            Load a texture from a texture.	
            </summary>	
            <param name="srcTextureRef">Pointer to the source texture. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="loadInfoRef">Pointer to texture loading parameters. See <see cref="T:SharpDX.Direct3D10.TextureLoadInformation"/>. </param>
            <param name="dstTextureRef">Pointer to the destination texture. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10LoadTextureFromTexture([None] ID3D10Resource* pSrcTexture,[None] D3DX10_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D10Resource* pDstTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.FilterTexture(SharpDX.Direct3D10.Resource,System.Int32,System.Int32)">
            <summary>	
            Generates mipmap chain using a particular texture filter.	
            </summary>	
            <param name="textureRef">The texture object to be filtered. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="srcLevel">The mipmap level whose data is used to generate the rest of the mipmap chain. </param>
            <param name="mipFilter">Flags controlling how each miplevel is filtered (or D3DX10_DEFAULT for D3DX10_FILTER_BOX). See <see cref="T:SharpDX.Direct3D10.FilterFlags"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10FilterTexture([None] ID3D10Resource* pTexture,[None] int SrcLevel,[None] int MipFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.SaveTextureToFile(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.ImageFileFormat,System.String)">
            <summary>	
            Save a texture to a file.	
            </summary>	
            <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="destFormat">The format the texture will be saved as (see <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>). D3DX10_IFF_DDS is the preferred format since it is the only option that supports all the formats in <see cref="T:SharpDX.DXGI.Format"/>. </param>
            <param name="destFileRef">Name of the destination output file where the texture will be saved.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}; use the return value to see if the DestFormat is supported. </returns>
            <unmanaged>HRESULT D3DX10SaveTextureToFileW([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[None] const wchar_t* pDestFile)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.SaveTextureToMemory(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.ImageFileFormat,SharpDX.Direct3D.Blob@,System.Int32)">
            <summary>	
            Save a texture to memory.	
            </summary>	
            <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="T:SharpDX.Direct3D10.Resource"/>. </param>
            <param name="destFormat">The format the texture will be saved as. See <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>. </param>
            <param name="destBufRef">Address of a reference to the memory containing the saved texture. See <see cref="T:SharpDX.Direct3D.Blob"/>. </param>
            <param name="flags">Optional. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10SaveTextureToMemory([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[Out] LPD3D10BLOB* ppDestBuf,[None] int Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.ComputeNormalMap(SharpDX.Direct3D10.Texture2D,SharpDX.Direct3D10.NormalMapFlags,SharpDX.Direct3D10.Channel,System.Single,SharpDX.Direct3D10.Texture2D)">
            <summary>	
            Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.	
            </summary>	
            <remarks>	
            This method computes the normal by using the central difference with a kernel size of 3x3. RGB channels in the destination contain biased (x,y,z) components of the normal. The central differencing denominator is hardcoded to 2.0. 	
            </remarks>	
            <param name="srcTextureRef">Pointer to an ID3D10Texture2D interface, representing the source height-map texture. </param>
            <param name="flags">One or more D3DX_NORMALMAP flags that control generation of normal maps. </param>
            <param name="channel">One D3DX_CHANNEL flag specifying the source of height information. </param>
            <param name="amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible. </param>
            <param name="destTextureRef">Pointer to an ID3D10Texture2D interface, representing the destination texture. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following value: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT D3DX10ComputeNormalMap([None] ID3D10Texture2D* pSrcTexture,[None] D3DX10_NORMALMAP_FLAG Flags,[None] D3DX10_CHANNEL_FLAG Channel,[None] float Amplitude,[None] ID3D10Texture2D* pDestTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.SHProjectCubeMap(System.Int32,SharpDX.Direct3D10.Texture2D,System.Single[],System.Single[],System.Single[])">
            <summary>	
            Projects a function represented in a cube map into spherical harmonics.	
            </summary>	
            <param name="order">Order of the SH evaluation, generates Order^2 coefs, degree is Order-1. </param>
            <param name="cubeMapRef">Cubemap that is going to be projected into spherical harmonics. See <see cref="T:SharpDX.Direct3D10.Texture2D"/>. </param>
            <param name="rOutRef">Output SH vector for red. </param>
            <param name="gOutRef">Output SH vector for green. </param>
            <param name="bOutRef">Output SH vector for blue. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10SHProjectCubeMap([In] int Order,[None] ID3D10Texture2D* pCubeMap,[Out, Buffer] float* pROut,[Out, Buffer, Optional] float* pGOut,[Out, Buffer, Optional] float* pBOut)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateMesh(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.InputElement[],System.Int32,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Mesh@)">
            <summary>	
            Creates a mesh object using a declarator.	
            </summary>	
            <param name="deviceRef">Pointer to an <see cref="T:SharpDX.Direct3D10.Device"/>, the device object to be associated with the mesh. </param>
            <param name="declarationRef">Array of <see cref="T:SharpDX.Direct3D10.InputElement"/> elements, describing the vertex format for the returned mesh. This parameter must map directly to a flexible vertex format (FVF). </param>
            <param name="declCount">The number of elements in pDeclaration. </param>
            <param name="ositionSemanticRef">Semantic that identifies which part of the vertex declaration contains position information. </param>
            <param name="vertexCount">Number of vertices for the mesh. This parameter must be greater than 0. </param>
            <param name="faceCount">Number of faces for the mesh. The valid range for this number is greater than 0, and one less than the maximum DWORD (typically 65534), because the last index is reserved. </param>
            <param name="options">Combination of one or more flags from the {{D3DX10_MESH}}, specifying options for the mesh.  </param>
            <param name="meshRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.Mesh"/>, representing the created mesh object. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be one of the following: D3DERR_INVALIDCALL, E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT D3DX10CreateMesh([None] ID3D10Device* pDevice,[In, Buffer] const D3D10_INPUT_ELEMENT_DESC* pDeclaration,[None] int DeclCount,[None] const char* pPositionSemantic,[None] int VertexCount,[None] int FaceCount,[None] int Options,[None] ID3DX10Mesh** ppMesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateSkinInfo(SharpDX.Direct3D10.SkinInfo@)">
            <summary>	
            Creates an empty skin mesh object using a declarator.	
            </summary>	
            <remarks>	
            Use the <see cref="M:SharpDX.Direct3D10.SkinInfo.SetBoneInfluence(System.Int32,System.Int32,System.Single)"/> to populate the empty skin mesh object returned by this method. 	
            </remarks>	
            <param name="skinInfoRef">Address of a reference to an <see cref="T:SharpDX.Direct3D10.SkinInfo"/>, representing the created skin mesh object. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be: E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT D3DX10CreateSkinInfo([None] LPD3DX10SKININFO* ppSkinInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectFromFile(System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,SharpDX.Direct3D10.EffectPool,System.IntPtr,System.IntPtr,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect from a file.	
            </summary>	
            <param name="fileNameRef">Name of the ASCII effect file. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="effectPoolRef">Pointer to an effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>) for sharing variables between effects. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectRef">Address of a reference to the effect (see <see cref="T:SharpDX.Direct3D10.Effect"/>) that is created. </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectFromFileW([None] const wchar_t* pFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] ID3DX10ThreadPump* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectFromMemory(System.IntPtr,SharpDX.Size,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,SharpDX.Direct3D10.EffectPool,System.IntPtr,System.IntPtr,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect from memory.	
            </summary>	
            <param name="dataRef">Pointer to the effect in memory. </param>
            <param name="dataLength">Size of the effect in memory. </param>
            <param name="srcFileNameRef">Name of the effect file in memory. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{D3D10_EFFECT Constants}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="effectPoolRef">Pointer to an effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>) for sharing variables between effects. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectRef">Address of a reference to the effect (see <see cref="T:SharpDX.Direct3D10.Effect"/>) that is created. </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectFromMemory([None] const void* pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] ID3DX10ThreadPump* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectFromResource(System.IntPtr,System.String,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,SharpDX.Direct3D10.EffectPool,System.IntPtr,System.IntPtr,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect from a resource.	
            </summary>	
            <param name="hModule">A handle to the resource module containing the effect. HMODULE can be obtained with {{GetModuleHandle Function}}. </param>
            <param name="resourceNameRef">Name of the resource in hModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="srcFileNameRef">Optional. Effect file name, which is used for error messages only. Can be NULL. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="effectPoolRef">Pointer to an effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>) for sharing variables between effects. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectRef">Address of a reference to the effect (see <see cref="T:SharpDX.Direct3D10.Effect"/>) that is created. </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectFromResourceW([None] void* hModule,[None] const wchar_t* pResourceName,[None] const wchar_t* pSrcFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] ID3DX10ThreadPump* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectPoolFromFile(System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,System.IntPtr,SharpDX.Direct3D10.EffectPool@,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect pool from an effect file.	
            </summary>	
            <remarks>	
            This example creates an effect pool from the effect used in the {{BasicHLSL10 Sample}}. 	
            <code> // Create an effect pool from an effect in memory	
            ID3D10EffectPool * l_pEffectPool = NULL;	
            ID3D10Blob*	l_pBlob_Errors = NULL;	
            WCHAR str[MAX_PATH];	
            hr = DXUTFindDXSDKMediaFileCch( str, MAX_PATH, L"BasicHLSL10.fx" );	
            hr = D3DX10CreateEffectPoolFromFile( str,  NULL, NULL, D3D10_SHADER_ENABLE_STRICTNESS,  0, pd3dDevice, NULL, &amp;l_pEffectPool, &amp;l_pBlob_Errors ); </code>	
            	
             	
            </remarks>	
            <param name="fileNameRef">The effect filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectPoolRef">The address of a reference to the effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>). </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectPoolFromFileW([None] const wchar_t* pFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3DX10ThreadPump* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectPoolFromMemory(System.IntPtr,SharpDX.Size,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,System.IntPtr,SharpDX.Direct3D10.EffectPool@,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect pool from an effect in memory.	
            </summary>	
            <param name="dataRef">A reference to the effect. </param>
            <param name="dataLength">The size of the effect. </param>
            <param name="srcFileNameRef">The name of the effect file. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectPoolRef">The address of a reference to the effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>). </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectPoolFromMemory([None] const void* pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3DX10ThreadPump* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.D3DX10.CreateEffectPoolFromResource(System.IntPtr,System.String,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.Int32,System.Int32,SharpDX.Direct3D10.Device,System.IntPtr,SharpDX.Direct3D10.EffectPool@,SharpDX.Direct3D.Blob@,System.Int32@)">
            <summary>	
            Create an effect pool from a resource.	
            </summary>	
            <param name="hModule">A handle to the resource module containing the effect. HMODULE can be obtained with {{GetModuleHandle Function}}. </param>
            <param name="resourceNameRef">The name of the resource in hModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="srcFileNameRef">Optional. Effect file name, which is used for error messages only. Can be NULL. </param>
            <param name="definesRef">A NULL-terminated array of shader macros (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>); set this to NULL to specify no macros. </param>
            <param name="includeRef">A reference to an include interface (see <see cref="T:SharpDX.D3DCompiler.Include"/>). This parameter can be NULL. </param>
            <param name="rofileRef">A string that specifies the {{shader profile}}, or shader model. </param>
            <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}). </param>
            <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}). </param>
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resources. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). Use NULL to specify that this function should not return until it is completed. </param>
            <param name="effectPoolRef">The address of a reference to the effect pool (see <see cref="T:SharpDX.Direct3D10.EffectPool"/>). </param>
            <param name="errorsRef">The address of a reference to memory (see <see cref="T:SharpDX.Direct3D.Blob"/>) that contains effect compile errors, if there were any. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10CreateEffectPoolFromResourceW([None] void* hModule,[None] const wchar_t* pResourceName,[None] const wchar_t* pSrcFileName,[In, Buffer, Optional] const D3D10_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] int HLSLFlags,[None] int FXFlags,[None] ID3D10Device* pDevice,[None] ID3DX10ThreadPump* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RasterizerState">
            <summary>	
            A rasterizer-state interface accesses rasterizer state for the {{rasterizer stage}}.	
            </summary>	
            <unmanaged>ID3D10RasterizerState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.RasterizerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.RasterizerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.RasterizerState.GetDescription(SharpDX.Direct3D10.RasterizerStateDescription@)">
            <summary>	
            Get the properties of a rasterizer-state object.	
            </summary>	
            <param name="descRef">Pointer to a rasterizer-state description (see <see cref="T:SharpDX.Direct3D10.RasterizerStateDescription"/>). </param>
            <unmanaged>void ID3D10RasterizerState::GetDesc([Out] D3D10_RASTERIZER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.RasterizerState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.RasterizerStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.RasterizerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.RasterizerState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.RasterizerStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.RasterizerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerState.Description">
            <summary>	
            Get the properties of a rasterizer-state object.	
            </summary>	
            <unmanaged>void ID3D10RasterizerState::GetDesc([Out] D3D10_RASTERIZER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture1D">
            <summary>	
            A {{1D texture}} interface accesses texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D10Texture1D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Texture1D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)">
            <summary>	
            Get a reference to the data contained in a subresource, and deny the GPU access to that subresource.	
            </summary>	
            <remarks>	
            Mapping a texture enables the CPU to directly access the underlying data in the subresource of a texture. For the method to succeed, the texture being mapped must be created with the appropriate flags (see <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>), and its specified usage (see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>) must be either D3D10_USAGE_DYNAMIC or D3D10_USAGE_STAGING. Common failures of Map methods are indicated by the following return values:   ItemDescription  DXGI_ERROR_WAS_STILL_DRAWING  If MapFlags specifies D3D10_MAP_FLAG_DO_NOT_WAIT and the GPU is not yet finished with the resource, Map returns DXGI_ERROR_WAS_STILL_DRAWING.   DXGI_ERROR_DEVICE_REMOVED  Map returns DXGI_ERROR_DEVICE_REMOVED if MapType allows any CPU read access and the video card has been removed.   ? For more information about the preceding return values, see <see cref="T:SharpDX.DXGI.DXGIError"/>. Map has the following restrictions:  A single subresource cannot be mapped multiple times; in other words, do not call Map on a subresource that is already mapped. Any subresource that is bound to the pipeline must be unmapped before any render operation (that is, before <see cref="M:SharpDX.Direct3D10.Device.Draw(System.Int32,System.Int32)"/>) can be executed.  Applications must cast the void pData reference to the appropriate type to meaningfully access the underlying subresource data. For example, the following code demonstrates how to read each texel of a 1D subresource. It is assumed that the texture was created using <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/> and that pData is the reference to the texture resource data output from a successful call to this method. 	
            <code> FLOAT* pTexels = (FLOAT*)pData;	
            for( UINT col = 0; col &lt; width; col++ )	
            { pTexels[col*4 + 0]; // Alpha pTexels[col*4 + 1]; // Blue pTexels[col*4 + 2]; // Green pTexels[col*4 + 3]; // Red	
            } </code>	
            	
               Differences between Direct3D 9 and Direct3D 10: Map in Direct3D 10 is analogous to resource {{Lock}} in Direct3D 9.   ? 	
            </remarks>	
            <param name="subresource">Index number of the subresource. See {{D3D10CalcSubresource}} for more details. </param>
            <param name="mapType">Specifies the CPU's read and write permissions for a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <param name="mapFlags">that specifies what the CPU should do when the GPU is busy. This flag is optional. </param>
            <param name="dataRef">Pointer to the texture resource data. </param>
            <returns>If this function succeeds, it returns S_OK. For other restrictions, and a listing of error values that can be returned by any of the Map methods, see Remarks. </returns>
            <unmanaged>HRESULT ID3D10Texture1D::Map([In] int Subresource,[In] D3D10_MAP MapType,[In] D3D10_MAP_FLAG MapFlags,[Out] void** ppData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.Unmap(System.Int32)">
            <summary>	
            Invalidate the reference to a resource that was retrieved by <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>, and re-enable the GPU's access to that resource.	
            </summary>	
            <remarks>	
            A subresource must be mapped before Unmap is called.   Differences between Direct3D 9 and Direct3D 10: Unmap in Direct3D 10 is analogous to resource Unlock in Direct3D 9.   ? 	
            </remarks>	
            <param name="subresource">to be unmapped. See {{D3D10CalcSubresource}} for more details. </param>
            <unmanaged>void ID3D10Texture1D::Unmap([In] int Subresource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.GetDescription(SharpDX.Direct3D10.Texture1DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D10.Texture1DDescription"/>). </param>
            <unmanaged>void ID3D10Texture1D::GetDesc([Out] D3D10_TEXTURE1D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture1DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture1DDescription,SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture1DDescription,SharpDX.DataStream[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags)">
            <summary>
            Maps the texture, providing CPU access to its contents.
            </summary>
            <param name="mipSlice">The mip slice to map.</param>
            <param name="mode">The IO operations to enable on the CPU.</param>
            <param name="flags">Flags indicating how the CPU should respond when the GPU is busy.</param>
            <returns>A data stream containing the mapped data. This data stream is invalidated
            when the buffer is unmapped.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.Texture1D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D10Texture1D::GetDesc([Out] D3D10_TEXTURE1D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture2D">
            <summary>	
            A {{2D texture}} interface manages texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D10Texture2D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Texture2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture2D@)">
            <summary>	
            Get a reference to the data contained in a subresource, and deny GPU access to that subresource.	
            </summary>	
            <param name="subresource">Index number of the subresource. See {{D3D10CalcSubresource}} for more details. </param>
            <param name="mapType">Integer that specifies the CPU's read and write permissions for a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <param name="mapFlags">that specifies what the CPU should do when the GPU is busy. This flag is optional. </param>
            <param name="mappedTex2DRef">Pointer to a structure (<see cref="T:SharpDX.Direct3D10.MappedTexture2D"/>) that is filled in by the function and contains a reference to the resource data. </param>
            <returns>If this function succeeds, it returns S_OK. All of the Map methods have identical return values and operating restrictions. These are listed in the remarks section of <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>. </returns>
            <unmanaged>HRESULT ID3D10Texture2D::Map([In] int Subresource,[In] D3D10_MAP MapType,[In] D3D10_MAP_FLAG MapFlags,[Out] D3D10_MAPPED_TEXTURE2D* pMappedTex2D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.Unmap(System.Int32)">
            <summary>	
            Invalidate the reference to the resource that was retrieved by <see cref="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture2D@)"/>, and re-enable GPU access to the resource.	
            </summary>	
            <remarks>	
            A subresource must be mapped before Unmap is called.   Differences between Direct3D 9 and Direct3D 10: Unmap in Direct3D 10 is analogous to resource Unlock in Direct3D 9.   ? 	
            </remarks>	
            <param name="subresource">to be unmapped. See {{D3D10CalcSubresource}} for more details. </param>
            <unmanaged>void ID3D10Texture2D::Unmap([In] int Subresource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.GetDescription(SharpDX.Direct3D10.Texture2DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D10.Texture2DDescription"/>). </param>
            <unmanaged>void ID3D10Texture2D::GetDesc([Out] D3D10_TEXTURE2D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture2DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture2DDescription,SharpDX.DataRectangle)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture2DDescription,SharpDX.DataRectangle[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.ComputeNormalMap(SharpDX.Direct3D10.Texture2D,SharpDX.Direct3D10.Texture2D,SharpDX.Direct3D10.NormalMapFlags,SharpDX.Direct3D10.Channel,System.Single)">
            <summary>
              Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.
            </summary>
            <param name = "source">The source height map texture.</param>
            <param name = "destination">The destination texture.</param>
            <param name = "flags">One or more flags that control generation of normal maps.</param>
            <param name = "channel">One or more flag specifying the source of height information.</param>
            <param name = "amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture2D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags)">
            <summary>
            Maps the texture, providing CPU access to its contents.
            </summary>
            <param name="mipSlice">The mip slice to map.</param>
            <param name="mode">The IO operations to enable on the CPU.</param>
            <param name="flags">Flags indicating how the CPU should respond when the GPU is busy.</param>
            <returns>A data rectangle containing the mapped data. This data stream is invalidated when the buffer is unmapped.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.Texture2D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D10Texture2D::GetDesc([Out] D3D10_TEXTURE2D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture3D">
            <summary>	
            A {{3D texture}} interface accesses texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D10Texture3D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Texture3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)">
            <summary>	
            Get a reference to the data contained in a subresource, and deny GPU access to that subresource.	
            </summary>	
            <param name="subresource">Index number of the subresource. See {{D3D10CalcSubresource}}for more details. </param>
            <param name="mapType">Specifies the CPU's read and write permissions for a resource. For possible values, see <see cref="T:SharpDX.Direct3D10.MapMode"/>. </param>
            <param name="mapFlags">that specifies what the CPU should do when the GPU is busy. This flag is optional. </param>
            <param name="mappedTex3DRef">Pointer to a structure (<see cref="T:SharpDX.Direct3D10.MappedTexture3D"/>) that is filled in by the function and contains a reference to the resource data. </param>
            <returns>If this function succeeds, it returns S_OK. All of the Map methods have identical return values and operating restrictions. These are listed in the remarks section of <see cref="M:SharpDX.Direct3D10.Texture1D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,System.IntPtr@)"/>. </returns>
            <unmanaged>HRESULT ID3D10Texture3D::Map([In] int Subresource,[In] D3D10_MAP MapType,[In] D3D10_MAP_FLAG MapFlags,[Out] D3D10_MAPPED_TEXTURE3D* pMappedTex3D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.Unmap(System.Int32)">
            <summary>	
            Invalidate the reference to the resource retrieved by <see cref="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)"/>, and re-enable the GPU's access to the resource.	
            </summary>	
            <remarks>	
            A subresource must be mapped before Unmap is called.   Differences between Direct3D 9 and Direct3D 10: Unmap() in Direct3D 10 is analogous to resource Unlock() in Direct3D 9.   ? 	
            </remarks>	
            <param name="subresource">to be unmapped. See {{D3D10CalcSubresource}} for more details. </param>
            <unmanaged>void ID3D10Texture3D::Unmap([In] int Subresource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.GetDescription(SharpDX.Direct3D10.Texture3DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D10.Texture3DDescription"/>). </param>
            <unmanaged>void ID3D10Texture3D::GetDesc([Out] D3D10_TEXTURE3D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture3DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture3DDescription,SharpDX.DataBox)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Texture3DDescription,SharpDX.DataBox[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags)">
            <summary>
            Maps the texture, providing CPU access to its contents.
            </summary>
            <param name="mipSlice">The mip slice to map.</param>
            <param name="mode">The IO operations to enable on the CPU.</param>
            <param name="flags">Flags indicating how the CPU should respond when the GPU is busy.</param>
            <returns>A databox containing the mapped data. This data stream is invalidated when the buffer is unmapped.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.Texture3D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D10Texture3D::GetDesc([Out] D3D10_TEXTURE3D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceView">
            <summary>	
            A shader-resource-view interface specifies the {{subresources}} a shader can access during rendering. Examples of shader resources include a constant buffer, a texture buffer, a texture or a sampler.	
            </summary>	
            <unmanaged>ID3D10ShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.GetDescription(SharpDX.Direct3D10.ShaderResourceViewDescription@)">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <param name="descRef">A reference to a <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/> structure to be filled with data about the shader resource view. </param>
            <unmanaged>void ID3D10ShaderResourceView::GetDesc([Out] D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">ShaderResource</see> flag.</param>
            <unmanaged>ID3D10Device::CreateShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.ShaderResourceViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">ShaderResource</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" /> to be created.</param>
            <unmanaged>ID3D10Device::CreateShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromFile(SharpDX.Direct3D10.Device,System.String)">
            <summary>	
            Create a shader-resource view from a file. Read the characteristics of a texture when the texture is loaded.
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="fileName">Name of the file that contains the shader-resource view.</param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromFile(SharpDX.Direct3D10.Device,System.String,SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="fileName">Name of the file that contains the shader-resource view.</param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromMemory(SharpDX.Direct3D10.Device,System.Byte[])">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="memory">Pointer to a memory location that contains the shader-resource view. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromMemory(SharpDX.Direct3D10.Device,System.Byte[],SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="memory">Pointer to a memory location that contains the shader-resource view. </param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromStream(SharpDX.Direct3D10.Device,System.IO.Stream,System.Int32)">
            <summary>	
            Create a shader-resource view from a file in a stream..	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="stream">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="sizeInBytes">Size of the file to read from the stream</param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView.FromStream(SharpDX.Direct3D10.Device,System.IO.Stream,System.Int32,SharpDX.Direct3D10.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file in a stream..	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will use the resource. </param>
            <param name="stream">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="sizeInBytes">Size of the file to read from the stream</param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D10.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX10ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.ShaderResourceView.Description">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <unmanaged>void ID3D10ShaderResourceView::GetDesc([Out] D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetView">
            <summary>	
            A render-target-view interface identifies the render-target {{subresources}} that can be accessed during rendering.	
            </summary>	
            <unmanaged>ID3D10RenderTargetView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.RenderTargetView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.RenderTargetView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.RenderTargetView.GetDescription(SharpDX.Direct3D10.RenderTargetViewDescription@)">
            <summary>	
            Get the properties of a render target view.	
            </summary>	
            <param name="descRef">Pointer to the description of a render target view (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). </param>
            <unmanaged>void ID3D10RenderTargetView::GetDesc([Out] D3D10_RENDER_TARGET_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.RenderTargetView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">RenderTarget</see> flag.</param>
            <unmanaged>ID3D10Device::CreateRenderTargetView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.RenderTargetView.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.RenderTargetViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">RenderTarget</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D10.RenderTargetView" /> to be created.</param>
            <unmanaged>ID3D10Device::CreateRenderTargetView</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RenderTargetView.Description">
            <summary>	
            Get the properties of a render target view.	
            </summary>	
            <unmanaged>void ID3D10RenderTargetView::GetDesc([Out] D3D10_RENDER_TARGET_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.VertexShader">
            <summary>	
            A vertex-shader interface manages an executable program (a vertex shader) that controls the {{vertex-shader stage}}.	
            </summary>	
            <unmanaged>ID3D10VertexShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.VertexShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.VertexShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.VertexShader.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.VertexShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.GeometryShader">
            <summary>	
            A geometry-shader interface manages an executable program (a geometry shader) that controls the {{geometry-shader stage}}.	
            </summary>	
            <unmanaged>ID3D10GeometryShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.GeometryShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.GeometryShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.GeometryShader.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.GeometryShader.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D10.StreamOutputElement[],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "elements">An array of <see cref = "T:SharpDX.Direct3D10.StreamOutputElement" /> instances describing the layout of the output buffers.</param>
            <param name = "outputStreamStride">The size, in bytes, of each element in the array pointed to by pSODeclaration. This parameter is only used when the output slot is 0 for all entries in pSODeclaration.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.PixelShader">
            <summary>	
            A pixel-shader interface manages an executable program (a pixel shader) that controls the {{pixel-shader stage}}.	
            </summary>	
            <unmanaged>ID3D10PixelShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.PixelShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.PixelShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.PixelShader.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.PixelShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.InputLayout">
            <summary>	
            An input-layout interface accesses the input data for the {{input-assembler stage}}.	
            </summary>	
            <unmanaged>ID3D10InputLayout</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.InputLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.InputLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.InputLayout.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D10.InputElement[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.InputLayout" /> object to describe the
              input-buffer data for the input-assembler stage.
            </summary>
            <unmanaged>ID3D10Device::CreateInputLayout</unmanaged>
            <param name = "device">The device used to create the layout.</param>
            <param name = "elements">An array of input elements describing the layout of the input data.</param>
            <param name = "shaderBytecode">The compiled shader used to validate the input elements.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.InputLayout.#ctor(SharpDX.Direct3D10.Device,SharpDX.D3DCompiler.ShaderSignature,SharpDX.Direct3D10.InputElement[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.InputLayout" /> object to describe the
              input-buffer data for the input-assembler stage.
            </summary>
            <unmanaged>ID3D10Device::CreateInputLayout</unmanaged>
            <param name = "device">The device used to create the layout.</param>
            <param name = "elements">An array of input elements describing the layout of the input data.</param>
            <param name = "shaderSignature">The shader signature used to validate the input elements.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.SamplerState">
            <summary>	
            A sampler-state interface accesses sampler state for a {{texture}}.	
            </summary>	
            <unmanaged>ID3D10SamplerState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SamplerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.SamplerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.SamplerState.GetDescription(SharpDX.Direct3D10.SamplerStateDescription@)">
            <summary>	
            Get the sampler state.	
            </summary>	
            <param name="descRef">A reference to the sampler state (see <see cref="T:SharpDX.Direct3D10.SamplerStateDescription"/>). </param>
            <unmanaged>void ID3D10SamplerState::GetDesc([Out] D3D10_SAMPLER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SamplerState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.SamplerStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.SamplerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.SamplerState.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.SamplerStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.SamplerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.SamplerState.Description">
            <summary>	
            Get the sampler state.	
            </summary>	
            <unmanaged>void ID3D10SamplerState::GetDesc([Out] D3D10_SAMPLER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Query">
            <summary>	
            A query interface queries information from the GPU.	
            </summary>	
            <unmanaged>ID3D10Query</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Query.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Query"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Query.GetDescription(SharpDX.Direct3D10.QueryDescription@)">
            <summary>	
            Get a query description.	
            </summary>	
            <param name="descRef">Pointer to a query description (see <see cref="T:SharpDX.Direct3D10.QueryDescription"/>). </param>
            <unmanaged>void ID3D10Query::GetDesc([Out] D3D10_QUERY_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Query.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.QueryDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.Query" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D10.Query.Description">
            <summary>	
            Get a query description.	
            </summary>	
            <unmanaged>void ID3D10Query::GetDesc([Out] D3D10_QUERY_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Predicate">
            <summary>	
            A predicate interface determines whether geometry should be processed depending on the results of a previous draw call.	
            </summary>	
            <unmanaged>ID3D10Predicate</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Predicate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Predicate"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Predicate.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.QueryDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D10.Predicate" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="T:SharpDX.Direct3D10.SwitchToRef">
            <summary>	
            A swith-to-reference interface (see the {{switch-to-reference}} layer) enables an application to switch between a hardware and software device.	
            </summary>	
            <unmanaged>ID3D10SwitchToRef</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SwitchToRef.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.SwitchToRef"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.SwitchToRef.SetUseRef(System.Boolean)">
            <summary>	
            Switch between a hardware and a software device.	
            </summary>	
            <remarks>	
            This API will fail if the device is not switchable; you must have created a device that is switchable by specifying the D3D10_CREATE_DEVICE_SWITCH_TO_REF flag during device creation (when calling <see cref="M:SharpDX.Direct3D10.D3D10.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D10.DriverType,System.IntPtr,SharpDX.Direct3D10.DeviceCreationFlags,System.Int32,SharpDX.Direct3D10.Device@)"/>). Switching from a software device to a hardware device clears all cached objects from system memory. Switching from a hardware device to a software device causes resources to be downloaded to system memory. 	
            </remarks>	
            <param name="useRef">A boolean value. Set this to TRUE to change to a software device, set this to FALSE to change to a hardware device. </param>
            <returns>The previous value of UseRef. </returns>
            <unmanaged>BOOL ID3D10SwitchToRef::SetUseRef([None] BOOL UseRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SwitchToRef.GetUseRef">
            <summary>	
            Get a boolean value that indicates the type of device being used.	
            </summary>	
            <remarks>	
            A hardware device is commonly referred to as a HAL device, which stands for a hardware accelerated device. This means that the pipeline is rendering all of the pipeline commands in hardware, using the GPU. Operating the pipeline with a HAL device gives the best performance generally, but it can be more difficult to debug since resources exist on the GPU instead of the CPU. A software device implements rendering in software using the CPU with no hardware acceleration. A software device is commonly referred to as a reference device or REF device. Because a REF device implements rendering on the CPU, it is generally slower, but is easier to debug since it allows access to resources. 	
            </remarks>	
            <returns>TRUE if the device is a software device, FALSE if the device is a hardware device. See remarks. </returns>
            <unmanaged>BOOL ID3D10SwitchToRef::GetUseRef()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SwitchToRef.UseRef">
            <summary>	
            Get a boolean value that indicates the type of device being used.	
            </summary>	
            <remarks>	
            A hardware device is commonly referred to as a HAL device, which stands for a hardware accelerated device. This means that the pipeline is rendering all of the pipeline commands in hardware, using the GPU. Operating the pipeline with a HAL device gives the best performance generally, but it can be more difficult to debug since resources exist on the GPU instead of the CPU. A software device implements rendering in software using the CPU with no hardware acceleration. A software device is commonly referred to as a reference device or REF device. Because a REF device implements rendering on the CPU, it is generally slower, but is easier to debug since it allows access to resources. 	
            </remarks>	
            <unmanaged>BOOL ID3D10SwitchToRef::GetUseRef()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StateBlock">
            <summary>	
            A state-block interface encapsulates render states.	
            </summary>	
            <unmanaged>ID3D10StateBlock</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.StateBlock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.Capture">
            <summary>	
            Capture the current value of states that are included in a stateblock.	
            </summary>	
            <remarks>	
            Capture captures current values for states within an existing state block. It does not capture the entire state of the device. Creating an empty stateblock and calling Capture does nothing if no states have been set. 	
            </remarks>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10StateBlock::Capture()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.Apply">
            <summary>	
            Apply the state block to the current device state.	
            </summary>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10StateBlock::Apply()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.ReleaseAllDeviceObjects">
            <summary>	
            Release all references to device objects.	
            </summary>	
            <remarks>	
            Each time you return a reference to an interface (by calling <see cref="M:SharpDX.Direct3D10.StateBlock.GetDevice(SharpDX.Direct3D10.Device@)"/>), the internal reference count is incremented; when you are finished using a stateblock, call this method to release all references and avoid a memory leak. 	
            </remarks>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10StateBlock::ReleaseAllDeviceObjects()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.GetDevice(SharpDX.Direct3D10.Device@)">
            <summary>	
            Get the device.	
            </summary>	
            <param name="deviceRef">Pointer to the ID3D10Device interface that is returned. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10StateBlock::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StateBlock.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.StateBlockMask)">
            <summary>	
            Create a state block.	
            </summary>	
            <remarks>	
            A state block is a collection of device state, and is used for saving and restoring device state. Use a state-block mask to enable subsets of state for saving and restoring. The <see cref="T:SharpDX.Direct3D10.StateBlockMask"/> structure can be filled manually or by using any of the D3D10StateBlockMaskXXX APIs. A state block mask can also be obtained by calling <see cref="M:SharpDX.Direct3D10.EffectTechnique.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)"/> or <see cref="M:SharpDX.Direct3D10.EffectPass.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)"/>.   Differences between Direct3D 9 and Direct3D 10: In Direct3D 10, a state block object does not contain any valid information about the state of the device until <see cref="M:SharpDX.Direct3D10.StateBlock.Capture"/> is called. In Direct3D 9, state is saved in a state block object, when it is created.   ? 	
            </remarks>	
            <param name="device">The device for which the state block will be created. </param>
            <param name="mask">Indicates which parts of the device state will be captured when calling <see cref="M:SharpDX.Direct3D10.StateBlock.Capture"/> and reapplied when calling <see cref="M:SharpDX.Direct3D10.StateBlock.Apply"/>. See remarks. </param>
            <unmanaged>HRESULT D3D10CreateStateBlock([None] ID3D10Device* pDevice,[None] D3D10_STATE_BLOCK_MASK* pStateBlockMask,[None] ID3D10StateBlock** ppStateBlock)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlock.Device">
            <summary>	
            Get the device.	
            </summary>	
            <unmanaged>HRESULT ID3D10StateBlock::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectType">
            <summary>	
            The ID3D10EffectType interface accesses effect variables by type.	
            </summary>	
            <unmanaged>ID3D10EffectType</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectType"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.IsValid_">
            <summary>	
            Tests that the effect type is valid.	
            </summary>	
            <returns>TRUE if it is valid; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10EffectType::IsValid()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetDescription(SharpDX.Direct3D10.EffectTypeDescription@)">
            <summary>	
            Get an effect-type description.	
            </summary>	
            <remarks>	
            The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type. 	
            </remarks>	
            <param name="descRef">A reference to an effect-type description. See <see cref="T:SharpDX.Direct3D10.EffectTypeDescription"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectType::GetDesc([Out] D3D10_EFFECT_TYPE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetMemberTypeByIndex(System.Int32)">
            <summary>	
            Get a member type by index.	
            </summary>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectType"/>. </returns>
            <unmanaged>ID3D10EffectType* ID3D10EffectType::GetMemberTypeByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetMemberTypeByName(System.String)">
            <summary>	
            Get an member type by name.	
            </summary>	
            <param name="name">A member's name. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectType"/>. </returns>
            <unmanaged>ID3D10EffectType* ID3D10EffectType::GetMemberTypeByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetMemberTypeBySemantic(System.String)">
            <summary>	
            Get a member type by semantic.	
            </summary>	
            <param name="semantic">A semantic. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectType"/>. </returns>
            <unmanaged>ID3D10EffectType* ID3D10EffectType::GetMemberTypeBySemantic([None] const char* Semantic)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetMemberName(System.Int32)">
            <summary>	
            Get the name of a member.	
            </summary>	
            <param name="index">A zero-based index. </param>
            <returns>The name of the member. </returns>
            <unmanaged>const char* ID3D10EffectType::GetMemberName([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectType.GetMemberSemantic(System.Int32)">
            <summary>	
            Get the semantic attached to a member.	
            </summary>	
            <param name="index">A zero-based index. </param>
            <returns>A string that contains the semantic. </returns>
            <unmanaged>const char* ID3D10EffectType::GetMemberSemantic([None] int Index)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectType.IsValid">
            <summary>	
            Tests that the effect type is valid.	
            </summary>	
            <unmanaged>BOOL ID3D10EffectType::IsValid()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectType.Description">
            <summary>	
            Get an effect-type description.	
            </summary>	
            <remarks>	
            The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type. 	
            </remarks>	
            <unmanaged>HRESULT ID3D10EffectType::GetDesc([Out] D3D10_EFFECT_TYPE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectConstantBuffer">
            <summary>	
            A constant-buffer interface accesses constant buffers or texture buffers.	
            </summary>	
            <unmanaged>ID3D10EffectConstantBuffer</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectConstantBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectConstantBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectConstantBuffer.SetConstantBuffer(SharpDX.Direct3D10.Buffer)">
            <summary>	
            Set a constant-buffer.	
            </summary>	
            <param name="constantBufferRef">A reference to a constant-buffer interface. See <see cref="T:SharpDX.Direct3D10.Buffer"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectConstantBuffer::SetConstantBuffer([None] ID3D10Buffer* pConstantBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectConstantBuffer.GetConstantBuffer">
            <summary>	
            Get a constant-buffer.	
            </summary>	
            <returns>The address of a reference to a constant-buffer interface. See <see cref="T:SharpDX.Direct3D10.Buffer"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectConstantBuffer::GetConstantBuffer([Out] ID3D10Buffer** ppConstantBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectConstantBuffer.SetTextureBuffer(SharpDX.Direct3D10.ShaderResourceView)">
            <summary>	
            Set a texture-buffer.	
            </summary>	
            <param name="textureBufferRef">A reference to a shader-resource-view interface for accessing a texture buffer. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectConstantBuffer::SetTextureBuffer([None] ID3D10ShaderResourceView* pTextureBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectConstantBuffer.GetTextureBuffer">
            <summary>	
            Get a texture-buffer.	
            </summary>	
            <returns>The address of a reference to a shader-resource-view interface for accessing a texture buffer. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectConstantBuffer::GetTextureBuffer([Out] ID3D10ShaderResourceView** ppTextureBuffer)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectShaderVariable">
            <summary>	
            A shader-variable interface accesses a shader variable.	
            </summary>	
            <unmanaged>ID3D10EffectShaderVariable</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectShaderVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetShaderDescription(System.Int32)">
            <summary>	
            Get a shader description.	
            </summary>	
            <param name="shaderIndex">A zero-based index. </param>
            <returns>A reference to a shader description (see <see cref="T:SharpDX.Direct3D10.EffectShaderDescription"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetShaderDesc([None] int ShaderIndex,[Out] D3D10_EFFECT_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetVertexShader(System.Int32)">
            <summary>	
            Get a vertex shader.	
            </summary>	
            <param name="shaderIndex">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.VertexShader"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetVertexShader([None] int ShaderIndex,[Out] ID3D10VertexShader** ppVS)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetGeometryShader(System.Int32)">
            <summary>	
            Get a geometry shader.	
            </summary>	
            <param name="shaderIndex">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.GeometryShader"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetGeometryShader([None] int ShaderIndex,[Out] ID3D10GeometryShader** ppGS)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetPixelShader(System.Int32)">
            <summary>	
            Get a pixel shader.	
            </summary>	
            <param name="shaderIndex">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.PixelShader"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetPixelShader([None] int ShaderIndex,[Out] ID3D10PixelShader** ppPS)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetInputSignatureElementDescription(System.Int32,System.Int32)">
            <summary>	
            Get an input-signature description.	
            </summary>	
            <remarks>	
            An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters). The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature. 	
            </remarks>	
            <param name="shaderIndex">A zero-based shader index. </param>
            <param name="element">A zero-based shader-element index. </param>
            <returns>A reference to a parameter description (see <see cref="T:SharpDX.Direct3D10.ShaderParameterDescription"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetInputSignatureElementDesc([None] int ShaderIndex,[None] int Element,[Out] D3D10_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectShaderVariable.GetOutputSignatureElementDescription(System.Int32,System.Int32)">
            <summary>	
            Get an output-signature description.	
            </summary>	
            <remarks>	
            An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters). The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature. 	
            </remarks>	
            <param name="shaderIndex">A zero-based shader index. </param>
            <param name="element">A zero-based element index. </param>
            <returns>A reference to a parameter description (see <see cref="T:SharpDX.Direct3D10.ShaderParameterDescription"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectShaderVariable::GetOutputSignatureElementDesc([None] int ShaderIndex,[None] int Element,[Out] D3D10_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectTechnique">
            <summary>	
            An ID3D10EffectTechnique interface is a collection of passes.	
            </summary>	
            <unmanaged>ID3D10EffectTechnique</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.EffectTechnique"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.IsValid_">
            <summary>	
            Test a technique to see if it contains valid syntax.	
            </summary>	
            <returns>TRUE if the code syntax is valid; otherwise FALSE. </returns>
            <unmanaged>BOOL ID3D10EffectTechnique::IsValid()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.GetDescription(SharpDX.Direct3D10.EffectTechniqueDescription@)">
            <summary>	
            Get a technique description.	
            </summary>	
            <param name="descRef">A reference to a technique description (see <see cref="T:SharpDX.Direct3D10.EffectTechniqueDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectTechnique::GetDesc([Out] D3D10_TECHNIQUE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.GetAnnotationByIndex(System.Int32)">
            <summary>	
            Get an annotation by index.	
            </summary>	
            <remarks>	
            Use an annotation to attach a piece of metadata to a technique. 	
            </remarks>	
            <param name="index">The zero-based index of the interface reference. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectTechnique::GetAnnotationByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.GetAnnotationByName(System.String)">
            <summary>	
            Get an annotation by name.	
            </summary>	
            <remarks>	
            Use an annotation to attach a piece of metadata to a technique. 	
            </remarks>	
            <param name="name">Name of the annotation. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectVariable"/>. </returns>
            <unmanaged>ID3D10EffectVariable* ID3D10EffectTechnique::GetAnnotationByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.GetPassByIndex(System.Int32)">
            <summary>	
            Get a pass by index.	
            </summary>	
            <remarks>	
            A technique contains one or more passes; get a pass using a name or an index. 	
            </remarks>	
            <param name="index">A zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D10.EffectPass"/>. </returns>
            <unmanaged>ID3D10EffectPass* ID3D10EffectTechnique::GetPassByIndex([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.GetPassByName(System.String)">
            <summary>	
            Get a pass by name.	
            </summary>	
            <remarks>	
            A technique contains one or more passes; get a pass using a name or an index. 	
            </remarks>	
            <param name="name">The name of the pass. </param>
            <returns>A reference to an <see cref="T:SharpDX.Direct3D10.EffectPass"/>. </returns>
            <unmanaged>ID3D10EffectPass* ID3D10EffectTechnique::GetPassByName([None] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.EffectTechnique.ComputeStateBlockMask(SharpDX.Direct3D10.StateBlockMask@)">
            <summary>	
            Compute a state-block mask to allow/prevent state changes.	
            </summary>	
            <param name="stateBlockMaskRef">A reference to a state-block mask (see <see cref="T:SharpDX.Direct3D10.StateBlockMask"/>). </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectTechnique::ComputeStateBlockMask([None] D3D10_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectTechnique.IsValid">
            <summary>	
            Test a technique to see if it contains valid syntax.	
            </summary>	
            <unmanaged>BOOL ID3D10EffectTechnique::IsValid()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectTechnique.Description">
            <summary>	
            Get a technique description.	
            </summary>	
            <unmanaged>HRESULT ID3D10EffectTechnique::GetDesc([Out] D3D10_TECHNIQUE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceView1">
            <summary>	
            A shader-resource-view interface specifies the {{subresources}} a shader can access during rendering. Examples of shader resources include a constant buffer, a texture buffer, a texture or a sampler.	
            </summary>	
            <unmanaged>ID3D10ShaderResourceView1</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.ShaderResourceView1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView1.GetDescription1(SharpDX.Direct3D10.ShaderResourceViewDescription1@)">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <remarks>	
            This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <param name="descRef">A reference to a <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription1"/> structure to be filled with data about the shader resource view. </param>
            <unmanaged>void ID3D10ShaderResourceView1::GetDesc1([Out] D3D10_SHADER_RESOURCE_VIEW_DESC1* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView1.#ctor(SharpDX.Direct3D10.Device1,SharpDX.Direct3D10.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.ShaderResourceView1" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">ShaderResource</see> flag.</param>
            <unmanaged>ID3D10Device1::CreateShaderResourceView1</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ShaderResourceView1.#ctor(SharpDX.Direct3D10.Device1,SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.ShaderResourceViewDescription1)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D10.ShaderResourceView1" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D10.ShaderResourceView1" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D10.BindFlags">ShaderResource</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D10.ShaderResourceView1" /> to be created.</param>
            <unmanaged>ID3D10Device1::CreateShaderResourceView1</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.ShaderResourceView1.Description1">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <remarks>	
            This method requires Windows Vista Service Pack 1. 	
            </remarks>	
            <unmanaged>void ID3D10ShaderResourceView1::GetDesc1([Out] D3D10_SHADER_RESOURCE_VIEW_DESC1* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Sprite">
            <summary>	
            The ID3DX10Sprite interface provides a set of methods that simplify the process of drawing sprites using Microsoft Direct3D. This interface can operate on a set of many sprites.	
            </summary>	
            <unmanaged>ID3DX10Sprite</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Sprite"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)">
            <summary>	
            Prepare a device for drawing sprites.	
            </summary>	
            <remarks>	
            Every call to Begin must be matched with a call to <see cref="M:SharpDX.Direct3D10.Sprite.End"/>. 	
            </remarks>	
            <param name="flags">Flags that control how the sprites will be drawn. See <see cref="T:SharpDX.Direct3D10.SpriteFlags"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DERR_OUTOFVIDEOMEMORY, D3DXERR_INVALIDDATA, E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::Begin([None] D3DX10_SPRITE_FLAG flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[],System.Int32)">
            <summary>	
            Add an array of sprites to the batch of sprites to be rendered. This must be called in between calls to <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/> and <see cref="M:SharpDX.Direct3D10.Sprite.End"/>, and <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> must be called before End to send all of the batched sprites to the device for rendering. This draw method is most useful when drawing a small number of sprites that you want buffered into a large batch, such as fonts.	
            </summary>	
            <param name="spritesRef">The array of sprites to draw. See <see cref="T:SharpDX.Direct3D10.SpriteInstance"/>. </param>
            <param name="cSprites">The number of sprites in pSprites. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::DrawSpritesBuffered([In, Buffer] D3DX10_SPRITE* pSprites,[None] int cSprites)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.Flush">
            <summary>	
            Force all batched sprites to be submitted to the device. Device states remain as they were after the last call to ID3DX10Sprite::Begin. The list of batched sprites is then cleared.	
            </summary>	
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::Flush()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.DrawSpritesImmediate(SharpDX.Direct3D10.SpriteInstance[],System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw an array of sprites. This will immediately send the sprites to the device for rendering, which is different from <see cref="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[],System.Int32)"/> which only adds an array of sprites to a batch of sprites to be rendered when <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> is called. This draw method is most useful when drawing a large number of sprites that have already been sorted on the CPU (or do not need to be sorted), such as in a particle system. This must be called in between calls to <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/> and <see cref="M:SharpDX.Direct3D10.Sprite.End"/>.	
            </summary>	
            <param name="spritesRef">The array of sprites to draw. See <see cref="T:SharpDX.Direct3D10.SpriteInstance"/>. </param>
            <param name="cSprites">The number of sprites in pSprites. </param>
            <param name="cbSprite">The size of the sprite structure you are passing into pSprites. Passing in 0 is the equivalent of passing in sizeof(D3DX10_SPRITE). </param>
            <param name="flags">Reserved. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::DrawSpritesImmediate([In, Buffer] D3DX10_SPRITE* pSprites,[None] int cSprites,[None] int cbSprite,[None] int flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.End">
            <summary>	
            Call this after ID3DX10Sprite::Flush. If  D3DX10_SPRITE_SAVE_STATE was specified when ID3DX10Sprite::Begin was called, this API will restore the device state to how it was before ID3DX10Sprite::Begin was called.	
            </summary>	
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::End()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.GetViewTransform(SharpDX.Matrix@)">
            <summary>	
            Get the view transform that applies to all sprites.	
            </summary>	
            <param name="viewTransformRef">Pointer to a {{D3DX10MATRIX}} that will be set to the transform of the sprite from the original world space. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::GetViewTransform([Out] D3DXMATRIX* pViewTransform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.SetViewTransform(SharpDX.Matrix@)">
            <summary>	
            Set the view transform that applies to all sprites.	
            </summary>	
            <param name="viewTransformRef">Pointer to a D3DXMATRIX that contains a transform of the sprite from the original world space. Use this transform to scale, rotate, or transform the sprite. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::SetViewTransform([None] D3DXMATRIX* pViewTransform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.GetProjectionTransform(SharpDX.Matrix@)">
            <summary>	
            Get the sprite projection matrix that is applied to all sprites.	
            </summary>	
            <param name="rojectionTransformRef">Pointer to a {{D3DX10MATRIX}} that will be set to the sprite's projection matrix. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::GetProjectionTransform([Out] D3DXMATRIX* pProjectionTransform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.SetProjectionTransform(SharpDX.Matrix@)">
            <summary>	
            Set the projection matrix for all sprites.	
            </summary>	
            <param name="rojectionTransformRef">The projection matrix to be used on all sprites. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::SetProjectionTransform([None] D3DXMATRIX* pProjectionTransform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.GetDevice(SharpDX.Direct3D10.Device@)">
            <summary>	
            Retrieve the device associated with the sprite object.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the ID3D10Device interface. 	
            </remarks>	
            <param name="deviceRef">Address of a reference to an ID3D10Device interface, representing the Direct3D device object associated with the sprite object. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the following value will be returned: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.#ctor(SharpDX.Direct3D10.Device,System.Int32)">
            <summary>	
            Create a sprite for drawing a 2D texture.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D10.Device"/>) that will draw the sprite. </param>
            <param name="bufferSize">The size of the vertex buffer, in number of sprites, that will be sent to the device when <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> or <see cref="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[])"/> is called. This should be a small number if you know you will be rendering a small number of sprites at a time (to save memory) and a large number if you know you will be rendering a large number of sprites at a time. The maximum value is 4096. If 0 is specified, the vertex buffer size will automatically be set to 4096. </param>
            <unmanaged>HRESULT D3DX10CreateSprite([None] ID3D10Device* pDevice,[None] int cDeviceBufferSize,[None] LPD3DX10SPRITE* ppSprite)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[])">
            <summary>	
            Add an array of sprites to the batch of sprites to be rendered. This must be called in between calls to <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/> and <see cref="M:SharpDX.Direct3D10.Sprite.End"/>, and <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> must be called before End to send all of the batched sprites to the device for rendering. This draw method is most useful when drawing a small number of sprites that you want buffered into a large batch, such as fonts.	
            </summary>	
            <param name="sprites">The array of sprites to draw. See <see cref="T:SharpDX.Direct3D10.SpriteInstance"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::DrawSpritesBuffered([None] D3DX10_SPRITE* pSprites,[None] int cSprites)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Sprite.DrawSpritesImmediate(SharpDX.Direct3D10.SpriteInstance[])">
            <summary>	
            Draw an array of sprites. This will immediately send the sprites to the device for rendering, which is different from <see cref="M:SharpDX.Direct3D10.Sprite.DrawSpritesBuffered(SharpDX.Direct3D10.SpriteInstance[])"/> which only adds an array of sprites to a batch of sprites to be rendered when <see cref="M:SharpDX.Direct3D10.Sprite.Flush"/> is called. This draw method is most useful when drawing a large number of sprites that have already been sorted on the CPU (or do not need to be sorted), such as in a particle system. This must be called in between calls to <see cref="M:SharpDX.Direct3D10.Sprite.Begin(SharpDX.Direct3D10.SpriteFlags)"/> and <see cref="M:SharpDX.Direct3D10.Sprite.End"/>.	
            </summary>	
            <param name="sprites">The array of sprites to draw. See <see cref="T:SharpDX.Direct3D10.SpriteInstance"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA. </returns>
            <unmanaged>HRESULT ID3DX10Sprite::DrawSpritesImmediate([In, Buffer] D3DX10_SPRITE* pSprites,[None] int cSprites,[None] int cbSprite,[None] int flags)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Sprite.ViewTransform">
            <summary>	
            Get the view transform that applies to all sprites.	
            </summary>	
            <unmanaged>HRESULT ID3DX10Sprite::GetViewTransform([Out] D3DXMATRIX* pViewTransform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Sprite.ProjectionTransform">
            <summary>	
            Get the sprite projection matrix that is applied to all sprites.	
            </summary>	
            <unmanaged>HRESULT ID3DX10Sprite::GetProjectionTransform([Out] D3DXMATRIX* pProjectionTransform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Sprite.Device">
            <summary>	
            Retrieve the device associated with the sprite object.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the ID3D10Device interface. 	
            </remarks>	
            <unmanaged>HRESULT ID3DX10Sprite::GetDevice([Out] ID3D10Device** ppDevice)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshBuffer">
            <summary>	
            A mesh buffer is a buffer that contains data about a mesh. It can contain one of five different types of data: vertex data, index data, adjacency data, attribute data, or point rep data. The structure is used to access these five pieces of data through the following five APIs: <see cref="M:SharpDX.Direct3D10.Mesh.GetVertexBuffer(System.Int32)"/>, <see cref="M:SharpDX.Direct3D10.Mesh.GetIndexBuffer"/>, <see cref="M:SharpDX.Direct3D10.Mesh.GetAdjacencyBuffer"/>, <see cref="M:SharpDX.Direct3D10.Mesh.GetAttributeBuffer(SharpDX.Direct3D10.MeshBuffer@)"/>, or <see cref="M:SharpDX.Direct3D10.Mesh.GetPointRepBuffer(SharpDX.Direct3D10.MeshBuffer@)"/>.	
            </summary>	
            <unmanaged>ID3DX10MeshBuffer</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.MeshBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.MeshBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.MeshBuffer.Map(System.IntPtr@,SharpDX.Size@)">
            <summary>	
            Get a reference to the mesh buffer memory to modify its contents.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 10: Map() in Direct3D 10 is analogous to resource Map() in Direct3D 9.   ? 	
            </remarks>	
            <param name="dataRef">Pointer to the buffer data. </param>
            <param name="sizeRef">Size of the buffer in bytes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10MeshBuffer::Map([Out] void** ppData,[Out] SIZE_T* pSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.MeshBuffer.Unmap">
            <summary>	
            Unmap a buffer.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 10: Unmap() in Direct3D 10 is analogous to resource Unlock() in Direct3D 9.   ? 	
            </remarks>	
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10MeshBuffer::Unmap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.MeshBuffer.GetSizeInBytes">
            <summary>	
            Get the size of the mesh buffer, in bytes.	
            </summary>	
            <returns>The size of the mesh buffer, in bytes. </returns>
            <unmanaged>SIZE_T ID3DX10MeshBuffer::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.MeshBuffer.Map">
            <summary>	
            Get a reference to the mesh buffer memory to modify its contents.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 10: Map() in Direct3D 10 is analogous to resource Map() in Direct3D 9.   ? 	
            </remarks>	
            <returns>Returns a reference to the mesh buffer memory to modify its contents</returns>
            <unmanaged>HRESULT ID3DX10MeshBuffer::Map([Out] void** ppData,[Out] SIZE_T* pSize)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.MeshBuffer.SizeInBytes">
            <summary>	
            Get the size of the mesh buffer, in bytes.	
            </summary>	
            <unmanaged>SIZE_T ID3DX10MeshBuffer::GetSize()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Mesh">
            <summary>	
            Applications use the methods of the ID3DX10Mesh interface to manipulate mesh objects.	
            </summary>	
            <unmanaged>ID3DX10Mesh</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.Mesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetFaceCount">
            <summary>	
            Retrieves the number of faces in the mesh.	
            </summary>	
            <returns>Returns the number of faces in the mesh. </returns>
            <unmanaged>int ID3DX10Mesh::GetFaceCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetVertexCount">
            <summary>	
            Get the number of vertices in the mesh. A mesh may contain multiple vertex buffers (i.e. one vertex buffer may contain all position data, another may contains all texture coordinate data, etc.), however each vertex buffer will contain the same number of elements.	
            </summary>	
            <returns>The number of vertices in the mesh. </returns>
            <unmanaged>int ID3DX10Mesh::GetVertexCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetVertexBufferCount">
            <summary>	
            Get the number of vertex buffers in the mesh.	
            </summary>	
            <returns>The number of vertex buffers in the mesh. </returns>
            <unmanaged>int ID3DX10Mesh::GetVertexBufferCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetFlags">
            <summary>	
            Access the mesh's creation flags.	
            </summary>	
            <returns>The creation flags passed into the options parameter of <see cref="M:SharpDX.Direct3D10.D3DX10.CreateMesh(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.InputElement[],System.Int32,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Mesh@)"/> when the mesh was created. See {{D3DX10_MESH}}. </returns>
            <unmanaged>int ID3DX10Mesh::GetFlags()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetVertexDescription(SharpDX.Direct3D10.InputElement[],System.Int32@)">
            <summary>	
            Access the vertex description passed into <see cref="M:SharpDX.Direct3D10.D3DX10.CreateMesh(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.InputElement[],System.Int32,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Mesh@)"/>. The vertex description describes the layout of the mesh's vertex buffers.	
            </summary>	
            <param name="descRef">Array of input elements that describe the layout of the mesh's vertex buffers. See <see cref="T:SharpDX.Direct3D10.InputElement"/>. </param>
            <param name="declCountRef">The number of input elements in ppDesc. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetVertexDescription([Out, Buffer] const D3D10_INPUT_ELEMENT_DESC** ppDesc,[None] int* pDeclCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetVertexData(System.Int32,System.IntPtr)">
            <summary>	
            Set vertex data into one of the mesh's vertex buffers.	
            </summary>	
            <param name="iBuffer">The vertex buffer to be filled with pData. </param>
            <param name="dataRef">The vertex data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetVertexData([None] int iBuffer,[None] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetVertexBuffer(System.Int32)">
            <summary>	
            Retrieves the vertex buffer associated with the mesh.	
            </summary>	
            <param name="iBuffer">The vertex buffer to get. This is an index value. </param>
            <returns>The vertex buffer. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>  </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetVertexBuffer([None] int iBuffer,[None] ID3DX10MeshBuffer** ppVertexBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetIndexData(System.IntPtr,System.Int32)">
            <summary>	
            Set the mesh's index data.	
            </summary>	
            <param name="dataRef">The index data. </param>
            <param name="cIndices">The number of indices in pData. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetIndexData([None] const void* pData,[None] int cIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetIndexBuffer">
            <summary>	
            Retrieves the data in an index buffer.	
            </summary>	
            <returns>Address of a reference to a ID3DX10MeshBuffer interface, representing the index buffer associated with the mesh. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetIndexBuffer([None] ID3DX10MeshBuffer** ppIndexBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAttributeData(System.IntPtr)">
            <summary>	
            Set the mesh's attribute data.	
            </summary>	
            <param name="dataRef">The attribute data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAttributeData([In] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetAttributeBuffer(SharpDX.Direct3D10.MeshBuffer@)">
            <summary>	
            Access the mesh's attribute buffer.	
            </summary>	
            <param name="attributeBufferRef">The attribute buffer. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetAttributeBuffer([None] ID3DX10MeshBuffer** ppAttributeBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAttributeTable(SharpDX.Direct3D10.MeshAttributeRange[],System.Int32)">
            <summary>	
            Sets the attribute table for a mesh and the number of entries stored in the table.	
            </summary>	
            <remarks>	
            If an application keeps track of the information in an attribute table, and rearranges the table as a result of changes to attributes or faces, this method allows the application to update the attribute tables instead of calling ID3DX10Mesh::Optimize again. 	
            </remarks>	
            <param name="attribTableRef">Pointer to an array of D3DX10_ATTRIBUTE_RANGE structures, representing the entries in the mesh attribute table. </param>
            <param name="cAttribTableSize">Number of attributes in the mesh attribute table. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAttributeTable([In, Buffer] const D3DX10_ATTRIBUTE_RANGE* pAttribTable,[None] int cAttribTableSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetAttributeTable(SharpDX.Direct3D10.MeshAttributeRange[],System.Int32@)">
            <summary>	
            Retrieves either an attribute table for a mesh, or the number of entries stored in an attribute table for a mesh.	
            </summary>	
            <remarks>	
            An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier when drawing the frame. 	
            </remarks>	
            <param name="attribTableRef">Pointer to an array of D3DX10_ATTRIBUTE_RANGE structures, representing the entries in the mesh's attribute table. Specify NULL to retrieve the value for pAttribTableSize. </param>
            <param name="attribTableSizeRef">Pointer to either the number of entries stored in pAttribTable or a value to be filled in with the number of entries stored in the attribute table for the mesh. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetAttributeTable([Out, Buffer, Optional] D3DX10_ATTRIBUTE_RANGE* pAttribTable,[None] int* pAttribTableSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GenerateAdjacencyAndPointRepresentation(System.Single)">
            <summary>	
            Generate a list of mesh edges, as well as a list of faces that share each edge.	
            </summary>	
            <remarks>	
            After an application generates adjacency information for a mesh, the mesh data can be optimized for better drawing performance. The order of the entries in the adjacency buffer is determined by the order of the vertex indices in the index buffer. The adjacent triangle 0 always corresponds to the edge between the indices of the corners 0 and 1. The adjacent triangle 1 always corresponds to the edge between the indices of the corners 1 and 2 while the adjacent triangle 2 corresponds to the edge between the indices of the corners 2 and 0. 	
            </remarks>	
            <param name="epsilon">Specifies that vertices that differ in position by less than epsilon should be treated as coincident. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GenerateAdjacencyAndPointReps([None] float Epsilon)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GenerateGeometryShaderAdjacency">
            <summary>	
            Adds adjacency data to the mesh's index buffer. When the mesh is to be sent to a geometry shader that takes adjacency data, it is neccessary for the mesh's index buffer to contain adjacency data.	
            </summary>	
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GenerateGSAdjacency()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAdjacencyData(System.IntPtr)">
            <summary>	
            Set the mesh's adjacency data.	
            </summary>	
            <param name="adjacencyRef">The adjacency data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAdjacencyData([In] const void* pAdjacency)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetAdjacencyBuffer">
            <summary>	
            Access the mesh's adjacency buffer.	
            </summary>	
            <returns>The adjacency buffer. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetAdjacencyBuffer([None] ID3DX10MeshBuffer** ppAdjacency)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetPointRepData(System.IntPtr)">
            <summary>	
            Set the point rep data for the mesh.	
            </summary>	
            <param name="ointRepsRef">The point rep data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetPointRepData([In] const void* pPointReps)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetPointRepBuffer(SharpDX.Direct3D10.MeshBuffer@)">
            <summary>	
            Get the mesh's point rep buffer.	
            </summary>	
            <param name="pointRepsRef">Pointer to a mesh buffer containing the mesh's point rep data. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetPointRepBuffer([None] ID3DX10MeshBuffer** ppPointReps)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Discard(SharpDX.Direct3D10.MeshDiscardFlags)">
            <summary>	
            Removes mesh data from the device that has been committed to the device (with <see cref="M:SharpDX.Direct3D10.Mesh.Commit"/>).	
            </summary>	
            <param name="dwDiscard">Specifies which pieces of mesh data to discard from the device. See <see cref="T:SharpDX.Direct3D10.MeshDiscardFlags"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::Discard([None] D3DX10_MESH_DISCARD_FLAGS dwDiscard)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.CloneMesh(System.Int32,System.String,SharpDX.Direct3D10.InputElement[],System.Int32,SharpDX.Direct3D10.Mesh@)">
            <summary>	
            Creates a new mesh and fills it with the data of a previously loaded mesh.	
            </summary>	
            <param name="flags">Creation flags to be applied to the new mesh. See {{D3DX10_MESH}}. </param>
            <param name="osSemanticRef">The semantic name for the position data. </param>
            <param name="descRef">Array of D3D10_INPUT_ELEMENT_DESC structures, describing the vertex format for the returned mesh. See <see cref="T:SharpDX.Direct3D10.InputElement"/>. </param>
            <param name="declCount">The number of elements in the pDesc array. </param>
            <param name="cloneMeshRef">The new mesh. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::CloneMesh([None] int Flags,[None] const char* pPosSemantic,[In, Buffer] const D3D10_INPUT_ELEMENT_DESC* pDesc,[None] int DeclCount,[None] ID3DX10Mesh** ppCloneMesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Optimize(System.Int32,System.Int32[],System.IntPtr)">
            <summary>	
            Generates a new mesh with reordered faces and vertices to optimize drawing performance.	
            </summary>	
            <remarks>	
            This method generates a new mesh. Before running Optimize, an application must generate an adjacency buffer by calling <see cref="M:SharpDX.Direct3D10.Mesh.GenerateAdjacencyAndPointRepresentation(System.Single)"/>. The adjacency buffer contains adjacency data, such as a list of edges and the faces that are adjacent to each other. This method is very similar to the <see cref="M:SharpDX.Direct3D10.Mesh.CloneMesh(System.Int32,System.String,SharpDX.Direct3D10.InputElement[],System.Int32,SharpDX.Direct3D10.Mesh@)"/> method, except that it can perform optimization while generating the new clone of the mesh. The output mesh inherits all of the creation parameters of the input mesh. 	
            </remarks>	
            <param name="flags">Specifies the type of optimization to perform. This parameter can be set to a combination of one or more flags from D3DXMESHOPT and D3DXMESH (except D3DXMESH_32BIT, D3DXMESH_IB_WRITEONLY, and D3DXMESH_WRITEONLY). </param>
            <param name="faceRemapRef">An array of UINTs, one per face, that identifies the original mesh face that corresponds to each face in the optimized mesh. If the value supplied for this argument is NULL, face remap data is not returned. </param>
            <param name="vertexRemapRef">Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/>, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::Optimize([None] int Flags,[Out, Buffer, Optional] int* pFaceRemap,[In] void* ppVertexRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GenerateAttributeBufferFromTable">
            <summary>	
            Generate an attribute buffer from the data in the mesh's attribute table. An attribute buffer is another format for storing the data in the attribute table. Both the attribute buffer and the attribute table are internal data structures in the mesh.	
            </summary>	
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GenerateAttributeBufferFromTable()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Intersect(SharpDX.Vector3@,SharpDX.Vector3@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Determines if a ray intersects with this mesh.	
            </summary>	
            <remarks>	
            This API provides a way to understand points in and around a triangle, independent of where the triangle is actually located. This function returns the resulting point by using the following equation: V1 + U(V2 - V1) + V(V3 - V1). Any point in the plane V1V2V3 can be represented by the barycentric coordinate (U,V). The parameter U controls how much V2 gets weighted into the result, and the parameter V controls how much V3 gets weighted into the result. Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted into the result. Barycentric coordinates are a form of general coordinates. In this context, using barycentric coordinates represents a change in coordinate systems. What holds true for Cartesian coordinates holds true for barycentric coordinates. Barycentric coordinates define a point inside a triangle in terms of the triangle's vertices. For a more in-depth description of barycentric coordinates, see {{Mathworld's Barycentric Coordinates Description}}. 	
            </remarks>	
            <param name="rayPosRef">Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the point where the ray begins. </param>
            <param name="rayDirRef">Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray. </param>
            <param name="hitCountRef">The number of times the ray intersected with the mesh. </param>
            <param name="faceIndexRef">Pointer to an index value of the face closest to the ray origin, if pHit is TRUE. </param>
            <param name="uRef">Pointer to a barycentric hit coordinate, U. </param>
            <param name="vRef">Pointer to a barycentric hit coordinate, V. </param>
            <param name="distRef">Pointer to a ray intersection parameter distance. </param>
            <param name="allHitsRef">Pointer to an <see cref="T:SharpDX.Direct3D.Blob"/>, containing an array of {{D3DX10_INTERSECT_INFO}} structures. This is a list of all the hits that occurred in the intersection test. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::Intersect([None] D3DXVECTOR3* pRayPos,[None] D3DXVECTOR3* pRayDir,[None] int* pHitCount,[None] int* pFaceIndex,[None] float* pU,[None] float* pV,[None] float* pDist,[None] ID3D10Blob** ppAllHits)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.IntersectSubset(System.Int32,SharpDX.Vector3@,SharpDX.Vector3@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Determines if a ray intersects with a subset of this mesh.	
            </summary>	
            <remarks>	
            This API provides a way to understand points in and around a triangle, independent of where the triangle is actually located. This function returns the resulting point by using the following equation: V1 + U(V2 - V1) + V(V3 - V1). Any point in the plane V1V2V3 can be represented by the barycentric coordinate (U,V). The parameter U controls how much V2 gets weighted into the result, and the parameter V controls how much V3 gets weighted into the result. Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted into the result. Barycentric coordinates are a form of general coordinates. In this context, using barycentric coordinates represents a change in coordinate systems. What holds true for Cartesian coordinates holds true for barycentric coordinates. Barycentric coordinates define a point inside a triangle in terms of the triangle's vertices. For a more in-depth description of barycentric coordinates, see {{Mathworld's Barycentric Coordinates Description}}. 	
            </remarks>	
            <param name="attribId">Attribute ID indentifying the subset of the mesh. </param>
            <param name="rayPosRef">Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the point where the ray begins. </param>
            <param name="rayDirRef">Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray. </param>
            <param name="hitCountRef">The number of times the ray intersected with the mesh. </param>
            <param name="faceIndexRef">Pointer to an index value of the face closest to the ray origin, if pHit is TRUE. </param>
            <param name="uRef">Pointer to a barycentric hit coordinate, U. </param>
            <param name="vRef">Pointer to a barycentric hit coordinate, V. </param>
            <param name="distRef">Pointer to a ray intersection parameter distance. </param>
            <param name="allHitsRef">Pointer to an <see cref="T:SharpDX.Direct3D.Blob"/>, containing an array of {{D3DX10_INTERSECT_INFO}} structures. This is a list of all the hits that occurred in the intersection test. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::IntersectSubset([None] int AttribId,[None] D3DXVECTOR3* pRayPos,[None] D3DXVECTOR3* pRayDir,[None] int* pHitCount,[None] int* pFaceIndex,[None] float* pU,[None] float* pV,[None] float* pDist,[None] ID3D10Blob** ppAllHits)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Commit">
            <summary>	
            Commit any changes made to a mesh to the device so that the changes can be rendered. This should be called after a mesh's data is altered and before it is rendered. A mesh cannot be rendered unless it is committed to the device. See remarks.	
            </summary>	
            <remarks>	
            When a mesh is loaded, it's data is loaded into staging resources, meaning the data can be altered but not rendered. When CommitToDevice is called, the data from the staging resources are copied into device resources so that they can be rendered. Although the data is committed to the device, the staging resources remain and can be modified. If any modifications are made to the staging resources, the staging resources must be committed to the device again in order for those changes to be rendered on screen. 	
            </remarks>	
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::CommitToDevice()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.DrawSubset(System.Int32)">
            <summary>	
            Draws a subset of a mesh.	
            </summary>	
            <remarks>	
            An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier (AttribId) when drawing the frame. 	
            </remarks>	
            <param name="attribId">Specifies which subset of the mesh to draw. This value is used to differentiate faces in a mesh as belonging to one or more attribute groups. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::DrawSubset([None] int AttribId)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.DrawSubsetInstanced(System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw several instances of the same subset of a mesh.	
            </summary>	
            <remarks>	
            A mesh contains an attribute table. The attribute table can divide a mesh into subsets, where each subset is identified with an attribute ID.  For example, a mesh with 200 faces, divided into three subsets, might have an attribute table that looks like this:  AttribID 0Faces 0 ~ 50 AttribID 1Faces 51 ~ 125 AttribID 2Faces 126 ~ 200  ? Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene.  One example of instancing could be to draw the same object with different positions and colors.  Indexing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data. Drawing instances with DrawSubsetInstanced is very similar to the process used with <see cref="M:SharpDX.Direct3D10.Device.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> that is outlined  in {{Instancing Sample}}.  The key difference when using DrawSubsetInstanced is that vertex and index buffers must be extracted  from the <see cref="T:SharpDX.Direct3D10.Mesh"/> object before the instancing data can be combined. The following code illustrates extracting the vertex and index buffers from the mesh object. 	
            <code> ID3D10Buffer* vertexBuffer; pDeviceObj-&gt;pMesh-&gt;GetDeviceVertexBuffer(0, &amp;vertexBuffer); ID3D10Buffer* indexBuffer; pDeviceObj-&gt;pMesh-&gt;GetDeviceIndexBuffer(&amp;indexBuffer); </code>	
            	
             	
            </remarks>	
            <param name="attribId">Specifies which subset of the mesh to draw. This value is used to differentiate faces in a mesh as belonging to one or more attribute groups.  See remarks. </param>
            <param name="instanceCount">Number of instances to render. </param>
            <param name="startInstanceLocation">Which instance to start fetching from in each buffer marked as instance data. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::DrawSubsetInstanced([None] int AttribId,[None] int InstanceCount,[None] int StartInstanceLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetDeviceVertexBuffer(System.Int32)">
            <summary>	
            Access the mesh's vertex buffer after it has been committed to the device with <see cref="M:SharpDX.Direct3D10.Mesh.Commit"/>. This is different from <see cref="M:SharpDX.Direct3D10.Mesh.GetVertexBuffer(System.Int32)"/>, which returns the vertex buffer before it has been committed to the device.	
            </summary>	
            <param name="iBuffer">An index identifying which vertex buffer to access. </param>
            <returns>The vertex buffer after it has been committed to the device. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetDeviceVertexBuffer([None] int iBuffer,[None] ID3D10Buffer** ppVertexBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetDeviceIndexBuffer">
            <summary>	
            Access the mesh's index buffer after it has been committed to the device with <see cref="M:SharpDX.Direct3D10.Mesh.Commit"/>. This is different from <see cref="M:SharpDX.Direct3D10.Mesh.GetIndexBuffer"/>, which returns the index buffer before it has been committed to the device.	
            </summary>	
            <remarks>	
            If the mesh's index buffer has not already been committed to the device, this API will automatically commit the index buffer before it returns a reference to the buffer. 	
            </remarks>	
            <returns>The index buffer after it has been committed to the device. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetDeviceIndexBuffer([None] ID3D10Buffer** ppIndexBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.#ctor(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.InputElement[],System.String,System.Int32,System.Int32,SharpDX.Direct3D10.MeshFlags)">
            <summary>	
            Creates a mesh object using a declarator.	
            </summary>	
            <param name="device">Pointer to an <see cref="T:SharpDX.Direct3D10.Device"/>, the device object to be associated with the mesh. </param>
            <param name="elements">Array of <see cref="T:SharpDX.Direct3D10.InputElement"/> elements, describing the vertex format for the returned mesh. This parameter must map directly to a flexible vertex format (FVF). </param>
            <param name="positionElement">Semantic that identifies which part of the vertex declaration contains position information. </param>
            <param name="vertexCount">Number of vertices for the mesh. This parameter must be greater than 0. </param>
            <param name="faceCount">Number of faces for the mesh. The valid range for this number is greater than 0, and one less than the maximum DWORD (typically 65534), because the last index is reserved. </param>
            <param name="flags">Combination of one or more flags from the <see cref="T:SharpDX.Direct3D10.MeshFlags"/>, specifying options for the mesh.  </param>
            <unmanaged>HRESULT D3DX10CreateMesh([None] ID3D10Device* pDevice,[In, Buffer] const D3D10_INPUT_ELEMENT_DESC* pDeclaration,[None] int DeclCount,[None] const char* pPositionSemantic,[None] int VertexCount,[None] int FaceCount,[None] int Options,[None] ID3DX10Mesh** ppMesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Clone(SharpDX.Direct3D10.InputElement[],System.String,SharpDX.Direct3D10.MeshFlags)">
            <summary>	
            Creates a new mesh and fills it with the data of a previously loaded mesh.	
            </summary>	
            <param name="positionElement">The semantic name for the position data. </param>
            <param name="elements">Array of <see cref="T:SharpDX.Direct3D10.InputElement"/> structures, describing the vertex format for the returned mesh. See <see cref="T:SharpDX.Direct3D10.InputElement"/>. </param>
            <param name="flags">Creation flags to be applied to the new mesh. See <see cref="T:SharpDX.Direct3D10.MeshFlags"/>.</param>
            <returns>returns the Mesh cloned. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::CloneMesh([None] int Flags,[None] const char* pPosSemantic,[In, Buffer] const D3D10_INPUT_ELEMENT_DESC* pDesc,[None] int DeclCount,[None] ID3DX10Mesh** ppCloneMesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetAttributeBuffer">
            <summary>	
            Access the mesh's attribute buffer.	
            </summary>	
            <returns>Returns the attribute buffer. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetAttributeBuffer([None] ID3DX10MeshBuffer** ppAttribute)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetAttributeTable">
            <summary>	
            Retrieves either an attribute table for a mesh, or the number of entries stored in an attribute table for a mesh.	
            </summary>	
            <remarks>	
            An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier when drawing the frame. 	
            </remarks>	
            <returns>Returns an array of <see cref="T:SharpDX.Direct3D10.MeshAttributeRange"/> structures, representing the entries in the mesh's attribute table. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetAttributeTable([Out, Buffer, Optional] D3DX10_ATTRIBUTE_RANGE* pAttribTable,[None] int* pAttribTableSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.GetPointRepresentationBuffer">
            <summary>	
            Get the mesh's point rep buffer.	
            </summary>	
            <returns>Returns a mesh buffer containing the mesh's point rep data. See <see cref="T:SharpDX.Direct3D10.MeshBuffer"/>. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::GetPointRepBuffer([None] ID3DX10MeshBuffer** ppPointReps)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Optimize(SharpDX.Direct3D10.MeshOptimizeFlags)">
            <summary>
            Optimizes the mesh data.
            </summary>
            <param name="flags">Flags indicating which optimizations to perform.</param>
            <returns>A result code.</returns>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.Optimize(SharpDX.Direct3D10.MeshOptimizeFlags,System.Int32[]@,System.Int32[]@)">
            <summary>	
            Generates a new mesh with reordered faces and vertices to optimize drawing performance.	
            </summary>	
            <remarks>	
            This method generates a new mesh. Before running Optimize, an application must generate an adjacency buffer by calling <see cref="M:SharpDX.Direct3D10.Mesh.GenerateAdjacencyAndPointRepresentation(System.Single)"/>. The adjacency buffer contains adjacency data, such as a list of edges and the faces that are adjacent to each other. This method is very similar to the <see cref="M:SharpDX.Direct3D10.Mesh.CloneMesh(System.Int32,System.String,SharpDX.Direct3D10.InputElement[],System.Int32,SharpDX.Direct3D10.Mesh@)"/> method, except that it can perform optimization while generating the new clone of the mesh. The output mesh inherits all of the creation parameters of the input mesh. 	
            </remarks>	
            <param name="flags">Specifies the type of optimization to perform. This parameter can be set to a combination of one or more flags from D3DXMESHOPT and D3DXMESH (except D3DXMESH_32BIT, D3DXMESH_IB_WRITEONLY, and D3DXMESH_WRITEONLY). </param>
            <param name="faceRemap">An array of UINTs, one per face, that identifies the original mesh face that corresponds to each face in the optimized mesh.</param>
            <param name="vertexRemap">An array of index for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::Optimize([None] int Flags,[Out, Buffer, Optional] int* pFaceRemap,[In] LPD3D10BLOB* ppVertexRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAdjacencyData(SharpDX.DataStream)">
            <summary>	
            Set the mesh's adjacency data.	
            </summary>	
            <param name="data">The adjacency data to set </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAdjacencyData([In] const int* pAdjacency)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAttributeData(SharpDX.DataStream)">
            <summary>	
            Set the mesh's attribute data.	
            </summary>	
            <param name="data">The attribute data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAttributeData([In] const int* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetAttributeTable(SharpDX.Direct3D10.MeshAttributeRange[])">
            <summary>
            Sets the attribute table for a mesh and the number of entries stored in the table.	
            </summary>	
            <remarks>	
            If an application keeps track of the information in an attribute table, and rearranges the table as a result of changes to attributes or faces, this method allows the application to update the attribute tables instead of calling ID3DX10Mesh::Optimize again. 	
            </remarks>	
            <param name="data">an array of <see cref="T:SharpDX.Direct3D10.MeshAttributeRange"/> structures, representing the entries in the mesh attribute table. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetAttributeTable([In, Buffer] const D3DX10_ATTRIBUTE_RANGE* pAttribTable,[None] int cAttribTableSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetIndexData(SharpDX.DataStream,System.Int32)">
            <summary>	
            Set the mesh's index data.	
            </summary>	
            <param name="data">The index data. </param>
            <param name="count">The number of indices in pData. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetIndexData([None] const void* pData,[None] int cIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetPointRepresentationData(SharpDX.DataStream)">
            <summary>	
            Set the point rep data for the mesh.	
            </summary>	
            <param name="data">The point rep data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetPointRepData([None] const int* pPointReps)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Mesh.SetVertexData(System.Int32,SharpDX.DataStream)">
            <summary>	
            Set vertex data into one of the mesh's vertex buffers.	
            </summary>	
            <param name="index">The vertex buffer to be filled with pData. </param>
            <param name="data">The vertex data to set. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX10Mesh::SetVertexData([None] int iBuffer,[None] const void* pData)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Mesh.FaceCount">
            <summary>	
            Retrieves the number of faces in the mesh.	
            </summary>	
            <unmanaged>int ID3DX10Mesh::GetFaceCount()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Mesh.VertexCount">
            <summary>	
            Get the number of vertices in the mesh. A mesh may contain multiple vertex buffers (i.e. one vertex buffer may contain all position data, another may contains all texture coordinate data, etc.), however each vertex buffer will contain the same number of elements.	
            </summary>	
            <unmanaged>int ID3DX10Mesh::GetVertexCount()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.Mesh.Flags">
            <summary>	
            Access the mesh's creation flags.	
            </summary>	
            <returns>The creation flags passed into the options parameter of <see cref="M:SharpDX.Direct3D10.D3DX10.CreateMesh(SharpDX.Direct3D10.Device,SharpDX.Direct3D10.InputElement[],System.Int32,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D10.Mesh@)"/> when the mesh was created. See {{D3DX10_MESH}}. </returns>
            <unmanaged>int ID3DX10Mesh::GetFlags()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SkinInfo">
            <summary>	
            ID3DX10SkinInfo allows you to optimize, process, and manually set the relationship between bones and vertices in your meshes (see {{Skeletal Animation on Wikipedia}}). It is most useful for making .x files exported by DCC Apps (such as 3DS Max and Maya) more hardware-friendly, and for improving the render speed of your skinned meshes in software render mode.	
            </summary>	
            <unmanaged>ID3DX10SkinInfo</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.SkinInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetNumVertices">
            <summary>	
            Get the number of vertices in ID3DX10SkinInfo.	
            </summary>	
            <returns>The number of vertices in ID3DX10SkinInfo. </returns>
            <unmanaged>int ID3DX10SkinInfo::GetNumVertices()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetNumBones">
            <summary>	
            Get the number of bones in ID3DX10SkinInfo.	
            </summary>	
            <returns>The number of bones in ID3DX10SkinInfo. </returns>
            <unmanaged>int ID3DX10SkinInfo::GetNumBones()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetMaxBoneInfluences">
            <summary>	
            Get the number of vertices a bone can maximally influence.	
            </summary>	
            <returns>The number of vertices a bone can maximally influence. </returns>
            <unmanaged>int ID3DX10SkinInfo::GetMaxBoneInfluences()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.AddVertices(System.Int32)">
            <summary>	
            Allocate space for additional vertices.	
            </summary>	
            <param name="count">The number of vertices to add. </param>
            <returns>If this method succeeds, the return value is S_OK. If the method fails, the return value can be: E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::AddVertices([None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.RemapVertices(System.Int32,System.Int32[])">
            <summary>	
            Change which vertices are influenced by which bones.	
            </summary>	
            <param name="newVertexCount">The new number of vertices. </param>
            <param name="vertexRemapRef">A reference to an array of vertex indices, which describe the remapping. For example, say SkinInfo contains some vertices such that bone0 is mapped to v0, bone1 to v1, and bone2 to v2, and array with 2,1,0 is specified for pBoneRemap. This will cause bone0 to be mapped to v2, bone1 to v1, and bone2 to v0. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_OUTOFMEMORY or E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::RemapVertices([None] int NewVertexCount,[In, Buffer] int* pVertexRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.AddBones(System.Int32)">
            <summary>	
            Allocate space for more bones.	
            </summary>	
            <param name="count">The number of bones to add. </param>
            <returns>If this method succeeds, the return value is S_OK. If the method fails, the return value can be: E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::AddBones([None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.RemoveBone(System.Int32)">
            <summary>	
            Remove a bone.	
            </summary>	
            <param name="index">An index that specifies which bone to remove. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::RemoveBone([None] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.RemapBones(System.Int32,System.Int32[])">
            <summary>	
            Change which bones influence which vertices.	
            </summary>	
            <param name="newBoneCount">The new number of bones. </param>
            <param name="boneRemapRef">A reference to an array of bone indices, which describe the remapping. For example, say SkinInfo contains some bones such that bone0 is mapped to v0, bone1 to v1, and bone2 to v2, and array with 2,1,0 is specified for pBoneRemap. This will cause bone0 to be mapped to v2, bone1 to v1, and bone2 to v0. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_OUTOFMEMORY or E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::RemapBones([None] int NewBoneCount,[In, Buffer] int* pBoneRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.AddBoneInfluences(System.Int32,System.Int32,System.Int32[],System.Single[])">
            <summary>	
            Enable an existing bone to influence a group of vertices and define how much influence the bone has on each vertex.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <param name="influenceCount">Number of vertices to add to the bone's influence. </param>
            <param name="indicesRef">Pointer to an array of vertex indices.  Each member of this array has a corresponding member in pWeights, such that pIndices[i] corresponds to pWeights[i].  The corresponding value in pWeights[i] determines how much influence BoneIndex will have on the vertex indexed by pIndices[i]. The size of the pIndices array must be equal to or greater than InfluenceCount. </param>
            <param name="weightsRef">Pointer to an array of bone weights.  Each member of this array has a corresponding member in pIndices, such that pWeights[i] corresponds to pIndices[i]. Each value in pWeights is between 0 and 1 and defines the amount of influence the bone has over each vertex. The size of pWeights must be equal to or greater than InfluenceCount. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG or E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::AddBoneInfluences([None] int BoneIndex,[None] int InfluenceCount,[In, Buffer] int* pIndices,[In, Buffer] float* pWeights)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.ClearBoneInfluences(System.Int32)">
            <summary>	
            Clear a bone's list of vertices that it influences.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::ClearBoneInfluences([None] int BoneIndex)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluenceCount(System.Int32)">
            <summary>	
            Get the number of vertices that a given bone influences.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG. </returns>
            <unmanaged>int ID3DX10SkinInfo::GetBoneInfluenceCount([None] int BoneIndex)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluences(System.Int32,System.Int32,System.Int32,System.Int32[],System.Single[])">
            <summary>	
            Get a list of vertices that a given bone influences and a list of the amount of influence that bone has on each vertex.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <param name="offset">An offset from the top of the bone's list of influenced vertices. This must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluenceCount(System.Int32)"/>. </param>
            <param name="count">The number of indices and weights to retrieve.  Must be between 0 and the value returned by ID3DX10SkinInfo::GetBoneInfluenceCount. </param>
            <param name="destIndicesRef">A list of indices into the vertex buffer, each one representing a vertex influenced by the bone. These values correspond to the values in pDestWeights, such that pDestIndices[i] corresponds to pDestWeights[i]. </param>
            <param name="destWeightsRef">A list of the amount of influence the bone has on each vertex. These values correspond to the values in pDestIndices, such that pDestWeights[i] corresponds to pDestIndices[i].f </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG or E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::GetBoneInfluences([None] int BoneIndex,[None] int Offset,[None] int Count,[Out, Buffer] int* pDestIndices,[Out, Buffer] float* pDestWeights)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.FindBoneInfluenceIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>	
            Find the index that indicates where a given vertex is in a given bone's list of influenced vertices.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <param name="vertexIndex">The index of the vertex in the vertex buffer. </param>
            <param name="influenceIndexRef">The index of the vertex in the bone's list of influenced vertices. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::FindBoneInfluenceIndex([None] int BoneIndex,[None] int VertexIndex,[None] int* pInfluenceIndex)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.SetBoneInfluence(System.Int32,System.Int32,System.Single)">
            <summary>	
            Set the amount of influence a given bone has over a given vertex.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <param name="influenceIndex">An index into the bone's list of vertices that it influences. </param>
            <param name="weight">The amount of influence, between 0 and 1, that the bone has over the vertex. </param>
            <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::SetBoneInfluence([None] int BoneIndex,[None] int InfluenceIndex,[None] float Weight)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluence(System.Int32,System.Int32,System.Single@)">
            <summary>	
            Get the amount of influence a given bone has over a given vertex.	
            </summary>	
            <remarks>	
            Use ID3DX10SkinInfo::GetBoneInfluenceCount to find out how many vertices the bone influences. 	
            </remarks>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones"/>. </param>
            <param name="influenceIndex">An index into the bone's list of vertices that it influences. </param>
            <param name="weightRef">The amount of influence, between 0 and 1, that the bone has over the vertex. </param>
            <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::GetBoneInfluence([None] int BoneIndex,[None] int InfluenceIndex,[None] float* pWeight)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.Compact(System.Int32,System.Int32,System.Single)">
            <summary>	
            Limit the number of bones that can influence a vertex and/or limit the amount of influence a bone can have on a vertex.	
            </summary>	
            <param name="maxPerVertexInfluences">The maximum number of bones that can influence any given vertex. This value is ignored if it is greater than the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetMaxBoneInfluences"/>. </param>
            <param name="scaleMode">A flag describing how to scale the remaining weights on a given vertex after some have been chopped off by MinWeight. If D3DX10_SKININFO_NO_SCALING is specified, the weights will not be scaled at all. If D3DX10_SKININFO_SCALE_TO_1 is specified, the weights greater than MinWeight will be scaled up so that they add up to 1.0. If D3DX10_SKININFO_SCALE_TO_TOTAL is specified, the weights greater than MinWeight will be scaled up so that they add up to the original total. </param>
            <param name="minWeight">The minimum percentage of influence, or weight, that any bone can have on any vertex. This value must be between 0 and 1. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_OUTOFMEMORY or E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::Compact([None] int MaxPerVertexInfluences,[None] int ScaleMode,[None] float MinWeight)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.DoSoftwareSkinning(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.Matrix@,System.Nullable{SharpDX.Matrix},SharpDX.Direct3D10.SkinningChannel@,System.Int32)">
            <summary>	
            Do software skinning on an array of vertices.	
            </summary>	
            <remarks>	
            Here is an example of how to use software skinning: 	
            <code> //vertex definition	
            struct MyVertex	
            { D3DXVECTOR3 Position; D3DXVECTOR2 Weight; D3DXVECTOR2 TexCoord;	
            }; //create vertex data	
            const UINT numVertices = 16;	
            MyVertex vertices[numVertices] = {...};	
            MyVertex destVertices[numVertices]; //create bone matrices	
            D3DXMATRIX boneMatrices[2];	
            D3DXMatrixIdentity(&amp;boneMatrices[0]);	
            D3DXMatrixRotationX(&amp;boneMatrices[1], 3.14159f / 180.0f); //create bone indices and weights	
            UINT boneIndices[numVertices] = {...};	
            float boneWeights[2][numVertices] = {...}; //create skin info, populate it with bones and vertices, and then map them to each other	
            ID3DX10SkinInfo *pSkinInfo = NULL;	
            D3DX10CreateSkinInfo(&amp;pSkinInfo);	
            pSkinInfo-&gt;AddBones(2);	
            pSkinInfo-&gt;AddVertices(numVertices);	
            pSkinInfo-&gt;AddBoneInfluences(0, numVertices, boneIndices, boneWeights[0]);	
            pSkinInfo-&gt;AddBoneInfluences(1, numVertices, boneIndices, boneWeights[1]); //create channel desc	
            D3DX10_SKINNING_CHANNEL channelDesc;	
            channelDesc.SrcOffset = 0;	
            channelDesc.DestOffset = 0;	
            channelDesc.IsNormal = FALSE; //do the skinning	
            pSkinInfo-&gt;DoSoftwareSkinning(0, numVertices, vertices, sizeof(MyVertex),  destVertices, sizeof(MyVertex),  boneMatrices, NULL,  &amp;channelDesc, 1); </code>	
            	
             	
            </remarks>	
            <param name="startVertex">A 0-based index into pSrcVertices. </param>
            <param name="vertexCount">Number of vertices to transform. </param>
            <param name="srcVerticesRef">Pointer to an array of vertices to transform. </param>
            <param name="srcStride">The size, in bytes, of a vertex in pSrcVertices. </param>
            <param name="destVerticesRef">Pointer to an array of vertices, which will be filled with the transformed vertices. </param>
            <param name="destStride">The size, in bytes, of a vertex in pDestVertices. </param>
            <param name="boneMatricesRef">An array of matrices that will be used to transform the points mapped to each bone, such that the vertices mapped to bone[i] will be transformed by pBoneMatrices[i].  This array will be used to transform the matrices only if the IsNormal value in pChannelDescs is set to false, otherwise pInverseTransposeBoneMatrices will be used. </param>
            <param name="inverseTransposeBoneMatricesRef">If this value is NULL, it will be set equal to pBoneMatrices.  This array of matrices will be used to transform the vertices only if the IsNormal value in pChannelDescs is set to true, otherwise pBoneMatrices will be used. </param>
            <param name="channelDescsRef">Pointer to a D3DX10_SKINNING_CHANNEL structure, which determines the member of the vertex decl the software skinning will be done on. </param>
            <param name="numChannels">The number of D3DX10_SKINNING_CHANNEL structures in pChannelDescs. </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::DoSoftwareSkinning([None] int StartVertex,[None] int VertexCount,[None] void* pSrcVertices,[None] int SrcStride,[None] void* pDestVertices,[None] int DestStride,[None] D3DXMATRIX* pBoneMatrices,[In, Optional] D3DXMATRIX* pInverseTransposeBoneMatrices,[None] D3DX10_SKINNING_CHANNEL* pChannelDescs,[None] int NumChannels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluences(System.Int32,System.Int32,System.Int32,System.Int32[]@,System.Single[]@)">
            <summary>	
            Get a list of vertices that a given bone influences and a list of the amount of influence that bone has on each vertex.	
            </summary>	
            <param name="boneIndex">An index that specifies an existing bone. Must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetNumBones" />. </param>
            <param name="offset">An offset from the top of the bone's list of influenced vertices. This must be between 0 and the value returned by <see cref="M:SharpDX.Direct3D10.SkinInfo.GetBoneInfluenceCount(System.Int32)" />. </param>
            <param name="count">The number of indices and weights to retrieve.  Must be between 0 and the value returned by ID3DX10SkinInfo::GetBoneInfluenceCount. </param>
            <param name="destIndicesRef">A list of indices into the vertex buffer, each one representing a vertex influenced by the bone. These values correspond to the values in pDestWeights, such that pDestIndices[i] corresponds to pDestWeights[i]. </param>
            <param name="destWeightsRef">A list of the amount of influence the bone has on each vertex. These values correspond to the values in pDestIndices, such that pDestWeights[i] corresponds to pDestIndices[i].f </param>
            <returns>If the method succeeds, the return value is S_OK. If the method fails, the return value can be: E_INVALIDARG or E_OUTOFMEMORY. </returns>
            <unmanaged>HRESULT ID3DX10SkinInfo::GetBoneInfluences([None] int BoneIndex,[None] int Offset,[None] int Count,[Out, Buffer] int* pDestIndices,[Out, Buffer] float* pDestWeights)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SkinInfo.NumVertices">
            <summary>	
            Get the number of vertices in ID3DX10SkinInfo.	
            </summary>	
            <unmanaged>int ID3DX10SkinInfo::GetNumVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SkinInfo.NumBones">
            <summary>	
            Get the number of bones in ID3DX10SkinInfo.	
            </summary>	
            <unmanaged>int ID3DX10SkinInfo::GetNumBones()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SkinInfo.MaxBoneInfluences">
            <summary>	
            Get the number of vertices a bone can maximally influence.	
            </summary>	
            <unmanaged>int ID3DX10SkinInfo::GetMaxBoneInfluences()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.InputElement">
            <summary>	
            A description of a single element for the {{input-assembler stage}}.	
            </summary>	
            <remarks>	
            An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout object by calling <see cref="M:SharpDX.Direct3D10.Device.CreateInputLayout(SharpDX.Direct3D10.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D10.InputLayout@)"/>. For an example, see {{Create an input-layout object}}. 	
            </remarks>	
            <unmanaged>D3D10_INPUT_ELEMENT_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.SemanticName">
            <summary>	
            The {{HLSL semantic}} associated with this element in a {{shader input-signature}}. 	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.SemanticIndex">
            <summary>	
            The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3). 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.Format">
            <summary>	
            The data type of the element data. See <see cref="T:SharpDX.DXGI.Format"/>. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.Slot">
            <summary>	
            An integer value that identifies the input-assembler (see {{input slot}}). Valid values are between 0 and 15, defined in D3D10.h. 	
            </summary>	
            <unmanaged>int InputSlot</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.AlignedByteOffset">
            <summary>	
            Optional. Offset (in bytes) between each element. Use D3D10_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly after the previous one, including any packing if necessary. 	
            </summary>	
            <unmanaged>int AlignedByteOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.Classification">
            <summary>	
            Identifies the input data class for a single input slot (see <see cref="T:SharpDX.Direct3D10.InputClassification"/>). 	
            </summary>	
            <unmanaged>D3D10_INPUT_CLASSIFICATION InputSlotClass</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.InputElement.InstanceDataStepRate">
            <summary>	
            The number of instances to draw before stepping one unit forward in a vertex buffer filled with instance data. Can be any unsigned integer value (0 means do not step) when the slot class is D3D10_INPUT_PER_INSTANCE_DATA; must be 0 when the slot class is D3D10_INPUT_PER_VERTEX_DATA. 	
            </summary>	
            <unmanaged>int InstanceDataStepRate</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32,SharpDX.Direct3D10.InputClassification,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
            <param name = "slotClass">Identifies the input data class for a single input slot.</param>
            <param name = "stepRate">The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="P:SharpDX.Direct3D10.InputElement.AppendAligned">
            <summary>
              Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
              should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
            <returns>A value used to align input elements.</returns>
            <unmanaged>D3D10_APPEND_ALIGNED_ELEMENT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StreamOutputElement">
            <summary>	
            Description of a vertex element in a vertex buffer in an output slot.	
            </summary>	
            <unmanaged>D3D10_SO_DECLARATION_ENTRY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputElement.SemanticName">
            <summary>	
            Type of output element.  Possible values: "POSITION", "NORMAL", or "TEXCOORD0". 	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputElement.SemanticIndex">
            <summary>	
            Output element's zero-based index. Should be used if, for example, you have more than one texture coordinate stored in each vertex. 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputElement.StartComponent">
            <summary>	
            Which component of the entry to begin writing out to. Valid values are 0 ~ 3. For example, if you only wish to output to the y and z components of a position, then StartComponent should be 1 and ComponentCount should be 2. 	
            </summary>	
            <unmanaged>byte StartComponent</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputElement.ComponentCount">
            <summary>	
            The number of components of the entry to write out to. Valid values are 1 ~ 4. For example, if you only wish to output to the y and z components of a position, then StartComponent should be 1 and ComponentCount should be 2. 	
            </summary>	
            <unmanaged>byte ComponentCount</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputElement.OutputSlot">
            <summary>	
            The output slot that contains the vertex buffer that contains this output entry. 	
            </summary>	
            <unmanaged>byte OutputSlot</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.StreamOutputElement.#ctor(System.String,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D10.StreamOutputElement"/> struct.
            </summary>
            <param name="semanticName">Name of the semantic.</param>
            <param name="semanticIndex">Index of the semantic.</param>
            <param name="startComponent">The start component.</param>
            <param name="componentCount">The component count.</param>
            <param name="outputSlot">The output slot.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.Viewport">
            <summary>	
            Defines the dimensions of a {{viewport}}.	
            </summary>	
            <remarks>	
            In all cases, Width and Height must be ? 0 and TopLeftX + Width and TopLeftY + Height must be ? D3D10_VIEWPORT_BOUNDS_MAX. 	
            </remarks>	
            <unmanaged>D3D10_VIEWPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.TopLeftX">
            <summary>	
            X position of the left hand side of the viewport. Ranges between D3D10_VIEWPORT_BOUNDS_MIN and D3D10_VIEWPORT_BOUNDS_MAX. 	
            </summary>	
            <unmanaged>int TopLeftX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.TopLeftY">
            <summary>	
            Y position of the top of the viewport. Ranges between D3D10_VIEWPORT_BOUNDS_MIN and D3D10_VIEWPORT_BOUNDS_MAX. 	
            </summary>	
            <unmanaged>int TopLeftY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.Width">
            <summary>	
            Width of the viewport. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.Height">
            <summary>	
            Height of the viewport. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.MinDepth">
            <summary>	
            Minimum depth of the viewport. Ranges between 0 and 1. 	
            </summary>	
            <unmanaged>float MinDepth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Viewport.MaxDepth">
            <summary>	
            Maximum depth of the viewport. Ranges between 0 and 1. 	
            </summary>	
            <unmanaged>float MaxDepth</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Viewport" /> structure.
            </summary>
            <param name = "x">The X coordinate of the viewport.</param>
            <param name = "y">The Y coordinate of the viewport.</param>
            <param name = "width">The width of the viewport.</param>
            <param name = "height">The height of the viewport.</param>
            <param name = "minZ">The minimum Z distance of the viewport.</param>
            <param name = "maxZ">The maximum Z distance of the viewport.</param>
        </member>
        <member name="M:SharpDX.Direct3D10.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.Viewport" /> structure.
            </summary>
            <param name = "x">The X coordinate of the viewport.</param>
            <param name = "y">The Y coordinate of the viewport.</param>
            <param name = "width">The width of the viewport.</param>
            <param name = "height">The height of the viewport.</param>
        </member>
        <member name="T:SharpDX.Direct3D10.ResourceRegion">
            <summary>	
            Defines a 3D box.	
            </summary>	
            <remarks>	
            The following diagram shows a 3D box, where the origin is the left, front, top corner. ?  Diagram of a 3D box, where the origin is the left, front, top corner ? 	
            </remarks>	
            <unmanaged>D3D10_BOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Left">
            <summary>	
            The x position of the left hand side of the box. 	
            </summary>	
            <unmanaged>int left</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Top">
            <summary>	
            The y position of the top of the box. 	
            </summary>	
            <unmanaged>int top</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Front">
            <summary>	
            The z position of the front of the box. 	
            </summary>	
            <unmanaged>int front</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Right">
            <summary>	
            The x position of the right hand side of the box. 	
            </summary>	
            <unmanaged>int right</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Bottom">
            <summary>	
            The y position of the bottom of the box. 	
            </summary>	
            <unmanaged>int bottom</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ResourceRegion.Back">
            <summary>	
            The z position of the back of the box. 	
            </summary>	
            <unmanaged>int back</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilOperationDescription">
            <summary>	
            Describes the stencil operations that can be performed based on the results of {{stencil test}}.	
            </summary>	
            <remarks>	
            The stencil operation can be set differently based on the outcome of the stencil test by using the StencilFunc member.  This can be done for the {{stencil test}} portion of depth-stencil testing. The D3D10_DEPTH_STENCILOP_DESC structure is a member of the <see cref="T:SharpDX.Direct3D10.DepthStencilStateDescription"/> structure.  	
            </remarks>	
            <unmanaged>D3D10_DEPTH_STENCILOP_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilOperationDescription.FailOperation">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.StencilOperation"/> enumerated type that describes the stencil operation to perform when stencil testing fails. The default value is D3D10_STENCIL_OP_KEEP. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP StencilFailOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilOperationDescription.DepthFailOperation">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.StencilOperation"/> enumerated type that describes the stencil operation to perform when stencil testing passes and depth testing fails. The default value is D3D10_STENCIL_OP_KEEP. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP StencilDepthFailOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilOperationDescription.PassOperation">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.StencilOperation"/> enumerated type that describes the stencil operation to perform when stencil testing and depth testing both pass. The default value is D3D10_STENCIL_OP_KEEP. 	
            </summary>	
            <unmanaged>D3D10_STENCIL_OP StencilPassOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilOperationDescription.Comparison">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.Comparison"/> enumerated type that describes how stencil data is compared against existing stencil data. The default value is D3D10_COMPARISON_ALWAYS. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_FUNC StencilFunc</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilStateDescription">
            <summary>	
            Describes depth-stencil state.	
            </summary>	
            <remarks>	
            Depth-stencil state controls how {{depth-stencil}} testing is performed by the {{output-merger}} stage. The formats that support stenciling are DXGI_FORMAT_D24_UNORM_S8_UINT and DXGI_FORMAT_D32_FLOAT_S8X24_UINT. 	
            </remarks>	
            <unmanaged>D3D10_DEPTH_STENCIL_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.DepthWriteMask">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.DepthWriteMask"/> enumerated type that identifies a portion of the depth-stencil buffer that can be modified by depth data.  The default value is D3D10_DEPTH_WRITE_MASK_ALL. 	
            </summary>	
            <unmanaged>D3D10_DEPTH_WRITE_MASK DepthWriteMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.DepthComparison">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.Comparison"/> enumerated type that defines how depth data is compared against existing depth data.  The default value is D3D10_COMPARISON_LESS 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_FUNC DepthFunc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.StencilReadMask">
            <summary>	
            A value that identifies a portion of the depth-stencil buffer for reading stencil data.  The default value is D3D10_DEFAULT_STENCIL_READ_MASK. 	
            </summary>	
            <unmanaged>byte StencilReadMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.StencilWriteMask">
            <summary>	
            A value that identifies a portion of the depth-stencil buffer for writing stencil data. The default value is D3D10_DEFAULT_STENCIL_WRITE_MASK. 	
            </summary>	
            <unmanaged>byte StencilWriteMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.FrontFace">
            <summary>	
            A <see cref="T:SharpDX.Direct3D10.DepthStencilOperationDescription"/> structure that identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing toward the camera. 	
            </summary>	
            <unmanaged>D3D10_DEPTH_STENCILOP_DESC FrontFace</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilStateDescription.BackFace">
            <summary>	
            A <see cref="T:SharpDX.Direct3D10.DepthStencilOperationDescription"/> structure that identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera. 	
            </summary>	
            <unmanaged>D3D10_DEPTH_STENCILOP_DESC BackFace</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.DepthStencilStateDescription.IsDepthEnabled">
            <summary>	
            A Boolean value that enables depth testing.  The default value is TRUE. 	
            </summary>	
            <unmanaged>BOOL DepthEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.DepthStencilStateDescription.IsStencilEnabled">
            <summary>	
            A Boolean value that enables stencil testing.  The default value is FALSE. 	
            </summary>	
            <unmanaged>BOOL StencilEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendStateDescription">
            <summary>	
            Describes the blend state.	
            </summary>	
            <remarks>	
            To see how blending is done, see {{Output-Merger Stage (Direct3D 10)}}. These are the default values for blend state.  StateDefault Value AlphaToCoverageEnableFALSE BlendEnable[8]FALSE (for all 8) SrcBlendD3D10_BLEND_ONE DestBlendD3D10_BLEND_ZERO BlendOpD3D10_BLEND_OP_ADD SrcBlendAlphaD3D10_BLEND_ONE DestBlendAlphaD3D10_BLEND_ZERO BlendOpAlphaD3D10_BLEND_OP_ADD RenderTargetWriteMask[8]D3D10_COLOR_WRITE_ENABLE_ALL (for all 8)  ? 	
            </remarks>	
            <unmanaged>D3D10_BLEND_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.SourceBlend">
            <summary>	
            This {{blend option}} specifies the first RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND SrcBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.DestinationBlend">
            <summary>	
            This {{blend option}} specifies the second RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND DestBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.BlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the RGB data sources. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP BlendOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.SourceAlphaBlend">
            <summary>	
            This {{blend option}} specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D10_BLEND SrcBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.DestinationAlphaBlend">
            <summary>	
            This {{blend option}} specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D10_BLEND DestBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.BlendStateDescription.AlphaBlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the alpha data sources. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP BlendOpAlpha</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription.IsAlphaToCoverageEnabled">
            <summary>	
            Determines whether or not to use {{alpha-to-coverage}} as a multisampling technique when setting a pixel to a rendertarget. 	
            </summary>	
            <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription.IsBlendEnabled">
            <summary>	
            Enable (or disable) blending. There are eight elements in this array; these correspond to the eight rendertargets that can be set to output-merger stage at one time. 	
            </summary>	
            <unmanaged>BOOL BlendEnable[8]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription.RenderTargetWriteMask">
            <summary>	
            A per-pixel write mask that allows control over which components can be written (see <see cref="T:SharpDX.Direct3D10.ColorWriteMaskFlags"/>). 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE RenderTargetWriteMask[8]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RasterizerStateDescription">
            <summary>	
            Describes the rasterizer state.	
            </summary>	
            <remarks>	
            Rasterizer state defines the behavior of the {{rasterizer stage}}; to set rasterizer state, call <see cref="M:SharpDX.Direct3D10.Device.RasterizerStage.SetState(SharpDX.Direct3D10.RasterizerState)"/>. 	
            </remarks>	
            <unmanaged>D3D10_RASTERIZER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RasterizerStateDescription.FillMode">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.FillMode"/> enumerated type that determines the fill mode to use when rendering.  The default value is D3D10_FILL_SOLID. 	
            </summary>	
            <unmanaged>D3D10_FILL_MODE FillMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RasterizerStateDescription.CullMode">
            <summary>	
            A member of the <see cref="T:SharpDX.Direct3D10.CullMode"/> enumerated type that indicates whether triangles facing the specified direction are drawn.  The default value is D3D10_CULL_BACK. 	
            </summary>	
            <unmanaged>D3D10_CULL_MODE CullMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RasterizerStateDescription.DepthBias">
            <summary>	
            Specifies the depth value added to a given pixel. The default value is 0. For more information, see {{Depth Bias}}. 	
            </summary>	
            <unmanaged>int DepthBias</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RasterizerStateDescription.DepthBiasClamp">
            <summary>	
            Specifies the maximum depth bias of a pixel. The default value is 0.0f. For more information, see {{Depth Bias}}. 	
            </summary>	
            <unmanaged>float DepthBiasClamp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RasterizerStateDescription.SlopeScaledDepthBias">
            <summary>	
            Specifies a scalar on a given pixel's slope. The default value is 0.0f. For more information, see {{Depth Bias}}. 	
            </summary>	
            <unmanaged>float SlopeScaledDepthBias</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerStateDescription.IsFrontCounterClockwise">
            <summary>	
            Determines if a triangle is front-facing or back-facing. If this parameter is TRUE, then a triangle is considered front-facing if its vertices are counter-clockwise on the render target, and considered back-facing if they are clockwise. If this parameter is FALSE, then the opposite is true.  The default value is FALSE. 	
            </summary>	
            <unmanaged>BOOL FrontCounterClockwise</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerStateDescription.IsDepthClipEnabled">
            <summary>	
            Enables or disables clipping based on distance.  The default value is TRUE. 	
            </summary>	
            <unmanaged>BOOL DepthClipEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerStateDescription.IsScissorEnabled">
            <summary>	
            Enable or disables scissor-rectangle culling. All pixels outside an active scissor rectangle are culled. The default value is FALSE. For more information, see {{Set the Scissor Rectangle}}. 	
            </summary>	
            <unmanaged>BOOL ScissorEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerStateDescription.IsMultisampleEnabled">
            <summary>	
            Enables or disables multisample antialiasing.  The default value is FALSE. 	
            </summary>	
            <unmanaged>BOOL MultisampleEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RasterizerStateDescription.IsAntialiasedLineEnabled">
            <summary>	
            Enable or disables line antialiasing. Note that this option only applies when alpha blending is enabled, you are drawing lines, and the MultisampleEnable member is FALSE.  The default value is FALSE. 	
            </summary>	
            <unmanaged>BOOL AntialiasedLineEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SubResourceData">
            <summary>	
            Specifies data for initializing a {{subresource}}.	
            </summary>	
            <remarks>	
            This structure is used in calls to create buffers (<see cref="M:SharpDX.Direct3D10.Device.CreateBuffer(SharpDX.Direct3D10.BufferDescription@,System.Nullable{SharpDX.Direct3D10.SubResourceData},SharpDX.Direct3D10.Buffer@)"/>) and textures (<see cref="M:SharpDX.Direct3D10.Device.CreateTexture1D(SharpDX.Direct3D10.Texture1DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture1D@)"/>,  <see cref="M:SharpDX.Direct3D10.Device.CreateTexture2D(SharpDX.Direct3D10.Texture2DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture2D@)"/>, and <see cref="M:SharpDX.Direct3D10.Device.CreateTexture3D(SharpDX.Direct3D10.Texture3DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture3D@)"/>).  If the resource being created does not require a system-memory pitch or a system-memory-pitch slice, then you are free to use those members to  pass size information which may help you when debugging a problem creating a resource. Note that an application should not rely on SysMemPitch being exactly equal to the number of texels in a line times the size of a texel. In some cases SysMemPitch will include padding to skip past additional data in a line.  This could be padding for alignment or  the texture could be a subsection of a larger texture.  For example the D3D10_SUBRESOURCE_DATA structure could represent a 32 by 32 subsection of a 128 by 128 texture.   The value for SysMemSlicePitch will reflect any padding included in SysMemPitch. 	
            </remarks>	
            <unmanaged>D3D10_SUBRESOURCE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SubResourceData.DataPointer">
            <summary>	
            Pointer to the initialization data. 	
            </summary>	
            <unmanaged>const void* pSysMem</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SubResourceData.Pitch">
            <summary>	
            The distance (in bytes) from the beginning of one line of a texture to the next line.   System-memory pitch is used only for 2D and 3D texture data as it is has no meaning for the other resource types. 	
            </summary>	
            <unmanaged>int SysMemPitch</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SubResourceData.SlicePitch">
            <summary>	
            The distance (in bytes) from the beginning of one depth level to the next.   System-memory-slice pitch is only used for 3D texture data as it has no meaning for the other resource types. 	
            </summary>	
            <unmanaged>int SysMemSlicePitch</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture1DDescription">
            <summary>	
            Describes a {{1D texture}}.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D10.Device.CreateTexture1D(SharpDX.Direct3D10.Texture1DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture1D@)"/>. A helpful derived structure CD3D10_TEXTURE1D_DESC is declared in D3D10.h, to help create a texture description. 	
            </remarks>	
            <unmanaged>D3D10_TEXTURE1D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.Width">
            <summary>	
            Texture width (in texels). The range is from 1 to D3D10_REQ_TEXTURE1D_U_DIMENSION (8192). 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.MipLevels">
            <summary>	
            Number of subtextures (also called mipmap levels). Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.ArraySize">
            <summary>	
            Number of textures in the array. The range is from 1 to D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION (512). 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D10_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D10_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.BindFlags"/>) for binding to {{pipeline}} stages. The flags can be combined by a logical OR. 	
            </summary>	
            <unmanaged>D3D10_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture1DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture2DDescription">
            <summary>	
            Describes a {{2D texture}}.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D10.Device.CreateTexture2D(SharpDX.Direct3D10.Texture2DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture2D@)"/>. A helpful derived structure CD3D10_TEXTURE2D_DESC is declared in D3D10.h, to help create a texture description. The device places some size restrictions (must be multiples of a minimum size) for a subsampled, {{block compressed}}, or bit-format resource. 	
            </remarks>	
            <unmanaged>D3D10_TEXTURE2D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.Width">
            <summary>	
            Texture width (in texels). The range is from 1 to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192). For a texture cube-map, the range is from 1 to D3D10_REQ_TEXTURECUBE_DIMENSION (8192). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.Height">
            <summary>	
            Texture height (in texels). The range is from 1 to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192). For a texture cube-map, the range is from 1 to D3D10_REQ_TEXTURECUBE_DIMENSION (8192). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.MipLevels">
            <summary>	
            Number of subtextures (also called mipmap levels). Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.ArraySize">
            <summary>	
            Number of textures in the texture array. The range is from 1 to D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION (512). For a texture cube-map, this value is a multiple of 6 (that is, 6 * the value in the NumCubes member of <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1"/>), and the range is from 6 to D3D10_REQ_TEXTURECUBE_DIMENSION. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.SampleDescription">
            <summary>	
            Structure that specifies multisampling parameters for the texture. See <see cref="T:SharpDX.DXGI.SampleDescription"/>. 	
            </summary>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D10_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D10_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.BindFlags"/>) for binding to {{pipeline}} stages. The flags can be combined by a logical OR. 	
            </summary>	
            <unmanaged>D3D10_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture2DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR. For a texture cube-map, set the <see cref="F:SharpDX.Direct3D10.ResourceOptionFlags.TextureCube"/> flag. Cube-map arrays (that is, ArraySize &gt; 6) require feature level <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_10_1"/>. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MappedTexture2D">
            <summary>	
            Provides access to {{subresource}} data in a 2D texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to {{Map}}. To illustrate the row pitch, assume an uncompressed 2D texture with mipmap levels, as shown in the following illustration.  ?  Illustration of an uncompressed 2D texture with mipmap levels ? Visualize the top-level texture drawn in a single plane like the following illustration.  ?  Illustration of a single plane ? However, the actual layout of each element in memory looks more like the following illustration.  ?  Illustration of the row pitch in memory ? For this example, the row pitch encompasses 5 elements (one row), whose size would be five times the number of bytes per element. Use row pitch to advance a reference between rows within a single 2D texture plane. Example To access data in, say, the third mipmap level, you must cast the pData reference as demonstrated in the following example for a floating-point texture. 	
            <code> D3D10_MAPPED_TEXTURE2D mappedTexture;	
            if( SUCCEEDED( pTexture-&gt;Map( D3D10CalcSubresource(2, 0, 3), D3D10_MAP_WRITE_DISCARD, 0, &amp;mappedTexture )))	
            { D3D10_TEXTURE2D_DESC desc; pTexture-&gt;GetDesc( &amp;desc ); // Compute the width and height of the third mipmap level const UINT WIDTH = desc.Width &gt;&gt; 2; const UINT HEIGHT = desc.Height &gt;&gt; 2; FLOAT* pTexels = (FLOAT*)mappedTexture.pData; for( UINT row = 0; row &lt; HEIGHT; row++ ) { UINT rowStart = row * mappedTexture.RowPitch/4; for( UINT col = 0; col &lt; WIDTH; col++ ) { pTexels[rowStart + col*4 + 0]; // Red pTexels[rowStart + col*4 + 1]; // Green pTexels[rowStart + col*4 + 2]; // Blue pTexels[rowStart + col*4 + 3]; // Alpha } } pTexture-&gt;Unmap(D3D10CalcSubresource(2, 0, 3));	
            } </code>	
            	
             	
            </remarks>	
            <unmanaged>D3D10_MAPPED_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MappedTexture2D.PData">
            <summary>	
            Pointer to the data. 	
            </summary>	
            <unmanaged>void* pData</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MappedTexture2D.RowPitch">
            <summary>	
            The pitch, or width, or physical size (in bytes), of one row of an uncompressed texture. A block-compressed texture is encoded in 4x4 blocks (see {{virtual size vs physical size}}) ; therefore, RowPitch is the number of bytes in a block of 4x4 texels. 	
            </summary>	
            <unmanaged>int RowPitch</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.Texture3DDescription">
            <summary>	
            Describes a {{3D texture}}.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D10.Device.CreateTexture3D(SharpDX.Direct3D10.Texture3DDescription@,SharpDX.Direct3D10.SubResourceData[],SharpDX.Direct3D10.Texture3D@)"/>. A helpful derived structure CD3D10_TEXTURE3D_DESC is declared in D3D10.h, to help create a texture description. The device restricts the size of subsampled, block compressed (see {{Block Compression (Direct3D 10)}}), and bit format resources to be multiples of sizes specific to each format. 	
            </remarks>	
            <unmanaged>D3D10_TEXTURE3D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.Width">
            <summary>	
            Texture width (in texels). The range is from 1 to D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.Height">
            <summary>	
            Texture height (in texels). The range is from 1 to D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.Depth">
            <summary>	
            Texture depth (in texels). The range is from 1 to D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.MipLevels">
            <summary>	
            Number of subtextures (also called mipmap levels). Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D10_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D10.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D10_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.BindFlags"/>) for binding to {{pipeline}} stages. The flags can be combined by a logical OR. 	
            </summary>	
            <unmanaged>D3D10_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.Texture3DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MappedTexture3D">
            <summary>	
            Provides access to {{subresource}} data in a {{3D texture}}.	
            </summary>	
            <remarks>	
            This structure is used to access subresource data when calling <see cref="M:SharpDX.Direct3D10.Texture3D.Map(System.Int32,SharpDX.Direct3D10.MapMode,SharpDX.Direct3D10.MapFlags,SharpDX.Direct3D10.MappedTexture3D@)"/>. To access data, you must cast the pData reference; see <see cref="T:SharpDX.Direct3D10.MappedTexture2D"/> for an example. To illustrate pitch for an uncompressed texture, assume a 3D texture with mipmap levels, as shown in the following illustration.  ?  Illustration of a 3D texture with mipmap levels ? It is easiest to consider the top-level texture only, as shown in the following illustration.  ?  Illustration of only the top-level texture ? And then visualize the top-level texture redrawn as a series of 2D textures, each one having a different depth value. This yields several texture planes, as shown in the following illustration.  ?  Illustration of top-level texture drawn as 2D texture planes ? However, the actual layout of all the elements from all the texture planes looks more like the following illustration.  ?  Illustration of the row pitch and depth pitch in memory ? Use row pitch to advance a reference between rows within a single 2D texture plane; use depth pitch to advance a reference between 2D texture planes. 	
            </remarks>	
            <unmanaged>D3D10_MAPPED_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MappedTexture3D.PData">
            <summary>	
            Pointer to the data. 	
            </summary>	
            <unmanaged>void* pData</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MappedTexture3D.RowPitch">
            <summary>	
            The pitch, or width, or physical size (in bytes) of one row of an uncompressed texture. Since a block-compressed texture is encoded in 4x4 blocks, the RowPitch for a compressed texture is the number of bytes in a block of 4x4 texels. See {{virtual size vs physical size}} for more information on block compression. 	
            </summary>	
            <unmanaged>int RowPitch</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MappedTexture3D.DepthPitch">
            <summary>	
            The pitch or number of bytes in all rows for a single depth. 	
            </summary>	
            <unmanaged>int DepthPitch</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription">
            <summary>	
            Describes a shader-resource view.	
            </summary>	
            <remarks>	
            A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read. For more information about how views work, see {{Views}}  When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a DXGI_FORMAT_R32G32B32_TYPELESS resource can be viewed with one of these typed formats: DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, and DXGI_FORMAT_R32G32B32_SINT, since these typed formats are compatible with the typeless resource. Create a shader-resource-view description by calling <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/>. To view a shader-resource-view description, call <see cref="M:SharpDX.Direct3D10.ShaderResourceView.GetDescription(SharpDX.Direct3D10.ShaderResourceViewDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_SHADER_RESOURCE_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Format">
            <summary>	
            The viewing {{format}}. See remarks. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Dimension">
            <summary>	
            The resource type of the view. See <see cref="T:SharpDX.Direct3D.ShaderResourceViewDimension"/>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below. 	
            </summary>	
            <unmanaged>D3D10_SRV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Buffer">
            <summary>	
            View the resource as a buffer using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D10_BUFFER_SRV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1D">
            <summary>	
            View the resource as a 1D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_SRV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArray">
            <summary>	
            View the resource as a 1D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2D">
            <summary>	
            View the resource as a 2D-texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2D_SRV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArray">
            <summary>	
            View the resource as a 2D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMS">
            <summary>	
            View the resource as a 2D-multisampled texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_SRV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMSArray">
            <summary>	
            View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3D">
            <summary>	
            View the resource as a 3D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3DResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX3D_SRV Texture3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCube">
            <summary>	
            View the resource as a 3D-cube texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCubeResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEXCUBE_SRV TextureCube</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource">
            <summary>	
            Specifies the elements in a {{buffer}} resource to use in a shader-resource view.	
            </summary>	
            <remarks>	
            The D3D10_BUFFER_SRV structure is a member of the  <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/> structure, which represents a shader-resource view description. You can create a shader-resource view by calling the <see cref="M:SharpDX.Direct3D10.Device.CreateShaderResourceView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription},SharpDX.Direct3D10.ShaderResourceView@)"/> method. 	
            </remarks>	
            <unmanaged>D3D10_BUFFER_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource.FirstElement">
            <summary>	
            The offset of the first element in the view to access, relative to element 0. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource.ElementOffset">
            <summary>	
            The total number of elements in the view. 	
            </summary>	
            <unmanaged>int ElementOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource.ElementCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource.ElementWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ElementWidth</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DResource">
            <summary>	
            Specifies the {{subresource}} from a {{1D texture}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DResource.MipLevels">
            <summary>	
            Number of mipmap levels to use. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{1D textures}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource.MipLevels">
            <summary>	
            Number of subtextures to access. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DResource">
            <summary>	
            Specifies the {{subresource}} from a {{2D texture}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DResource.MipLevels">
            <summary>	
            Number of mipmap levels to use. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{2D textures}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource.MipLevels">
            <summary>	
            Number of subtextures to access. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3DResource">
            <summary>	
            Specifies the {{subresource(s)}} from a {{3D texture}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX3D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3DResource.MipLevels">
            <summary>	
            Number of mipmap levels to use. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCubeResource">
            <summary>	
            Specifies the {{subresource}} from a {{cube texture}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEXCUBE_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCubeResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCubeResource.MipLevels">
            <summary>	
            Number of mipmap levels to use. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the {{subresource(s)}} from a multisampled {{2D texture}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledResource"/>. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Integer of any value. See remarks. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of multisampled {{2D textures}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription">
            <summary>	
            Specifies the {{subresource(s)}} from a resource that are accessible using a render-target view.	
            </summary>	
            <remarks>	
            A render-target-view description is passed into <see cref="M:SharpDX.Direct3D10.Device.CreateRenderTargetView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.RenderTargetViewDescription},SharpDX.Direct3D10.RenderTargetView@)"/> to create a render target. A render-target-view cannot use the following formats:  Any {{typeless format}}.  <see cref="T:SharpDX.DXGI.Format"/> if the view will be used to bind a buffer (vertex, index, constant, or stream-output).  If the format is set to <see cref="T:SharpDX.DXGI.Format"/>, then the format of the resource that the view binds to the pipeline will be used. 	
            </remarks>	
            <unmanaged>D3D10_RENDER_TARGET_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Format">
            <summary>	
            The data format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Dimension">
            <summary>	
            The resource type (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDimension"/>), which specifies how the render-target resource will be accessed. 	
            </summary>	
            <unmanaged>D3D10_RTV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Buffer">
            <summary>	
            Specifies which buffer elements can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D10_BUFFER_RTV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1D">
            <summary>	
            Specifies the subresources in a 1D texture that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_RTV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArray">
            <summary>	
            Specifies the subresources in a 1D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2D">
            <summary>	
            Specifies the subresources in a 2D texture that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2D_RTV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArray">
            <summary>	
            Specifies the subresources in a 2D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2D_ARRAY_RTV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMS">
            <summary>	
            Specifies a single subresource because a multisampled 2D texture only contains one subresource (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_RTV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMSArray">
            <summary>	
            Specifies the subresources in a multisampled 2D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3D">
            <summary>	
            Specifies subresources in a 3D texture that can be accessed (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX3D_RTV Texture3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource">
            <summary>	
            Specifies the elements from a {{buffer}} resource to use in a render-target view.	
            </summary>	
            <remarks>	
            A render-target view is a member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). Create a render-target view by calling <see cref="M:SharpDX.Direct3D10.Device.CreateRenderTargetView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.RenderTargetViewDescription},SharpDX.Direct3D10.RenderTargetView@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_BUFFER_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource.FirstElement">
            <summary>	
            The offset (that is, the number of elements) between the beginning of the buffer and the first element that is to be used in the view, starting at 0. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource.ElementOffset">
            <summary>	
            The number of elements in the view. 	
            </summary>	
            <unmanaged>int ElementOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource.ElementCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.BufferResource.ElementWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ElementWidth</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DResource">
            <summary>	
            Specifies the {{subresource}} from a {{1D texture}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{1D textures}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            The index of the mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DResource">
            <summary>	
            Specifies the {{subresource}} from a {{2D texture}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the {{subresource}} from a multisampled {{2D texture}} to use in a render-target view.	
            </summary>	
            <remarks>	
            Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D10_TEX2DMS_RTV. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Integer of any value. See remarks. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{2D textures}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            The index of the mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array to use in the render target view, starting from FirstArraySlice. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from a an array of multisampled {{2D textures}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3DResource">
            <summary>	
            Specifies the {{subresource(s)}} from a {{3D texture}} to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render target view. See <see cref="T:SharpDX.Direct3D10.RenderTargetViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D10_TEX3D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3DResource.FirstDepthSlice">
            <summary>	
            First depth level to use. 	
            </summary>	
            <unmanaged>int FirstWSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetViewDescription.Texture3DResource.DepthSliceCount">
            <summary>	
            Number of depth levels to use in the render-target view, starting from FirstWSlice. A value of -1 indicates all of the slices along the w axis, starting from FirstWSlice. 	
            </summary>	
            <unmanaged>int WSize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription">
            <summary>	
            Specifies the {{subresource(s)}} from a texture that are accessible using a depth-stencil view.	
            </summary>	
            <remarks>	
            These are valid formats for a depth-stencil view:  DXGI_FORMAT_D16_UNORM DXGI_FORMAT_D24_UNORM_S8_UINT DXGI_FORMAT_D32_FLOAT DXGI_FORMAT_D32_FLOAT_S8X24_UINT DXGI_FORMAT_UNKNOWN  A depth-stencil view cannot use a {{typeless format}}.  If the format chosen is DXGI_FORMAT_UNKNOWN, then the format of the parent resource is used. A depth-stencil-view description is needed when calling <see cref="M:SharpDX.Direct3D10.Device.CreateDepthStencilView(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.DepthStencilViewDescription},SharpDX.Direct3D10.DepthStencilView@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_DEPTH_STENCIL_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Format">
            <summary>	
            Resource data  format (see <see cref="T:SharpDX.DXGI.Format"/>). See remarks for allowable formats. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Dimension">
            <summary>	
            Type of resource (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDimension"/>). Specifies how a depth-stencil resource will be accessed; the value is stored in the union in this structure. 	
            </summary>	
            <unmanaged>D3D10_DSV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1D">
            <summary>	
            Specifies a 1D texture subresource (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_DSV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArray">
            <summary>	
            Specifies an array of 1D texture subresources (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_ARRAY_DSV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2D">
            <summary>	
            Specifies a 2D texture subresource (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2D_DSV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArray">
            <summary>	
            Specifies an array of 2D texture subresources (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2D_ARRAY_DSV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMS">
            <summary>	
            Specifies a multisampled 2D texture contains a single subresource (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_DSV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMSArray">
            <summary>	
            Specifies a multisampled 2D texture contains a single subresource per texture (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DResource">
            <summary>	
            Specifies the {{subresource}} from a {{1D texture}} that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{1D textures}} to use in a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX1D_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DResource">
            <summary>	
            Specifies the {{subresource}} from a {{2D texture}} that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array {{2D textures}} that are accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2D_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use (see {{mip slice}}). 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the {{subresource}} from a multisampled {{2D texture}} that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            Since a multisampled 2D texture contains a single subtexture, there is nothing to specify; this unused member is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Unused. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the {{subresource(s)}} from an array of multisampled {{2D textures}} for a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D10.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures (see {{array slice}}) 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.DepthStencilViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SamplerStateDescription">
            <summary>	
            Describes a sampler state.	
            </summary>	
            <remarks>	
            These are the default values for sampler state.  StateDefault Value FilterMin_Mag_Mip_Point AddressUClamp AddressVClamp AddressWClamp MinLOD0.0f MaxLOD3.402823466e+38F (FLT_MAX) MipMapLODBias0.0f MaxAnisotropy16 ComparisonFuncNever BorderColorfloat4(0.0f, 0.0f, 0.0f, 0.0f) TextureN/A  ? 	
            </remarks>	
            <unmanaged>D3D10_SAMPLER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.Filter">
            <summary>	
            Filtering method to use when sampling a texture (see <see cref="T:SharpDX.Direct3D10.Filter"/>). 	
            </summary>	
            <unmanaged>D3D10_FILTER Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.AddressU">
            <summary>	
            Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <see cref="T:SharpDX.Direct3D10.TextureAddressMode"/>). 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MODE AddressU</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.AddressV">
            <summary>	
            Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MODE AddressV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.AddressW">
            <summary>	
            Method to use for resolving a w texture coordinate that is outside the 0 to 1 range. 	
            </summary>	
            <unmanaged>D3D10_TEXTURE_ADDRESS_MODE AddressW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.MipLodBias">
            <summary>	
            Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. 	
            </summary>	
            <unmanaged>float MipLODBias</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.MaximumAnisotropy">
            <summary>	
            Clamping value used if D3D10_FILTER_ANISOTROPIC or D3D10_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16. 	
            </summary>	
            <unmanaged>int MaxAnisotropy</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.ComparisonFunction">
            <summary>	
            A function that compares sampled data against existing sampled data. The function options are listed in <see cref="T:SharpDX.Direct3D10.Comparison"/>. 	
            </summary>	
            <unmanaged>D3D10_COMPARISON_FUNC ComparisonFunc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.BorderColor">
            <summary>	
            Border color to use if D3D10_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive. 	
            </summary>	
            <unmanaged>SHARPDX_COLOR4 BorderColor</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.MinimumLod">
            <summary>	
            Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. 	
            </summary>	
            <unmanaged>float MinLOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SamplerStateDescription.MaximumLod">
            <summary>	
            Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D10_FLOAT32_MAX. 	
            </summary>	
            <unmanaged>float MaxLOD</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.QueryDescription">
            <summary>	
            Describes a query.	
            </summary>	
            <unmanaged>D3D10_QUERY_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDescription.Type">
            <summary>	
            Type of query (see <see cref="T:SharpDX.Direct3D10.QueryType"/>). 	
            </summary>	
            <unmanaged>D3D10_QUERY Query</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDescription.Flags">
            <summary>	
            Miscellaneous flags (see <see cref="T:SharpDX.Direct3D10.QueryFlags"/>). 	
            </summary>	
            <unmanaged>D3D10_QUERY_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.QueryDataTimestampDisjoint">
            <summary>	
            Query information about the reliability of a timestamp query.	
            </summary>	
            <remarks>	
            For a list of query types see <see cref="T:SharpDX.Direct3D10.QueryType"/>. 	
            </remarks>	
            <unmanaged>D3D10_QUERY_DATA_TIMESTAMP_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataTimestampDisjoint.Frequency">
            <summary>	
            How frequently the GPU counter increments in Hz. 	
            </summary>	
            <unmanaged>__int64 Frequency</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.QueryDataTimestampDisjoint.Disjoint">
            <summary>	
            If this is TRUE, something occurred in between the query's <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/> calls that caused the timestamp counter to become discontinuous or disjoint, such as unplugging the AC chord on a laptop, overheating, or throttling up/down due to laptop savings events. The timestamp returned by <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> for a timestamp query is only reliable if Disjoint is FALSE. 	
            </summary>	
            <unmanaged>BOOL Disjoint</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.QueryDataPipelineStatistics">
            <summary>	
            Query information about graphics-pipeline activity in between calls to <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/>.	
            </summary>	
            <unmanaged>D3D10_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.IAVerticeCount">
            <summary>	
            Number of vertices read by input assembler. 	
            </summary>	
            <unmanaged>__int64 IAVertices</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.IAPrimitiveCount">
            <summary>	
            Number of primitives read by the input assembler. This number can be different depending on the primitive topology used. For example, a triangle strip with 6 vertices will produce 4 triangles, however a triangle list with 6 vertices will produce 2 triangles.  	
            </summary>	
            <unmanaged>__int64 IAPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.VSInvocationCount">
            <summary>	
            Number of times a vertex shader was invoked. Direct3D invokes the vertex shader once per vertex. 	
            </summary>	
            <unmanaged>__int64 VSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.GSInvocationCount">
            <summary>	
            Number of times a geometry shader was invoked. When the geometry shader is set to NULL, this statistic may or may not increment depending on the hardware manufacturer. 	
            </summary>	
            <unmanaged>__int64 GSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.GSPrimitiveCount">
            <summary>	
            Number of primitives output by a geometry shader. 	
            </summary>	
            <unmanaged>__int64 GSPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.CInvocationCount">
            <summary>	
            Number of primitives that were sent to the rasterizer. When the rasterizer is disabled, this will not increment. 	
            </summary>	
            <unmanaged>__int64 CInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.CPrimitiveCount">
            <summary>	
            Number of primitives that were rendered. This may be larger or smaller than CInvocations because after a primitive is clipped sometimes it is either broken up into more than one primitive or completely culled. 	
            </summary>	
            <unmanaged>__int64 CPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.QueryDataPipelineStatistics.PSInvocationCount">
            <summary>	
            Number of times a pixel shader was invoked. 	
            </summary>	
            <unmanaged>__int64 PSInvocations</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StreamOutputStatistics">
            <summary>	
            Query information about the amount of data streamed out to the stream-output buffers in between <see cref="M:SharpDX.Direct3D10.Asynchronous.Begin"/> and <see cref="M:SharpDX.Direct3D10.Asynchronous.End"/>.	
            </summary>	
            <unmanaged>D3D10_QUERY_DATA_SO_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputStatistics.NumPrimitivesWritten">
            <summary>	
            Number of primitives (that is, points, lines, and triangles) written to the stream-output buffers. 	
            </summary>	
            <unmanaged>__int64 NumPrimitivesWritten</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StreamOutputStatistics.PrimitivesStorageNeeded">
            <summary>	
            Number of primitives that would have been written to the stream-output buffers if there had been enough space for them all. 	
            </summary>	
            <unmanaged>__int64 PrimitivesStorageNeeded</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CounterDescription">
            <summary>	
            Describes a counter.	
            </summary>	
            <unmanaged>D3D10_COUNTER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterDescription.Counter">
            <summary>	
            Type of counter (see <see cref="T:SharpDX.Direct3D10.CounterKind"/>). 	
            </summary>	
            <unmanaged>D3D10_COUNTER Counter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterDescription.MiscFlags">
            <summary>	
            Reserved. 	
            </summary>	
            <unmanaged>int MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.CounterCapabilities">
            <summary>	
            Information about the video card's performance counter capabilities.	
            </summary>	
            <remarks>	
            This structure is returned by <see cref="M:SharpDX.Direct3D10.Device.GetCounterCapabilities"/>. 	
            </remarks>	
            <unmanaged>D3D10_COUNTER_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterCapabilities.LastDeviceDependentCounter">
            <summary>	
            Largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Otherwise it will be greater than or equal to D3D10_COUNTER_DEVICE_DEPENDENT_0. See <see cref="T:SharpDX.Direct3D10.CounterKind"/>. 	
            </summary>	
            <unmanaged>D3D10_COUNTER LastDeviceDependentCounter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterCapabilities.SimultaneousCounterCount">
            <summary>	
            Number of counters that can be simultaneously supported. 	
            </summary>	
            <unmanaged>int NumSimultaneousCounters</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.CounterCapabilities.DetectableParallelUnitCount">
            <summary>	
            Number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Use NumDetectableParallelUnits to interpret the values of the VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, and OTHER_GPU_PROCESSING counters. See <see cref="M:SharpDX.Direct3D10.Asynchronous.GetData"/> for an equation. 	
            </summary>	
            <unmanaged>byte NumDetectableParallelUnits</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderBufferDescription">
            <summary>	
            Describes a shader constant-buffer.	
            </summary>	
            <remarks>	
            Constants are supplied to shaders in a shader-constant buffer. Get the description of a shader-constant-buffer by calling {{ID3D10ShaderReflectionConstantBuffer::GetDesc}}. 	
            </remarks>	
            <unmanaged>D3D10_SHADER_BUFFER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderBufferDescription.Name">
            <summary>	
            The name of the buffer. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderBufferDescription.Type">
            <summary>	
            The intended use of the constant data. See <see cref="T:SharpDX.D3DCompiler.ConstantBufferType"/>. 	
            </summary>	
            <unmanaged>D3D10_CBUFFER_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderBufferDescription.VariableCount">
            <summary>	
            The number of unique variables. 	
            </summary>	
            <unmanaged>int Variables</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderBufferDescription.Size">
            <summary>	
            Buffer size (in bytes). 	
            </summary>	
            <unmanaged>int Size</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderBufferDescription.Flags">
            <summary>	
            Shader buffer properties. See <see cref="T:SharpDX.D3DCompiler.ConstantBufferFlags"/>. 	
            </summary>	
            <unmanaged>D3D_SHADER_CBUFFER_FLAGS uFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderParameterDescription">
            <summary>	
            Describes a shader signature.	
            </summary>	
            <remarks>	
            A shader can take n inputs and can produce m outputs. The order of the input (or output) parameters, their associated types, and any attached semantics make up the shader signature. Each shader has an input and an output signature. When compiling a shader or an effect, some API calls validate shader signatures (such as {{D3D10CompileShader}} and {{D3D10CompileEffectFromMemory}}). That is, they compare the output signature of one shader (like a vertex shader) with the input signature of another shader (like a pixel shader). This ensures that a shader outputs data that is compatible with a downstream shader that is consuming that data. Compatible means that a shader signature is a exact-match subset of the preceding shader stage. Exact match means parameter types and semantics must exactly match. Subset means that a parameter that is not required by a downstream stage, does not need to include that parameter in its shader signature. Get a shader-signature from a shader or an effect by calling APIs such as {{ID3D10ShaderReflection::GetInputParameterDesc}} or <see cref="M:SharpDX.Direct3D10.EffectShaderVariable.GetInputSignatureElementDescription(System.Int32,System.Int32)"/>. 	
            </remarks>	
            <unmanaged>D3D10_SIGNATURE_PARAMETER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.SemanticName">
            <summary>	
            A per-parameter string that identifies how the data will be used. See {{Semantics (DirectX HLSL)}}. 	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.SemanticIndex">
            <summary>	
            Semantic index that modifies the semantic. Used to differentiate different parameters that use the same semantic. 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.Register">
            <summary>	
            The register that will contain this variable's data. 	
            </summary>	
            <unmanaged>int Register</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.SystemValueType">
            <summary>	
            A predefined string that determines the functionality of certain pipeline stages. See <see cref="T:SharpDX.D3DCompiler.SystemValueType"/>. 	
            </summary>	
            <unmanaged>D3D10_NAME SystemValueType</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.ComponentType">
            <summary>	
            The per-component-data type that is stored in a register. See <see cref="T:SharpDX.D3DCompiler.RegisterComponentType"/>. Each register can store up to four-components of data. 	
            </summary>	
            <unmanaged>D3D10_REGISTER_COMPONENT_TYPE ComponentType</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.Mask">
            <summary>	
            Mask which indicates which components of a register are used. 	
            </summary>	
            <unmanaged>byte Mask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderParameterDescription.ReadWriteMask">
            <summary>	
            Mask which indicates whether a given component is never written (if the signature is an output signature) or always read (if the signature is an input signature). The mask is a combination of <see cref="T:SharpDX.D3DCompiler.RegisterComponentType"/> values. 	
            </summary>	
            <unmanaged>byte ReadWriteMask</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StateBlockMask">
            <summary>	
            Indicates the device state.	
            </summary>	
            <remarks>	
            A state-block mask indicates the device states that a pass or a technique changes.  The <see cref="M:SharpDX.Direct3D10.D3D10.StateBlockMaskEnableCapture(SharpDX.Direct3D10.StateBlockMask@,SharpDX.Direct3D10.DeviceStateTypes,System.Int32,System.Int32)"/> function  provides a convenient way of setting a range of bitmasks for the array members of D3D10_STATE_BLOCK_MASK. 	
            </remarks>	
            <unmanaged>D3D10_STATE_BLOCK_MASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.Vs">
            <summary>	
            Boolean value indicating whether to save the vertex shader state. 	
            </summary>	
            <unmanaged>bool VS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.Gs">
            <summary>	
            Boolean value indicating whether to save the geometry shader state. 	
            </summary>	
            <unmanaged>bool GS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.Ps">
            <summary>	
            Boolean value indicating whether to save the pixel shader state. 	
            </summary>	
            <unmanaged>bool PS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.IAIndexBuffer">
            <summary>	
            Boolean value indicating whether to save the index buffer state. 	
            </summary>	
            <unmanaged>bool IAIndexBuffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.IAInputLayout">
            <summary>	
            Boolean value indicating whether to save the input layout state. 	
            </summary>	
            <unmanaged>bool IAInputLayout</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.IAPrimitiveTopology">
            <summary>	
            Boolean value indicating whether to save the primitive topology state. 	
            </summary>	
            <unmanaged>bool IAPrimitiveTopology</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.OMRenderTargets">
            <summary>	
            Boolean value indicating whether to save the render targets states. 	
            </summary>	
            <unmanaged>bool OMRenderTargets</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.OMDepthStencilState">
            <summary>	
            Boolean value indicating whether to save the depth-stencil state. 	
            </summary>	
            <unmanaged>bool OMDepthStencilState</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.OMBlendState">
            <summary>	
            Boolean value indicating whether to save the blend state. 	
            </summary>	
            <unmanaged>bool OMBlendState</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.RSViewports">
            <summary>	
            Boolean value indicating whether to save the viewports states. 	
            </summary>	
            <unmanaged>bool RSViewports</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.RSScissorRects">
            <summary>	
            Boolean value indicating whether to save the scissor rectangles states. 	
            </summary>	
            <unmanaged>bool RSScissorRects</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.RSRasterizerState">
            <summary>	
            Boolean value indicating whether to save the rasterizer state. 	
            </summary>	
            <unmanaged>bool RSRasterizerState</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.SOBuffers">
            <summary>	
            Boolean value indicating whether to save the stream-out buffers states. 	
            </summary>	
            <unmanaged>bool SOBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.StateBlockMask.Predication">
            <summary>	
            Boolean value indicating whether to save the predication state. 	
            </summary>	
            <unmanaged>bool Predication</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.VSSamplers">
            <summary>	
            Array of vertex-shader samplers.  The array is a multi-byte bitmask where each bit represents one sampler slot. 	
            </summary>	
            <unmanaged>bool VSSamplers[2.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.VSShaderResources">
            <summary>	
            Array of vertex-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot. 	
            </summary>	
            <unmanaged>bool VSShaderResources[16.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.VSConstantBuffers">
            <summary>	
            Array of vertex-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot. 	
            </summary>	
            <unmanaged>bool VSConstantBuffers[2.625]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.GSSamplers">
            <summary>	
            Array of geometry-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. 	
            </summary>	
            <unmanaged>bool GSSamplers[2.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.GSShaderResources">
            <summary>	
            Array of geometry-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot. 	
            </summary>	
            <unmanaged>bool GSShaderResources[16.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.GSConstantBuffers">
            <summary>	
            Array of geometry-shader constant buffers. The array is a multi-byte bitmask where each bit represents one buffer slot. 	
            </summary>	
            <unmanaged>bool GSConstantBuffers[2.625]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.PSSamplers">
            <summary>	
            Array of pixel-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. 	
            </summary>	
            <unmanaged>bool PSSamplers[2.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.PSShaderResources">
            <summary>	
            Array of pixel-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot. 	
            </summary>	
            <unmanaged>bool PSShaderResources[16.875]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.PSConstantBuffers">
            <summary>	
            Array of pixel-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot. 	
            </summary>	
            <unmanaged>bool PSConstantBuffers[2.625]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.StateBlockMask.IAVertexBuffers">
            <summary>	
            Array of vertex buffers. The array is a multi-byte bitmask where each bit represents one resource slot. 	
            </summary>	
            <unmanaged>bool IAVertexBuffers[2.875]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectTypeDescription">
            <summary>	
            Describes an effect-variable type.	
            </summary>	
            <remarks>	
            To get an effect-variable type, call <see cref="M:SharpDX.Direct3D10.EffectType.GetDescription(SharpDX.Direct3D10.EffectTypeDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_EFFECT_TYPE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.TypeName">
            <summary>	
            A string that contains the variable name. 	
            </summary>	
            <unmanaged>const char* TypeName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Class">
            <summary>	
            The variable class (see <see cref="T:SharpDX.D3DCompiler.ShaderVariableClass"/>). 	
            </summary>	
            <unmanaged>D3D10_SHADER_VARIABLE_CLASS Class</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Type">
            <summary>	
            The variable type (see <see cref="T:SharpDX.D3DCompiler.ShaderVariableType"/>). 	
            </summary>	
            <unmanaged>D3D10_SHADER_VARIABLE_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Elements">
            <summary>	
            The number of elements if the variable is an array; otherwise 0. 	
            </summary>	
            <unmanaged>int Elements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Members">
            <summary>	
            The number of members if the variable is a structure; otherwise 0. 	
            </summary>	
            <unmanaged>int Members</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Rows">
            <summary>	
            The number of rows if the variable is a matrix; otherwise 0. 	
            </summary>	
            <unmanaged>int Rows</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Columns">
            <summary>	
            The number of columns if the variable is a matrix; otherwise 0. 	
            </summary>	
            <unmanaged>int Columns</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.PackedSize">
            <summary>	
            The number of bytes that the variable consumes when it is packed tightly by the compiler. 	
            </summary>	
            <unmanaged>int PackedSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.UnpackedSize">
            <summary>	
            The number of bytes that the variable consumes before it is packed by the compiler. 	
            </summary>	
            <unmanaged>int UnpackedSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTypeDescription.Stride">
            <summary>	
            The number of bytes between elements. 	
            </summary>	
            <unmanaged>int Stride</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectVariableDescription">
            <summary>	
            Describes an effect variable.	
            </summary>	
            <remarks>	
            To get an effect-variable description, call <see cref="M:SharpDX.Direct3D10.EffectVariable.GetDescription(SharpDX.Direct3D10.EffectVariableDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_EFFECT_VARIABLE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.Name">
            <summary>	
            A string that contains the variable name. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.Semantic">
            <summary>	
            The semantic attached to the variable; otherwise NULL. 	
            </summary>	
            <unmanaged>const char* Semantic</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.Flags">
            <summary>	
            Optional {{flags}} for effect variables.  	
            </summary>	
            <unmanaged>D3D10_EFFECT_VARIABLE_FLAGS Flags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.AnnotationCount">
            <summary>	
            The number of annotations; otherwise 0. 	
            </summary>	
            <unmanaged>int Annotations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.BufferOffset">
            <summary>	
            The offset between the begining of the constant buffer and this variable; otherwise 0. 	
            </summary>	
            <unmanaged>int BufferOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectVariableDescription.ExplicitBindPoint">
            <summary>	
            The register that this variable is bound to. To bind a variable explicitly use the D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT flag. 	
            </summary>	
            <unmanaged>int ExplicitBindPoint</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectTechniqueDescription">
            <summary>	
            Describes an effect technique.	
            </summary>	
            <remarks>	
            To get a technique, call <see cref="M:SharpDX.Direct3D10.EffectTechnique.GetDescription(SharpDX.Direct3D10.EffectTechniqueDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_TECHNIQUE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTechniqueDescription.Name">
            <summary>	
            A string that contains the technique name; otherwise NULL. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTechniqueDescription.PassCount">
            <summary>	
            The number of passes in the technique. 	
            </summary>	
            <unmanaged>int Passes</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectTechniqueDescription.AnnotationCount">
            <summary>	
            The number of annotations. 	
            </summary>	
            <unmanaged>int Annotations</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.EffectDescription">
            <summary>	
            Describes an effect.	
            </summary>	
            <remarks>	
            To get an effect description, call <see cref="M:SharpDX.Direct3D10.Effect.GetDescription(SharpDX.Direct3D10.EffectDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D10_EFFECT_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectDescription.ConstantBufferCount">
            <summary>	
            The number of constant buffers. 	
            </summary>	
            <unmanaged>int ConstantBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectDescription.SharedConstantBufferCount">
            <summary>	
            The number of constant buffers shared in an effect pool. 	
            </summary>	
            <unmanaged>int SharedConstantBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectDescription.GlobalVariableCount">
            <summary>	
            The number of global variables. 	
            </summary>	
            <unmanaged>int GlobalVariables</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectDescription.SharedGlobalVariableCount">
            <summary>	
            The number of global variables shared in an effect pool. 	
            </summary>	
            <unmanaged>int SharedGlobalVariables</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.EffectDescription.TechniqueCount">
            <summary>	
            The number of techniques. 	
            </summary>	
            <unmanaged>int Techniques</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.EffectDescription.IsChildEffect">
            <summary>	
            TRUE if the effect is a {{child effect}}; otherwise FALSE. 	
            </summary>	
            <unmanaged>BOOL IsChildEffect</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.RenderTargetBlendDescription1">
            <summary>	
            Describes the blend state for a render target for a Direct3D 10.1 device	
            </summary>	
            <remarks>	
            To see how blending is done, see {{Output-Merger Stage (Direct3D 10)}}. These are the default values for blend state.  StateDefault Value BlendEnableFALSE SrcBlendD3D10_BLEND_ONE DestBlendD3D10_BLEND_ZERO BlendOpD3D10_BLEND_OP_ADD SrcBlendAlphaD3D10_BLEND_ONE DestBlendAlphaD3D10_BLEND_ZERO BlendOpAlphaD3D10_BLEND_OP_ADD RenderTargetWriteMask0xFF  ? 	
            </remarks>	
            <unmanaged>D3D10_RENDER_TARGET_BLEND_DESC1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.SourceBlend">
            <summary>	
            This {{blend option}} specifies the first RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND SrcBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.DestinationBlend">
            <summary>	
            This {{blend option}} specifies the second RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D10_BLEND DestBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.BlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the RGB data sources. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP BlendOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.SourceAlphaBlend">
            <summary>	
            This {{blend option}} specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D10_BLEND SrcBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.DestinationAlphaBlend">
            <summary>	
            This {{blend option}} specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D10_BLEND DestBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.AlphaBlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the alpha data sources. 	
            </summary>	
            <unmanaged>D3D10_BLEND_OP BlendOpAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.RenderTargetBlendDescription1.RenderTargetWriteMask">
            <summary>	
            A write mask. 	
            </summary>	
            <unmanaged>D3D10_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.RenderTargetBlendDescription1.IsBlendEnabled">
            <summary>	
            Enable (or disable) blending. 	
            </summary>	
            <unmanaged>BOOL BlendEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.BlendStateDescription1">
            <summary>	
            Describes the blend state for a Direct3D 10.1 device.	
            </summary>	
            <remarks>	
            To see how blending is done, see {{Output-Merger Stage (Direct3D 10)}}. These are the default values for the blend description.  StateDefault Value AlphaToCoverageEnableFALSE IndependentBlendEnableFALSE RenderTarget[0].BlendEnableFALSE RenderTarget[0].SrcBlendD3D10_BLEND_ONE RenderTarget[0].DestBlendD3D10_BLEND_ZERO RenderTarget[0].BlendOpD3D10_BLEND_OP_ADD RenderTarget[0].SrcBlendAlphaD3D10_BLEND_ONE RenderTarget[0].DestBlendAlphaD3D10_BLEND_ZERO RenderTarget[0].BlendOpAlphaD3D10_BLEND_OP_ADD RenderTarget[0].RenderTargetWriteMaskD3D10_COLOR_WRITE_ENABLE_ALL  ? This structure requires Windows Vista Service Pack 1. If the driver type is set to <see cref="F:SharpDX.Direct3D.DriverType.Hardware"/>, the feature level is set to less than or equal to <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_9_3"/>, and the pixel format of the render target is set to <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/>, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, or DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, the device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than D3D_FEATURE_LEVEL_9_3, the device performs the blend in linear space. 	
            </remarks>	
            <unmanaged>D3D10_BLEND_DESC1</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription1.IsAlphaToCoverageEnabled">
            <summary>	
            Determines whether or not to use the {{alpha-to-coverage}} multisampling technique when setting a render-target pixel. 	
            </summary>	
            <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription1.IndependentBlendEnable">
            <summary>	
            Set to TRUE to enable independent blending in simultaneous render targets. If set to FALSE, only the RenderTarget[0] members are used. RenderTarget[1..7] are ignored. 	
            </summary>	
            <unmanaged>BOOL IndependentBlendEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.BlendStateDescription1.RenderTarget">
            <summary>	
            An array of render-target-blend descriptions (see <see cref="T:SharpDX.Direct3D10.RenderTargetBlendDescription1"/>); these correspond to the eight rendertargets  that can be set to the output-merger stage at one time. 	
            </summary>	
            <unmanaged>D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[8]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription1">
            <summary>	
            Describes a shader-resource view.	
            </summary>	
            <remarks>	
            A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read. For more information about how views work, see {{Views}}  When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a DXGI_FORMAT_R32G32B32_TYPELESS resource can be viewed with one of these typed formats: DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, and DXGI_FORMAT_R32G32B32_SINT, since these typed formats are compatible with the typeless resource. Create a shader-resource-view description by calling <see cref="M:SharpDX.Direct3D10.Device1.CreateShaderResourceView1(SharpDX.Direct3D10.Resource,System.Nullable{SharpDX.Direct3D10.ShaderResourceViewDescription1},SharpDX.Direct3D10.ShaderResourceView1@)"/>. To view a shader-resource-view description, call <see cref="M:SharpDX.Direct3D10.ShaderResourceView.GetDescription(SharpDX.Direct3D10.ShaderResourceViewDescription@)"/>. This structure requires Windows Vista Service Pack 1. 	
            </remarks>	
            <unmanaged>D3D10_SHADER_RESOURCE_VIEW_DESC1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Format">
            <summary>	
            The viewing {{format}}. See remarks. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Dimension">
            <summary>	
            The resource type of the view. See <see cref="T:SharpDX.Direct3D.ShaderResourceViewDimension"/>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below. 	
            </summary>	
            <unmanaged>D3D10_SRV_DIMENSION1 ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Buffer">
            <summary>	
            View the resource as a buffer using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D10_BUFFER_SRV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture1D">
            <summary>	
            View the resource as a 1D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEX1D_SRV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture1DArray">
            <summary>	
            View the resource as a 1D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture1DArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture2D">
            <summary>	
            View the resource as a 2D-texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2D_SRV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture2DArray">
            <summary>	
            View the resource as a 2D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture2DMS">
            <summary>	
            View the resource as a 2D-multisampled texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_SRV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture2DMSArray">
            <summary>	
            View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.Texture3D">
            <summary>	
            View the resource as a 3D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.Texture3DResource"/>. 	
            </summary>	
            <unmanaged>D3D10_TEX3D_SRV Texture3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCube">
            <summary>	
            View the resource as a 3D-cube texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription.TextureCubeResource"/>). 	
            </summary>	
            <unmanaged>D3D10_TEXCUBE_SRV TextureCube</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArray">
            <summary>	
            View the resource as an array of cube textures using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1"/>). 	
            </summary>	
            <unmanaged>D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1">
            <summary>	
            Specifies the {{subresource(s)}} from an array of {{cube textures}} to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D10.ShaderResourceViewDescription1"/>). This structure requires Windows Vista Service Pack 1. 	
            </remarks>	
            <unmanaged>D3D10_TEXCUBE_ARRAY_SRV1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1.MipLevels">
            <summary>	
            Number of mipmap levels to use. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1.First2DArrayFace">
            <summary>	
            Index of the first 2D texture to use. 	
            </summary>	
            <unmanaged>int First2DArrayFace</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ShaderResourceViewDescription1.TextureCubeArrayResource1.CubeCount">
            <summary>	
            Number of cube textures in the array. 	
            </summary>	
            <unmanaged>int NumCubes</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SpriteInstance">
            <summary>	
            Defines position, texture, and color information about a sprite.	
            </summary>	
            <unmanaged>D3DX10_SPRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.Transform">
            <summary>	
            The sprite's model-world transformation. This defines the position and orientation of the sprite in world space. 	
            </summary>	
            <unmanaged>D3DXMATRIX matWorld</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.TextureCoordinates">
            <summary>	
            Offset from the upper-left corner of the texture indicating where the sprite image should start in the texture.  TexCoord is in  texture coordinates. 	
            </summary>	
            <unmanaged>D3DXVECTOR2 TexCoord</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.TextureDimensions">
            <summary>	
            A vector containing the width and height of the sprite in texture coordinates. 	
            </summary>	
            <unmanaged>D3DXVECTOR2 TexSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.Color">
            <summary>	
            A color that will be multiplied with the pixel color before rendering. 	
            </summary>	
            <unmanaged>D3DXCOLOR ColorModulate</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.ShaderResourceViewPointer">
            <summary>	
            Pointer to a shader-resource view representing the sprite's texture. See <see cref="T:SharpDX.Direct3D10.ShaderResourceView"/>. 	
            </summary>	
            <unmanaged>ID3D10ShaderResourceView* pTexture</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SpriteInstance.TextureIndex">
            <summary>	
            The index of the texture. If pTexture does not represent a texture array, then this should be 0. 	
            </summary>	
            <unmanaged>int TextureIndex</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SpriteInstance.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="T:SharpDX.Direct3D10.FontDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_DESCW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.Height">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.Width">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.Weight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_WEIGHT Weight</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.MipLevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.CharacterSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_CHARSET CharSet</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.OutputPrecision">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_PRECISION OutputPrecision</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.Quality">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_QUALITY Quality</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.PitchAndFamily">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DX10_FONT_PITCHFAMILY PitchAndFamily</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.FontDescription.FaceName">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>wchar_t FaceName[32]</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.FontDescription.Italic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL Italic</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ImageInformation">
            <summary>	
            Returns a description of the original contents of an image file.	
            </summary>	
            <unmanaged>D3DX10_IMAGE_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.Width">
            <summary>	
            Width of original image in pixels. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.Height">
            <summary>	
            Height of original image in pixels. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.Depth">
            <summary>	
            Depth of original image in pixels. 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.ArraySize">
            <summary>	
            Size of the texture array. ArraySize will be 1 for a single image. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.MipLevels">
            <summary>	
            Number of mipmap levels in original image. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.OptionFlags">
            <summary>	
            Miscellaneous resource properties (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>). 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.Format">
            <summary>	
            A value from the <see cref="T:SharpDX.DXGI.Format"/> enumerated type that most closely describes the data in the original image. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.ResourceDimension">
            <summary>	
            Represents the type of the texture stored in the file. See <see cref="T:SharpDX.Direct3D10.ResourceDimension"/>. 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_DIMENSION ResourceDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageInformation.ImageFileFormat">
            <summary>	
            Represents the format of the image file.  See <see cref="T:SharpDX.Direct3D10.ImageFileFormat"/>. 	
            </summary>	
            <unmanaged>D3DX10_IMAGE_FILE_FORMAT ImageFileFormat</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ImageInformation.FromFile(System.String)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <param name="fileName">File name of image to retrieve information about.</param>
            <returns>If the function succeeds, returns a <see cref="T:SharpDX.Direct3D10.ImageInformation"/> filled with the description of the data in the source file. else returns null </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D10.ImageInformation.FromMemory(System.Byte[])">
            <summary>	
            Retrieves information about a given image file from a memory location.
            </summary>	
            <param name="memory">an array to the image in memory</param>
            <returns>If the function succeeds, returns a <see cref="T:SharpDX.Direct3D10.ImageInformation"/> filled with the description of the data from the image memory. else returns null </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.ImageLoadInformation">
            <summary>	
            Optionally provide information to texture loader APIs to control how textures get loaded. A value of D3DX10_DEFAULT for any of these parameters will cause D3DX to automatically use the value from the source file.	
            </summary>	
            <remarks>	
            When initializing the structure, you may set any member to D3DX10_DEFAULT and D3DX will initialize it with a default value from the source texture when the texture is loaded. This structure can be used by APIs that:  Create resources, such as {{D3DX10CreateTextureFromFile}} and {{D3DX10CreateShaderResourceViewFromFile}}. Create data processors, such as {{D3DX10CreateAsyncTextureInfoProcessor}} or	
            {{D3DX10CreateAsyncShaderResourceViewProcessor}}.  	
            </remarks>	
            <unmanaged>D3DX10_IMAGE_LOAD_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.FileDefaultValue">
            <summary>
            The default value for load options.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Width">
            <summary>	
            The target width of the texture. If the actual width of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target width. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Height">
            <summary>	
            The target height of the texture. If the actual height of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target height. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Depth">
            <summary>	
            The depth of the texture. This only applies to volume textures. 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.FirstMipLevel">
            <summary>	
            The highest resolution mipmap level of the texture. If this is greater than 0, then after the texture is loaded FirstMipLevel will be mapped to mipmap level 0. 	
            </summary>	
            <unmanaged>int FirstMipLevel</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.MipLevels">
            <summary>	
            The maximum number of mipmap levels that the texture will have. Using 0 or D3DX10_DEFAULT will cause a full mipmap chain to be created. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Usage">
            <summary>	
            The way the texture resource is intended to be used. See <see cref="T:SharpDX.Direct3D10.ResourceUsage"/>. 	
            </summary>	
            <unmanaged>D3D10_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.BindFlags">
            <summary>	
            The pipeline stages that the texture will be allowed to bind to. See <see cref="T:SharpDX.Direct3D10.BindFlags"/>. 	
            </summary>	
            <unmanaged>D3D10_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.CpuAccessFlags">
            <summary>	
            The access permissions the cpu will have for the texture resource. See <see cref="T:SharpDX.Direct3D10.CpuAccessFlags"/>. 	
            </summary>	
            <unmanaged>D3D10_CPU_ACCESS_FLAG CpuAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.OptionFlags">
            <summary>	
            Miscellaneous resource properties (see <see cref="T:SharpDX.Direct3D10.ResourceOptionFlags"/>). 	
            </summary>	
            <unmanaged>D3D10_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Format">
            <summary>	
            The format the texture will be in after it is loaded. See <see cref="T:SharpDX.DXGI.Format"/>. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.Filter">
            <summary>	
            Filter the texture using the specified filter (only when resampling). See <see cref="T:SharpDX.Direct3D10.FilterFlags"/>. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_FLAG Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.MipFilter">
            <summary>	
            Filter the texture mip levels using the specified filter (only if generating mipmaps). Valid values are D3DX10_FILTER_NONE, D3DX10_FILTER_POINT, D3DX10_FILTER_LINEAR, or D3DX10_FILTER_TRIANGLE. See <see cref="T:SharpDX.Direct3D10.FilterFlags"/>. 	
            </summary>	
            <unmanaged>D3DX10_FILTER_FLAG MipFilter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.ImageLoadInformation.PSrcInfo">
            <summary>	
            Information about the original image. See <see cref="T:SharpDX.Direct3D10.ImageInformation"/>. Can be obtained with {{D3DX10GetImageInfoFromFile}}, <see cref="M:SharpDX.Direct3D10.D3DX10.GetImageInfoFromMemory(System.IntPtr,SharpDX.Size,System.IntPtr,SharpDX.Direct3D10.ImageInformation@,System.Int32@)"/>, or {{D3DX10GetImageInfoFromResource}}. 	
            </summary>	
            <unmanaged>D3DX10_IMAGE_INFO* pSrcInfo</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.TextureLoadInformation">
            <summary>	
            Describes parameters used to load a texture from another texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D10.D3DX10.LoadTextureFromTexture(SharpDX.Direct3D10.Resource,SharpDX.Direct3D10.TextureLoadInformation@,SharpDX.Direct3D10.Resource)"/>. 	
            </remarks>	
            <unmanaged>D3DX10_TEXTURE_LOAD_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.SourceRegionPointer">
            <summary>	
            Source texture box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D10_BOX* pSrcBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.DestinationRegionPointer">
            <summary>	
            Destination texture box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D10_BOX* pDstBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.FirstSourceMip">
            <summary>	
            Source texture mipmap level, see {{D3D10CalcSubresource}} for more detail. 	
            </summary>	
            <unmanaged>int SrcFirstMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.FirstDestinationMip">
            <summary>	
            Destination texture mipmap level, see {{D3D10CalcSubresource}} for more detail. 	
            </summary>	
            <unmanaged>int DstFirstMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.MipCount">
            <summary>	
            Number of mipmap levels in the source texture. 	
            </summary>	
            <unmanaged>int NumMips</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.FirstSourceElement">
            <summary>	
            First element of the source texture. 	
            </summary>	
            <unmanaged>int SrcFirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.FirstDestinationElement">
            <summary>	
            First element of the destination texture. 	
            </summary>	
            <unmanaged>int DstFirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.ElementCount">
            <summary>	
            Number of elements to load. 	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.Filter">
            <summary>	
            Filtering options during resampling (see <see cref="T:SharpDX.Direct3D10.FilterFlags"/>). 	
            </summary>	
            <unmanaged>D3DX10_FILTER_FLAG Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.MipFilter">
            <summary>	
            Filtering options when generating mip levels (see <see cref="T:SharpDX.Direct3D10.FilterFlags"/>). 	
            </summary>	
            <unmanaged>D3DX10_FILTER_FLAG MipFilter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.SourceRegion">
            <summary>	
            Source texture box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pSrcBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.TextureLoadInformation.DestinationRegion">
            <summary>	
            Destination texture box (see <see cref="T:SharpDX.Direct3D10.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pDstBox</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshAttributeRange">
            <summary>	
            Stores an attribute table entry.	
            </summary>	
            <remarks>	
            An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier (AttribId) when drawing the frame. The LPD3DX_ATTRIBUTE_RANGE type is defined as a reference to the D3DX_ATTRIBUTE_RANGE structure.  	
            <code> typedef D3DX_ATTRIBUTE_RANGE* LPD3DX_ATTRIBUTE_RANGE; </code>	
            	
             	
            </remarks>	
            <unmanaged>D3DX10_ATTRIBUTE_RANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeRange.Id">
            <summary>	
            Attribute table identifier. 	
            </summary>	
            <unmanaged>int AttribId</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeRange.FaceStart">
            <summary>	
            Starting face. 	
            </summary>	
            <unmanaged>int FaceStart</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeRange.FaceCount">
            <summary>	
            Face count. 	
            </summary>	
            <unmanaged>int FaceCount</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeRange.VertexStart">
            <summary>	
            Starting vertex. 	
            </summary>	
            <unmanaged>int VertexStart</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeRange.VertexCount">
            <summary>	
            Vertex count. 	
            </summary>	
            <unmanaged>int VertexCount</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.SkinningChannel">
            <summary>	
            The member of the vertex decl to do the software skinning on. This is used with the <see cref="M:SharpDX.Direct3D10.SkinInfo.DoSoftwareSkinning(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.Matrix@,System.Nullable{SharpDX.Matrix},SharpDX.Direct3D10.SkinningChannel@,System.Int32)"/> API.	
            </summary>	
            <unmanaged>D3DX10_SKINNING_CHANNEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SkinningChannel.SourceOffset">
            <summary>	
            Offset from the beginning of each source vertex. 	
            </summary>	
            <unmanaged>int SrcOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.SkinningChannel.DestinationOffset">
            <summary>	
            Offset from the beginning of each destination vertex. 	
            </summary>	
            <unmanaged>int DestOffset</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.SkinningChannel.IsNormal">
            <summary>	
            Determines which array of matrices to use in the <see cref="M:SharpDX.Direct3D10.SkinInfo.DoSoftwareSkinning(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,SharpDX.Matrix@,System.Nullable{SharpDX.Matrix},SharpDX.Direct3D10.SkinningChannel@,System.Int32)"/> API. If this is true, the pInverseTransposeBoneMatrices will be used, otherwise pBoneMatrices will be used. 	
            </summary>	
            <unmanaged>BOOL IsNormal</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.MeshAttributeWeights">
            <summary>	
            Specifies mesh weight attributes.	
            </summary>	
            <remarks>	
            This structure describes how a simplification operation will consider vertex data when calculating relative costs between collapsing edges. For example, if the Normal field is 0.0, the simplification operation will ignore the vertex normal component when calculating the error for the collapse. However, if the Normal field is 1.0, the simplification operation will use the vertex normal component. If the Normal field is 2.0, double the amount of errors; if the Normal field is 4.0, then quadruple the number of errors, and so on. The LPD3DX_ATTRIBUTE_WEIGHTS type is defined as a reference to the D3DX_ATTRIBUTE_WEIGHTS structure. 	
            <code> typedef D3DX_ATTRIBUTE_WEIGHTS* LPD3DX_ATTRIBUTE_WEIGHTS; </code>	
            	
             	
            </remarks>	
            <unmanaged>D3DX10_ATTRIBUTE_WEIGHTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Position">
            <summary>	
            Position. 	
            </summary>	
            <unmanaged>float Position</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Boundary">
            <summary>	
            Blend weight. 	
            </summary>	
            <unmanaged>float Boundary</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Normal">
            <summary>	
            Normal. 	
            </summary>	
            <unmanaged>float Normal</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Diffuse">
            <summary>	
            Diffuse lighting value. 	
            </summary>	
            <unmanaged>float Diffuse</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Specular">
            <summary>	
            Specular lighting value. 	
            </summary>	
            <unmanaged>float Specular</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Tangent">
            <summary>	
            Tangent. 	
            </summary>	
            <unmanaged>float Tangent</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D10.MeshAttributeWeights.Binormal">
            <summary>	
            Binormal. 	
            </summary>	
            <unmanaged>float Binormal</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D10.MeshAttributeWeights.Texcoord">
            <summary>	
            Eight texture coordinates. 	
            </summary>	
            <unmanaged>float Texcoord[8]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D10.StreamOutputBufferBinding">
            <summary>
              Properties defining the way a buffer is bound to the pipeline as a target for stream output operations.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.StreamOutputBufferBinding.#ctor(SharpDX.Direct3D10.Buffer,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.StreamOutputBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:SharpDX.Direct3D10.StreamOutputBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.StreamOutputBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D10.VertexBufferBinding">
            <summary>
              Properties defining the way a buffer (containing vertex data) is bound
              to the pipeline for rendering.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D10.VertexBufferBinding.#ctor(SharpDX.Direct3D10.Buffer,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D10.VertexBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "stride">The stride between vertex element (in bytes).</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:SharpDX.Direct3D10.VertexBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.VertexBufferBinding.Stride">
            <summary>
              Gets or sets the stride between vertex elements in the buffer (in bytes).
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D10.VertexBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
    </members>
</doc>

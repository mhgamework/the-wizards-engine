<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX</name>
    </assembly>
    <members>
        <member name="T:SharpDX.AngleSingle">
            <summary>
            Represents a unit independant angle using a single-precision floating-point
            internal representation.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Degree">
            <summary>
            A value that specifies the size of a single degree.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Minute">
            <summary>
            A value that specifies the size of a single minute.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Second">
            <summary>
            A value that specifies the size of a single second.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Radian">
            <summary>
            A value that specifies the size of a single radian.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Milliradian">
            <summary>
            A value that specifies the size of a single milliradian.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.Gradian">
            <summary>
            A value that specifies the size of a single gradian.
            </summary>
        </member>
        <member name="F:SharpDX.AngleSingle.radians">
            <summary>
            The internal representation of the angle.
            </summary>
        </member>
        <member name="M:SharpDX.AngleSingle.#ctor(System.Single,SharpDX.AngleType)">
            <summary>
            Initializes a new instance of the SharpDX.AngleSingle structure with the
            given unit dependant angle and unit type.
            </summary>
            <param name="angle">A unit dependant measure of the angle.</param>
            <param name="type">The type of unit the angle argument is.</param>
        </member>
        <member name="M:SharpDX.AngleSingle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the SharpDX.AngleSingle structure using the
            arc length formula (θ = s/r).
            </summary>
            <param name="arcLength">The measure of the arc.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:SharpDX.AngleSingle.Wrap">
            <summary>
            Wraps this SharpDX.AngleSingle to be in the range [π, -π].
            </summary>
        </member>
        <member name="M:SharpDX.AngleSingle.WrapPositive">
            <summary>
            Wraps this SharpDX.AngleSingle to be in the range [0, 2π).
            </summary>
        </member>
        <member name="M:SharpDX.AngleSingle.Wrap(SharpDX.AngleSingle)">
            <summary>
            Wraps the SharpDX.AngleSingle given in the value argument to be in the range [π, -π].
            </summary>
            <param name="value">A SharpDX.AngleSingle to wrap.</param>
            <returns>The SharpDX.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.WrapPositive(SharpDX.AngleSingle)">
            <summary>
            Wraps the SharpDX.AngleSingle given in the value argument to be in the range [0, 2π).
            </summary>
            <param name="value">A SharpDX.AngleSingle to wrap.</param>
            <returns>The SharpDX.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Min(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Compares two SharpDX.AngleSingle instances and returns the smaller angle.
            </summary>
            <param name="left">The first SharpDX.AngleSingle instance to compare.</param>
            <param name="right">The second SharpDX.AngleSingle instance to compare.</param>
            <returns>The smaller of the two given SharpDX.AngleSingle instances.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Max(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Compares two SharpDX.AngleSingle instances and returns the greater angle.
            </summary>
            <param name="left">The first SharpDX.AngleSingle instance to compare.</param>
            <param name="right">The second SharpDX.AngleSingle instance to compare.</param>
            <returns>The greater of the two given SharpDX.AngleSingle instances.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Add(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Adds two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Subtract(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Subtracts two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract.</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Multiply(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Multiplies two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Divide(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Divides two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Equality(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SharpDX.Angle
            objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Inequality(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SharpDX.Angle
            objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_LessThan(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is less than another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than right; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_GreaterThan(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is greater than another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than right; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_LessThanOrEqual(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is less than or equal to another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_GreaterThanOrEqual(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is greater than or equal to another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_UnaryPlus(SharpDX.AngleSingle)">
            <summary>
            Returns the value of the SharpDX.AngleSingle operand. (The sign of
            the operand is unchanged.)
            </summary>
            <param name="value">A SharpDX.AngleSingle object.</param>
            <returns>The value of the value parameter.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_UnaryNegation(SharpDX.AngleSingle)">
            <summary>
            Returns the the negated value of the SharpDX.AngleSingle operand.
            </summary>
            <param name="value">A SharpDX.AngleSingle object.</param>
            <returns>The negated value of the value parameter.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Addition(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Adds two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Subtraction(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Subtracts two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Multiply(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Multiplies two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.op_Division(SharpDX.AngleSingle,SharpDX.AngleSingle)">
            <summary>
            Divides two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that
            indicates whether the value of this instance is less than, equal to, or greater
            than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.CompareTo(SharpDX.AngleSingle)">
            <summary>
            Compares this instance to a second SharpDX.AngleSingle and returns
            an integer that indicates whether the value of this instance is less than,
            equal to, or greater than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Equals(SharpDX.AngleSingle)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            SharpDX.AngleSingle object have the same value.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            Returns true if this SharpDX.AngleSingle object and another have the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.AngleSingle.GetHashCode">
            <summary>
            Returns a hash code for this SharpDX.AngleSingle instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SharpDX.AngleSingle.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            Returns true if the obj parameter is a SharpDX.AngleSingle object or a type
            capable of implicit conversion to a SharpDX.AngleSingle value, and
            its value is equal to the value of the current SharpDX.Angle
            object; otherwise, false.
            </returns>
        </member>
        <member name="P:SharpDX.AngleSingle.Revolutions">
            <summary>
            Gets or sets the total number of revolutions this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Degrees">
            <summary>
            Gets or sets the total number of degrees this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Minutes">
            <summary>
            Gets or sets the minutes component of the degrees this SharpDX.AngleSingle represents.
            When setting the minutes, if the value is in the range (-60, 60) the whole degrees are
            not changed; otherwise, the whole degrees may be changed. Fractional values may set
            the seconds component.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Seconds">
            <summary>
            Gets or sets the seconds of the degrees this SharpDX.AngleSingle represents.
            When setting te seconds, if the value is in the range (-60, 60) the whole minutes
            or whole degrees are not changed; otherwise, the whole minutes or whole degrees
            may be changed.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Radians">
            <summary>
            Gets or sets the total number of radians this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Milliradians">
            <summary>
            Gets or sets the total number of milliradians this SharpDX.AngleSingle represents.
            One milliradian is equal to 1/(2000π).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Gradians">
            <summary>
            Gets or sets the total number of gradians this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsRight">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsStraight">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsFullRotation">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsOblique">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an oblique angle (i.e. is not 90° or a multiple of 90°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsAcute">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an acute angle (i.e. less than 90° but greater than 0°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsObtuse">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an obtuse angle (i.e. greater than 90° but less than 180°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.IsReflex">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a reflex angle (i.e. greater than 180° but less than 360°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Complement">
            <summary>
            Gets a SharpDX.AngleSingle instance that complements this angle (i.e. the two angles add to 90°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.Supplement">
            <summary>
            Gets a SharpDX.AngleSingle instance that supplements this angle (i.e. the two angles add to 180°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.ZeroAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the zero angle (i.e. 0°).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.RightAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.StraightAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:SharpDX.AngleSingle.FullRotationAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="T:SharpDX.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:SharpDX.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:SharpDX.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:SharpDX.BoundingBox.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:SharpDX.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Intersects(SharpDX.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Contains(SharpDX.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Contains(SharpDX.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Contains(SharpDX.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.FromPoints(SharpDX.Vector3[],SharpDX.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpDX.BoundingBox.FromPoints(SharpDX.Vector3[])">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpDX.BoundingBox.FromSphere(SharpDX.BoundingSphere@,SharpDX.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SharpDX.BoundingBox.FromSphere(SharpDX.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Merge(SharpDX.BoundingBox@,SharpDX.BoundingBox@,SharpDX.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SharpDX.BoundingBox.Merge(SharpDX.BoundingBox,SharpDX.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.op_Equality(SharpDX.BoundingBox,SharpDX.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.op_Inequality(SharpDX.BoundingBox,SharpDX.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Equals(SharpDX.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SharpDX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpDX.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SharpDX.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SharpDX.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:SharpDX.BoundingSphere.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Intersects(SharpDX.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Contains(SharpDX.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Contains(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Contains(SharpDX.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Contains(SharpDX.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.FromPoints(SharpDX.Vector3[],SharpDX.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SharpDX.BoundingSphere.FromPoints(SharpDX.Vector3[])">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.FromBox(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SharpDX.BoundingSphere.FromBox(SharpDX.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Merge(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SharpDX.BoundingSphere.Merge(SharpDX.BoundingSphere,SharpDX.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SharpDX.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.op_Equality(SharpDX.BoundingSphere,SharpDX.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.op_Inequality(SharpDX.BoundingSphere,SharpDX.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Equals(SharpDX.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SharpDX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpDX.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:SharpDX.Collision.ClosestPointPointTriangle(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SharpDX.Collision.ClosestPointPlanePoint(SharpDX.Plane@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SharpDX.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SharpDX.Collision.ClosestPointBoxPoint(SharpDX.BoundingBox@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SharpDX.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SharpDX.Collision.ClosestPointSpherePoint(SharpDX.BoundingSphere@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SharpDX.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:SharpDX.Vector3.Zero"/>.</param>
        </member>
        <member name="M:SharpDX.Collision.ClosestPointSphereSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@,SharpDX.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SharpDX.BoundingSphere"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:SharpDX.Vector3.Zero"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:SharpDX.Collision.DistancePlanePoint(SharpDX.Plane@,SharpDX.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SharpDX.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SharpDX.Collision.DistanceBoxPoint(SharpDX.BoundingBox@,SharpDX.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SharpDX.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SharpDX.Collision.DistanceBoxBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:SharpDX.BoundingBox"/> and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SharpDX.Collision.DistanceSpherePoint(SharpDX.BoundingSphere@,SharpDX.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SharpDX.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SharpDX.Collision.DistanceSphereSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:SharpDX.BoundingSphere"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsPoint(SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsRay(SharpDX.Ray@,SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsPlane(SharpDX.Ray@,SharpDX.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsPlane(SharpDX.Ray@,SharpDX.Plane@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsTriangle(SharpDX.Ray@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsTriangle(SharpDX.Ray@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsBox(SharpDX.Ray@,SharpDX.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsBox(SharpDX.Ray@,SharpDX.BoundingBox@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsSphere(SharpDX.Ray@,SharpDX.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.RayIntersectsSphere(SharpDX.Ray@,SharpDX.BoundingSphere@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Ray"/> and a <see cref="T:SharpDX.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsPoint(SharpDX.Plane@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsPlane(SharpDX.Plane@,SharpDX.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsPlane(SharpDX.Plane@,SharpDX.Plane@,SharpDX.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SharpDX.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsTriangle(SharpDX.Plane@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsBox(SharpDX.Plane@,SharpDX.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.PlaneIntersectsSphere(SharpDX.Plane@,SharpDX.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.Plane"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.BoxIntersectsBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.BoundingBox"/> and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.BoxIntersectsSphere(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.BoundingBox"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereIntersectsTriangle(SharpDX.BoundingSphere@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereIntersectsSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SharpDX.BoundingSphere"/> and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Collision.BoxContainsPoint(SharpDX.BoundingBox@,SharpDX.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.BoxContainsBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingBox"/> contains a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.BoxContainsSphere(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingBox"/> contains a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereContainsPoint(SharpDX.BoundingSphere@,SharpDX.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereContainsTriangle(SharpDX.BoundingSphere@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereContainsBox(SharpDX.BoundingSphere@,SharpDX.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingSphere"/> contains a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SharpDX.Collision.SphereContainsSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SharpDX.BoundingSphere"/> contains a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:SharpDX.Color3">
            <summary>
            Represents a color in the form of rgb.
            </summary>
        </member>
        <member name="F:SharpDX.Color3.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SharpDX.Color3.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SharpDX.Color3.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="M:SharpDX.Color3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Color3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color3"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:SharpDX.Color3.#ctor(SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color3"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
        </member>
        <member name="M:SharpDX.Color3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color3"/> struct.
            </summary>
            <param name="rgb">A packed integer containing all three color components.
            The alpha component is ignored.</param>
        </member>
        <member name="M:SharpDX.Color3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color3"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue components of the color. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Color3.ToRgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:SharpDX.Color3.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SharpDX.Color3.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A three-element array containing the components of the color.</returns>
        </member>
        <member name="M:SharpDX.Color3.Add(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color3.Add(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.Subtract(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color3.Subtract(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.Modulate(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SharpDX.Color3.Modulate(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SharpDX.Color3.Scale(SharpDX.Color3@,System.Single,SharpDX.Color3@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SharpDX.Color3.Scale(SharpDX.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color3.Negate(SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SharpDX.Color3.Negate(SharpDX.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SharpDX.Color3.Clamp(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Color3.Clamp(SharpDX.Color3,SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Color3.Lerp(SharpDX.Color3@,SharpDX.Color3@,System.Single,SharpDX.Color3@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Color3.Lerp(SharpDX.Color3,SharpDX.Color3,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Color3.SmoothStep(SharpDX.Color3@,SharpDX.Color3@,System.Single,SharpDX.Color3@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color3.SmoothStep(SharpDX.Color3,SharpDX.Color3,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.Max(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SharpDX.Color3.Max(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.Min(SharpDX.Color3@,SharpDX.Color3@,SharpDX.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SharpDX.Color3.Min(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.AdjustContrast(SharpDX.Color3@,System.Single,SharpDX.Color3@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SharpDX.Color3.AdjustContrast(SharpDX.Color3,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SharpDX.Color3.AdjustSaturation(SharpDX.Color3@,System.Single,SharpDX.Color3@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SharpDX.Color3.AdjustSaturation(SharpDX.Color3,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Addition(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_UnaryPlus(SharpDX.Color3)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Subtraction(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_UnaryNegation(SharpDX.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Multiply(System.Single,SharpDX.Color3)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Multiply(SharpDX.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Multiply(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Equality(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Inequality(SharpDX.Color3,SharpDX.Color3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Explicit(SharpDX.Color3)~SharpDX.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color3"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Explicit(SharpDX.Color3)~SharpDX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color3"/> to <see cref="T:SharpDX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Explicit(SharpDX.Vector3)~SharpDX.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector3"/> to <see cref="T:SharpDX.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Explicit(System.Int32)~SharpDX.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SharpDX.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Color3.Equals(SharpDX.Color3)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Color3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Color3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Color3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Color3.op_Implicit(SharpDX.Color3)~System.Drawing.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color3"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color3.op_Implicit(System.Drawing.Color)~SharpDX.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:SharpDX.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpDX.Color3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:SharpDX.Color4">
            <summary>
            Represents a color in the form of argb.
            </summary>
        </member>
        <member name="F:SharpDX.Color4.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SharpDX.Color4.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SharpDX.Color4.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:SharpDX.Color4.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:SharpDX.Color4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="alpha">The alpha component of the color.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:SharpDX.Color4.#ctor(SharpDX.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:SharpDX.Color4.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SharpDX.Color4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="argb">A packed integer containing all four color components.</param>
        </member>
        <member name="M:SharpDX.Color4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Color4"/> struct.
            </summary>
            <param name="values">The values to assign to the alpha, red, green, and blue components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Color4.ToArgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SharpDX.Color4.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SharpDX.Color4.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:SharpDX.Color4.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:SharpDX.Color4.Add(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color4.Add(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.Subtract(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color4.Subtract(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.Modulate(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SharpDX.Color4.Modulate(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SharpDX.Color4.Scale(SharpDX.Color4@,System.Single,SharpDX.Color4@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SharpDX.Color4.Scale(SharpDX.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color4.Negate(SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SharpDX.Color4.Negate(SharpDX.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SharpDX.Color4.Clamp(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Color4.Clamp(SharpDX.Color4,SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Color4.Lerp(SharpDX.Color4@,SharpDX.Color4@,System.Single,SharpDX.Color4@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Color4.Lerp(SharpDX.Color4,SharpDX.Color4,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Color4.SmoothStep(SharpDX.Color4@,SharpDX.Color4@,System.Single,SharpDX.Color4@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SharpDX.Color4.SmoothStep(SharpDX.Color4,SharpDX.Color4,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.Max(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SharpDX.Color4.Max(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.Min(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SharpDX.Color4.Min(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.AdjustContrast(SharpDX.Color4@,System.Single,SharpDX.Color4@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SharpDX.Color4.AdjustContrast(SharpDX.Color4,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SharpDX.Color4.AdjustSaturation(SharpDX.Color4@,System.Single,SharpDX.Color4@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SharpDX.Color4.AdjustSaturation(SharpDX.Color4,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Addition(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_UnaryPlus(SharpDX.Color4)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Subtraction(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_UnaryNegation(SharpDX.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Multiply(System.Single,SharpDX.Color4)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Multiply(SharpDX.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Multiply(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Equality(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Inequality(SharpDX.Color4,SharpDX.Color4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(SharpDX.Color4)~SharpDX.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color4"/> to <see cref="T:SharpDX.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(SharpDX.Color4)~SharpDX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color4"/> to <see cref="T:SharpDX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(SharpDX.Color4)~SharpDX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color4"/> to <see cref="T:SharpDX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(SharpDX.Vector3)~SharpDX.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector3"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(SharpDX.Vector4)~SharpDX.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector4"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Explicit(System.Int32)~SharpDX.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Color4.Equals(SharpDX.Color4)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Color4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Color4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Color4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Color4.op_Implicit(SharpDX.Color4)~System.Drawing.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Color4"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Color4.op_Implicit(System.Drawing.Color)~SharpDX.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpDX.Color4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.ComObject">
            <summary>
            Root IUnknown class to interop with COM object
            </summary>
        </member>
        <member name="T:SharpDX.CppObject">
            <summary>
            Root class for all Cpp interop object.
            </summary>
        </member>
        <member name="F:SharpDX.CppObject._nativePointer">
            <summary>
            The native pointer
            </summary>
        </member>
        <member name="M:SharpDX.CppObject.Init">
            <summary>
              Fake Init Method. Force CppObject to initialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.CppObject.#ctor(System.IntPtr)">
            <summary>
              Default constructor.
            </summary>
            <param name = "pointer">Pointer to Cpp Object</param>
        </member>
        <member name="M:SharpDX.CppObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.CppObject"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.CppObject.NativePointerUpdated">
            <summary>
              Method that could be modified by inherited class
            </summary>
        </member>
        <member name="P:SharpDX.CppObject.NativePointer">
            <summary>
              Get a pointer to the underlying Cpp Object
            </summary>
        </member>
        <member name="M:SharpDX.ComObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.ComObject"/> class.
            </summary>
            <param name="pointer">Pointer to Cpp Object</param>
        </member>
        <member name="M:SharpDX.ComObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.ComObject"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.ComObject.QueryInterface(System.Guid,System.IntPtr@)">
            <summary>
              Query Interface for a particular GUID.
            </summary>
            <param name = "guid">GUID query interface</param>
            <param name = "outPtr">output object associated with this GUID, IntPtr.Zero in interface is not supported</param>
        </member>
        <member name="M:SharpDX.ComObject.QueryInterface``1">
            <summary>
             Query Interface for a particular interface support.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SharpDX.ComObject.FromPointer``1(System.IntPtr)">
            <summary>
            Instantiate a ComObject from a native pointer.
            </summary>
            <typeparam name="T">The ComObject class that will be returned</typeparam>
            <param name="comObjectPtr">The native pointer to a com object.</param>
            <returns>An instance of T binded to the native pointer</returns>
        </member>
        <member name="M:SharpDX.ComObject.AddReference">
            <summary>
              Increment COM reference
            </summary>
            <returns>Reference counter</returns>
        </member>
        <member name="M:SharpDX.ComObject.Release">
            <summary>
              Release COM reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.ComObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SharpDX.ComObjectCallback">
            <summary>
            A COM Interface Callback
            </summary>
        </member>
        <member name="M:SharpDX.ComObjectCallback.#ctor(System.Object,System.Int32)">
            <summary>
            Default Constructor.
            </summary>
            <param name="callback">the client callback</param>
            <param name="numberOfCallbackMethods">number of methods to allocate in the VTBL</param>
        </member>
        <member name="M:SharpDX.ComObjectCallback.GetCallbackFromIUnknown(System.IntPtr)">
            <summary>
            Gets a managed callback from an unknown.
            </summary>
            <param name="ptr">The PTR.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.ComObjectCallback.AddMethod(System.Delegate)">
            <summary>
            Add a method supported by this interface. This method is typically called from inherited constructor.
            </summary>
            <param name="method">the managed delegate method</param>
        </member>
        <member name="T:SharpDX.Component">
            <summary>
            Base class for a framework component. This class can be used as a base component to provide:
            <list type="bullet">
            <item><description>a way to create named disposable component which can be associated with some user tags.</description></item>
            <item><description>a container for disposable objects, being able to dispose dependent disposable.</description></item>
            <item><description>an automatic component container with todipose-region that will be able to add newly created components to a list of components to dispose. Use <see cref="M:SharpDX.Component.PushCollector"/> and <see cref="M:SharpDX.Component.PopCollector"/> to use this feature in a subclass container component.</description></item>
            </list>
            </summary>
        </member>
        <member name="F:SharpDX.Component._collectors">
            <summary>
            Thread local storage for ToDispose Collectors.
            </summary>
        </member>
        <member name="M:SharpDX.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Component"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Component.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Component"/> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="M:SharpDX.Component.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SharpDX.Component"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SharpDX.Component.System#IDisposable#Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:SharpDX.Component.PushCollector">
            <summary>
            Use this component as the collector for new components created in the current thread.
            </summary>
            <remarks>
            The collector push on the stack is local to the current executing thread.
            </remarks>
        </member>
        <member name="M:SharpDX.Component.PopCollector">
            <summary>
            Unuse this component as the collector for new components created in the current thread.
            </summary>
            <remarks>
            The collector push on the stack is local to the current executing thread.
            </remarks>
        </member>
        <member name="M:SharpDX.Component.ToDisposeAuto">
            <summary>
            Try to add this component to the latest component that started PushCollector
            </summary>
        </member>
        <member name="M:SharpDX.Component.Dispose(System.Boolean)">
            <summary>
            Disposes of object resources.
            </summary>
            <param name="disposeManagedResources">If true, managed resources should be
            disposed of in addition to unmanaged resources.</param>
        </member>
        <member name="M:SharpDX.Component.ToDispose``1(``0)">
            <summary>
            Adds a disposable object to the list of the objects to dispose.
            </summary>
            <param name="toDisposeArg">To dispose.</param>
        </member>
        <member name="M:SharpDX.Component.RemoveDispose``1(``0)">
            <summary>
            Removes a disposable object to the list of the objects to dispose.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toDisposeArg">To dispose.</param>
        </member>
        <member name="E:SharpDX.Component.Disposing">
            <summary>
            Occurs while this component is disposing and before it is disposed.
            </summary>
        </member>
        <member name="P:SharpDX.Component.Disposables">
            <summary>
            Gets or sets the disposables.
            </summary>
            <value>The disposables.</value>
        </member>
        <member name="P:SharpDX.Component.IsAttached">
            <summary>
            Gets or sets a value indicating whether this instance is attached to a collector.
            </summary>
            <value>
            	<c>true</c> if this instance is attached to a collector; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Component.Name">
            <summary>
            Gets the name of this component.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDX.Component.Tag">
            <summary>
            Gets or sets the tag associated to this object.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:SharpDX.Component.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDX.CppObjectCallback">
            <summary>
            An Interface Callback
            </summary>
        </member>
        <member name="M:SharpDX.CppObjectCallback.#ctor(System.Int32)">
            <summary>
            Default Constructor.
            </summary>
            <param name="numberOfCallbackMethods">number of methods to allocate in the VTBL</param>
        </member>
        <member name="M:SharpDX.CppObjectCallback.GetCallbackFromIUnknown(System.IntPtr)">
            <summary>
            Gets a managed callback from an unknown.
            </summary>
            <param name="ptr">The PTR.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.CppObjectCallback.AddMethod(System.Delegate)">
            <summary>
            Add a method supported by this interface. This method is typically called from inherited constructor.
            </summary>
            <param name="method">the managed delegate method</param>
        </member>
        <member name="T:SharpDX.DataBox">
            <summary>
              A DataBox provides supporting information for a <see cref = "T:SharpDX.DataStream" /> whose
              data is organized within three dimensions (a box).
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="M:SharpDX.DataBox.#ctor(System.Int32,System.Int32,SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DataBox" /> class.
            </summary>
            <param name = "rowPitch">The row pitch, in bytes.</param>
            <param name = "slicePitch">The slice pitch, in bytes.</param>
            <param name = "data">The data.</param>
        </member>
        <member name="P:SharpDX.DataBox.Data">
            <summary>
              Gets the <see cref = "T:SharpDX.DataStream" /> containing the actual data bytes.
            </summary>
        </member>
        <member name="P:SharpDX.DataBox.RowPitch">
            <summary>
              Gets or sets the number of bytes of data between two consecutive (1D) rows of data.
            </summary>
        </member>
        <member name="P:SharpDX.DataBox.SlicePitch">
            <summary>
              Gets or sets the number of bytes of data between two consecutive (2D) slices of data.
            </summary>
        </member>
        <member name="T:SharpDX.DataRectangle">
            <summary>
              A DataRectangle provides supporting information for a <see cref = "T:SharpDX.DataStream" /> whose
              data is organized within two dimensions (a rectangle).
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="M:SharpDX.DataRectangle.#ctor(System.Int32,SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DataRectangle" /> class.
            </summary>
            <param name = "pitch">The row pitch, in bytes.</param>
            <param name = "data">The data.</param>
        </member>
        <member name="P:SharpDX.DataRectangle.Data">
            <summary>
              Gets the <see cref = "T:SharpDX.DataStream" /> containing the actual data bytes.
            </summary>
        </member>
        <member name="P:SharpDX.DataRectangle.Pitch">
            <summary>
              Gets or sets the number of bytes of data between two consecutive (1D) rows of data.
            </summary>
        </member>
        <member name="T:SharpDX.DataStream">
            <summary>
              Provides a stream interface to a buffer located in unmanaged memory.
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="M:SharpDX.DataStream.Release">
            <summary>
              Release any resource associated to this DataStream
            </summary>
        </member>
        <member name="M:SharpDX.DataStream.#ctor(SharpDX.Direct3D.Blob)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DataStream"/> class from a Blob buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SharpDX.DataStream.#ctor(System.Array,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataStream"/> class, using a managed buffer as a backing store.
            </summary>
            <param name="userBuffer">A managed array to be used as a backing store.</param>
            <param name="canRead">
              <c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite">
              <c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:SharpDX.DataStream.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataStream"/> class, and allocates a new buffer to use as a backing store.
            </summary>
            <param name="sizeInBytes">The size of the buffer to be allocated, in bytes.</param>
            <param name="canRead">
              <c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite">
              <c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:SharpDX.DataStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataStream"/> class, using an unmanaged buffer as a backing store.
            </summary>
            <param name="userBuffer">A pointer to the buffer to be used as a backing store.</param>
            <param name="sizeInBytes">The size of the buffer provided, in bytes.</param>
            <param name="canRead">
              <c>true</c> if reading from the buffer should be allowed; otherwise, <c>false</c>.</param>
            <param name="canWrite">
              <c>true</c> if writing to the buffer should be allowed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:SharpDX.DataStream.Flush">
            <summary>
              Not supported.
            </summary>
            <exception cref = "T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:SharpDX.DataStream.Read``1">
            <summary>
              Reads a single value from the current stream and advances the current
              position within this stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the value to be read from the stream.</typeparam>
            <returns>The value that was read.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:SharpDX.DataStream.ReadFloat">
            <summary>
            Reads a float.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>a float from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadInt">
            <summary>
            Reads a int.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an int from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadShort">
            <summary>
            Reads a short.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an short from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadBoolean">
            <summary>
            Reads a bool.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an bool from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadVector2">
            <summary>
            Reads a Vector2.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector2 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadVector3">
            <summary>
            Reads a Vector3.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector3 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadVector4">
            <summary>
            Reads a Vector4.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Vector4 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadColor3">
            <summary>
            Reads a Color3.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Color3 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadColor4">
            <summary>
            Reads a Color4.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Color4 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadHalf">
            <summary>
            Reads a Half.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Half from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadHalf2">
            <summary>
            Reads a Half2.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Half2 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadHalf3">
            <summary>
            Reads a Half3.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Half3 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadHalf4">
            <summary>
            Reads a Half4.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>an Half4 from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadMatrix">
            <summary>
            Reads a Matrix.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>a Matrix from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadQuaternion">
            <summary>
            Reads a Quaternion.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <returns>a Quaternion from the stream</returns>
        </member>
        <member name="M:SharpDX.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances the position
              within the stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of values to be read from the stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin storing
              the data read from the current stream.</param>
            <param name = "count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:SharpDX.DataStream.ReadRange``1(System.Int32)">
            <summary>
              Reads an array of values from the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the values to be read from the stream.</typeparam>
            <returns>An array of values that was read from the current stream.</returns>
        </member>
        <member name="M:SharpDX.DataStream.ReadRange``1(``0[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of elements from the current stream into a target buffer and
              advances the position within the stream by the number of bytes read.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of values to be read from the stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin storing
              the data read from the current stream.</param>
            <param name = "count">The number of values to be read from the current stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref = "T:System.NotSupportedException">This stream does not support reading.</exception>
        </member>
        <member name="M:SharpDX.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Sets the position within the current stream.
            </summary>
            <exception cref = "T:System.InvalidOperationException">Attempted to seek outside of the bounds of the stream.</exception>
        </member>
        <member name="M:SharpDX.DataStream.SetLength(System.Int64)">
            <summary>
              Not supported.
            </summary>
            <param name = "value">Always ignored.</param>
            <exception cref = "T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:SharpDX.DataStream.Write``1(``0)">
            <summary>
              Writes a single value to the stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the value to be written to the stream.</typeparam>
            <param name = "value">The value to write to the stream.</param>
            <exception cref = "T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:SharpDX.DataStream.Write(System.Single)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(System.Int32)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(System.Int16)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(System.Boolean)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Vector2)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Vector3)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Vector4)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Color3)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Color4)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Half)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Half2)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Half3)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Half4)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Matrix)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(SharpDX.Quaternion)">
            <summary>
            Writes the specified value.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Writes a sequence of bytes to the current stream and advances the current
              position within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name = "count">The number of bytes to be written to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:SharpDX.DataStream.WriteRange``1(``0[])">
            <summary>
              Writes an array of values to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "data">An array of values to be written to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:SharpDX.DataStream.WriteRange(System.IntPtr,System.Int64)">
            <summary>
              Writes a range of bytes to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <param name = "source">A pointer to the location to start copying from.</param>
            <param name = "count">The number of bytes to copy from source to the current stream.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="M:SharpDX.DataStream.WriteRange``1(``0[],System.Int32,System.Int32)">
            <summary>
              Writes an array of values to the current stream, and advances the current position
              within this stream by the number of bytes written.
            </summary>
            <remarks>
            In order to provide faster read/write, this operation doesn't check stream bound. 
            A client must carefully not read/write above the size of this datastream.
            </remarks>
            <typeparam name = "T">The type of the values to be written to the stream.</typeparam>
            <param name = "data">An array of values to be written to the stream.</param>
            <param name = "offset">The zero-based offset in data at which to begin copying values to the current stream.</param>
            <param name = "count">The number of values to be written to the current stream. If this is zero,
              all of the contents <paramref name = "data" /> will be written.</param>
            <exception cref = "T:System.NotSupportedException">This stream does not support writing.</exception>
        </member>
        <member name="P:SharpDX.DataStream.CanRead">
            <summary>
              Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>
              <c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.DataStream.CanSeek">
            <summary>
              Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:SharpDX.DataStream.CanWrite">
            <summary>
              Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
              <c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.DataStream.DataPointer">
            <summary>
              Gets the internal pointer to the current stream's backing store.
            </summary>
            <value>An IntPtr to the buffer being used as a backing store.</value>
        </member>
        <member name="P:SharpDX.DataStream.Length">
            <summary>
              Gets the length in bytes of the stream.
            </summary>
            <value>A long value representing the length of the stream in bytes.</value>
        </member>
        <member name="P:SharpDX.DataStream.Position">
            <summary>
              Gets or sets the position within the current stream.
            </summary>
            <value>The current position within the stream.</value>
            <seealso cref = "T:System.IO.Stream">Stream Class</seealso>
        </member>
        <member name="P:SharpDX.DataStream.PositionPointer">
            <summary>
            Gets the position pointer.
            </summary>
            <value>The position pointer.</value>
        </member>
        <member name="P:SharpDX.DataStream.RemainingLength">
            <summary>
            Gets the length of the remaining.
            </summary>
            <value>The length of the remaining.</value>
        </member>
        <member name="T:SharpDX.DataBuffer">
            <summary>
            Provides methods to perform fast read/write random access data on a buffer located in an unmanaged memory.
            </summary>
            <remarks>
            This class doesn't validate the position read/write from. It is the responsability of the client of this class
            to verify that access is done within the size of the buffer.
            </remarks>
            <unmanaged>None</unmanaged>
        </member>
        <member name="M:SharpDX.DataBuffer.Release">
            <summary>
              Release any resource associated to this DataBuffer
            </summary>
        </member>
        <member name="M:SharpDX.DataBuffer.#ctor(System.Array)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataBuffer"/> class, using a managed buffer as a backing store.
            </summary>
            <param name="userBuffer">A managed array to be used as a backing store.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataBuffer"/> class, and allocates a new buffer to use as a backing store.
            </summary>
            <param name="sizeInBytes">The size of the buffer to be allocated, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sizeInBytes"/> is less than 1.</exception>
        </member>
        <member name="M:SharpDX.DataBuffer.#ctor(System.IntPtr,System.Int64)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.DataBuffer"/> class, using an unmanaged buffer as a backing store.
            </summary>
            <param name="userBuffer">A pointer to the buffer to be used as a backing store.</param>
            <param name="sizeInBytes">The size of the buffer provided, in bytes.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Get``1(System.Int32)">
            <summary>
              Gets a single value from the current buffer at the specified position.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <typeparam name = "T">The type of the value to be read from the buffer.</typeparam>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetFloat(System.Int32)">
            <summary>
            Gets a float.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>a float from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetInt(System.Int32)">
            <summary>
            Gets a int.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an int from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetShort(System.Int32)">
            <summary>
            Gets a short.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an short from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetBoolean(System.Int32)">
            <summary>
            Gets a bool.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an bool from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetVector2(System.Int32)">
            <summary>
            Gets a Vector2.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Vector2 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetVector3(System.Int32)">
            <summary>
            Gets a Vector3.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Vector3 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetVector4(System.Int32)">
            <summary>
            Gets a Vector4.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Vector4 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetColor3(System.Int32)">
            <summary>
            Gets a Color3.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Color3 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetColor4(System.Int32)">
            <summary>
            Gets a Color4.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Color4 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetHalf(System.Int32)">
            <summary>
            Gets a Half.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Half from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetHalf2(System.Int32)">
            <summary>
            Gets a Half2.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Half2 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetHalf3(System.Int32)">
            <summary>
            Gets a Half3.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Half3 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetHalf4(System.Int32)">
            <summary>
            Gets a Half4.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>an Half4 from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetMatrix(System.Int32)">
            <summary>
            Gets a Matrix.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>a Matrix from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetQuaternion(System.Int32)">
            <summary>
            Gets a Quaternion.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <returns>a Quaternion from the buffer</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetRange``1(System.Int32,System.Int32)">
            <summary>
              Gets an array of values from a position in the buffer.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <param name="count">number of T instance to get from the positionInBytes</param>
            <typeparam name = "T">The type of the values to be read from the buffer.</typeparam>
            <returns>An array of values that was read from the current buffer.</returns>
        </member>
        <member name="M:SharpDX.DataBuffer.GetRange``1(System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
              Gets a sequence of elements from a position in the buffer into a target buffer.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to get the data from.</param>
            <param name = "buffer">An array of values to be read from the buffer.</param>
            <param name = "offset">The zero-based byte offset in buffer at which to begin storing
              the data read from the current buffer.</param>
            <param name = "count">The number of values to be read from the current buffer.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set``1(System.Int32,``0)">
            <summary>
              Sets a single value to the buffer at a specified position.
            </summary>
            <typeparam name = "T">The type of the value to be written to the buffer.</typeparam>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name = "value">The value to write to the buffer.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,System.Single)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,System.Int32)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,System.Int16)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,System.Boolean)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Vector2)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Vector3)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Vector4)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Color3)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Color4)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Half)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Half2)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Half3)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Half4)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Matrix)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,SharpDX.Quaternion)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set``1(System.Int32,``0[])">
            <summary>
              Sets an array of values to a specified position into the buffer.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name = "data">An array of values to be written to the current buffer.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set(System.Int32,System.IntPtr,System.Int64)">
            <summary>
              Sets a range of data to a specified position into the buffer.
            </summary>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name = "source">A pointer to the location to start copying from.</param>
            <param name = "count">The number of bytes to copy from source to the current buffer.</param>
        </member>
        <member name="M:SharpDX.DataBuffer.Set``1(System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
              Sets an array of values to a specified position into the buffer.
            </summary>
            <typeparam name = "T">The type of the values to be written to the buffer.</typeparam>
            <param name="positionInBytes">Relative position in bytes from the beginning of the buffer to set the data to.</param>
            <param name = "data">An array of values to be written to the buffer.</param>
            <param name = "offset">The zero-based offset in data at which to begin copying values to the current buffer.</param>
            <param name = "count">The number of values to be written to the current buffer. If this is zero,
              all of the contents <paramref name = "data" /> will be written.</param>
        </member>
        <member name="P:SharpDX.DataBuffer.DataPointer">
            <summary>
              Gets a pointer to the buffer used as a backing store..
            </summary>
            <value>An IntPtr to the buffer being used as a backing store.</value>
        </member>
        <member name="P:SharpDX.DataBuffer.Size">
            <summary>
              Gets the length in bytes of the buffer.
            </summary>
            <value>A long value representing the length of the buffer in bytes.</value>
        </member>
        <member name="T:SharpDX.Design.BaseConverter">
            <summary>
            Provides a base class for mathematical type converters.
            </summary>
        </member>
        <member name="M:SharpDX.Design.BaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDX.Design.BaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDX.Design.BaseConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDX.Design.BaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:SharpDX.Design.BaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="P:SharpDX.Design.BaseConverter.Properties">
            <summary>
            Gets or sets the collection of exposed properties.
            </summary>
            <value>The collection of exposed properties.</value>
        </member>
        <member name="T:SharpDX.Design.Half2Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half2" /> objects to and from various 
              other representations.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Design.Half2Converter" /> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c> to create a new value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:SharpDX.Design.Half2Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SharpDX.Design.Half3Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half3" /> objects to and from various 
              other representations.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Design.Half3Converter" /> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System.ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c> to create a new value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:SharpDX.Design.Half3Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SharpDX.Design.Half4Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half4" /> objects to and from various 
              other representations.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Design.Half4Converter" /> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c></returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:SharpDX.Design.Half4Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SharpDX.Design.HalfConverter">
            <summary>
            Provides a type converter to convert <see cref="T:SlimDX.Half" /> objects to and from various 
            other representations.
            </summary>
        </member>
        <member name="M:SharpDX.Design.HalfConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.HalfConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Design.HalfConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SharpDX.Design.HalfConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:SharpDX.Design.MatrixConverter">
            <summary>
            Defines a type converter for <see cref="T:SharpDX.Matrix"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Design.MatrixConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Design.MatrixConverter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.MatrixConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SharpDX.Design.QuaternionConverter">
            <summary>
            Defines a type converter for <see cref="T:SharpDX.Quaternion"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Design.QuaternionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Design.QuaternionConverter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SharpDX.Design.Vector2Converter">
            <summary>
            Defines a type converter for <see cref="T:SharpDX.Vector2"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Design.Vector2Converter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SharpDX.Design.Vector3Converter">
            <summary>
            Defines a type converter for <see cref="T:SharpDX.Vector3"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Design.Vector3Converter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SharpDX.Design.Vector4Converter">
            <summary>
            Defines a type converter for <see cref="T:SharpDX.Vector4"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Design.Vector4Converter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SharpDX.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SharpDX.AngleType">
            <summary>
            Describes the type of angle.
            </summary>
        </member>
        <member name="F:SharpDX.AngleType.Revolution">
            <summary>
            Specifies an angle measurement in revolutions.
            </summary>
        </member>
        <member name="F:SharpDX.AngleType.Degree">
            <summary>
            Specifies an angle measurement in degrees.
            </summary>
        </member>
        <member name="F:SharpDX.AngleType.Radian">
            <summary>
            Specifies an angle measurement in radians.
            </summary>
        </member>
        <member name="F:SharpDX.AngleType.Gradian">
            <summary>
            Specifies an angle measurement in gradians.
            </summary>
        </member>
        <member name="T:SharpDX.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:SharpDX.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:SharpDX.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:SharpDX.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:SharpDX.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:SharpDX.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:SharpDX.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:SharpDX.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:SharpDX.FunctionCallback">
            <summary>
            FunctionCallback
            </summary>
        </member>
        <member name="M:SharpDX.FunctionCallback.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.FunctionCallback.ToString(System.String)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.FunctionCallback.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.FunctionCallback.Equals(SharpDX.FunctionCallback)">
            <summary>
              Determines whether the specified <see cref="T:SharpDX.FunctionCallback"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.FunctionCallback"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SharpDX.FunctionCallback"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.FunctionCallback.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpDX.Direct3D.DriverType">
            <summary>	
            Driver type options.	
            </summary>	
            <remarks>	
            The driver type is required when calling <see cref="!:SharpDX.Direct3D11.D3D11.CreateDevice"/> or <see cref="!:SharpDX.Direct3D11.D3D11.CreateDeviceAndSwapChain"/>. 	
            </remarks>	
            <unmanaged>D3D_DRIVER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Unknown">
            <summary>	
            The driver type is unknown. 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Hardware">
            <summary>	
            A hardware driver, which implements Direct3D features in hardware. This is the primary driver that you should use in your Direct3D applications because it provides the best performance. A hardware driver uses hardware acceleration (on supported hardware) but can also use software for parts of the pipeline that are not supported in hardware. This driver type is often referred to as a hardware abstraction layer or HAL. 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_HARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Reference">
            <summary>	
            A reference driver, which is a software implementation that supports every Direct3D feature. A reference driver is designed for accuracy rather than speed and as a result is slow but accurate. The rasterizer portion of the driver does make use of special CPU instructions whenever it can, but it is not intended for retail applications; use it only for feature testing, demonstration of functionality, debugging, or verifying bugs in other drivers. This driver is installed by the DirectX SDK. This driver may be referred to as a REF driver, a reference driver or a reference rasterizer. 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_REFERENCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Null">
            <summary>	
            A NULL driver, which is a reference driver without render capability. This driver is commonly used for debugging non-rendering API calls, it is not appropriate for retail applications. This driver is installed by the DirectX SDK. 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_NULL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Software">
            <summary>	
            A software driver, which is a driver implemented completely in software. The software implementation is not intended for a high-performance application due to its very slow performance. 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_SOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.DriverType.Warp">
            <summary>	
            A WARP driver, which is a high-performance software rasterizer. The rasterizer supports {{feature levels}} 9_1 through level 10.1 with a high performance software implementation. For information about limitations creating a WARP device on certain feature levels, see {{Limitations Creating WARP and Reference Devices}}. For more information about using a WARP driver, see {{Windows Advanced Rasterization Platform (WARP) In-Depth Guide}} 	
            </summary>	
            <unmanaged>D3D_DRIVER_TYPE_WARP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.FeatureLevel">
            <summary>	
            Describes the set of features targeted by a Direct3D device.	
            </summary>	
            <remarks>	
            See {{Overview For Each Feature Level}} for an overview of  the capabilities of each feature level. For information about limitations creating nonhardware-type devices on certain feature levels, see {{Limitations Creating WARP and Reference Devices}}. 	
            </remarks>	
            <unmanaged>D3D_FEATURE_LEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_9_1">
            <summary>	
            Targets features supported by Direct3D 9.1 including shader model 2. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_9_1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_9_2">
            <summary>	
            Targets features supported by Direct3D 9.2 including shader model 2. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_9_2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_9_3">
            <summary>	
            Targets features supported by Direct3D 9.3 including shader shader model 3. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_9_3</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_10_0">
            <summary>	
            Targets features supported by Direct3D 10.0 including shader shader model 4. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_10_0</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_10_1">
            <summary>	
            Targets features supported by Direct3D 10.1 including shader shader model 4. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_10_1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.FeatureLevel.Level_11_0">
            <summary>	
            Targets features supported by Direct3D 11.0 including shader shader model 5. 	
            </summary>	
            <unmanaged>D3D_FEATURE_LEVEL_11_0</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.PrimitiveTopology">
            <summary>	
            Values that indicate how the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen.	
            </summary>	
            <remarks>	
            Use the  <see cref="!:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetPrimitiveTopology"/> method and a value from D3D_PRIMITIVE_TOPOLOGY to bind a primitive topology to the input-assembler stage. Use the  <see cref="!:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.GetPrimitiveTopology"/> method to retrieve the primitive topology for the input-assembler stage. 	
            </remarks>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.Undefined">
            <summary>	
            The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PointList">
            <summary>	
            Interpret the vertex data as a list of points. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_POINTLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.LineList">
            <summary>	
            Interpret the vertex data as a list of lines. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.LineStrip">
            <summary>	
            Interpret the vertex data as a line strip. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.TriangleList">
            <summary>	
            Interpret the vertex data as a list of triangles. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.TriangleStrip">
            <summary>	
            Interpret the vertex data as a triangle strip. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.LineListWithAdjacency">
            <summary>	
            Interpret the vertex data as a list of lines with adjacency data. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.LineStripWithAdjacency">
            <summary>	
            Interpret the vertex data as a line strip with adjacency data. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.TriangleListWithAdjacency">
            <summary>	
            Interpret the vertex data as a list of triangles with adjacency data. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.TriangleStripWithAdjacency">
            <summary>	
            Interpret the vertex data as a triangle strip with adjacency data. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith1ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith2ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith3ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith4ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith5ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith6ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith7ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith8ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith9ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith10ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith11ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith12ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith13ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith14ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith15ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith16ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith17ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith18ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith19ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith20ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith21ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith22ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith23ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith24ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith25ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith26ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith27ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith28ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith29ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith30ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith31ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.PrimitiveTopology.PatchListWith32ControlPoints">
            <summary>	
            Interpret the vertex data as a patch list. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.ShaderResourceViewDimension">
            <summary>	
            Values that identify the type of resource to be viewed as a shader resource.	
            </summary>	
            <remarks>	
            A D3D_SRV_DIMENSION-typed value is specified in the ViewDimension member of the <see cref="!:SharpDX.Direct3D11.ShaderResourceViewDescription"/> structure or the  Dimension member of the <see cref="!:SharpDX.D3DCompiler.InputBindingDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SRV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Unknown">
            <summary>	
            The type is unknown. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Buffer">
            <summary>	
            The resource is a buffer. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture1D">
            <summary>	
            The resource is a 1D texture. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture1DArray">
            <summary>	
            The resource is an array of 1D textures. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture2D">
            <summary>	
            The resource is a 2D texture. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture2DArray">
            <summary>	
            The resource is an array of 2D textures. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture2DMultisampled">
            <summary>	
            The resource is a multisampling 2D texture. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture2DMultisampledArray">
            <summary>	
            The resource is an array of multisampling 2D textures. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texture3D">
            <summary>	
            The resource is a 3D texture. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.TextureCube">
            <summary>	
            The resource is a cube texture. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.Texturecubearray">
            <summary>	
            The resource is an array of cube textures. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderResourceViewDimension.ExtendedBuffer">
            <summary>	
            The resource is an extended buffer. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION_BUFFEREX</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.D3DCommon">
            <summary>
            D3DCommon Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D.D3DCommon.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D.D3DCommon.CreateBlob(SharpDX.Size,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates a buffer.	
            </summary>	
            <remarks>	
            The latest D3dcompiler_nn.dll contains the D3DCreateBlob compiler function. Therefore, you are no longer required to create and use an arbitrary length data buffer by using the  {{D3D10CreateBlob}} function that is contained in D3d10.dll. 	
            </remarks>	
            <param name="size">Number of bytes in the blob. </param>
            <param name="blobRef">The address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> interface that is used to retrieve the buffer. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DCreateBlob([In] SIZE_T Size,[Out] ID3DBlob** ppBlob)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.CommonGuid">
            <summary>
            CommonGuid Functions.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D.CommonGuid.DebugObjectName">
            <summary>Constant None.</summary>
        </member>
        <member name="T:SharpDX.Direct3D.Blob">
            <summary>	
            This interface is used to return arbitrary length data.	
            </summary>	
            <unmanaged>ID3D10Blob</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D.Blob.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D.Blob"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D.Blob.GetBufferPointer">
            <summary>	
            Get a reference to the data.	
            </summary>	
            <returns>Returns a reference. </returns>
            <unmanaged>void* ID3D10Blob::GetBufferPointer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D.Blob.GetBufferSize">
            <summary>	
            Get the size.	
            </summary>	
            <returns>The size of the data, in bytes. </returns>
            <unmanaged>SIZE_T ID3D10Blob::GetBufferSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D.Blob.BufferPointer">
            <summary>	
            Get a reference to the data.	
            </summary>	
            <unmanaged>void* ID3D10Blob::GetBufferPointer()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D.Blob.BufferSize">
            <summary>	
            Get the size.	
            </summary>	
            <unmanaged>SIZE_T ID3D10Blob::GetBufferSize()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D.ShaderMacro">
            <summary>	
            Defines a shader macro.	
            </summary>	
            <remarks>	
            You can use shader macros in your shaders. The D3D_SHADER_MACRO structure defines a single shader macro as shown in the following example: 	
            <code> D3D_SHADER_MACRO Shader_Macros[1] = { "zero", "0"  }; </code>	
            	
             The following shader or effect creation functions take an array of shader macros as an input parameter:   {{D3D10CompileShader}}   {{D3DX10CreateEffectFromFile}}   {{D3DX10PreprocessShaderFromFile}}   {{D3DX11CreateAsyncShaderPreprocessProcessor}}   	
            </remarks>	
            <unmanaged>D3D_SHADER_MACRO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderMacro.Name">
            <summary>	
            The macro name. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D.ShaderMacro.Definition">
            <summary>	
            The macro definition. 	
            </summary>	
            <unmanaged>const char* Definition</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D.ShaderMacro.#ctor(System.String,System.String)">
            <summary>
              Default Constructor for a ShaderMacro
            </summary>
            <param name = "name"></param>
            <param name = "definition"></param>
        </member>
        <member name="T:SharpDX.Half">
            <summary>
              A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:SharpDX.Half.PrecisionDigits">
            <summary>
              Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MantissaBits">
            <summary>
              Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MaximumDecimalExponent">
            <summary>
              Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MaximumBinaryExponent">
            <summary>
              Maximum binary exponent.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MinimumDecimalExponent">
            <summary>
              Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MinimumBinaryExponent">
            <summary>
              Minimum binary exponent.
            </summary>
        </member>
        <member name="F:SharpDX.Half.ExponentRadix">
            <summary>
              Exponent radix.
            </summary>
        </member>
        <member name="F:SharpDX.Half.AdditionRounding">
            <summary>
              Additional rounding.
            </summary>
        </member>
        <member name="F:SharpDX.Half.Epsilon">
            <summary>
              Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:SharpDX.Half.MaxValue">
            <summary>
              Maximum value of the number.
            </summary>
        </member>
        <member name="F:SharpDX.Half.MinValue">
            <summary>
              Minimum value of the number.
            </summary>
        </member>
        <member name="M:SharpDX.Half.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="M:SharpDX.Half.ConvertToFloat(SharpDX.Half[])">
            <summary>
              Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SharpDX.Half.ConvertToHalf(System.Single[])">
            <summary>
              Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SharpDX.Half.op_Explicit(System.Single)~SharpDX.Half">
            <summary>
              Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:SharpDX.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.Half.op_Implicit(SharpDX.Half)~System.Single">
            <summary>
              Performs an implicit conversion from <see cref = "T:SharpDX.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.Half.op_Equality(SharpDX.Half,SharpDX.Half)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half.op_Inequality(SharpDX.Half,SharpDX.Half)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half.ToString">
            <summary>
              Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:SharpDX.Half.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SharpDX.Half.Equals(SharpDX.Half@,SharpDX.Half@)">
            <summary>
              Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns>
              <c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or 
              if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half.Equals(SharpDX.Half)">
            <summary>
              Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpDX.Half.Equals(System.Object)">
            <summary>
              Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SharpDX.Half.RawValue">
            <summary>
              Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="T:SharpDX.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SharpDX.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:SharpDX.Half2.#ctor(SharpDX.Half,SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:SharpDX.Half2.#ctor(SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:SharpDX.Half2.op_Equality(SharpDX.Half2,SharpDX.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half2.op_Inequality(SharpDX.Half2,SharpDX.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SharpDX.Half2.Equals(SharpDX.Half2@,SharpDX.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half2.Equals(SharpDX.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpDX.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpDX.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SharpDX.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:SharpDX.Half3.#ctor(SharpDX.Half,SharpDX.Half,SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:SharpDX.Half3.#ctor(SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:SharpDX.Half3.op_Equality(SharpDX.Half3,SharpDX.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half3.op_Inequality(SharpDX.Half3,SharpDX.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SharpDX.Half3.Equals(SharpDX.Half3@,SharpDX.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half3.Equals(SharpDX.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpDX.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpDX.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SharpDX.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:SharpDX.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:SharpDX.Half4.#ctor(SharpDX.Half,SharpDX.Half,SharpDX.Half,SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:SharpDX.Half4.#ctor(SharpDX.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:SharpDX.Half4.op_Equality(SharpDX.Half4,SharpDX.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half4.op_Inequality(SharpDX.Half4,SharpDX.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SharpDX.Half4.Equals(SharpDX.Half4@,SharpDX.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Half4.Equals(SharpDX.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpDX.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpDX.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:SharpDX.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified h.
            </summary>
            <param name="h">The h.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified f.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Int4">
            <summary>
              Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.SizeInBytes">
            <summary>
              The size of the <see cref="T:SharpDX.Int4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.Zero">
            <summary>
              A <see cref="T:SharpDX.Int4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.UnitX">
            <summary>
              The X unit <see cref="T:SharpDX.Int4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Int4.UnitY">
            <summary>
              The Y unit <see cref="T:SharpDX.Int4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Int4.UnitZ">
            <summary>
              The Z unit <see cref="T:SharpDX.Int4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Int4.UnitW">
            <summary>
              The W unit <see cref="T:SharpDX.Int4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SharpDX.Int4.One">
            <summary>
              A <see cref="T:SharpDX.Int4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.X">
            <summary>
              The X component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.Y">
            <summary>
              The Y component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.Z">
            <summary>
              The Z component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Int4.W">
            <summary>
              The W component of the vector.
            </summary>
        </member>
        <member name="M:SharpDX.Int4.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Int4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Int4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SharpDX.Int4.#ctor(System.Int32[])">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Int4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Int4.ToArray">
            <summary>
              Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.Add(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <param name = "result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Int4.Add(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.Subtract(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <param name = "result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Int4.Subtract(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.Multiply(SharpDX.Int4@,System.Int32,SharpDX.Int4@)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Int4.Multiply(SharpDX.Int4,System.Int32)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.Modulate(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <param name = "result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SharpDX.Int4.Modulate(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.Divide(SharpDX.Int4@,System.Int32,SharpDX.Int4@)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Int4.Divide(SharpDX.Int4,System.Int32)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.Negate(SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <param name = "result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SharpDX.Int4.Negate(SharpDX.Int4)">
            <summary>
              Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Int4.Clamp(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <param name = "result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Int4.Clamp(SharpDX.Int4,SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Int4.Max(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Int4.Max(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.Min(SharpDX.Int4@,SharpDX.Int4@,SharpDX.Int4@)">
            <summary>
              Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Int4.Min(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Addition(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_UnaryPlus(SharpDX.Int4)">
            <summary>
              Assert a vector (return it unchanged).
            </summary>
            <param name = "value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Subtraction(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_UnaryNegation(SharpDX.Int4)">
            <summary>
              Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Multiply(System.Int32,SharpDX.Int4)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Multiply(SharpDX.Int4,System.Int32)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Division(SharpDX.Int4,System.Int32)">
            <summary>
              Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Equality(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Inequality(SharpDX.Int4,SharpDX.Int4)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Explicit(SharpDX.Int4)~SharpDX.Vector2">
            <summary>
              Performs an explicit conversion from <see cref="T:SharpDX.Int4"/> to <see cref="T:SharpDX.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Explicit(SharpDX.Int4)~SharpDX.Vector3">
            <summary>
              Performs an explicit conversion from <see cref="T:SharpDX.Int4"/> to <see cref="T:SharpDX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Explicit(SharpDX.Int4)~SharpDX.Vector4">
            <summary>
              Performs an explicit conversion from <see cref="T:SharpDX.Int4"/> to <see cref="T:SharpDX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Int4.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.ToString(System.String)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.ToString(System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Int4.Equals(SharpDX.Int4)">
            <summary>
              Determines whether the specified <see cref="T:SharpDX.Int4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Int4"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SharpDX.Int4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Int4.op_Implicit(System.Int32[])~SharpDX.Int4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:SharpDX.Int4"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Int4.op_Implicit(SharpDX.Int4)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Int4"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpDX.Int4.Item(System.Int32)">
            <summary>
              Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.Interop">
            <summary>
            The implementation of this class is filled by InteropBuilder post-building-event.
            </summary>
        </member>
        <member name="F:SharpDX.MathUtil.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:SharpDX.MathUtil.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:SharpDX.MathUtil.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:SharpDX.MathUtil.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:SharpDX.MathUtil.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:SharpDX.MathUtil.Array``1(``0,System.Int32)">
            <summary>
            Does something with arrays.
            </summary>
            <typeparam name="T">Most likely the type of elements in the array.</typeparam>
            <param name="value">Who knows what this is for.</param>
            <param name="count">Probably the length of the array.</param>
            <returns>An array of who knows what.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RevolutionsToDegrees(System.Single)">
            <summary>
            Converts revolutions to degrees.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RevolutionsToRadians(System.Single)">
            <summary>
            Converts revolutions to radians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RevolutionsToGradians(System.Single)">
            <summary>
            Converts revolutions to gradians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.DegreesToRevolutions(System.Single)">
            <summary>
            Converts degrees to revolutions.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RadiansToRevolutions(System.Single)">
            <summary>
            Converts radians to revolutions.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RadiansToGradians(System.Single)">
            <summary>
            Converts radians to gradians.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.GradiansToRevolutions(System.Single)">
            <summary>
            Converts gradians to revolutions.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.GradiansToDegrees(System.Single)">
            <summary>
            Converts gradians to degrees.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.GradiansToRadians(System.Single)">
            <summary>
            Converts gradians to radians.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpDX.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:SharpDX.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:SharpDX.Matrix"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.Zero">
            <summary>
            A <see cref="T:SharpDX.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.Identity">
            <summary>
            The identity <see cref="T:SharpDX.Matrix"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpDX.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:SharpDX.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Matrix"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Matrix"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:SharpDX.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:SharpDX.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:SharpDX.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.DecomposeQR(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right traingular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:SharpDX.Matrix.DecomposeLQ(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:SharpDX.Matrix.Decompose(SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:SharpDX.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="firstColumn"></param>
            <param name="secondColumn"></param>
        </member>
        <member name="M:SharpDX.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Add(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:SharpDX.Matrix.Add(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Subtract(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:SharpDX.Matrix.Subtract(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Multiply(SharpDX.Matrix@,System.Single,SharpDX.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Multiply(SharpDX.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Multiply(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:SharpDX.Matrix.Multiply(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Divide(SharpDX.Matrix@,System.Single,SharpDX.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Divide(SharpDX.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Divide(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:SharpDX.Matrix.Divide(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Exponent(SharpDX.Matrix@,System.Int32,SharpDX.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:SharpDX.Matrix.Exponent(SharpDX.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:SharpDX.Matrix.Negate(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Negate(SharpDX.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Lerp(SharpDX.Matrix@,SharpDX.Matrix@,System.Single,SharpDX.Matrix@)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Lerp(SharpDX.Matrix,SharpDX.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.SmoothStep(SharpDX.Matrix@,SharpDX.Matrix@,System.Single,SharpDX.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:SharpDX.Matrix.SmoothStep(SharpDX.Matrix,SharpDX.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Transpose(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Transpose(SharpDX.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Invert(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Invert(SharpDX.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Orthogonalize(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Orthogonalize(SharpDX.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Orthonormalize(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Orthonormalize(SharpDX.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.UpperTriangularForm(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.UpperTriangularForm(SharpDX.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.LowerTriangularForm(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.LowerTriangularForm(SharpDX.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.RowEchelonForm(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RowEchelonForm(SharpDX.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.ReducedRowEchelonForm(SharpDX.Matrix@,SharpDX.Vector4@,SharpDX.Matrix@,SharpDX.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>The fifth column is often called the agumented part of the matrix. This is because the fifth
            column is really just an extension of the matrix so that there is a place to put all of the
            non-zero components after the operation is complete.</para>
            <para>Often times the resultant matrix will the identity matrix or a matrix similar to the identity
            matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.</para>
            <para>This method can be used to solve systems of linear equations. Upon completion of this method,
            the <paramref name="augmentResult"/> will contain the solution for the system. It is up to the user
            to analyze both the input and the result to determine if a solution really exists.</para>
            </remarks>
        </member>
        <member name="M:SharpDX.Matrix.Billboard(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Billboard(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.LookAtLH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.LookAtLH(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.LookAtRH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.LookAtRH(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Reflection(SharpDX.Plane@,SharpDX.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Reflection(SharpDX.Plane)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Shadow(SharpDX.Vector4@,SharpDX.Plane@,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Shadow(SharpDX.Vector4,SharpDX.Plane)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(SharpDX.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationX(System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationY(System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationZ(System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationAxis(SharpDX.Vector3@,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationAxis(SharpDX.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationQuaternion(SharpDX.Quaternion@,SharpDX.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationQuaternion(SharpDX.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Translation(SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Translation(SharpDX.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Translation(System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation(System.Single,SharpDX.Quaternion@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation(System.Single,SharpDX.Quaternion,SharpDX.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation(System.Single,SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation(System.Single,SharpDX.Vector3,SharpDX.Quaternion,SharpDX.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation2D(System.Single,System.Single,SharpDX.Vector2@,SharpDX.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation2D(System.Single,System.Single,SharpDX.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation2D(System.Single,SharpDX.Vector2@,System.Single,SharpDX.Vector2@,SharpDX.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.AffineTransformation2D(System.Single,SharpDX.Vector2,System.Single,SharpDX.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Transformation(SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Transformation(SharpDX.Vector3,SharpDX.Quaternion,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Quaternion,SharpDX.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.Transformation2D(SharpDX.Vector2@,System.Single,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@,SharpDX.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:SharpDX.Matrix.Transformation2D(SharpDX.Vector2,System.Single,SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Addition(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_UnaryPlus(SharpDX.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchange).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Subtraction(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_UnaryNegation(SharpDX.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Multiply(System.Single,SharpDX.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Multiply(SharpDX.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Multiply(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Multiplies two matricies.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Division(SharpDX.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Division(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Divides two matricies.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Equality(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Matrix.op_Inequality(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.Equals(SharpDX.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Matrix"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:SharpDX.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:SharpDX.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.Multimedia.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.#ctor">
            <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.CreateCustomFormat(SharpDX.Multimedia.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a WaveFormat with custom members
            </summary>
            <param name="tag">The encoding</param>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
            <param name="averageBytesPerSecond">Average Bytes Per Second</param>
            <param name="blockAlign">Block Align</param>
            <param name="bitsPerSample">Bits Per Sample</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.CreateALawFormat(System.Int32,System.Int32)">
            <summary>
            Creates an A-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.CreateMuLawFormat(System.Int32,System.Int32)">
            <summary>
            Creates a Mu-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="sampleRate">sample rate</param>
            <param name="channels">number of channels</param>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.MarshalFromPtr(System.IntPtr)">
            <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
            <param name="pointer">WaveFormat structure</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.MarshalToPtr(SharpDX.Multimedia.WaveFormat)">
            <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
            <param name="format">WaveFormat</param>
            <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.#ctor(System.IO.BinaryReader)">
            <summary>
            Reads a new WaveFormat object from a stream
            </summary>
            <param name="br">A binary reader that wraps the stream</param>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.Encoding">
            <summary>
            Returns the encoding type used
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:SharpDX.Multimedia.WaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormat.__Native.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="T:SharpDX.Multimedia.WaveFormatEncoding">
            <summary>
            Summary description for WaveFormatEncoding.
            </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DspGroupTruespeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Mpeg">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.MpegLayer3">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO2">
            <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO3">
            <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DVM">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:SharpDX.Multimedia.WaveFormatEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="T:SharpDX.Multimedia.WaveFormatExtensible">
            <summary>
            WaveFormatExtensible
            http://www.microsoft.com/whdc/device/audio/multichaud.mspx
            </summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormatExtensible.#ctor">
            <summary>
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
        </member>
        <member name="M:SharpDX.Multimedia.WaveFormatExtensible.ToString">
            <summary>
            String representation
            </summary>
        </member>
        <member name="T:SharpDX.Win32Native">
            <summary>
            Internal class to interact with Native Message
            </summary>
        </member>
        <member name="T:SharpDX.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:SharpDX.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:SharpDX.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:SharpDX.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:SharpDX.Plane.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane" /> class.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:SharpDX.Plane.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:SharpDX.Plane.#ctor(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:SharpDX.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:SharpDX.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Plane@,SharpDX.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SharpDX.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Intersects(SharpDX.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Plane.Multiply(SharpDX.Plane@,System.Single,SharpDX.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:SharpDX.Plane.Multiply(SharpDX.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Dot(SharpDX.Plane@,SharpDX.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:SharpDX.Plane.Dot(SharpDX.Plane,SharpDX.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:SharpDX.Plane.DotCoordinate(SharpDX.Plane@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:SharpDX.Plane.DotCoordinate(SharpDX.Plane,SharpDX.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.DotNormal(SharpDX.Plane@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:SharpDX.Plane.DotNormal(SharpDX.Plane,SharpDX.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Normalize(SharpDX.Plane@,SharpDX.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:SharpDX.Plane.Normalize(SharpDX.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane@,SharpDX.Quaternion@,SharpDX.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane,SharpDX.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane[],SharpDX.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane@,SharpDX.Matrix@,SharpDX.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane,SharpDX.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.Transform(SharpDX.Plane[],SharpDX.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpDX.Plane.op_Multiply(System.Single,SharpDX.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.op_Multiply(SharpDX.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SharpDX.Plane.op_Equality(SharpDX.Plane,SharpDX.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Plane.op_Inequality(SharpDX.Plane,SharpDX.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Plane.Equals(SharpDX.Plane)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SharpDX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:SharpDX.Quaternion"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.Zero">
            <summary>
            A <see cref="T:SharpDX.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.One">
            <summary>
            A <see cref="T:SharpDX.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.Identity">
            <summary>
            The identity <see cref="T:SharpDX.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:SharpDX.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(SharpDX.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(SharpDX.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Quaternion"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:SharpDX.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:SharpDX.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="M:SharpDX.Quaternion.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="M:SharpDX.Quaternion.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:SharpDX.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Add(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Add(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Subtract(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Subtract(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Multiply(SharpDX.Quaternion@,System.Single,SharpDX.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Multiply(SharpDX.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Multiply(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Multiply(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <returns>The modulated quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Negate(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Negate(SharpDX.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Barycentric(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single,System.Single,SharpDX.Quaternion@)">
            <summary>
            Returns a <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Barycentric(SharpDX.Quaternion,SharpDX.Quaternion,SharpDX.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SharpDX.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Conjugate(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Conjugate(SharpDX.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Dot(SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <param name="result">When the method completes, contains the dot product of the two quaternions.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Dot(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Exponential(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Exponential(SharpDX.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Invert(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Invert(SharpDX.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Lerp(SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single,SharpDX.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Quaternion.Lerp(SharpDX.Quaternion,SharpDX.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Quaternion.Logarithm(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Logarithm(SharpDX.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Normalize(SharpDX.Quaternion@,SharpDX.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Normalize(SharpDX.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.RotationAxis(SharpDX.Vector3@,System.Single,SharpDX.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.RotationAxis(SharpDX.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.RotationMatrix(SharpDX.Matrix@,SharpDX.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.RotationMatrix(SharpDX.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,SharpDX.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SharpDX.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Slerp(SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single,SharpDX.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Slerp(SharpDX.Quaternion,SharpDX.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.Squad(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single,SharpDX.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:SharpDX.Quaternion.Squad(SharpDX.Quaternion,SharpDX.Quaternion,SharpDX.Quaternion,SharpDX.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.SquadSetup(SharpDX.Quaternion,SharpDX.Quaternion,SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Addition(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Subtraction(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_UnaryNegation(SharpDX.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Multiply(System.Single,SharpDX.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Multiply(SharpDX.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Multiply(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Equality(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.op_Inequality(SharpDX.Quaternion,SharpDX.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.Equals(SharpDX.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SharpDX.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:SharpDX.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:SharpDX.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:SharpDX.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:SharpDX.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:SharpDX.Ray.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Ray@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Plane@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingBox@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.Intersects(SharpDX.BoundingSphere@,SharpDX.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SharpDX.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SharpDX.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SharpDX.Ray.op_Equality(SharpDX.Ray,SharpDX.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Ray.op_Inequality(SharpDX.Ray,SharpDX.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Ray.Equals(SharpDX.Ray)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SharpDX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpDX.Rectangle">
            <summary>
            Define a Rectangle. This structure is slightly different from System.Drawing.Rectangle as It is 
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            Although automatic casting from a to System.Drawing.Rectangle is provided by this class.
            </summary>
        </member>
        <member name="F:SharpDX.Rectangle.Empty">
            <summary>
            An empty rectangle
            </summary>
        </member>
        <member name="M:SharpDX.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Rectangle"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:SharpDX.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Rectangle.op_Implicit(System.Drawing.Rectangle)~SharpDX.Rectangle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:SharpDX.Rectangle"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Rectangle.op_Implicit(SharpDX.Rectangle)~System.Drawing.Rectangle">
            <summary>
            Rectangles the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Rectangle.op_Equality(SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Rectangle.op_Inequality(SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:SharpDX.Rectangle.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:SharpDX.Rectangle.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:SharpDX.Rectangle.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:SharpDX.Rectangle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:SharpDX.Rectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDX.Rectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:SharpDX.RectangleF">
            <summary>
            Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as It is 
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            Although automatic casting from a to System.Drawing.Rectangle is provided by this class.
            </summary>
        </member>
        <member name="F:SharpDX.RectangleF.Empty">
            <summary>
            An empty rectangle
            </summary>
        </member>
        <member name="M:SharpDX.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.RectangleF"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:SharpDX.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.RectangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.RectangleF.op_Implicit(System.Drawing.RectangleF)~SharpDX.RectangleF">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.RectangleF"/> to <see cref="T:SharpDX.RectangleF"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.RectangleF.op_Implicit(SharpDX.RectangleF)~System.Drawing.RectangleF">
            <summary>
            Rectangles the F.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.RectangleF.op_Equality(SharpDX.RectangleF,SharpDX.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.RectangleF.op_Inequality(SharpDX.RectangleF,SharpDX.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:SharpDX.RectangleF.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:SharpDX.RectangleF.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:SharpDX.RectangleF.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:SharpDX.RectangleF.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:SharpDX.RectangleF.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDX.RectangleF.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:SharpDX.Result">
            <summary>
            Result structure for COM methods.
            </summary>
        </member>
        <member name="M:SharpDX.Result.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Result"/> struct.
            </summary>
            <param name="code">The HRESULT error code.</param>
        </member>
        <member name="M:SharpDX.Result.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Result"/> struct.
            </summary>
            <param name="code">The HRESULT error code.</param>
        </member>
        <member name="M:SharpDX.Result.op_Implicit(System.Int32)~SharpDX.Result">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SharpDX.Result"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Result.Equals(SharpDX.Result)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Result.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Result.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Result.op_Equality(SharpDX.Result,SharpDX.Result)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Result.op_Inequality(SharpDX.Result,SharpDX.Result)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDX.Result.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Result.CheckError">
            <summary>
            Checks the error.
            </summary>
        </member>
        <member name="F:SharpDX.Result.Ok">
            <summary>
            Result code Ok
            </summary>
        </member>
        <member name="F:SharpDX.Result.Abord">
            <summary>
            Result code Abord
            </summary>
        </member>
        <member name="F:SharpDX.Result.AccessDenied">
            <summary>
            Result code AccessDenied
            </summary>
        </member>
        <member name="F:SharpDX.Result.Fail">
            <summary>
            Result code Fail
            </summary>
        </member>
        <member name="F:SharpDX.Result.Handle">
            <summary>
            Resuld code Handle
            </summary>
        </member>
        <member name="F:SharpDX.Result.InvalidArg">
            <summary>
            Result code invalid argument
            </summary>
        </member>
        <member name="F:SharpDX.Result.NoInterface">
            <summary>
            Result code no interface
            </summary>
        </member>
        <member name="F:SharpDX.Result.NotImplemented">
            <summary>
            Result code not implemented
            </summary>
        </member>
        <member name="F:SharpDX.Result.OutOfMemory">
            <summary>
            Result code out of memory
            </summary>
        </member>
        <member name="F:SharpDX.Result.InvalidPointer">
            <summary>
            Result code Invalid pointer
            </summary>
        </member>
        <member name="F:SharpDX.Result.UnexpectedFailure">
            <summary>
            Unexpected failure
            </summary>
        </member>
        <member name="P:SharpDX.Result.Code">
            <summary>
            Gets the HRESULT error code.
            </summary>
            <value>The HRESULT error code.</value>
        </member>
        <member name="P:SharpDX.Result.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpDX.Result"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.Result.Failure">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpDX.Result"/> is failure.
            </summary>
            <value><c>true</c> if failure; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpDX.Size">
            <summary>
              The maximum number of bytes to which a pointer can point. Use for a count that must span the full range of a pointer.
              Equivalent to Windows type SIZE_T.
            </summary>
        </member>
        <member name="M:SharpDX.Size.#ctor(System.Void*)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:SharpDX.Size.#ctor(System.Int32)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:SharpDX.Size.#ctor(System.Int64)">
            <summary>
              Default constructor.
            </summary>
            <param name = "size">value to set</param>
        </member>
        <member name="M:SharpDX.Size.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Size.ToString(System.String)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Size.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Size.Equals(SharpDX.Size)">
            <summary>
              Determines whether the specified <see cref="T:SharpDX.Size"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Size"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SharpDX.Size"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Size.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Size.op_Addition(SharpDX.Size,SharpDX.Size)">
            <summary>
              Adds two sizes.
            </summary>
            <param name = "left">The first size to add.</param>
            <param name = "right">The second size to add.</param>
            <returns>The sum of the two sizes.</returns>
        </member>
        <member name="M:SharpDX.Size.op_UnaryPlus(SharpDX.Size)">
            <summary>
              Assert a size (return it unchanged).
            </summary>
            <param name = "value">The size to assert (unchange).</param>
            <returns>The asserted (unchanged) size.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Subtraction(SharpDX.Size,SharpDX.Size)">
            <summary>
              Subtracts two sizes.
            </summary>
            <param name = "left">The first size to subtract.</param>
            <param name = "right">The second size to subtract.</param>
            <returns>The difference of the two sizes.</returns>
        </member>
        <member name="M:SharpDX.Size.op_UnaryNegation(SharpDX.Size)">
            <summary>
              Reverses the direction of a given size.
            </summary>
            <param name = "value">The size to negate.</param>
            <returns>A size facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Multiply(System.Int32,SharpDX.Size)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Multiply(SharpDX.Size,System.Int32)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Division(SharpDX.Size,System.Int32)">
            <summary>
              Scales a size by the given value.
            </summary>
            <param name = "value">The size to scale.</param>
            <param name = "scale">The amount by which to scale the size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Equality(SharpDX.Size,SharpDX.Size)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Inequality(SharpDX.Size,SharpDX.Size)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Implicit(SharpDX.Size)~System.Int32">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Implicit(SharpDX.Size)~System.Int64">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Implicit(System.Int32)~SharpDX.Size">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Implicit(System.Int64)~SharpDX.Size">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Explicit(SharpDX.Size)~System.IntPtr">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Explicit(System.Void*)~SharpDX.Size">
            <summary>
              Performs an implicit conversion from void* to <see cref="T:SharpDX.Size"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Size.op_Explicit(SharpDX.Size)~System.Void*">
            <summary>
              Performs an implicit conversion from <see cref="T:SharpDX.Size"/> to void*.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SharpDX.SharpDXException">
            <summary>
              The base class for errors that occur in SharpDX.
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="M:SharpDX.SharpDXException.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.SharpDXException" /> class.
            </summary>
        </member>
        <member name="M:SharpDX.SharpDXException.#ctor(SharpDX.Result)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.SharpDXException" /> class.
            </summary>
            <param name = "result">The result code that caused this exception.</param>
        </member>
        <member name="M:SharpDX.SharpDXException.#ctor(System.String,System.Object[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.SharpDXException" /> class.
            </summary>
            <param name = "message">The message describing the exception.</param>
            <param name="args">formatting arguments</param>
        </member>
        <member name="M:SharpDX.SharpDXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.SharpDXException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:SharpDX.SharpDXException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.SharpDXException" /> class.
            </summary>
            <param name = "message">The message describing the exception.</param>
            <param name = "innerException">The exception that caused this exception.</param>
            <param name="args">formatting arguments</param>
        </member>
        <member name="M:SharpDX.SharpDXException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              When overridden in a derived class, sets the <see cref = "T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name = "info">The <see cref = "T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name = "context">The <see cref = "T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:SharpDX.SharpDXException.ResultCode">
            <summary>
              Gets the <see cref = "T:SharpDX.Result">Result code</see> for the exception. This value indicates
              the specific type of failure that occured within SharpDX.
            </summary>
        </member>
        <member name="T:SharpDX.Utilities">
            <summary>
            Utility class.
            </summary>
        </member>
        <member name="M:SharpDX.Utilities.#cctor">
            <summary>
            Force an ini
            </summary>
        </member>
        <member name="M:SharpDX.Utilities.CopyMemory(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Native memcpy.
            </summary>
            <param name="dest">The destination memory location</param>
            <param name="src">The source memory location.</param>
            <param name="sizeInBytesToCopy">The count.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Utilities.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Native memcpy.
            </summary>
            <param name="dest">The destination memory location</param>
            <param name="src">The source memory location.</param>
            <param name="sizeInBytesToCopy">The count.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Utilities.SizeOf``1">
            <summary>
            Return the sizeof a struct from a CLR. Equivalent to sizeof operator but works on generics too.
            </summary>
            <typeparam name="T">a struct to evaluate</typeparam>
            <returns>sizeof this struct</returns>
        </member>
        <member name="M:SharpDX.Utilities.Read``1(System.IntPtr,``0@)">
            <summary>
            Reads the specified T data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <returns>source pointer + sizeof(T)</returns>
        </member>
        <member name="M:SharpDX.Utilities.Read``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Reads the specified array T[] data from a memory location.
            </summary>
            <typeparam name="T">Type of a data to read</typeparam>
            <param name="source">Memory location to read from.</param>
            <param name="data">The data write to.</param>
            <param name="offset">The offset in the array to write to.</param>
            <param name="count">The number of T element to read from the memory location</param>
            <returns>source pointer + sizeof(T) * count</returns>
        </member>
        <member name="M:SharpDX.Utilities.Write``1(System.IntPtr,``0@)">
            <summary>
            Writes the specified T data to a memory location.
            </summary>
            <typeparam name="T">Type of a data to write</typeparam>
            <param name="destination">Memory location to write to.</param>
            <param name="data">The data to write.</param>
            <returns>destination pointer + sizeof(T)</returns>
        </member>
        <member name="M:SharpDX.Utilities.Write``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Writes the specified array T[] data to a memory location.
            </summary>
            <typeparam name="T">Type of a data to write</typeparam>
            <param name="destination">Memory location to write to.</param>
            <param name="data">The array of T data to write.</param>
            <param name="offset">The offset in the array to read from.</param>
            <param name="count">The number of T element to write to the memory location</param>
            <returns>destination pointer + sizeof(T) * count</returns>
        </member>
        <member name="M:SharpDX.Utilities.ConvertToIntArray(System.Boolean[])">
            <summary>
            Converts to int array.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Utilities.ConvertToBoolArray(System.Int32[])">
            <summary>
            Converts to bool array.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Utilities.GetIUnknownForObject(System.Object)">
            <summary>
            Gets the IUnknown from object. Similar to <see cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)"/> but accept null object
            by returning an IntPtr.Zero IUnknown pointer.
            </summary>
            <param name="obj">The managed object.</param>
            <returns>an IUnknown pointer to a  managed object</returns>
        </member>
        <member name="M:SharpDX.Utilities.GetObjectForIUnknown(System.IntPtr)">
            <summary>
            Gets an object from an IUnknown pointer. Similar to <see cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)"/> but accept IntPtr.Zero
            by returning a null object.
            </summary>
            <param name="iunknownPtr">an IUnknown pointer to a  managed object</param>
            <returns>The managed object.</returns>
        </member>
        <member name="M:SharpDX.Utilities.ReadStream(System.IO.Stream)">
            <summary>
              Read stream to a byte[] buffer
            </summary>
            <param name = "stream">input stream</param>
            <returns>a byte[] buffer</returns>
        </member>
        <member name="M:SharpDX.Utilities.ReadStream(System.IO.Stream,System.Int32@)">
            <summary>
              Read stream to a byte[] buffer
            </summary>
            <param name = "stream">input stream</param>
            <param name = "readLength">length to read</param>
            <returns>a byte[] buffer</returns>
        </member>
        <member name="M:SharpDX.Utilities.LoadLibrary(System.String)">
            <summary>
            Loads a native library.
            </summary>
            <param name="dllName">Name of the DLL.</param>
            <exception cref="T:System.DllNotFoundException">If dll was not found</exception>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Utilities.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Gets the proc address of a dll.
            </summary>
            <param name="handle">The handle.</param>
            <param name="dllFunctionToImport">The DLL function to import.</param>
            <exception cref="T:System.EntryPointNotFoundException">If the function was not found</exception>
            <returns></returns>
        </member>
        <member name="T:SharpDX.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:SharpDX.Vector2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.Zero">
            <summary>
            A <see cref="T:SharpDX.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:SharpDX.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:SharpDX.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.One">
            <summary>
            A <see cref="T:SharpDX.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:SharpDX.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:SharpDX.Vector2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Add(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.Add(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Subtract(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.Subtract(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Multiply(SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector2.Multiply(SharpDX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Modulate(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SharpDX.Vector2.Modulate(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Divide(SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector2.Divide(SharpDX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Negate(SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SharpDX.Vector2.Negate(SharpDX.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Barycentric(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,System.Single,SharpDX.Vector2@)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SharpDX.Vector2.Barycentric(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SharpDX.Vector2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Clamp(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Vector2.Clamp(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Distance(SharpDX.Vector2@,SharpDX.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SharpDX.Vector2.DistanceSquared(SharpDX.Vector2@,SharpDX.Vector2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.Distance(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector2.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.DistanceSquared(SharpDX.Vector2@,SharpDX.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.Dot(SharpDX.Vector2@,SharpDX.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.Dot(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Normalize(SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SharpDX.Vector2.Normalize(SharpDX.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Lerp(SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.Lerp(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.SmoothStep(SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.SmoothStep(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Hermite(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector2.Hermite(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector2.CatmullRom(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector2.CatmullRom(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Max(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.Max(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Min(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector2.Min(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Reflect(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SharpDX.Vector2.Reflect(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SharpDX.Vector2.Orthogonalize(SharpDX.Vector2[],SharpDX.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector2.Orthonormalize(SharpDX.Vector2[],SharpDX.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2@,SharpDX.Quaternion@,SharpDX.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2,SharpDX.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2[],SharpDX.Quaternion@,SharpDX.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2,SharpDX.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector2.Transform(SharpDX.Vector2[],SharpDX.Matrix@,SharpDX.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector2.TransformCoordinate(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.TransformCoordinate(SharpDX.Vector2,SharpDX.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.TransformCoordinate(SharpDX.Vector2[],SharpDX.Matrix@,SharpDX.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.TransformNormal(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.TransformNormal(SharpDX.Vector2,SharpDX.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.TransformNormal(SharpDX.Vector2[],SharpDX.Matrix@,SharpDX.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector2.op_Addition(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_UnaryPlus(SharpDX.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Subtraction(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_UnaryNegation(SharpDX.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Multiply(System.Single,SharpDX.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Multiply(SharpDX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Division(SharpDX.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Equality(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Inequality(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Explicit(SharpDX.Vector2)~SharpDX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector2"/> to <see cref="T:SharpDX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector2.op_Explicit(SharpDX.Vector2)~SharpDX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector2"/> to <see cref="T:SharpDX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.Equals(SharpDX.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:SharpDX.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SharpDX.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="T:SharpDX.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:SharpDX.Vector3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.Zero">
            <summary>
            A <see cref="T:SharpDX.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:SharpDX.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:SharpDX.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:SharpDX.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.One">
            <summary>
            A <see cref="T:SharpDX.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.#ctor(SharpDX.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:SharpDX.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:SharpDX.Vector3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Add(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Add(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Subtract(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Subtract(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Multiply(SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.Multiply(SharpDX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Modulate(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.Modulate(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Divide(SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.Divide(SharpDX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Negate(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SharpDX.Vector3.Negate(SharpDX.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Barycentric(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single,System.Single,SharpDX.Vector3@)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SharpDX.Vector3.Barycentric(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SharpDX.Vector3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Clamp(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Vector3.Clamp(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Cross(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Cross(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Distance(SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SharpDX.Vector3.DistanceSquared(SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.Distance(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector3.DistanceSquared(SharpDX.Vector3,SharpDX.Vector3)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.DistanceSquared(SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.DistanceSquared(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.Dot(SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Dot(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Normalize(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SharpDX.Vector3.Normalize(SharpDX.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Lerp(SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.Lerp(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.SmoothStep(SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.SmoothStep(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Hermite(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector3.Hermite(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector3.CatmullRom(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector3.CatmullRom(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Max(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Max(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Min(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector3.Min(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Project(SharpDX.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@,SharpDX.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:SharpDX.Vector3.Project(SharpDX.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Unproject(SharpDX.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@,SharpDX.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:SharpDX.Vector3.Unproject(SharpDX.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Reflect(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SharpDX.Vector3.Reflect(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SharpDX.Vector3.Orthogonalize(SharpDX.Vector3[],SharpDX.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector3.Orthonormalize(SharpDX.Vector3[],SharpDX.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3,SharpDX.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3[],SharpDX.Quaternion@,SharpDX.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3,SharpDX.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector3.Transform(SharpDX.Vector3[],SharpDX.Matrix@,SharpDX.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector3.TransformCoordinate(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.TransformCoordinate(SharpDX.Vector3,SharpDX.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.TransformCoordinate(SharpDX.Vector3[],SharpDX.Matrix@,SharpDX.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.TransformNormal(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.TransformNormal(SharpDX.Vector3,SharpDX.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.TransformNormal(SharpDX.Vector3[],SharpDX.Matrix@,SharpDX.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector3.op_Addition(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_UnaryPlus(SharpDX.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Subtraction(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_UnaryNegation(SharpDX.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Multiply(System.Single,SharpDX.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Multiply(SharpDX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Division(SharpDX.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Equality(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Inequality(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Explicit(SharpDX.Vector3)~SharpDX.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector3"/> to <see cref="T:SharpDX.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector3.op_Explicit(SharpDX.Vector3)~SharpDX.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector3"/> to <see cref="T:SharpDX.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.Equals(SharpDX.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Vector3"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:SharpDX.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SharpDX.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:SharpDX.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:SharpDX.Vector4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.Zero">
            <summary>
            A <see cref="T:SharpDX.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:SharpDX.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:SharpDX.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:SharpDX.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:SharpDX.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.One">
            <summary>
            A <see cref="T:SharpDX.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:SharpDX.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SharpDX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.#ctor(SharpDX.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Vector4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SharpDX.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:SharpDX.Vector4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SharpDX.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Add(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.Add(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Subtract(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.Subtract(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Multiply(SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.Multiply(SharpDX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Modulate(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.Modulate(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Divide(SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.Divide(SharpDX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Negate(SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SharpDX.Vector4.Negate(SharpDX.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Barycentric(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,System.Single,System.Single,SharpDX.Vector4@)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SharpDX.Vector4.Barycentric(SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SharpDX.Vector4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Clamp(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SharpDX.Vector4.Clamp(SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Distance(SharpDX.Vector4@,SharpDX.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SharpDX.Vector4.DistanceSquared(SharpDX.Vector4@,SharpDX.Vector4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.Distance(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SharpDX.Vector4.DistanceSquared(SharpDX.Vector4,SharpDX.Vector4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.DistanceSquared(SharpDX.Vector4@,SharpDX.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.DistanceSquared(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.Dot(SharpDX.Vector4@,SharpDX.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.Dot(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Normalize(SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SharpDX.Vector4.Normalize(SharpDX.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Lerp(SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.Lerp(SharpDX.Vector4,SharpDX.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SharpDX.Vector4.SmoothStep(SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.SmoothStep(SharpDX.Vector4,SharpDX.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Hermite(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector4.Hermite(SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector4.CatmullRom(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SharpDX.Vector4.CatmullRom(SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4,SharpDX.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Max(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.Max(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Min(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SharpDX.Vector4.Min(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Orthogonalize(SharpDX.Vector4[],SharpDX.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector4.Orthonormalize(SharpDX.Vector4[],SharpDX.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4@,SharpDX.Quaternion@,SharpDX.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4,SharpDX.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4[],SharpDX.Quaternion@,SharpDX.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4@,SharpDX.Matrix@,SharpDX.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SharpDX.Vector4"/>.</param>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4,SharpDX.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SharpDX.Vector4"/>.</returns>
        </member>
        <member name="M:SharpDX.Vector4.Transform(SharpDX.Vector4[],SharpDX.Matrix@,SharpDX.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:SharpDX.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SharpDX.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SharpDX.Vector4.op_Addition(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_UnaryPlus(SharpDX.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Subtraction(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_UnaryNegation(SharpDX.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Multiply(System.Single,SharpDX.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Multiply(SharpDX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Division(SharpDX.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Equality(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Inequality(SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Explicit(SharpDX.Vector4)~SharpDX.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector4"/> to <see cref="T:SharpDX.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector4.op_Explicit(SharpDX.Vector4)~SharpDX.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Vector4"/> to <see cref="T:SharpDX.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharpDX.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.Equals(SharpDX.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SharpDX.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SharpDX.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SharpDX.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SharpDX.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SharpDX.Windows.RenderLoop">
            <summary>
            RenderLoop provides a rendering loop infrastructure.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderLoop.Run(System.Windows.Forms.ApplicationContext,SharpDX.Windows.RenderLoop.RenderCallback)">
            <summary>
            Runs the specified main loop in the specified context.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderLoop.Run(System.Windows.Forms.Form,SharpDX.Windows.RenderLoop.RenderCallback)">
            <summary>
            Runs the specified main loop for the specified windows form.
            </summary>
            <param name="form">The form.</param>
            <param name="renderCallback">The rendering callback.</param>
        </member>
        <member name="P:SharpDX.Windows.RenderLoop.IsIdle">
            <summary>
            Gets a value indicating whether this instance is application idle.
            </summary>
            <value>
            	<c>true</c> if this instance is application idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDX.Windows.RenderLoop.RenderCallback">
            <summary>
            Delegate for the rendering loop.
            </summary>
        </member>
        <member name="T:SharpDX.Windows.RenderLoop.ProxyNativeWindow">
            <summary>
            ProxyNativeWindow, used only to detect if the original window is destroyed
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderLoop.ProxyNativeWindow.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Windows.RenderLoop.ProxyNativeWindow"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderLoop.ProxyNativeWindow.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Private WindowProc in order to handle NCDestroy message
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderLoop.ProxyNativeWindow.Run(SharpDX.Windows.RenderLoop.RenderCallback)">
            <summary>
            Private rendering loop
            </summary>
        </member>
        <member name="T:SharpDX.Windows.RenderControl">
            <summary>
            A Renderable UserControl.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Windows.RenderForm"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:SharpDX.Windows.RenderForm">
            <summary>
            Default Rendering Form.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Windows.RenderForm"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Windows.RenderForm"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnResizeBegin(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.ResizeBegin"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnResizeEnd(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.ResizeEnd"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnPauseRendering(System.EventArgs)">
            <summary>
            Raises the Pause Rendering event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnResumeRendering(System.EventArgs)">
            <summary>
            Raises the Resume Rendering event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnUserResized(System.EventArgs)">
            <summary>
            Raises the User resized event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnAppActivated(System.EventArgs)">
            <summary>
            Raises the On App Activated event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnAppDeactivated(System.EventArgs)">
            <summary>
            Raises the App Deactivated event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnSystemSuspend(System.EventArgs)">
            <summary>
            Raises the System Suspend event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnSystemResume(System.EventArgs)">
            <summary>
            Raises the System Resume event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.OnScreensaver(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Screensaver"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override windows message loop handling.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
        </member>
        <member name="M:SharpDX.Windows.RenderForm.UpdateScreen">
            <summary>
            Updates the screen.
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.AppActivated">
            <summary>
            Occurs when [app activated].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.AppDeactivated">
            <summary>
            Occurs when [app deactivated].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.MonitorChanged">
            <summary>
            Occurs when [monitor changed].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.PauseRendering">
            <summary>
            Occurs when [pause rendering].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.ResumeRendering">
            <summary>
            Occurs when [resume rendering].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.Screensaver">
            <summary>
            Occurs when [screensaver].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.SystemResume">
            <summary>
            Occurs when [system resume].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.SystemSuspend">
            <summary>
            Occurs when [system suspend].
            </summary>
        </member>
        <member name="E:SharpDX.Windows.RenderForm.UserResized">
            <summary>
            Occurs when [user resized].
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct3D11</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Direct3D11.BlendState">
            <summary>	
            This blend-state interface accesses blending state for the output-merger stage.	
            </summary>	
            <unmanaged>ID3D11BlendState</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceChild">
            <summary>	
            A device-child interface accesses data used by a device.	
            </summary>	
            <unmanaged>ID3D11DeviceChild</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceChild.GetDevice(SharpDX.Direct3D11.Device@)">
            <summary>	
            Get a reference to the device that created this interface.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one, so be sure to call ::release() on the returned reference(s) before they are freed or else you will have a memory leak. 	
            </remarks>	
            <param name="deviceRef">Address of a reference to a device (see <see cref="T:SharpDX.Direct3D11.Device"/>). </param>
            <unmanaged>void ID3D11DeviceChild::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            Get application-defined data from a device child.	
            </summary>	
            <remarks>	
            The data stored in the device child is set by calling <see cref="M:SharpDX.Direct3D11.DeviceChild.SetPrivateData(System.Guid,System.Int32,System.IntPtr)"/>. 	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSizeRef">A reference to a variable that on input contains the size, in bytes, of the buffer that pData points to, and on output contains the size, in bytes, of the amount of data that GetPrivateData retrieved. </param>
            <param name="dataRef">void A reference to a buffer that GetPrivateData fills with data from the device child if pDataSize points to a value that specifies a buffer large enough to hold the data. </param>
            <returns>This method returns one of the codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11DeviceChild::GetPrivateData([In] GUID* guid,[InOut] int* pDataSize,[Out, Buffer, Optional] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceChild.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            Set application-defined data to a device child and associate that data with an application-defined guid.	
            </summary>	
            <remarks>	
            The data stored in the device child with this method can be retrieved with <see cref="M:SharpDX.Direct3D11.DeviceChild.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. The {{debug layer}} reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the SetPrivateData method and the WKPDID_D3DDebugObjectName GUID that is in D3Dcommon.h. For example, to give pContext a friendly name of My name, use the following code: 	
            <code> static const char c_szName[] = "My name";	
            hr = pContext-&gt;SetPrivateData( WKPDID_D3DDebugObjectName, sizeof( c_szName ) - 1, c_szName ); </code>	
            	
             	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSize">Size of the data. </param>
            <param name="dataRef">void Pointer to the data to be stored with this device child. If pData is NULL, DataSize must also be 0, and any data previously associated with the specified guid will be destroyed. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11DeviceChild::SetPrivateData([In] GUID* guid,[In] int DataSize,[In, Buffer, Optional] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceChild.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.	
            </summary>	
            <remarks>	
            When this method is called ::addref() will be called on the IUnknown-derived interface, and when the device child is detroyed ::release() will be called on the IUnknown-derived interface. 	
            </remarks>	
            <param name="guid">Guid associated with the interface. </param>
            <param name="dataRef">IUnknown Pointer to an IUnknown-derived interface to be associated with the device child. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11DeviceChild::SetPrivateDataInterface([In] GUID* guid,[In, Optional] const IUnknown* pData)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceChild.Device">
            <summary>	
            Get a reference to the device that created this interface.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one, so be sure to call ::release() on the returned reference(s) before they are freed or else you will have a memory leak. 	
            </remarks>	
            <unmanaged>void ID3D11DeviceChild::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.BlendState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.BlendStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.BlendState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.BlendState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.BlendStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.BlendState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.BlendState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.BlendState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.BlendState.GetDescription(SharpDX.Direct3D11.BlendStateDescription@)">
            <summary>	
            Get the blend state.	
            </summary>	
            <param name="descRef">A reference to the blend state (see <see cref="T:SharpDX.Direct3D11.BlendStateDescription"/>). </param>
            <unmanaged>void ID3D11BlendState::GetDesc([Out] D3D11_BLEND_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.BlendState.Description">
            <summary>	
            Get the blend state.	
            </summary>	
            <unmanaged>void ID3D11BlendState::GetDesc([Out] D3D11_BLEND_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Buffer">
            <summary>	
            A buffer interface accesses a buffer resource, which is unstructured memory. Buffers typically store vertex or index data.	
            </summary>	
            <unmanaged>ID3D11Buffer</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Resource">
            <summary>	
            A resource interface provides common actions on all resources.	
            </summary>	
            <unmanaged>ID3D11Resource</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumMipLevels">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.ResourceSizeInMegabytes">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTexture2DArraySize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTexture2DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.Direct3D11.Resource.MaximumTextureCubeSize">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.GetDimension(SharpDX.Direct3D11.ResourceDimension@)">
            <summary>	
            Get the type of the resource.	
            </summary>	
            <param name="resourceDimensionRef">Pointer to the resource type (see <see cref="T:SharpDX.Direct3D11.ResourceDimension"/>). </param>
            <unmanaged>void ID3D11Resource::GetType([Out] D3D11_RESOURCE_DIMENSION* pResourceDimension)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            Set the eviction priority of a resource.	
            </summary>	
            <remarks>	
            Resource priorities determine which resource to evict from video memory when the system has run out of video memory. The resource will not be lost; it will be removed from video memory and placed into system memory, or possibly placed onto the hard drive. The resource will be loaded back into video memory when it is required. A resource that is set to the maximum priority, DXGI_RESOURCE_PRIORITY_MAXIMUM, is only evicted if there is no other way of resolving the incoming memory request. The Windows Display Driver Model (WDDM) tries to split an incoming memory request to its minimum size and evict lower-priority resources before evicting a resource with maximum priority. Changing the priorities of resources should be done carefully. The wrong eviction priorities could be a detriment to performance rather than an improvement.  	
            </remarks>	
            <param name="evictionPriority">Eviction priority for the resource, which is one of the following values:  DXGI_RESOURCE_PRIORITY_MINIMUM DXGI_RESOURCE_PRIORITY_LOW DXGI_RESOURCE_PRIORITY_NORMAL DXGI_RESOURCE_PRIORITY_HIGH DXGI_RESOURCE_PRIORITY_MAXIMUM  </param>
            <unmanaged>void ID3D11Resource::SetEvictionPriority([In] int EvictionPriority)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.GetEvictionPriority">
            <summary>	
            Get the eviction priority of a resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <returns>One of the following values, which specifies the eviction priority for the resource:  DXGI_RESOURCE_PRIORITY_MINIMUM DXGI_RESOURCE_PRIORITY_LOW DXGI_RESOURCE_PRIORITY_NORMAL DXGI_RESOURCE_PRIORITY_HIGH DXGI_RESOURCE_PRIORITY_MAXIMUM  </returns>
            <unmanaged>int ID3D11Resource::GetEvictionPriority()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromSwapChain``1(SharpDX.DXGI.SwapChain,System.Int32)">
            <summary>
              Gets a swap chain back buffer.
            </summary>
            <typeparam name = "T">The type of the buffer.</typeparam>
            <param name = "swapChain">The swap chain to get the buffer from.</param>
            <param name = "index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromFile``1(SharpDX.Direct3D11.Device,System.String)">
            <summary>
              Loads a texture from an image file.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "fileName">Path to the file on disk.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromFile``1(SharpDX.Direct3D11.Device,System.String,SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
              Loads a texture from an image file.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "fileName">Path to the file on disk.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromMemory``1(SharpDX.Direct3D11.Device,System.Byte[])">
            <summary>
              Loads a texture from an image in memory.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "memory">Array of memory containing the image data to load.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromMemory``1(SharpDX.Direct3D11.Device,System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
              Loads a texture from an image in memory.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "memory">Array of memory containing the image data to load.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromStream``1(SharpDX.Direct3D11.Device,System.IO.Stream,System.Int32)">
            <summary>
              Loads a texture from a stream of data.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "stream">A stream containing the image data to load.</param>
            <param name = "sizeInBytes">Size of the image to load.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.FromStream``1(SharpDX.Direct3D11.Device,System.IO.Stream,System.Int32,SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
              Loads a texture from a stream of data.
            </summary>
            <param name = "device">The device used to load the texture.</param>
            <param name = "stream">A stream containing the image data to load.</param>
            <param name = "sizeInBytes">Size of the image to load.</param>
            <param name = "loadInfo">Specifies information used to load the texture.</param>
            <returns>The loaded texture object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.ToFile``1(SharpDX.Direct3D11.DeviceContext,``0,SharpDX.Direct3D11.ImageFileFormat,System.String)">
            <summary>
              Saves a texture to file.
            </summary>
            <param name = "context">The device used to save the texture.</param>
            <param name = "texture">The texture to save.</param>
            <param name = "format">The format the texture will be saved as.</param>
            <param name = "fileName">Name of the destination output file where the texture will be saved.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.ToStream``1(SharpDX.Direct3D11.DeviceContext,``0,SharpDX.Direct3D11.ImageFileFormat,System.IO.Stream)">
            <summary>
              Saves a texture to a stream.
            </summary>
            <param name = "context">The device used to save the texture.</param>
            <param name = "texture">The texture to save.</param>
            <param name = "format">The format the texture will be saved as.</param>
            <param name = "stream">Destination memory stream where the image will be saved.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Resource.LoadTextureFromTexture(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.TextureLoadInformation)">
            <summary>	
            Load a texture from a texture.	
            </summary>
            <param name="context">A reference to a valid <see cref="T:SharpDX.Direct3D11.DeviceContext"/></param>
            <param name="source">Pointer to the source texture. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="destination">Pointer to the destination texture. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="loadInformation">Pointer to texture loading parameters. See <see cref="T:SharpDX.Direct3D11.TextureLoadInformation"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX10LoadTextureFromTexture([None] ID3D10Resource* pSrcTexture,[None] D3DX10_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D10Resource* pDstTexture)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Resource.Dimension">
            <summary>	
            Get the type of the resource.	
            </summary>	
            <unmanaged>void ID3D11Resource::GetType([Out] D3D11_RESOURCE_DIMENSION* pResourceDimension)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Resource.EvictionPriority">
            <summary>	
            Get the eviction priority of a resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <unmanaged>int ID3D11Resource::GetEvictionPriority()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.BufferDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.#ctor(SharpDX.Direct3D11.Device,SharpDX.DataStream,SharpDX.Direct3D11.BufferDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "description">The description of the buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.#ctor(SharpDX.Direct3D11.Device,System.Int32,SharpDX.Direct3D11.ResourceUsage,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "optionFlags">Miscellaneous resource options.</param>
            <param name = "structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.#ctor(SharpDX.Direct3D11.Device,SharpDX.DataStream,System.Int32,SharpDX.Direct3D11.ResourceUsage,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Buffer" /> class.
            </summary>
            <param name = "device">The device with which to associate the buffer.</param>
            <param name = "data">Initial data used to initialize the buffer.</param>
            <param name = "sizeInBytes">The size, in bytes, of the buffer.</param>
            <param name = "usage">The usage pattern for the buffer.</param>
            <param name = "bindFlags">Flags specifying how the buffer will be bound to the pipeline.</param>
            <param name = "accessFlags">Flags specifying how the buffer will be accessible from the CPU.</param>
            <param name = "optionFlags">Miscellaneous resource options.</param>
            <param name = "structureByteStride">The size (in bytes) of the structure element for structured buffers.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Buffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Buffer.GetDescription(SharpDX.Direct3D11.BufferDescription@)">
            <summary>	
            Get the properties of a buffer resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D11.BufferDescription"/>) filled in by the method. </param>
            <unmanaged>void ID3D11Buffer::GetDesc([Out] D3D11_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Buffer.Description">
            <summary>	
            Get the properties of a buffer resource.	
            </summary>	
            <unmanaged>void ID3D11Buffer::GetDesc([Out] D3D11_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.BufferDescription">
            <summary>	
            Describes a buffer resource.	
            </summary>	
            <remarks>	
            This structure is used by <see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/> to create buffer resources. In addition to this structure, there is also a derived structure in D3D11.h (CD3D11_BUFFER_DESC) which behaves like an inherited class to help create a buffer description. If the bind flag is D3D11_BIND_CONSTANT_BUFFER then the ByteWidth value must be in multiples of 16, and less than or equal to D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT. 	
            </remarks>	
            <unmanaged>D3D11_BUFFER_DESC</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.BufferDescription.#ctor(System.Int32,SharpDX.Direct3D11.ResourceUsage,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="bindFlags">The bind flags.</param>
            <param name="cpuAccessFlags">The cpu access flags.</param>
            <param name="optionFlags">The option flags.</param>
            <param name="structureByteStride">The structure byte stride.</param>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.SizeInBytes">
            <summary>	
            Size of the buffer in bytes. 	
            </summary>	
            <unmanaged>int ByteWidth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.Usage">
            <summary>	
            Identify how the buffer is expected to be read from and written to. Frequency of update is a key factor. The most common value is typically D3D11_USAGE_DEFAULT; see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.BindFlags">
            <summary>	
            Identify how the buffer will be bound to the pipeline. Flags (see <see cref="T:SharpDX.Direct3D11.BindFlags"/>) can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.CpuAccessFlags">
            <summary>	
            CPU access flags (see <see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/>) or 0 if no CPU access is necessary. Flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.OptionFlags">
            <summary>	
            Miscellaneous flags (see <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/>) or 0 if unused. Flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BufferDescription.StructureByteStride">
            <summary>	
            The size of the structure (in bytes) when it represents a structured buffer. 	
            </summary>	
            <unmanaged>int StructureByteStride</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ClassInstance">
            <summary>	
            This interface encapsulates an HLSL class.	
            </summary>	
            <unmanaged>ID3D11ClassInstance</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.#ctor(SharpDX.Direct3D11.ClassLinkage,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Initializes a class-instance object that represents an HLSL class instance.	
            </summary>	
            <remarks>	
            Instances can be created (or gotten) before or after a shader is created. Use the same shader linkage object to acquire a class instance and create the shader the instance is going to be used in. For more information about using the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <param name="linkage">An instance of <see cref="P:SharpDX.Direct3D11.ClassInstance.ClassLinkage"/>.</param>
            <param name="classTypeName">The type name of a class to initialize. </param>
            <param name="constantBufferOffset">Identifies the constant buffer that contains the class data. </param>
            <param name="constantVectorOffset">The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset. </param>
            <param name="textureOffset">The texture slot for the first texture; there may be multiple textures following the offset. </param>
            <param name="samplerOffset">The sampler slot for the first sampler; there may be multiple samplers following the offset. </param>
            <returns>Returns S_OK if successful; otherwise, returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ClassLinkage::CreateClassInstance([In] const char* pClassTypeName,[In] int ConstantBufferOffset,[In] int ConstantVectorOffset,[In] int TextureOffset,[In] int SamplerOffset,[Out] ID3D11ClassInstance** ppInstance)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.GetClassLinkage(SharpDX.Direct3D11.ClassLinkage@)">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> object associated with the current HLSL class.	
            </summary>	
            <remarks>	
            For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <param name="linkageRef">A reference to a <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> interface reference. </param>
            <unmanaged>void ID3D11ClassInstance::GetClassLinkage([Out] ID3D11ClassLinkage** ppLinkage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.GetDescription(SharpDX.Direct3D11.ClassInstanceDescription@)">
            <summary>	
            Gets a description of the current HLSL class.	
            </summary>	
            <remarks>	
            For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. An instance is not restricted to being used for a single type in a single shader. An instance is flexible and can be used for any shader that used the same type name or instance name when the instance was generated.  A created instance will work for any shader that contains a type of the same type name. For instance, a class instance created with the type name DefaultShader would work in any shader that contained a type DefaultShader even though several shaders could describe a different type. A gotten instance maps directly to an instance name/index in a shader.  A class instance aquired using GetClassInstance will work for any shader that contains a class instance of the name used to generate the runtime instance, the instance does not have to be the same type in all of the shaders it's used in.  An instance does not replace the importance of reflection for a particular shader since a gotten instance will not know its slot location and a created instance only specifies a type name. 	
            </remarks>	
            <param name="descRef">A reference to a <see cref="T:SharpDX.Direct3D11.ClassInstanceDescription"/> structure that describes the current HLSL class. </param>
            <unmanaged>void ID3D11ClassInstance::GetDesc([Out] D3D11_CLASS_INSTANCE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.GetInstanceName(System.IntPtr,SharpDX.Size@)">
            <summary>	
            Gets the instance name of the current HLSL class.	
            </summary>	
            <remarks>	
            GetInstanceName will return a valid name only for instances acquired using <see cref="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)"/>. For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <param name="instanceNameRef">LPWSTR The instance name of the current HLSL class. </param>
            <param name="bufferLengthRef">The length of the pInstanceName parameter. </param>
            <unmanaged>void ID3D11ClassInstance::GetInstanceName([Out, Buffer, Optional] char* pInstanceName,[InOut] SIZE_T* pBufferLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassInstance.GetTypeName(System.IntPtr,SharpDX.Size@)">
            <summary>	
            Gets the type of the current HLSL class.	
            </summary>	
            <remarks>	
            GetTypeName will return a valid name only for instances acquired using <see cref="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)"/>. For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <param name="typeNameRef">Type of the current HLSL class. </param>
            <param name="bufferLengthRef">The length of the pTypeName parameter. </param>
            <unmanaged>void ID3D11ClassInstance::GetTypeName([Out, Buffer, Optional] char* pTypeName,[InOut] SIZE_T* pBufferLength)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ClassInstance.InstanceName">
            <summary>
              Gets the instance name of the current HLSL class.
            </summary>
            <remarks>
              GetInstanceName will return a valid name only for instances acquired using <see cref="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)"/>.For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}.
            </remarks>
            <returns>The instance name of the current HLSL class.</returns>
            <unmanaged>void GetInstanceName([Out, Buffer, Optional] LPSTR pInstanceName,[InOut] SIZE_T* pBufferLength)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ClassInstance.TypeName">
            <summary>
              Gets the type of the current HLSL class.
            </summary>
            <remarks>
              GetTypeName will return a valid name only for instances acquired using <see cref="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)"/>.For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}.
            </remarks>
            <returns>Type of the current HLSL class.</returns>
            <unmanaged>void GetTypeName([Out, Buffer, Optional] LPSTR pTypeName,[InOut] SIZE_T* pBufferLength)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ClassInstance.ClassLinkage">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> object associated with the current HLSL class.	
            </summary>	
            <remarks>	
            For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <unmanaged>void ID3D11ClassInstance::GetClassLinkage([Out] ID3D11ClassLinkage** ppLinkage)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ClassInstance.Description">
            <summary>	
            Gets a description of the current HLSL class.	
            </summary>	
            <remarks>	
            For more information about using the <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface, see {{Dynamic Linking}}. An instance is not restricted to being used for a single type in a single shader. An instance is flexible and can be used for any shader that used the same type name or instance name when the instance was generated.  A created instance will work for any shader that contains a type of the same type name. For instance, a class instance created with the type name DefaultShader would work in any shader that contained a type DefaultShader even though several shaders could describe a different type. A gotten instance maps directly to an instance name/index in a shader.  A class instance aquired using GetClassInstance will work for any shader that contains a class instance of the name used to generate the runtime instance, the instance does not have to be the same type in all of the shaders it's used in.  An instance does not replace the importance of reflection for a particular shader since a gotten instance will not know its slot location and a created instance only specifies a type name. 	
            </remarks>	
            <unmanaged>void ID3D11ClassInstance::GetDesc([Out] D3D11_CLASS_INSTANCE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ClassLinkage">
            <summary>	
            This interface encapsulates an HLSL dynamic linkage.	
            </summary>	
            <unmanaged>ID3D11ClassLinkage</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassLinkage.#ctor(SharpDX.Direct3D11.Device)">
            <summary>
              Create a new instance of <see cref = "T:SharpDX.Direct3D11.ClassLinkage" />.
            </summary>
            <param name = "device"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassLinkage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)">
            <summary>	
            Gets the class-instance object that represents the specified HLSL class.	
            </summary>	
            <remarks>	
            For more information about using the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> interface, see {{Dynamic Linking}}. A class instance must have at least 1 data member in order to be available for the runtime to use with ID3D11ClassLinkage::GetClassInstance. Any instance with no members will be optimized out of a compiled shader blob as a zero-sized object. If you have a class with no data members, use <see cref="M:SharpDX.Direct3D11.ClassLinkage.CreateClassInstance(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.ClassInstance@)"/> instead. 	
            </remarks>	
            <param name="classInstanceNameRef">LPCWSTR The name of a class for which to get the class instance. </param>
            <param name="instanceIndex">The index of the class instance. </param>
            <returns>The address of a reference to an <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface to initialize. </returns>
            <unmanaged>HRESULT ID3D11ClassLinkage::GetClassInstance([In] const char* pClassInstanceName,[In] int InstanceIndex,[Out] ID3D11ClassInstance** ppInstance)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ClassLinkage.CreateClassInstance(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.ClassInstance@)">
            <summary>	
            Initializes a class-instance object that represents an HLSL class instance.	
            </summary>	
            <remarks>	
            Instances can be created (or gotten) before or after a shader is created. Use the same shader linkage object to acquire a class instance and create the shader the instance is going to be used in. For more information about using the <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> interface, see {{Dynamic Linking}}. 	
            </remarks>	
            <param name="classTypeNameRef">The type name of a class to initialize. </param>
            <param name="constantBufferOffset">Identifies the constant buffer that contains the class data. </param>
            <param name="constantVectorOffset">The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset. </param>
            <param name="textureOffset">The texture slot for the first texture; there may be multiple textures following the offset. </param>
            <param name="samplerOffset">The sampler slot for the first sampler; there may be multiple samplers following the offset. </param>
            <param name="instanceRef">The address of a reference to an <see cref="T:SharpDX.Direct3D11.ClassInstance"/> interface to initialize. </param>
            <returns>Returns S_OK if successful; otherwise, returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ClassLinkage::CreateClassInstance([In] const char* pClassTypeName,[In] int ConstantBufferOffset,[In] int ConstantVectorOffset,[In] int TextureOffset,[In] int SamplerOffset,[Out] ID3D11ClassInstance** ppInstance)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ComputeShader">
            <summary>	
            A compute-shader interface manages an executable program (a compute shader) that controls the compute-shader stage.	
            </summary>	
            <unmanaged>ID3D11ComputeShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ComputeShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.ComputeShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.ComputeShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.ComputeShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.ComputeShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.ComputeShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.Direct3D11.Counter">
            <summary>	
            This interface encapsulates methods for measuring GPU performance.	
            </summary>	
            <unmanaged>ID3D11Counter</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Asynchronous">
            <summary>	
            This interface encapsulates methods for retrieving data from the GPU asynchronously.	
            </summary>	
            <unmanaged>ID3D11Asynchronous</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Asynchronous.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Asynchronous"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Asynchronous.GetDataSize">
            <summary>	
            Get the size of the data (in bytes) that is output when calling <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/>.	
            </summary>	
            <returns>Size of the data (in bytes) that is output when calling GetData. </returns>
            <unmanaged>int ID3D11Asynchronous::GetDataSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Asynchronous.DataSize">
            <summary>	
            Get the size of the data (in bytes) that is output when calling <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/>.	
            </summary>	
            <unmanaged>int ID3D11Asynchronous::GetDataSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Counter.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.CounterDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.Counter" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The counter description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Counter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Counter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Counter.GetDescription(SharpDX.Direct3D11.CounterDescription@)">
            <summary>	
            Get a counter description.	
            </summary>	
            <param name="descRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D11.CounterDescription"/>). </param>
            <unmanaged>void ID3D11Counter::GetDesc([Out] D3D11_COUNTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Counter.Description">
            <summary>	
            Get a counter description.	
            </summary>	
            <unmanaged>void ID3D11Counter::GetDesc([Out] D3D11_COUNTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CounterMetadata">
            <summary>
            Counter metadata that contains the type, name, units of measure, and a description of an existing counter.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.CounterMetadata.Type">
            <summary>
            Gets the data type of a counter (see <see cref="T:SharpDX.Direct3D11.CounterType"/>).
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.CounterMetadata.HardwareCounterCount">
            <summary>
            Gets the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.
            </summary>
            <value>The hardware counter count.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.CounterMetadata.Name">
            <summary>
            Gets a brief name for the counter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.CounterMetadata.Units">
            <summary>
            Gets the units a counter measures.
            </summary>
            <value>The units.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.CounterMetadata.Description">
            <summary>
            Gets a description of the counter.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:SharpDX.Direct3D11.Debug">
            <summary>	
            A debug interface controls debug settings, validates pipeline state and can only be used if the debug layer is turned on.	
            </summary>	
            <unmanaged>ID3D11Debug</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.#ctor(SharpDX.Direct3D11.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Debug"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Debug"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.SetFeatureFlags(System.Int32)">
            <summary>	
            Set a bitfield of flags that will turn debug features on and off.	
            </summary>	
            <remarks>	
            Setting a feature-mask flag will cause a rendering-operation method (listed below) to do some extra task when called. The possible feature flags are:  D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OPApplication will wait for the GPU to finish processing the rendering operation before continuing. D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OPRuntime will additionally call <see cref="M:SharpDX.Direct3D11.DeviceContext.Flush"/>. D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OPRuntime will call <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>. Presentation of render buffers will occur according to the settings established by prior calls to <see cref="M:SharpDX.Direct3D11.Debug.SetSwapChain(SharpDX.DXGI.SwapChain)"/> and <see cref="M:SharpDX.Direct3D11.Debug.SetPresentDelay(System.Int32)"/>.  ? These feature-mask flags apply to the following rendering-operation methods:   <see cref="M:SharpDX.Direct3D11.DeviceContext.Draw(System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.DrawIndexed(System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.DrawAuto"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.ClearRenderTargetView(SharpDX.Direct3D11.RenderTargetView,SharpDX.Color4)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.ClearDepthStencilView(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.DepthStencilClearFlags,System.Single,System.Byte)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D11.Resource,System.Int32)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.GenerateMips(SharpDX.Direct3D11.ShaderResourceView)"/>   <see cref="M:SharpDX.Direct3D11.DeviceContext.ResolveSubresource_(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,SharpDX.DXGI.Format)"/>   	
            </remarks>	
            <param name="mask">Feature-mask flags bitwise ORed together. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off. See remarks for a list of flags. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::SetFeatureMask([None] int Mask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.GetFeatureFlags">
            <summary>	
            Get a bitfield of flags that indicates which debug features are on or off.	
            </summary>	
            <returns>Mask of feature-mask flags bitwise ORed together. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off. See <see cref="M:SharpDX.Direct3D11.Debug.SetFeatureFlags(System.Int32)"/> for a list of possible feature-mask flags. </returns>
            <unmanaged>int ID3D11Debug::GetFeatureMask()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.SetPresentDelay(System.Int32)">
            <summary>	
            Set the number of milliseconds to sleep after <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> is called.	
            </summary>	
            <remarks>	
            The application will only sleep if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is a set in the {{feature mask}}. If that flag is not set the number of milliseconds is set but ignored and the application does not sleep. 10ms is used as a default value if this method is never called. 	
            </remarks>	
            <param name="milliseconds">Number of milliseconds to sleep after Present is called. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::SetPresentPerRenderOpDelay([None] int Milliseconds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.GetPresentDelay">
            <summary>	
            Get the number of milliseconds to sleep after <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> is called.	
            </summary>	
            <remarks>	
            Value is set with <see cref="M:SharpDX.Direct3D11.Debug.SetPresentDelay(System.Int32)"/>. 	
            </remarks>	
            <returns>Number of milliseconds to sleep after Present is called. </returns>
            <unmanaged>int ID3D11Debug::GetPresentPerRenderOpDelay()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.SetSwapChain(SharpDX.DXGI.SwapChain)">
            <summary>	
            Set a swap chain that the runtime will use for automatically calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>.	
            </summary>	
            <remarks>	
            The swap chain set by this method will only be used if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <param name="swapChainRef">Swap chain that the runtime will use for automatically calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>; must have been created with the DXGI_SWAP_EFFECT_SEQUENTIAL swap-effect flag. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::SetSwapChain([In, Optional] IDXGISwapChain* pSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.GetSwapChain(SharpDX.DXGI.SwapChain@)">
            <summary>	
            Get the swap chain that the runtime will use for automatically calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>.	
            </summary>	
            <remarks>	
            The swap chain retrieved by this method will only be used if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <param name="swapChainRef">Swap chain that the runtime will use for automatically calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::GetSwapChain([Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.ValidateContext(SharpDX.Direct3D11.DeviceContext)">
            <summary>	
            Check to see if the draw pipeline state is valid.	
            </summary>	
            <remarks>	
            Use validate prior to calling a draw method (for example, <see cref="M:SharpDX.Direct3D11.DeviceContext.Draw(System.Int32,System.Int32)"/>); validation requires the debug layer. 	
            </remarks>	
            <param name="contextRef">A reference to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/>, that represents a device context. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::ValidateContext([In] ID3D11DeviceContext* pContext)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.ReportLiveDeviceObjects(SharpDX.Direct3D11.ReportingLevel)">
            <summary>	
            Report information about a device object's lifetime.	
            </summary>	
            <remarks>	
            ReportLiveDeviceObjects uses the value in  Flags to determine the amount of information to report about a device object's lifetime. 	
            </remarks>	
            <param name="flags">A value from the <see cref="T:SharpDX.Direct3D11.ReportingLevel"/> enumeration. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::ReportLiveDeviceObjects([None] D3D11_RLDO_FLAGS Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Debug.ValidateContextForDispatch(SharpDX.Direct3D11.DeviceContext)">
            <summary>	
            Verifies whether the dispatch pipeline state is valid.	
            </summary>	
            <remarks>	
            Use this method before you call a dispatch method (for example, <see cref="M:SharpDX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)"/>). Validation requires the debug layer. 	
            </remarks>	
            <param name="contextRef">A reference to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> that represents a device context. </param>
            <returns>This method returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Debug::ValidateContextForDispatch([In] ID3D11DeviceContext* pContext)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Debug.FeatureFlags">
            <summary>
            Gets or sets the feature flags that indicates which debug features are on or off.	
            </summary>
            <value>The feature flags.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.Debug.PresentDelay">
            <summary>	
            Get the number of milliseconds to sleep after <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> is called.	
            </summary>	
            <remarks>	
            Value is set with <see cref="M:SharpDX.Direct3D11.Debug.SetPresentDelay(System.Int32)"/>. 	
            </remarks>	
            <unmanaged>int ID3D11Debug::GetPresentPerRenderOpDelay()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Debug.SwapChain">
            <summary>	
            Get the swap chain that the runtime will use for automatically calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>.	
            </summary>	
            <remarks>	
            The swap chain retrieved by this method will only be used if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the {{feature mask}}. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11Debug::GetSwapChain([Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilState">
            <summary>	
            A depth-stencil-state interface accesses depth-stencil state which sets up the depth-stencil test for the output-merger stage.	
            </summary>	
            <unmanaged>ID3D11DepthStencilState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.DepthStencilStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.DepthStencilState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.DepthStencilStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.DepthStencilState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DepthStencilState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilState.GetDescription(SharpDX.Direct3D11.DepthStencilStateDescription@)">
            <summary>	
            Get the depth-stencil state.	
            </summary>	
            <param name="descRef">A reference to the depth-stencil state (see <see cref="T:SharpDX.Direct3D11.DepthStencilStateDescription"/>). </param>
            <unmanaged>void ID3D11DepthStencilState::GetDesc([Out] D3D11_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DepthStencilState.Description">
            <summary>	
            Get the depth-stencil state.	
            </summary>	
            <unmanaged>void ID3D11DepthStencilState::GetDesc([Out] D3D11_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilView">
            <summary>	
            A depth-stencil-view interface accesses a texture resource during depth-stencil testing.	
            </summary>	
            <unmanaged>ID3D11DepthStencilView</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ResourceView">
            <summary>	
            A view interface specifies the parts of a resource the pipeline can access during rendering.	
            </summary>	
            <unmanaged>ID3D11View</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.ResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.ResourceView.GetResource(SharpDX.Direct3D11.Resource@)">
            <summary>	
            Get the resource that is accessed through this view.	
            </summary>	
            <remarks>	
            This function increments the reference count of the resource by one, so it is necessary to call Release on the returned reference when the application is done with it. Destroying (or losing) the returned reference before Release is called will result in a memory leak. 	
            </remarks>	
            <param name="resourceRef">Address of a reference to the resource that is accessed through this view. (See <see cref="T:SharpDX.Direct3D11.Resource"/>.) </param>
            <unmanaged>void ID3D11View::GetResource([Out] ID3D11Resource** ppResource)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ResourceView.Resource">
            <summary>	
            Get the resource that is accessed through this view.	
            </summary>	
            <remarks>	
            This function increments the reference count of the resource by one, so it is necessary to call Release on the returned reference when the application is done with it. Destroying (or losing) the returned reference before Release is called will result in a memory leak. 	
            </remarks>	
            <unmanaged>void ID3D11View::GetResource([Out] ID3D11Resource** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">DepthStencil</see> flag.</param>
            <unmanaged>ID3D11Device::CreateDepthStencilView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.DepthStencilViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.DepthStencilView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.DepthStencilView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">DepthStencil</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D11.DepthStencilView" /> to be created.</param>
            <unmanaged>ID3D11Device::CreateDepthStencilView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DepthStencilView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DepthStencilView.GetDescription(SharpDX.Direct3D11.DepthStencilViewDescription@)">
            <summary>	
            Get the depth-stencil view.	
            </summary>	
            <param name="descRef">Pointer to a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). </param>
            <unmanaged>void ID3D11DepthStencilView::GetDesc([Out] D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DepthStencilView.Description">
            <summary>	
            Get the depth-stencil view.	
            </summary>	
            <unmanaged>void ID3D11DepthStencilView::GetDesc([Out] D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Device">
            <summary>	
            The device interface represents a virtual adapter; it is used to create resources.	
            </summary>	
            <unmanaged>ID3D11Device</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.Direct3D.DriverType)">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="driverType"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.DXGI.Adapter)">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="driverType"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.DXGI.Adapter,SharpDX.Direct3D11.DeviceCreationFlags)">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="adapter"></param>
            <param name="flags"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="driverType"></param>
            <param name="flags"></param>
            <param name="featureLevels"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(SharpDX.DXGI.Adapter,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
              Constructor for a D3D11 Device. See <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for more information.
            </summary>
            <param name="adapter"></param>
            <param name="flags"></param>
            <param name="featureLevels"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
              Internal CreateDevice
            </summary>
            <param name = "adapter"></param>
            <param name = "driverType"></param>
            <param name = "flags"></param>
            <param name = "featureLevels"></param>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateWithSwapChain(SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D11.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "driverType">The type of device to create.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D11.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "adapter">The video adapter on which the device should be created.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateWithSwapChain(SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D11.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "driverType">The type of device to create.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "featureLevels">A list of feature levels which determine the order of feature levels to attempt to create.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D11.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Device" /> class along with a new <see cref = "T:SharpDX.DXGI.SwapChain" /> used for rendering.
            </summary>
            <param name = "adapter">The video adapter on which the device should be created.</param>
            <param name = "flags">A list of runtime layers to enable.</param>
            <param name = "featureLevels">A list of feature levels which determine the order of feature levels to attempt to create.</param>
            <param name = "swapChainDescription">Details used to create the swap chain.</param>
            <param name = "device">When the method completes, contains the created device instance.</param>
            <param name = "swapChain">When the method completes, contains the created swap chain instance.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateWithSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],SharpDX.DXGI.SwapChainDescription,SharpDX.Direct3D11.Device@,SharpDX.DXGI.SwapChain@)">
            <summary>
              This overload has been deprecated. Use one of the alternatives that does not take both an adapter and a driver type.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.Release">
            <summary>
              Release COM reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetCounterMetadata(SharpDX.Direct3D11.CounterDescription)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.	
            </summary>
            <param name="counterDescription">The counter description.</param>
            <returns>Description of the counter</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.OpenSharedResource``1(System.IntPtr)">
            <summary>
            Give a device access to a shared resource created on a different Direct3d device.
            </summary>
            <typeparam name="T">The type of the resource we are gaining access to.</typeparam>
            <param name="resourceHandle">A resource handle. See remarks.</param>
            <returns>
            This method returns a reference to the resource we are gaining access to.
            </returns>
            <remarks>
            To share a resource between two Direct3D 10 devices the resource must have been created with the  <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/> flag, if it was created using the ID3D10Device interface.  If it was created using the IDXGIDevice interface, then the resource is always shared. The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro.  For example, __uuidof(ID3D10Buffer) will get the GUID of the interface to a buffer resource. When sharing a resource between two Direct3D 10 devices the unique handle of the resource can be obtained by querying the resource for the <see cref="T:SharpDX.DXGI.Resource"/> interface and then calling {{GetSharedHandle}}.
            <code> IDXGIResource* pOtherResource(NULL);
            hr = pOtherDeviceResource-&gt;QueryInterface( __uuidof(IDXGIResource), (void**)&amp;pOtherResource );
            HANDLE sharedHandle;
            pOtherResource-&gt;GetSharedHandle(&amp;sharedHandle); </code>
            The only resources that can be shared are 2D non-mipmapped textures. To share a resource between a Direct3D 9 device and a Direct3D 10 device the texture must have been created using  the pSharedHandle argument of {{CreateTexture}}.   The shared Direct3D 9 handle is then passed to OpenSharedResource in the hResource argument. The following code illustrates the method calls involved.
            <code> sharedHandle = NULL; // must be set to NULL to create, can use a valid handle here to open in D3D9
            pDevice9-&gt;CreateTexture(..., pTex2D_9, &amp;sharedHandle);
            ...
            pDevice10-&gt;OpenSharedResource(sharedHandle, __uuidof(ID3D10Resource), (void**)(&amp;tempResource10));
            tempResource10-&gt;QueryInterface(__uuidof(ID3D10Texture2D), (void**)(&amp;pTex2D_10));
            tempResource10-&gt;Release();
            // now use pTex2D_10 with pDevice10    </code>
            Textures being shared from D3D9 to D3D10 have the following restrictions.  Textures must be 2D Only 1 mip level is allowed Texture must have default usage Texture must be write only MSAA textures are not allowed Bind flags must have SHADER_RESOURCE and RENDER_TARGET set Only R10G10B10A2_UNORM, R16G16B16A16_FLOAT and R8G8B8A8_UNORM formats are allowed  If a shared texture is updated on one device <see cref="M:SharpDX.Direct3D11.DeviceContext.Flush"/> must be called on that device.
            </remarks>
            <unmanaged>HRESULT ID3D10Device::OpenSharedResource([In] void* hResource,[In] GUID* ReturnedInterface,[Out, Optional] void** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckComputeShaderFormatSupport(SharpDX.DXGI.Format)">
            <summary>
            Check if this device is supporting compute shaders for the specified format.
            </summary>
            <param name="format">The format for which to check support.</param>
            <returns>Flags indicating usage contexts in which the specified format is supported.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)">
            <summary>
            Check if this device is supporting a feature.
            </summary>
            <param name="feature">The feature to check.</param>
            <returns>Returns true if this device supports this feature, otherwise false.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckThreadingSupport(System.Boolean@,System.Boolean@)">
            <summary>
            Check if this device is supporting threading.
            </summary>
            <param name="supportsConcurrentResources">Support concurrent resources.</param>
            <param name="supportsCommandLists">Support command lists.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetSupportedFeatureLevel">
            <summary>
            Gets the highest supported hardware feature level of the primary adapter.
            </summary>
            <returns>The highest supported hardware feature level.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetSupportedFeatureLevel(SharpDX.DXGI.Adapter)">
            <summary>
            Gets the highest supported hardware feature level of the primary adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <returns>
            The highest supported hardware feature level.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)">
            <summary>	
            Create a buffer (vertex buffer, index buffer, or shader-constant buffer).	
            </summary>	
            <remarks>	
            For example code, see {{How to: Create a Vertex Buffer}},  {{How to: Create an Index Buffer}} or {{How to: Create a Constant Buffer}}. 	
            </remarks>	
            <param name="descRef">Pointer to a buffer description (see <see cref="T:SharpDX.Direct3D11.BufferDescription"/>). </param>
            <param name="initialDataRef">Pointer to the initialization data (see <see cref="T:SharpDX.Direct3D11.SubResourceData"/>);  use NULL to allocate space only (with the exception that it cannot be NULL if the usage flag is D3D11_USAGE_IMMUTABLE). </param>
            <param name="bufferRef">Address of a reference to the buffer created (see <see cref="T:SharpDX.Direct3D11.Buffer"/>).  Set this parameter to NULL to validate the other input parameters (S_FALSE indicates a pass). </param>
            <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the buffer.   See {{Direct3D 11 Return Codes}} for other possible return values. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateBuffer([In] const D3D11_BUFFER_DESC* pDesc,[In, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Optional] ID3D11Buffer** ppBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateTexture1D(SharpDX.Direct3D11.Texture1DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture1D@)">
            <summary>	
            Create an array of {{1D textures}}.	
            </summary>	
            <remarks>	
            CreateTexture1D creates a 1D texture resource, which can contain a number of 1D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D11.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the D3DX texture functions such as {{D3DX11CreateTextureFromFile}}. 	
            </remarks>	
            <param name="descRef">Pointer to a 1D texture description (see <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of subresource descriptions (see <see cref="T:SharpDX.Direct3D11.SubResourceData"/>); one for each subresource. Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture1DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D11.Texture1D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 11 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateTexture1D([In] const D3D11_TEXTURE1D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Optional] ID3D11Texture1D** ppTexture1D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture2D@)">
            <summary>	
            Create an array of {{2D textures}}.	
            </summary>	
            <remarks>	
            CreateTexture2D creates a 2D texture resource, which can contain a number of 2D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D11.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the D3DX texture functions such as {{D3DX11CreateTextureFromFile}}. 	
            </remarks>	
            <param name="descRef">Pointer to a 2D texture description (see <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of subresource descriptions (see <see cref="T:SharpDX.Direct3D11.SubResourceData"/>); one for each subresource. Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture2DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D11.Texture2D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 11 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Optional] ID3D11Texture2D** ppTexture2D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateTexture3D(SharpDX.Direct3D11.Texture3DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture3D@)">
            <summary>	
            Create a single {{3D texture}}.	
            </summary>	
            <remarks>	
            CreateTexture3D creates a 3D texture resource, which can contain a number of 3D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications may supply the data initially as part of <see cref="T:SharpDX.Direct3D11.SubResourceData"/> structure pointed to by pInitialData, or it may use one of the D3DX texture functions such as {{D3DX11CreateTextureFromFile}}. 	
            </remarks>	
            <param name="descRef">Pointer to a 3D texture description (see <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0. </param>
            <param name="initialDataRef">Pointer to an array of subresource descriptions (see <see cref="T:SharpDX.Direct3D11.SubResourceData"/>); one for each subresource. Applications may not specify NULL for pInitialData when creating IMMUTABLE resources (see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>). If the resource is multisampled, pInitialData must be NULL because multisampled resources cannot be initialized with data when they are created. </param>
            <param name="texture3DRef">Address of a reference to the created texture (see <see cref="T:SharpDX.Direct3D11.Texture3D"/>). Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 11 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateTexture3D([In] const D3D11_TEXTURE3D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Optional] ID3D11Texture3D** ppTexture3D)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)">
            <summary>	
            Create a shader-resource view for accessing data in a resource.	
            </summary>	
            <remarks>	
            A resource is made up of one or more subresources, a view identifies which subresources to allow the pipeline to access. In addition, each resource is bound to the pipeline using a view. A shader-resource view is designed to bind any buffer or texture resource to the shader stages using the following  API methods: <see cref="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/>, <see cref="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/>. Since a view is fully typed, this means that typeless resources become fully typed when bound to the pipeline. 	
            </remarks>	
            <param name="resourceRef">Pointer to the resource that will serve as input to a shader. This resource must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/> flag. </param>
            <param name="descRef">Pointer to a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). Set this parameter to NULL to create a  view that accesses the entire resource (using the format the resource was created with). </param>
            <param name="sRViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. Set this parameter to NULL to validate the  other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateShaderResourceView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,[Out, Optional] ID3D11ShaderResourceView** ppSRView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateUnorderedAccessView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.UnorderedAccessViewDescription},SharpDX.Direct3D11.UnorderedAccessView@)">
            <summary>	
            Create a view for accessing an {{unordered access}} resource.	
            </summary>	
            <param name="resourceRef">Pointer to an <see cref="T:SharpDX.Direct3D11.Resource"/> that represents a resources that will be serve as an input to a shader. </param>
            <param name="descRef">Pointer to an <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/> that represents a shader-resource-view description. Set this parameter to NULL to create a view that accesses the entire resource (using the format the resource was created with). </param>
            <param name="uAViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> that represents an unordered access view. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateUnorderedAccessView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc,[Out, Optional] ID3D11UnorderedAccessView** ppUAView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateRenderTargetView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},SharpDX.Direct3D11.RenderTargetView@)">
            <summary>	
            Create a render-target view for accessing resource data.	
            </summary>	
            <remarks>	
            A rendertarget view can be bound to the output-merger stage by calling <see cref="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView)"/>. 	
            </remarks>	
            <param name="resourceRef">Pointer to a <see cref="T:SharpDX.Direct3D11.Resource"/> which represents a render target. This resource must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> flag. </param>
            <param name="descRef">Pointer to a <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/> which represents a render-target-view description. Set this parameter to NULL to create a view that accesses all of the subresources in mipmap level 0. </param>
            <param name="rTViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateRenderTargetView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_RENDER_TARGET_VIEW_DESC* pDesc,[Out, Optional] ID3D11RenderTargetView** ppRTView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateDepthStencilView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.DepthStencilViewDescription},SharpDX.Direct3D11.DepthStencilView@)">
            <summary>	
            Create a depth-stencil view for accessing resource data.	
            </summary>	
            <remarks>	
            A depth-stencil view can be bound to the output-merger stage by calling <see cref="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView)"/>. 	
            </remarks>	
            <param name="resourceRef">Pointer to the resource that will serve as the depth-stencil surface. This resource must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/> flag. </param>
            <param name="descRef">Pointer to a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). Set this parameter to NULL to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with). </param>
            <param name="depthStencilViewRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>. Set this parameter to NULL to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateDepthStencilView([In] ID3D11Resource* pResource,[In, Optional] const D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateInputLayout(SharpDX.Direct3D11.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.InputLayout@)">
            <summary>	
            Create an input-layout object to describe the input-buffer data for the input-assembler stage.	
            </summary>	
            <remarks>	
            After creating an input layout object, it must be bound to the input-assembler stage before calling a draw API. Once an input-layout object is created from a shader signature, the input-layout object can be reused with any other shader that has an identical input signature (semantics included). This can simplify the creation of input-layout objects when you are working with many shaders with identical inputs. If a data type in the input-layout declaration does not match the data type in a shader-input signature, CreateInputLayout will generate a warning during compilation. The warning is simply to call attention to the fact that the data may be reinterpreted when read from a register. You may either disregard this warning (if reinterpretation is intentional) or make the data types match in both declarations to eliminate the warning. 	
            </remarks>	
            <param name="inputElementDescsRef">An array of the input-assembler stage input data types; each type is described by an element description (see <see cref="T:SharpDX.Direct3D11.InputElement"/>). </param>
            <param name="numElements">The number of input-data types in the array of input-elements. </param>
            <param name="shaderBytecodeWithInputSignatureRef">void A reference to the compiled shader.  The compiled shader code contains a input signature which is validated against the array of elements. See remarks. </param>
            <param name="bytecodeLength">Size of the compiled shader. </param>
            <param name="inputLayoutRef">A reference to the input-layout object created (see <see cref="T:SharpDX.Direct3D11.InputLayout"/>). To validate the other input parameters, set this reference to be NULL and verify that the method returns S_FALSE. </param>
            <returns>If the method succeeds, the return code is S_OK. See {{Direct3D 11 Return Codes}} for failing error codes. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateInputLayout([In, Buffer] const D3D11_INPUT_ELEMENT_DESC* pInputElementDescs,[In] int NumElements,[In] const void* pShaderBytecodeWithInputSignature,[In] SIZE_T BytecodeLength,[Out, Optional] ID3D11InputLayout** ppInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateVertexShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.VertexShader@)">
            <summary>	
            Create a vertex-shader object from a compiled shader.	
            </summary>	
            <param name="shaderBytecodeRef">void A reference to the compiled shader.  </param>
            <param name="bytecodeLength">Size of the compiled vertex shader. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="vertexShaderRef">Address of a reference to a <see cref="T:SharpDX.Direct3D11.VertexShader"/> interface. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateVertexShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11VertexShader** ppVertexShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateGeometryShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.GeometryShader@)">
            <summary>	
            Create a geometry shader.	
            </summary>	
            <remarks>	
            Once created, the shader can be set to the device by calling <see cref="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetShader(SharpDX.Direct3D11.GeometryShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)"/>. 	
            </remarks>	
            <param name="shaderBytecodeRef">void A reference to the compiled shader.   </param>
            <param name="bytecodeLength">Size of the compiled geometry shader. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="geometryShaderRef">Address of a reference to a <see cref="T:SharpDX.Direct3D11.GeometryShader"/> interface. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateGeometryShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11GeometryShader** ppGeometryShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateGeometryShaderWithStreamOutput(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.StreamOutputElement[],System.Int32,System.Int32[],System.Int32,System.Int32,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.GeometryShader@)">
            <summary>	
            Create a geometry shader that can write to streaming output buffers.	
            </summary>	
            <param name="shaderBytecodeRef">void A reference to the compiled shader.  </param>
            <param name="bytecodeLength">Size of the compiled geometry shader. </param>
            <param name="sODeclarationRef">Pointer to a <see cref="T:SharpDX.Direct3D11.StreamOutputElement"/> array. Cannot be NULL if NumEntries &gt; 0. </param>
            <param name="numEntries">The number of entries in the stream output declaration ( ranges from 0 to D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT ). </param>
            <param name="bufferStridesRef">An array of buffer strides; each stride is the size of an element for that buffer. </param>
            <param name="numStrides">The number of strides (or buffers) in pBufferStrides (ranges from 0 to D3D11_SO_BUFFER_SLOT_COUNT). </param>
            <param name="rasterizedStream">The index number of the stream to be sent to the rasterizer stage (ranges from 0 to D3D11_SO_STREAM_COUNT - 1).  Set to D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="geometryShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.GeometryShader"/> interface, representing the geometry shader that was created.  Set this to NULL to validate the other parameters; if validation passes, the method will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateGeometryShaderWithStreamOutput([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Buffer, Optional] const D3D11_SO_DECLARATION_ENTRY* pSODeclaration,[In] int NumEntries,[In, Buffer, Optional] const int* pBufferStrides,[In] int NumStrides,[In] int RasterizedStream,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11GeometryShader** ppGeometryShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreatePixelShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.PixelShader@)">
            <summary>	
            Create a pixel shader.	
            </summary>	
            <remarks>	
            After creating the pixel shader, you can set it to the device using <see cref="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetShader(SharpDX.Direct3D11.PixelShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)"/>. 	
            </remarks>	
            <param name="shaderBytecodeRef">void A reference to the compiled shader.  </param>
            <param name="bytecodeLength">Size of the compiled pixel shader. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="pixelShaderRef">Address of a reference to a <see cref="T:SharpDX.Direct3D11.PixelShader"/> interface. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreatePixelShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11PixelShader** ppPixelShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateHullShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.HullShader@)">
            <summary>	
            Create a {{hull shader}}.	
            </summary>	
            <param name="shaderBytecodeRef">void A reference to a compiled shader. </param>
            <param name="bytecodeLength">Size of the compiled shader. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="hullShaderRef">A reference to a hull-shader interface (see <see cref="T:SharpDX.Direct3D11.HullShader"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateHullShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11HullShader** ppHullShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateDomainShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.DomainShader@)">
            <summary>	
            Create a {{domain shader}} .	
            </summary>	
            <param name="shaderBytecodeRef">void A reference to a compiled shader. </param>
            <param name="bytecodeLength">Size of the compiled shader. </param>
            <param name="classLinkageRef">A reference to a class linkage interface (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>); the value can be NULL. </param>
            <param name="domainShaderRef">Address of a reference to a <see cref="T:SharpDX.Direct3D11.DomainShader"/> interface. If this is NULL, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateDomainShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11DomainShader** ppDomainShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateComputeShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.ComputeShader@)">
            <summary>	
            Create a {{compute shader}}.	
            </summary>	
            <remarks>	
            For an example, see {{How To: Create a Compute Shader}} and {{HDRToneMappingCS11 Sample}}. 	
            </remarks>	
            <param name="shaderBytecodeRef">void A reference to a compiled shader. </param>
            <param name="bytecodeLength">Size of the compiled shader in pShaderBytecode. </param>
            <param name="classLinkageRef">A reference to a <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>, which represents  class linkage interface; the value can be NULL. </param>
            <param name="computeShaderRef">Address of a reference to an <see cref="T:SharpDX.Direct3D11.ComputeShader"/> interface. If this is NULL,  all other parameters will be validated; if validation passes, CreateComputeShader returns S_FALSE instead of S_OK. </param>
            <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.   See {{Direct3D 11 Return Codes}} for other possible return values. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateComputeShader([In] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In, Optional] ID3D11ClassLinkage* pClassLinkage,[Out, Optional] ID3D11ComputeShader** ppComputeShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateClassLinkage(SharpDX.Direct3D11.ClassLinkage@)">
            <summary>	
            Creates class linkage libraries to enable dynamic shader linkage.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D11.ClassLinkage"/> interface returned in ppLinkage is associated with a shader by passing it as a parameter to one of the <see cref="T:SharpDX.Direct3D11.Device"/> create shader methods such as <see cref="M:SharpDX.Direct3D11.Device.CreatePixelShader(System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.ClassLinkage,SharpDX.Direct3D11.PixelShader@)"/>. 	
            </remarks>	
            <param name="linkageRef">A reference to a class-linkage interface reference (see <see cref="T:SharpDX.Direct3D11.ClassLinkage"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateClassLinkage([Out] ID3D11ClassLinkage** ppLinkage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState@)">
            <summary>	
            Create a blend-state object that encapsules blend state for the output-merger stage.	
            </summary>	
            <remarks>	
            An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object  has the same state. If such a previous object exists, the runtime will return a reference to previous instance instead of creating a duplicate object. 	
            </remarks>	
            <param name="blendStateDescRef">Pointer to a blend-state description (see <see cref="T:SharpDX.Direct3D11.BlendStateDescription"/>). </param>
            <param name="blendStateRef">Address of a reference to the blend-state object created (see <see cref="T:SharpDX.Direct3D11.BlendState"/>). </param>
            <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the blend-state object.   See {{Direct3D 11 Return Codes}} for other possible return values. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateBlendState([In] const D3D11_BLEND_DESC* pBlendStateDesc,[Out, Optional] ID3D11BlendState** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateDepthStencilState(SharpDX.Direct3D11.DepthStencilStateDescription@,SharpDX.Direct3D11.DepthStencilState@)">
            <summary>	
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.	
            </summary>	
            <remarks>	
            4096 unique depth-stencil state objects can be created on a device at a time. If an application attempts to create a depth-stencil-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique depth-stencil state objects will stay the same. 	
            </remarks>	
            <param name="depthStencilDescRef">Pointer to a depth-stencil state description (see <see cref="T:SharpDX.Direct3D11.DepthStencilStateDescription"/>). </param>
            <param name="depthStencilStateRef">Address of a reference to the depth-stencil state object created (see <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateDepthStencilState([In] const D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,[Out, Optional] ID3D11DepthStencilState** ppDepthStencilState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateRasterizerState(SharpDX.Direct3D11.RasterizerStateDescription@,SharpDX.Direct3D11.RasterizerState@)">
            <summary>	
            Create a rasterizer state object that tells the rasterizer stage how to behave.	
            </summary>	
            <remarks>	
            4096 unique rasterizer state objects can be created on a device at a time. If an application attempts to create a rasterizer-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique rasterizer state objects will stay the same. 	
            </remarks>	
            <param name="rasterizerDescRef">Pointer to a rasterizer state description (see <see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/>). </param>
            <param name="rasterizerStateRef">Address of a reference to the rasterizer state object created (see <see cref="T:SharpDX.Direct3D11.RasterizerState"/>). </param>
            <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.  See {{Direct3D 11 Return Codes}} for other possible return values. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateRasterizerState([In] const D3D11_RASTERIZER_DESC* pRasterizerDesc,[Out, Optional] ID3D11RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateSamplerState(SharpDX.Direct3D11.SamplerStateDescription@,SharpDX.Direct3D11.SamplerState@)">
            <summary>	
            Create a sampler-state object that encapsulates sampling information for a texture.	
            </summary>	
            <remarks>	
            4096 unique sampler state objects can be created on a device at a time. If an application attempts to create a sampler-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique sampler state objects will stay the same. 	
            </remarks>	
            <param name="samplerDescRef">Pointer to a sampler state description (see <see cref="T:SharpDX.Direct3D11.SamplerStateDescription"/>). </param>
            <param name="samplerStateRef">Address of a reference to the sampler state object created (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateSamplerState([In] const D3D11_SAMPLER_DESC* pSamplerDesc,[Out, Optional] ID3D11SamplerState** ppSamplerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateQuery(SharpDX.Direct3D11.QueryDescription,SharpDX.Direct3D11.Query@)">
            <summary>	
            This interface encapsulates methods for querying information from the GPU.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="queryDescRef">Pointer to a query description (see <see cref="T:SharpDX.Direct3D11.QueryDescription"/>). </param>
            <param name="queryRef">Address of a reference to the query object created (see <see cref="T:SharpDX.Direct3D11.Query"/>). </param>
            <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.   See {{Direct3D 11 Return Codes}} for other possible return values. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateQuery([In] const D3D11_QUERY_DESC* pQueryDesc,[Out, Optional] ID3D11Query** ppQuery)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreatePredicate(SharpDX.Direct3D11.QueryDescription,SharpDX.Direct3D11.Predicate@)">
            <summary>	
            Creates a predicate.	
            </summary>	
            <param name="redicateDescRef">Pointer to a query description where the type of query must be a D3D11_QUERY_SO_OVERFLOW_PREDICATE or D3D11_QUERY_OCCLUSION_PREDICATE (see <see cref="T:SharpDX.Direct3D11.QueryDescription"/>). </param>
            <param name="predicateRef">Address of a reference to a predicate (see <see cref="T:SharpDX.Direct3D11.Predicate"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CreatePredicate([In] const D3D11_QUERY_DESC* pPredicateDesc,[Out, Optional] ID3D11Predicate** ppPredicate)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateCounter(SharpDX.Direct3D11.CounterDescription,SharpDX.Direct3D11.Counter@)">
            <summary>	
            Create a counter object for measuring GPU performance.	
            </summary>	
            <param name="counterDescRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D11.CounterDescription"/>). </param>
            <param name="counterRef">Address of a reference to a counter (see <see cref="T:SharpDX.Direct3D11.Counter"/>). </param>
            <returns>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG. DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it. DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment. E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted. </returns>
            <unmanaged>HRESULT ID3D11Device::CreateCounter([In] const D3D11_COUNTER_DESC* pCounterDesc,[Out, Optional] ID3D11Counter** ppCounter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CreateDeferredContext(System.Int32,SharpDX.Direct3D11.DeviceContext@)">
            <summary>	
            Creates a deferred context for play back of command lists.	
            </summary>	
            <remarks>	
            A deferred context is a thread-safe context that you can use to record graphics commands on a thread other than the main rendering thread.  Using a deferred context, you can record graphics commands into a command list that is encapsulated by the <see cref="T:SharpDX.Direct3D11.CommandList"/> interface.  After all scene items are recorded, you can then submit them to the main render thread for final rendering.  In this manner, you can perform rendering tasks concurrently across multiple threads and potentially improve performance in multi-core CPU scenarios. You can create multiple deferred contexts. Note??If you use the <see cref="F:SharpDX.Direct3D11.DeviceCreationFlags.SingleThreaded"/> value to create the device that is represented by <see cref="T:SharpDX.Direct3D11.Device"/>, the CreateDeferredContext method will fail, and you will not be able to create a deferred context. For more information about deferred contexts, see {{Immediate and Deferred Rendering}}. 	
            </remarks>	
            <param name="contextFlags">Reserved for future use.  Pass 0. </param>
            <param name="deferredContextRef">Upon completion of the method, the passed reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface reference is initialized. </param>
            <returns>Returns S_OK if successful; otherwise, returns one of the following:  Returns DXGI_ERROR_DEVICE_REMOVED if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device. Returns DXGI_ERROR_INVALID_CALL if the CreateDeferredContext method cannot be called from the current context. For example, if the device was created with the <see cref="F:SharpDX.Direct3D11.DeviceCreationFlags.SingleThreaded"/> value,  CreateDeferredContext returns DXGI_ERROR_INVALID_CALL. Returns E_INVALIDARG if the ContextFlags parameter is invalid. Returns E_OUTOFMEMORY if the application has exhausted available memory.  </returns>
            <unmanaged>HRESULT ID3D11Device::CreateDeferredContext([None] int ContextFlags,[Out, Optional] ID3D11DeviceContext** ppDeferredContext)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.OpenSharedResource(System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>	
            Give a device access to a shared resource created on a different device.	
            </summary>	
            <remarks>	
            The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D11Buffer) will get the GUID of the interface to a buffer resource. The unique handle of the resource is obtained differently depending on the type of device that originally created the resource. To share a resource between two Direct3D 11 devices the resource must have been created with the  <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/> flag, if it was created using the ID3D11Device interface.  If it was created using a DXGI device interface, then the resource is always shared. The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro.  For example, __uuidof(ID3D11Buffer) will get the GUID of the interface to a buffer resource. When sharing a resource between two Direct3D 10/11 devices the unique handle of the resource can be obtained by querying the resource for the <see cref="T:SharpDX.DXGI.Resource"/> interface and then calling {{GetSharedHandle}}. 	
            <code> IDXGIResource* pOtherResource(NULL);	
            hr = pOtherDeviceResource-&gt;QueryInterface( __uuidof(IDXGIResource), (void**)&amp;pOtherResource );	
            HANDLE sharedHandle;	
            pOtherResource-&gt;GetSharedHandle(&amp;sharedHandle); </code>	
            	
             The only resources that can be shared are 2D non-mipmapped textures. To share a resource between a Direct3D 9 device and a Direct3D 11 device the texture must have been created using  the pSharedHandle argument of {{CreateTexture}}.   The shared Direct3D 9 handle is then passed to OpenSharedResource in the hResource argument. The following code illustrates the method calls involved. 	
            <code> sharedHandle = NULL; // must be set to NULL to create, can use a valid handle here to open in D3D9 	
            pDevice9-&gt;CreateTexture(..., pTex2D_9, &amp;sharedHandle); 	
            ... 	
            pDevice11-&gt;OpenSharedResource(sharedHandle, __uuidof(ID3D11Resource), (void**)(&amp;tempResource11)); 	
            tempResource11-&gt;QueryInterface(__uuidof(ID3D11Texture2D), (void**)(&amp;pTex2D_11)); 	
            tempResource11-&gt;Release(); 	
            // now use pTex2D_11 with pDevice11    </code>	
            	
             Textures being shared from D3D9 to D3D11 have the following restrictions.  Textures must be 2D Only 1 mip level is allowed Texture must have default usage Texture must be write only MSAA textures are not allowed Bind flags must have SHADER_RESOURCE and RENDER_TARGET set Only R10G10B10A2_UNORM, R16G16B16A16_FLOAT and R8G8B8A8_UNORM formats are allowed  If a shared texture is updated on one device <see cref="M:SharpDX.Direct3D11.DeviceContext.Flush"/> must be called on that device. 	
            </remarks>	
            <param name="hResource">A resource handle. See remarks. </param>
            <param name="returnedInterface">REFIID The globally unique identifier (GUID) for the resource interface. See remarks. </param>
            <param name="resourceRef">void Address of a reference to the resource we are gaining access to. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::OpenSharedResource([In] void* hResource,[In] GUID* ReturnedInterface,[Out, Optional] void** ppResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckFormatSupport(SharpDX.DXGI.Format)">
            <summary>	
            Get the support of a given format on the installed video device.	
            </summary>	
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> enumeration that describes a format for which to check for support. </param>
            <returns>A bitfield of <see cref="T:SharpDX.Direct3D11.FormatSupport"/> enumeration values describing how the specified format is supported on the installed device.  The values are ORed together. </returns>
            <unmanaged>HRESULT ID3D11Device::CheckFormatSupport([In] DXGI_FORMAT Format,[Out] D3D11_FORMAT_SUPPORT* pFormatSupport)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckMultisampleQualityLevels(SharpDX.DXGI.Format,System.Int32)">
            <summary>	
            Get the number of quality levels available during multisampling.	
            </summary>	
            <remarks>	
            When multisampling a texture, the number of quality levels available for an adapter is dependent on the texture format used and the number of  samples requested. The maximum number of quality levels is defined by D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT in D3D11.h. If this method returns 0, the format  and sample count combination is not supported for the installed adapter. Furthermore, the definition of a quality level is up to each hardware vendor to define, however no facility is provided by Direct3D to help discover  this information. Note that FEATURE_LEVEL_10_1 devices are required to support 4x MSAA for all render targets except R32G32B32A32 and R32G32B32. FEATURE_LEVEL_11_0 devices are required to support 4x MSAA for all render target formats, and 8x MSAA for all render target formats  except R32G32B32A32 formats. 	
            </remarks>	
            <param name="format">The texture format. See <see cref="T:SharpDX.DXGI.Format"/>. </param>
            <param name="sampleCount">The number of samples during multisampling. </param>
            <returns>Number of quality levels supported by the adapter. See remarks. </returns>
            <unmanaged>HRESULT ID3D11Device::CheckMultisampleQualityLevels([In] DXGI_FORMAT Format,[In] int SampleCount,[Out] int* pNumQualityLevels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetCounterCapabilities">
            <summary>	
            Get a counter's information.	
            </summary>	
            <unmanaged>void ID3D11Device::CheckCounterInfo([Out] D3D11_COUNTER_INFO* pCounterInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckCounter(SharpDX.Direct3D11.CounterDescription,SharpDX.Direct3D11.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            Get the type, name, units of measure, and a description of an existing counter.	
            </summary>	
            <remarks>	
            Length parameters can be NULL, which indicates the application is not interested in the length nor the corresponding string value. When a length parameter is non-NULL and the corresponding string is NULL, the input value of the length parameter is ignored, and the length of the corresponding string (including terminating NULL) will be returned through the length parameter. When length and the corresponding parameter are both non-NULL, the input value of length is checked to ensure there is enough room, and then the length of the string (including terminating NULL character) is passed out through the length parameter. 	
            </remarks>	
            <param name="descRef">Pointer to a counter description (see <see cref="T:SharpDX.Direct3D11.CounterDescription"/>). Specifies which counter information is to be retrieved about. </param>
            <param name="typeRef">Pointer to the data type of a counter (see <see cref="T:SharpDX.Direct3D11.CounterType"/>). Specifies the data type of the counter being retrieved. </param>
            <param name="activeCountersRef">Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters. </param>
            <param name="szName">String to be filled with a brief name for the counter. May be NULL if the application is not interested in the name of the counter. </param>
            <param name="nameLengthRef">Length of the string returned to szName. Can be NULL. </param>
            <param name="szUnits">Name of the units a counter measures, provided the memory the reference points to has enough room to hold the string. Can be NULL. The returned string will always be in English. </param>
            <param name="unitsLengthRef">Length of the string returned to szUnits. Can be NULL. </param>
            <param name="szDescription">A description of the counter, provided the memory the reference points to has enough room to hold the string. Can be NULL. The returned string will always be in English. </param>
            <param name="descriptionLengthRef">Length of the string returned to szDescription. Can be NULL. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::CheckCounter([In] const D3D11_COUNTER_DESC* pDesc,[Out] D3D11_COUNTER_TYPE* pType,[Out] int* pActiveCounters,[Out, Buffer, Optional] char* szName,[InOut, Optional] int* pNameLength,[Out, Buffer, Optional] char* szUnits,[InOut, Optional] int* pUnitsLength,[Out, Buffer, Optional] char* szDescription,[InOut, Optional] int* pDescriptionLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature,System.IntPtr,System.Int32)">
            <summary>	
            Gets information about the features that are supported by the current graphics driver.	
            </summary>	
            <remarks>	
            To query for multi-threading support, pass the D3D11_FEATURE_THREADING value to the Feature parameter, pass  the <see cref="T:SharpDX.Direct3D11.FeatureDataThreading"/> structure to the  pFeatureSupportData parameter, and pass the size of  the D3D11_FEATURE_DATA_THREADING structure to the FeatureSupportDataSize parameter. Calling CheckFeatureSupport with Feature set to D3D11_FEATURE_FORMAT_SUPPORT causes the method to return the same information that would be returned  by <see cref="M:SharpDX.Direct3D11.Device.CheckFormatSupport(SharpDX.DXGI.Format)"/>. 	
            </remarks>	
            <param name="feature">A member of the <see cref="T:SharpDX.Direct3D11.Feature"/> enumerated type that describes which feature to query for support. </param>
            <param name="featureSupportDataRef">void Upon completion of the method, the passed structure is filled with data that describes the feature support. </param>
            <param name="featureSupportDataSize">The size of the structure passed to the pFeatureSupportData parameter. </param>
            <returns>Returns S_OK if successful; otherwise, returns E_INVALIDARG if an unsupported data type is passed to the pFeatureSupportData parameter  or a size mismatch is detected for the FeatureSupportDataSize parameter. </returns>
            <unmanaged>HRESULT ID3D11Device::CheckFeatureSupport([None] D3D11_FEATURE Feature,[Out, Buffer] void* pFeatureSupportData,[None] int FeatureSupportDataSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            Get application-defined data from a device.	
            </summary>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSizeRef">A reference to a variable that on input contains the size, in bytes, of the buffer that pData points to, and on output contains the size, in bytes, of the amount of data that GetPrivateData retrieved. </param>
            <param name="dataRef">void A reference to a buffer that GetPrivateData fills with data from the device if pDataSize points to a value that specifies a buffer large enough to hold the data. </param>
            <returns>This method returns one of the codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::GetPrivateData([In] GUID* guid,[InOut] int* pDataSize,[Out, Buffer, Optional] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            Set data to a device and associate that data with a guid.	
            </summary>	
            <remarks>	
            The data stored in the device with this method can be retrieved with <see cref="M:SharpDX.Direct3D11.Device.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. The data and guid set with this method will typically be application-defined. If an application uses this method to change the device type using GUID_DeviceType, results are undefined. However, GUID_DeviceType can be used to retrieve the device type using <see cref="M:SharpDX.Direct3D11.Device.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)"/>. The {{debug layer}} reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the SetPrivateData method and the WKPDID_D3DDebugObjectName GUID that is in D3Dcommon.h. For example, to give pContext a friendly name of My name, use the following code: 	
            <code> static const char c_szName[] = "My name";	
            hr = pContext-&gt;SetPrivateData( WKPDID_D3DDebugObjectName, sizeof( c_szName ) - 1, c_szName ); </code>	
            	
             	
            </remarks>	
            <param name="guid">Guid associated with the data. </param>
            <param name="dataSize">Size of the data. </param>
            <param name="dataRef">void Pointer to the data to be stored with this device. If pData is NULL, DataSize must also be 0, and any data previously associated with the guid will be destroyed. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::SetPrivateData([In] GUID* guid,[In] int DataSize,[In, Buffer, Optional] const void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.	
            </summary>	
            <param name="guid">Guid associated with the interface. </param>
            <param name="dataRef">IUnknown Pointer to an IUnknown-derived interface to be associated with the device child. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::SetPrivateDataInterface([In] GUID* guid,[In, Optional] const IUnknown* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetFeatureLevel">
            <summary>	
            Gets the feature level of the hardware device.	
            </summary>	
            <remarks>	
            {{Feature levels}} determine the capabilities of your device. 	
            </remarks>	
            <returns>A member of the <see cref="T:SharpDX.Direct3D.FeatureLevel"/> enumerated type that describes the feature level of the hardware device. </returns>
            <unmanaged>D3D_FEATURE_LEVEL ID3D11Device::GetFeatureLevel()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetCreationFlags">
            <summary>	
            Get the flags used during the call to create the device with <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/>.	
            </summary>	
            <returns>A bitfield containing the flags used to create the device. See <see cref="T:SharpDX.Direct3D11.DeviceCreationFlags"/>. </returns>
            <unmanaged>int ID3D11Device::GetCreationFlags()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetDeviceRemovedReason">
            <summary>	
            Get the reason why the device was removed.	
            </summary>	
            <returns>Possible return values include:    DXGI_ERROR_DEVICE_HUNG DXGI_ERROR_DEVICE_REMOVED DXGI_ERROR_DEVICE_RESET DXGI_ERROR_DRIVER_INTERNAL_ERROR DXGI_ERROR_INVALID_CALL S_OK  For more detail on these return codes, see <see cref="T:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT ID3D11Device::GetDeviceRemovedReason()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetImmediateContext(SharpDX.Direct3D11.DeviceContext@)">
            <summary>	
            Gets an immediate context which can record command lists.	
            </summary>	
            <remarks>	
            The GetImmediateContext method returns an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object that represents an immediate context which is used to perform rendering that you want immediately submitted to a device. For most applications, an immediate context is the primary object that is used to draw your scene. 	
            </remarks>	
            <param name="immediateContextRef">Upon completion of the method, the passed reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface reference is initialized. </param>
            <unmanaged>void ID3D11Device::GetImmediateContext([Out] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.SetExceptionMode(System.Int32)">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            Set an exception-mode flag to elevate an error condition to a non-continuable exception.  Whenever an error occurs, a Direct3D device enters the DEVICEREMOVED state and if the appropriate exception flag has been set, an exception is raised. A raised exception is designed to terminate an application. Before termination, the last chance an application has to persist data is by using an UnhandledExceptionFilter (see {{Structured Exception Handling}}). In general, UnhandledExceptionFilters are leveraged to try to persist data when an application is crashing (to disk, for example). Any code that executes during an UnhandledExceptionFilter is not guaranteed to reliably execute (due to possible process corruption). Any data that the UnhandledExceptionFilter manages to persist, before the UnhandledExceptionFilter crashes again, should be treated as suspect, and therefore inspected by a new, non-corrupted process to see if it is usable. 	
            </remarks>	
            <param name="raiseFlags">A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in {{D3D11_RAISE_FLAG}}. A default value of 0 means there are no flags. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11Device::SetExceptionMode([None] int RaiseFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Device.GetExceptionMode">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            An exception-mode flag is used to elevate an error condition to a non-continuable exception.  	
            </remarks>	
            <returns>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in {{D3D11_RAISE_FLAG}}. A default value of 0 means there are no flags. </returns>
            <unmanaged>int ID3D11Device::GetExceptionMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.ImmediateContext">
            <summary>
              Get the imediate <see cref="T:SharpDX.Direct3D11.DeviceContext"/> attached to this Device.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.IsReferenceDevice">
            <summary>
            Gets a value indicating whether the current device is using the reference rasterizer.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.FeatureLevel">
            <summary>	
            Gets the feature level of the hardware device.	
            </summary>	
            <remarks>	
            {{Feature levels}} determine the capabilities of your device. 	
            </remarks>	
            <unmanaged>D3D_FEATURE_LEVEL ID3D11Device::GetFeatureLevel()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.CreationFlags">
            <summary>	
            Get the flags used during the call to create the device with <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/>.	
            </summary>	
            <unmanaged>int ID3D11Device::GetCreationFlags()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.DeviceRemovedReason">
            <summary>	
            Get the reason why the device was removed.	
            </summary>	
            <unmanaged>HRESULT ID3D11Device::GetDeviceRemovedReason()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.Device.ExceptionMode">
            <summary>	
            Get the exception-mode flags.	
            </summary>	
            <remarks>	
            An exception-mode flag is used to elevate an error condition to a non-continuable exception.  	
            </remarks>	
            <unmanaged>int ID3D11Device::GetExceptionMode()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext">
            <summary>	
            The ID3D11DeviceContext interface represents a device context which generates rendering commands.	
            </summary>	
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.#ctor(SharpDX.Direct3D11.Device)">
            <summary>
              Constructs a new deferred context <see cref = "T:SharpDX.Direct3D11.DeviceContext" />.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.FinishCommandList(System.Boolean)">
            <summary>
              Create a command list and record graphics commands into it.
            </summary>
            <param name = "restoreState">A flag indicating whether the immediate context state is saved (prior) and restored (after) the execution of a command list.</param>
            <returns>The created command list containing the queued rendering commands.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetData(SharpDX.Direct3D11.Asynchronous)">
            <summary>
              Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetData``1(SharpDX.Direct3D11.Asynchronous)">
            <summary>
              Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetData(SharpDX.Direct3D11.Asynchronous,SharpDX.Direct3D11.AsynchronousFlags)">
            <summary>
              Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <param name = "flags">Flags specifying how the command should operate.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetData``1(SharpDX.Direct3D11.Asynchronous,SharpDX.Direct3D11.AsynchronousFlags)">
            <summary>
              Gets data from the GPU asynchronously.
            </summary>
            <param name = "data">The asynchronous data provider.</param>
            <param name = "flags">Flags specifying how the command should operate.</param>
            <returns>The data retrieved from the GPU.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetPredication(System.Boolean@)">
            <summary>	
            Get the rendering predicate state.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="predicateValue">a boolean to fill with the predicate comparison value. FALSE upon device creation. </param>
            <returns>a reference to a predicate (see <see cref="T:SharpDX.Direct3D11.Predicate"/>).</returns>
            <unmanaged>void ID3D11Device::GetPredication([Out, Optional] ID3D10Predicate** ppPredicate,[Out, Optional] BOOL* pPredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CopyResource(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)">
            <summary>	
            Copy the entire contents of the source resource to the destination resource using the GPU. 	
            </summary>	
            <remarks>	
            This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:  Must be different resources. Must be the same type. Must have identical dimensions (including width, height, depth, and size as appropriate). Will only be copied. CopyResource does not support any stretch, color key, blend, or format conversions. Must have compatible DXGI formats, which means the formats must be identical or at least from the same type group. For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. Might not be currently mapped.  You cannot use an {{Immutable}} resource as a destination. You can use a   {{depth-stencil}} resource as either a source or a destination.  Resources created with multisampling capability (see <see cref="T:SharpDX.DXGI.SampleDescription"/>) can be used as source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if one is multisampled and the other is not multisampled the call to ID3D11DeviceContext::CopyResource fails. The method is an asynchronous call which may be added to the command-buffer queue. This attempts to remove pipeline stalls that may occur when copying data.  An application that only needs to copy a portion of the data in a resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/> instead. 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <unmanaged>void ID3D11DeviceContext::CopyResource([In] ID3D11Resource* pDstResource,[In] ID3D11Resource* pSrcResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion(SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion},SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination offsets, (x, y, and z) allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. {{D3D11CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources:  Must be different subresources (although they can be from the same resource). Must be the same type. Must have compatible DXGI formats (identical or from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently mapped.  CopySubresourceRegion only supports copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> instead. CopySubresourceRegion is an asynchronous call which may be added to the command-buffer queue, this attempts to remove pipeline stalls that may occur when copying data. See performance considerations for more details. Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. In this situation, you must pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters, should have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (10,20),(90,140) in a destination texture. 	
            <code> D3D11_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDeviceContext-&gt;CopySubresourceRegion( pDestTexture, 0, 10, 20, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice, that for a 2D texture, front and back are set to 0 and 1 respectively. 	
            </remarks>	
            <param name="source">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="sourceSubresource">Source subresource index. </param>
            <param name="sourceRegion">A reference to a 3D box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <param name="destination">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="destinationSubResource">Destination subresource index. </param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero. </param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <unmanaged>void ID3D11DeviceContext::CopySubresourceRegion([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In] int DstX,[In] int DstY,[In] int DstZ,[In] ID3D11Resource* pSrcResource,[In] int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ResolveSubresource(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,SharpDX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource.	
            </summary>	
            <remarks>	
            This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass. The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this:  ScenarioRequirements Source and destination are prestructured and typedBoth the source and destination must have identical formats and that format must be specified in the Format parameter. One resource is prestructured and typed and the other is prestructured and typelessThe typed resource must have a format that is compatible with the typeless resource (i.e. the typed resource is DXGI_FORMAT_R32_FLOAT and the typeless resource is DXGI_FORMAT_R32_TYPELESS). The format of the typed resource must be specified in the Format parameter. Source and destination are prestructured and typelessBoth the source and desintation must have the same typeless format (i.e. both must have DXGI_FORMAT_R32_TYPELESS), and the Format parameter must specify a format that is compatible with the source and destination (i.e. if both are DXGI_FORMAT_R32_TYPELESS then DXGI_FORMAT_R32_FLOAT could be specified in the Format parameter). For example, given the DXGI_FORMAT_R16G16B16A16_TYPELESS format:  The source (or dest) format could be DXGI_FORMAT_R16G16B16A16_UNORM The dest (or source) format could be DXGI_FORMAT_R16G16B16A16_FLOAT    ? 	
            </remarks>	
            <param name="source">Source resource. Must be multisampled. </param>
            <param name="sourceSubresource">&gt;The source subresource of the source resource. </param>
            <param name="destination">Destination resource. Must be a created with the <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource. Use {{D3D11CalcSubresource}} to calculate the index. </param>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> that indicates how the multisampled resource will be resolved to a single-sampled resource.  See remarks. </param>
            <unmanaged>void ID3D11DeviceContext::ResolveSubresource([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In] ID3D11Resource* pSrcResource,[In] int SrcSubresource,[In] DXGI_FORMAT Format)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.MapSubresource(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags)">
            <summary>
              Maps a GPU resource into CPU-accessible memory.
            </summary>
            <param name = "resource">The resource to map.</param>
            <param name = "subresource">Index of the subresource to map.</param>
            <param name = "sizeInBytes">Size, in bytes, of the data to retrieve.</param>
            <param name = "mode">Specifies the CPU's read and write permissions for the resource. </param>
            <param name = "flags">Flags that specify what the CPU should do when the GPU is busy.</param>
            <returns>The mapped resource data.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D11.Resource,System.Int32)">
            <summary>
              Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name = "subresource">The destination subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.ResourceRegion)">
            <summary>
              Copies data from the CPU to to a non-mappable subresource region.
            </summary>
            <param name = "source">The source data.</param>
            <param name = "resource">The destination resource.</param>
            <param name = "subresource">The destination subresource.</param>
            <param name = "region">The destination region within the resource.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.NativePointerUpdated">
            <summary>Update nested inner interfaces pointer</summary>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawIndexed(System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw indexed, non-instanced primitives.	
            </summary>	
            <remarks>	
            A draw API submits work to the rendering pipeline. If the sum of both indices is negative, the result of the function call is undefined. 	
            </remarks>	
            <param name="indexCount">Number of indices to draw. </param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer. </param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer. </param>
            <unmanaged>void ID3D11DeviceContext::DrawIndexed([In] int IndexCount,[In] int StartIndexLocation,[In] int BaseVertexLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.Draw(System.Int32,System.Int32)">
            <summary>	
            Draw non-indexed, non-instanced primitives.	
            </summary>	
            <remarks>	
            A draw API submits work to the rendering pipeline. The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has vertex data marked with the SV_VertexId system-value semantic. 	
            </remarks>	
            <param name="vertexCount">Number of vertices to draw. </param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the SV_TargetId system-value semantic. </param>
            <unmanaged>void ID3D11DeviceContext::Draw([In] int VertexCount,[In] int StartVertexLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)">
            <summary>	
            Get a reference to the data contained in a subresource, and deny the GPU access to that subresource.	
            </summary>	
            <remarks>	
            If you call Map on a deferred context, you can only pass <see cref="F:SharpDX.Direct3D11.MapMode.WriteDiscard"/>, D3D11_MAP_WRITE_NO_OVERWRITE, or both to the MapType parameter. Other D3D11_MAP-typed values are not supported for a deferred context. 	
            </remarks>	
            <param name="resourceRef">A reference to a <see cref="T:SharpDX.Direct3D11.Resource"/> interface. </param>
            <param name="subresource">Index number of the subresource. </param>
            <param name="mapType">Specifies the CPU's read and write permissions for a resource. For possible values, see <see cref="T:SharpDX.Direct3D11.MapMode"/>. </param>
            <param name="mapFlags">{{Flag}} that specifies what the CPU should do when the GPU is busy. This flag is optional. </param>
            <param name="mappedResourceRef">A reference to the mapped subresource (see <see cref="T:SharpDX.Direct3D11.MappedSubResource"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. This method also returns DXGI_ERROR_WAS_STILL_DRAWING if MapFlags specifies D3D10_MAP_FLAG_DO_NOT_WAIT and the GPU is not yet finished with the resource. For more information about this error code, see <see cref="T:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT ID3D11DeviceContext::Map([In] ID3D11Resource* pResource,[In] int Subresource,[In] D3D11_MAP MapType,[In] D3D11_MAP_FLAG MapFlags,[Out] D3D11_MAPPED_SUBRESOURCE* pMappedResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.UnmapSubresource(SharpDX.Direct3D11.Resource,System.Int32)">
            <summary>	
            Invalidate the reference to a resource and re-enable the GPU's access to that resource.	
            </summary>	
            <param name="resourceRef">A reference to a <see cref="T:SharpDX.Direct3D11.Resource"/> interface. </param>
            <param name="subresource">A subresource to be unmapped. </param>
            <unmanaged>void ID3D11DeviceContext::Unmap([In] ID3D11Resource* pResource,[In] int Subresource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw indexed, instanced primitives.	
            </summary>	
            <remarks>	
            A draw API submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be  to draw the same object with different positions and colors. Indexing requires multiple vertex buffers: at least one for per-vertex data  and a second buffer for per-instance data. 	
            </remarks>	
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance. </param>
            <param name="instanceCount">Number of instances to draw. </param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer. </param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer. </param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer. </param>
            <unmanaged>void ID3D11DeviceContext::DrawIndexedInstanced([In] int IndexCountPerInstance,[In] int InstanceCount,[In] int StartIndexLocation,[In] int BaseVertexLocation,[In] int StartInstanceLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Draw non-indexed, instanced primitives.	
            </summary>	
            <remarks>	
            A draw API submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be  to draw the same object with different positions and colors. The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline.  However, you could also provide the vertex data from a shader that has instanced data identified with a system-value semantic (SV_InstanceID). 	
            </remarks>	
            <param name="vertexCountPerInstance">Number of vertices to draw. </param>
            <param name="instanceCount">Number of instances to draw. </param>
            <param name="startVertexLocation">Index of the first vertex. </param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer. </param>
            <unmanaged>void ID3D11DeviceContext::DrawInstanced([In] int VertexCountPerInstance,[In] int InstanceCount,[In] int StartVertexLocation,[In] int StartInstanceLocation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)">
            <summary>	
            Mark the beginning of a series of commands.	
            </summary>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/> to mark the ending of the series of commands. 	
            </remarks>	
            <param name="asyncRef">A reference to an <see cref="T:SharpDX.Direct3D11.Asynchronous"/> interface. </param>
            <unmanaged>void ID3D11DeviceContext::Begin([In] ID3D11Asynchronous* pAsync)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)">
            <summary>	
            Mark the end of a series of commands.	
            </summary>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> to mark the beginning of the series of commands. 	
            </remarks>	
            <param name="asyncRef">A reference to an <see cref="T:SharpDX.Direct3D11.Asynchronous"/> interface. </param>
            <unmanaged>void ID3D11DeviceContext::End([In] ID3D11Asynchronous* pAsync)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)">
            <summary>	
            Get data from the GPU asynchronously.	
            </summary>	
            <remarks>	
            Queries in a deferred context are limited to predicated drawing. That is, you cannot call ID3D11DeviceContext::GetData on a deferred context to get data about a query; you can only call GetData on the immediate context to get data about a query. For predicated drawing, the results of a predication-type query are used by the GPU and not returned to an application. For more information about predication and predicated drawing, see {{D3D11DeviceContext::SetPredication}}. 	
            </remarks>	
            <param name="asyncRef">A reference to an <see cref="T:SharpDX.Direct3D11.Asynchronous"/> interface. </param>
            <param name="dataRef">void Address of memory that will receive the data. If NULL, GetData will be used only to check status. The type of data output depends on the type of asynchronous interface. </param>
            <param name="dataSize">Size of the data to retrieve or 0. Must be 0 when pData is NULL. </param>
            <param name="getDataFlags">Optional flags. Can be 0 or any combination of the flags enumerated by <see cref="T:SharpDX.Direct3D11.AsynchronousFlags"/>. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11DeviceContext::GetData([In] ID3D11Asynchronous* pAsync,[Out, Buffer, Optional] void* pData,[In] int DataSize,[In] D3D11_ASYNC_GETDATA_FLAG GetDataFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.SetPredication(SharpDX.Direct3D11.Predicate,System.Boolean)">
            <summary>	
            Set a rendering predicate.	
            </summary>	
            <remarks>	
            The predicate must be in the "issued" or "signaled" state to be used for predication. While the predicate is set for predication, calls to <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/> are invalid. This method is used to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting Predicate data of the Predicate is equal to the PredicateValue. However, some Predicates are only hints, so they may not actually prevent operations from being performed.  The primary usefulness of Predication is to allow an application to issue graphics commands without taking the performance hit of spinning, waiting for <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> to return. So, Predication can occur while ID3D11DeviceContext::GetData returns S_FALSE. Another way to think of it: an application can also use Predication as a fallback, if it is possible that ID3D11DeviceContext::GetData returns S_FALSE. If ID3D11DeviceContext::GetData returns S_OK, the application can skip calling the graphics commands manually with it's own application logic. 	
            </remarks>	
            <param name="redicateRef">Pointer to a predicate (see <see cref="T:SharpDX.Direct3D11.Predicate"/>). A NULL value indicates "no" predication; in this case, the value of PredicateValue is irrelevent but will be preserved for <see cref="M:SharpDX.Direct3D11.DeviceContext.GetPredication(System.Boolean@)"/>. </param>
            <param name="predicateValue">If TRUE, rendering will be affected by when the predicate's conditions are met. If FALSE, rendering will be affected when the conditions are not met. </param>
            <unmanaged>void ID3D11DeviceContext::SetPredication([In, Optional] ID3D11Predicate* pPredicate,[In] BOOL PredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawAuto">
            <summary>	
            Draw geometry of an unknown size.	
            </summary>	
            <remarks>	
            A draw API submits work to the rendering pipeline. This API submits work of an unknown size that was processed by the input assembler, vertex shader, and stream-output stages;  the work may or may not have gone through the geometry-shader stage. After data has been streamed out to stream-output stage buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler. The following diagram shows the DrawAuto process.  ?  Diagram of DrawAuto as data moves through several stages to a buffer and then back to the Input Assembler stage ? Calling DrawAuto does not change the state of the streaming-output buffers that were bound again as inputs. DrawAuto only works when drawing with one input buffer bound as an input to the IA stage at slot 0. Applications must create the SO buffer resource with both binding flags, <see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/> and D3D11_BIND_STREAM_OUTPUT. This API does not support indexing or instancing. If an application needs to retrieve the size of the streaming-output buffer, it can query for statistics on streaming output by using <see cref="F:SharpDX.Direct3D11.QueryType.StreamOutputStatistics"/>. 	
            </remarks>	
            <unmanaged>void ID3D11DeviceContext::DrawAuto()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawIndexedInstancedIndirect(SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            Draw indexed, instanced, GPU-generated primitives.	
            </summary>	
            <remarks>	
            When an application creates a buffer that is associated with the <see cref="T:SharpDX.Direct3D11.Buffer"/> interface that  pBufferForArgs points to, the application must set the <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/> flag in the MiscFlags member of the <see cref="T:SharpDX.Direct3D11.BufferDescription"/> structure that describes the buffer. To create the buffer, the application calls the <see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/> method and in this call passes a reference to D3D11_BUFFER_DESC in the pDesc parameter. 	
            </remarks>	
            <param name="bufferForArgsRef">A reference to an <see cref="T:SharpDX.Direct3D11.Buffer"/>, which is a buffer containing the GPU generated primitives. </param>
            <param name="alignedByteOffsetForArgs">Offset in pBufferForArgs to the start of the GPU generated primitives. </param>
            <unmanaged>void ID3D11DeviceContext::DrawIndexedInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] int AlignedByteOffsetForArgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DrawInstancedIndirect(SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            Draw instanced, GPU-generated primitives.	
            </summary>	
            <remarks>	
            When an application creates a buffer that is associated with the <see cref="T:SharpDX.Direct3D11.Buffer"/> interface that  pBufferForArgs points to, the application must set the <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/> flag in the MiscFlags member of the <see cref="T:SharpDX.Direct3D11.BufferDescription"/> structure that describes the buffer. To create the buffer, the application calls the <see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/> method and in this call passes a reference to D3D11_BUFFER_DESC in the pDesc parameter. 	
            </remarks>	
            <param name="bufferForArgsRef">A reference to an <see cref="T:SharpDX.Direct3D11.Buffer"/>, which is a buffer containing the GPU generated primitives. </param>
            <param name="alignedByteOffsetForArgs">Offset in pBufferForArgs to the start of the GPU generated primitives. </param>
            <unmanaged>void ID3D11DeviceContext::DrawInstancedIndirect([In] ID3D11Buffer* pBufferForArgs,[In] int AlignedByteOffsetForArgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)">
            <summary>	
            Execute a command list from a thread group.	
            </summary>	
            <remarks>	
            A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector  given by (x,y,z). In the following illustration, assume a thread group with 50 threads where the size of the group is given by (5,5,2). A single thread is identified from a  thread group with 50 threads in it, using the vector (4,1,1).  ?  Illustration of a single thread within a thread group of 50 threads ? The following illustration shows the relationship between the parameters passed to ID3D11DeviceContext::Dispatch, Dispatch(5,3,2), the values specified in the {{numthreads}} attribute, numthreads(10,8,3), and values that will passed to the compute shader for the thread-related system values 	
            ({{SV_GroupIndex}},{{SV_DispatchThreadID}},{{SV_GroupThreadID}},{{SV_GroupID}}).  ?  Illustration of the relationship between Dispatch, thread groups, and threads ? 	
            </remarks>	
            <param name="threadGroupCountX">The number of groups dispatched in the x direction. ThreadGroupCountX must be less than 64k. </param>
            <param name="threadGroupCountY">The number of groups dispatched in the y direction. ThreadGroupCountY must be less than 64k. </param>
            <param name="threadGroupCountZ">The number of groups dispatched in the z direction.  ThreadGroupCountZ must be less than 64k.  In feature level 10 the value for ThreadGroupCountZ must be 1. </param>
            <unmanaged>void ID3D11DeviceContext::Dispatch([In] int ThreadGroupCountX,[In] int ThreadGroupCountY,[In] int ThreadGroupCountZ)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DispatchIndirect(SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>	
            Execute a command list to draw GPU-generated primitives over one or more thread groups.	
            </summary>	
            <remarks>	
            When an application creates a buffer that is associated with the <see cref="T:SharpDX.Direct3D11.Buffer"/> interface that  pBufferForArgs points to, the application must set the <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs"/> flag in the MiscFlags member of the <see cref="T:SharpDX.Direct3D11.BufferDescription"/> structure that describes the buffer. To create the buffer, the application calls the <see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/> method and in this call passes a reference to D3D11_BUFFER_DESC in the pDesc parameter. 	
            </remarks>	
            <param name="bufferForArgsRef">A reference to an <see cref="T:SharpDX.Direct3D11.Buffer"/>, which must be loaded with data that matches the argument list for <see cref="M:SharpDX.Direct3D11.DeviceContext.Dispatch(System.Int32,System.Int32,System.Int32)"/>. </param>
            <param name="alignedByteOffsetForArgs">A byte-aligned offset between the start of the buffer and the arguments. </param>
            <unmanaged>void ID3D11DeviceContext::DispatchIndirect([In] ID3D11Buffer* pBufferForArgs,[In] int AlignedByteOffsetForArgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})">
            <summary>	
            Copy a region from a source resource to a destination resource.	
            </summary>	
            <remarks>	
            The source box must be within the size of the source resource. The destination offsets, (x, y, and z) allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. {{D3D11CalcSubresource}} is a helper function for calculating subresource indexes. CopySubresourceRegion performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources:  Must be different subresources (although they can be from the same resource). Must be the same type. Must have compatible DXGI formats (identical or from the same type group). For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. May not be currently mapped.  CopySubresourceRegion only supports copy; it does not support any stretch, color key, blend, or format conversions. An application that needs to copy an entire resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> instead. CopySubresourceRegion is an asynchronous call which may be added to the command-buffer queue, this attempts to remove pipeline stalls that may occur when copying data. See performance considerations for more details. Note??If you use CopySubresourceRegion with a depth-stencil buffer or a multisampled resource, you must copy the whole subresource. In this situation, you must pass 0 to the DstX, DstY, and DstZ parameters and NULL to the pSrcBox parameter. In addition, source and destination resources, which are represented by the pSrcResource and pDstResource parameters, should have identical sample count values. Example The following code snippet copies a box (located at (120,100),(200,220)) from a source texture into a reqion (10,20),(90,140) in a destination texture. 	
            <code> D3D11_BOX sourceRegion;	
            sourceRegion.left = 120;	
            sourceRegion.right = 200;	
            sourceRegion.top = 100;	
            sourceRegion.bottom = 220;	
            sourceRegion.front = 0;	
            sourceRegion.back = 1; pd3dDeviceContext-&gt;CopySubresourceRegion( pDestTexture, 0, 10, 20, 0, pSourceTexture, 0, &amp;sourceRegion ); </code>	
            	
             Notice, that for a 2D texture, front and back are set to 0 and 1 respectively. 	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="dstSubresource">Destination subresource index. </param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region. </param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero. </param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero. </param>
            <param name="srcResourceRef">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="srcSubresource">Source subresource index. </param>
            <param name="srcBoxRef">A reference to a 3D box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>) that defines the source subresources that can be copied. If NULL, the entire source subresource is copied. The box must fit within the source resource. </param>
            <unmanaged>void ID3D11DeviceContext::CopySubresourceRegion([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In] int DstX,[In] int DstY,[In] int DstZ,[In] ID3D11Resource* pSrcResource,[In] int SrcSubresource,[In, Optional] const D3D11_BOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)">
            <summary>	
            Copy the entire contents of the source resource to the destination resource using the GPU. 	
            </summary>	
            <remarks>	
            This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:  Must be different resources. Must be the same type. Must have identical dimensions (including width, height, depth, and size as appropriate). Will only be copied. CopyResource does not support any stretch, color key, blend, or format conversions. Must have compatible DXGI formats, which means the formats must be identical or at least from the same type group. For example, a DXGI_FORMAT_R32G32B32_FLOAT texture can be copied to an DXGI_FORMAT_R32G32B32_UINT texture since both of these formats are in the DXGI_FORMAT_R32G32B32_TYPELESS group. Might not be currently mapped.  You cannot use an {{Immutable}} resource as a destination. You can use a   {{depth-stencil}} resource as either a source or a destination.  Resources created with multisampling capability (see <see cref="T:SharpDX.DXGI.SampleDescription"/>) can be used as source and destination only if both source and destination have identical multisampled count and quality. If source and destination differ in multisampled count and quality or if one is multisampled and the other is not multisampled the call to ID3D11DeviceContext::CopyResource fails. The method is an asynchronous call which may be added to the command-buffer queue. This attempts to remove pipeline stalls that may occur when copying data.  An application that only needs to copy a portion of the data in a resource should use <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/> instead. 	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="srcResourceRef">A reference to the source resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <unmanaged>void ID3D11DeviceContext::CopyResource([In] ID3D11Resource* pDstResource,[In] ID3D11Resource* pSrcResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.UpdateSubresource(SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion},System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            The CPU copies data from memory to a subresource created in non-mappable memory.	
            </summary>	
            <remarks>	
            For a shader-constant buffer; set pDstBox to NULL. It is not possible to use this method to partially update a shader-constant buffer. A resource cannot be used as a destination if:  the resource is created with {{immutable}} usage. the resource is created as a depth-stencil resource. the resource is created with multisampling capability (see <see cref="T:SharpDX.DXGI.SampleDescription"/>).  When UpdateSubresource returns, the application is free to change or even free the data pointed to by pSrcData because the method has already copied/snapped away the original contents. The performance of UpdateSubresource depends on whether or not there is contention for the destination resource. For example, contention for a vertex buffer resource occurs when the application executes a Draw call and later calls UpdateSubresource on the same vertex buffer before the Draw call is actually executed by the GPU.  When there is contention for the resource, UpdateSubresource will perform 2 copies of the source data. First, the data is copied by the CPU to a temporary storage space accessible by the command buffer. This copy happens before the method returns.  A second copy is then performed by the GPU to copy the source data into non-mappable memory. This second copy happens asynchronously because it is executed by GPU when the command buffer is flushed. When there is no resource contention, the behavior of UpdateSubresource is dependent on which is faster (from the CPU's perspective): copying the data to the command buffer and then having a second copy execute when the command buffer is flushed, or having the CPU copy the data to the final resource location. This is dependent on the architecture of the underlying system.  To better understand the source row pitch and source depth pitch parameters, the following illustration shows a 3D volume texture.  ?  Illustration of a 3D volume texture ? Each block in this visual represents an element of data, and the size of each element is dependent on the resource's format. For example, if the resource format is DXGI_FORMAT_R32G32B32A32_FLOAT, the size of each element would be 128 bits, or 16 bytes. This 3D volume texture has a width of two, a height of three, and a depth of four. To calculate the source row pitch and source depth pitch for a given resource, use the following formulas:  Source Row Pitch = [size of one element in bytes] * [number of elements in one row] Source Depth Pitch = [Source Row Pitch] * [number of rows (height)]  In the case of this example 3D volume texture where the size of each element is 16 bytes, the formulas are as follows:  Source Row Pitch = 16 * 2 = 32 Source Depth Pitch = 16 * 2 * 3 = 96  The following illustration shows the resource as it is laid out in memory.  ?  Illustration of a 3D volume texture laid out in memory ? For example, the following code snippet shows how to specify a destination region in a 2D texture. Assume the destination texture is 512x512 and the operation will copy the data pointed to by pData to  [(120,100)..(200,220)] in the destination texture. Also assume that rowPitch has been initialized with the proper value (as explained above). front and back are set to 0 and 1 respectively, because by having front equal to back, the box is technically empty. 	
            <code> D3D11_BOX destRegion;	
            destRegion.left = 120;	
            destRegion.right = 200;	
            destRegion.top = 100;	
            destRegion.bottom = 220;	
            destRegion.front = 0;	
            destRegion.back = 1; pd3dDeviceContext-&gt;UpdateSubresource( pDestTexture, 0, &amp;destRegion, pData, rowPitch, 0 ); </code>	
            	
             The 1D case is similar. The following snippet shows how to specify a destination region in a 1D texture. Use the same assumptions as above, except that the texture is 512 in length. 	
            <code> D3D11_BOX destRegion;	
            destRegion.left = 120	
            destRegion.right = 200;	
            destRegion.top = 0;	
            destRegion.bottom = 1;	
            destRegion.front = 0;	
            destRegion.back = 1; pd3dDeviceContext-&gt;UpdateSubresource( pDestTexture, 0, &amp;destRegion, pData, rowPitch, 0 ); </code>	
            	
             Calling UpdateSubresource on a Deferred Context If your application calls UpdateSubresource on a deferred context with a destination box?to which pDstBox points?that has a non-(0,0,0) offset, where the driver does not support command lists, UpdateSubresource inappropriately applies that destination-box offset to the pSrcData parameter. To work around this behavior, use the following code: 	
            <code> HRESULT UpdateSubresource_Workaround( ID3D11Device *pDevice, ID3D11DeviceContext *pDeviceContext, ID3D11Resource *pDstResource, UINT dstSubresource, const D3D11_BOX *pDstBox, const void *pSrcData, UINT srcBytesPerElement, UINT srcRowPitch, UINT srcDepthPitch, bool* pDidWorkAround )	
            { HRESULT hr = S_OK; bool needWorkaround = false; D3D11_DEVICE_CONTEXT_TYPE contextType = pDeviceContext-&gt;GetType(); if( pDstBox &amp;&amp; (D3D11_DEVICE_CONTEXT_DEFERRED == contextType) ) { D3D11_FEATURE_DATA_THREADING threadingCaps = { FALSE, FALSE }; hr = pDevice-&gt;CheckFeatureSupport( D3D11_FEATURE_THREADING, &amp;threadingCaps, sizeof(threadingCaps) ); if( SUCCEEDED(hr) ) { if( !threadingCaps.DriverCommandLists ) { needWorkaround = true; } } } const void* pAdjustedSrcData = pSrcData; if( needWorkaround ) { D3D11_BOX alignedBox = *pDstBox; // convert from pixels to blocks if( m_bBC ) { alignedBox.left     /= 4; alignedBox.right    /= 4; alignedBox.top      /= 4; alignedBox.bottom   /= 4; } pAdjustedSrcData = ((const BYTE*)pSrcData) - (alignedBox.front * srcDepthPitch) - (alignedBox.top * srcRowPitch) - (alignedBox.left * srcBytesPerElement); } pDeviceContext-&gt;UpdateSubresource( pDstResource, dstSubresource, pDstBox, pAdjustedSrcData, srcRowPitch, srcDepthPitch ); if( pDidWorkAround ) { *pDidWorkAround = needWorkaround; } return hr;	
            } </code>	
            	
             	
            </remarks>	
            <param name="dstResourceRef">A reference to the destination resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="dstSubresource">A zero-based index, that identifies the destination subresource. See {{D3D11CalcSubresource}} for more details. </param>
            <param name="dstBoxRef">A reference to a box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If NULL, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>). </param>
            <param name="srcDataRef">void A reference to the source data in memory. </param>
            <param name="srcRowPitch">The size of one row of the source data. </param>
            <param name="srcDepthPitch">The size of one depth slice of source data. </param>
            <unmanaged>void ID3D11DeviceContext::UpdateSubresource([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In, Optional] const D3D11_BOX* pDstBox,[In] const void* pSrcData,[In] int SrcRowPitch,[In] int SrcDepthPitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CopyStructureCount(SharpDX.Direct3D11.Buffer,System.Int32,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Copies data from a buffer holding variable length data.	
            </summary>	
            <param name="dstBufferRef">Pointer to <see cref="T:SharpDX.Direct3D11.Buffer"/>.  This can be any buffer resource that other copy commands,  such as <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> or <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/>, are able to write to. </param>
            <param name="dstAlignedByteOffset">Offset from the start of pDstBuffer to write 32-bit UINT structure (vertex) count from pSrcView. </param>
            <param name="srcViewRef">Pointer to an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> of a Structured Buffer resource created with either  <see cref="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Append"/> or D3D11_BUFFER_UAV_FLAG_COUNTER specified  when the UAV was created.   These types of resources have hidden counters tracking "how many" records have  been written. </param>
            <unmanaged>void ID3D11DeviceContext::CopyStructureCount([In] ID3D11Buffer* pDstBuffer,[In] int DstAlignedByteOffset,[In] ID3D11UnorderedAccessView* pSrcView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ClearRenderTargetView(SharpDX.Direct3D11.RenderTargetView,SharpDX.Color4)">
            <summary>	
            Set all the elements in a render target to one value.	
            </summary>	
            <remarks>	
            Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.   Differences between Direct3D 9 and Direct3D 11/10: Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.   ? 	
            </remarks>	
            <param name="renderTargetViewRef">Pointer to the rendertarget. </param>
            <param name="colorRGBA">A 4-component array that represents the color to fill the render target with. </param>
            <unmanaged>void ID3D11DeviceContext::ClearRenderTargetView([In] ID3D11RenderTargetView* pRenderTargetView,[In] const SHARPDX_COLOR4* ColorRGBA)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ClearUnorderedAccessView(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Int4)">
            <summary>	
            Clears an {{unordered access}} resource with bit-precise values.	
            </summary>	
            <remarks>	
            This API copies the lower ni bits from each array element i to the corresponding channel, where ni is the number of bits in  the ith channel of the resource format (for example, R8G8B8_FLOAT has 8 bits for the first 3 channels). This works on any UAV with no format conversion.  For a raw or structured buffer view, only the first array element value is used. 	
            </remarks>	
            <param name="unorderedAccessViewRef">The <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> to clear. </param>
            <param name="values">Values to copy to corresponding channels, see remarks. </param>
            <unmanaged>void ID3D11DeviceContext::ClearUnorderedAccessViewUint([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const int Values[4])</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ClearUnorderedAccessView(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Vector4)">
            <summary>	
            Clears an {{unordered access}} resource with a float value.	
            </summary>	
            <remarks>	
            This API works on FLOAT, UNORM, and SNORM unordered access views (UAVs), with format conversion from FLOAT to *NORM where appropriate. On other UAVs, the operation is invalid and the call will not reach the driver. 	
            </remarks>	
            <param name="unorderedAccessViewRef">The <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> to clear. </param>
            <param name="values">FLOATS Values to copy to corresponding channels, see remarks. </param>
            <unmanaged>void ID3D11DeviceContext::ClearUnorderedAccessViewFloat([In] ID3D11UnorderedAccessView* pUnorderedAccessView,[In] const float Values[4])</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ClearDepthStencilView(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.DepthStencilClearFlags,System.Single,System.Byte)">
            <summary>	
            Clears the depth-stencil resource.	
            </summary>	
            <remarks>	
            Differences between Direct3D 9 and Direct3D 11/10: Unlike Direct3D 9, the full extent of the resource view is always cleared. Viewport and scissor settings are not applied.   ? 	
            </remarks>	
            <param name="depthStencilViewRef">Pointer to the depth stencil to be cleared. </param>
            <param name="clearFlags">Identify the type of data to clear (see <see cref="T:SharpDX.Direct3D11.DepthStencilClearFlags"/>). </param>
            <param name="depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1. </param>
            <param name="stencil">UINT8 Clear the stencil buffer with this value. </param>
            <unmanaged>void ID3D11DeviceContext::ClearDepthStencilView([In] ID3D11DepthStencilView* pDepthStencilView,[In] D3D11_CLEAR_FLAG ClearFlags,[In] float Depth,[In] byte Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GenerateMips(SharpDX.Direct3D11.ShaderResourceView)">
            <summary>	
            Generate mipmaps for the given shader resource.	
            </summary>	
            <remarks>	
            GenerateMips may be called on any shader-resource view in order to generate the lower mipmap levels. GenerateMips uses the largest mipmap level of the view to recursively generate the lower levels of the mip, stopping with the smallest level specified by the view. If the base resource was not created with <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.GenerateMipMaps"/>, this call has no effect. All video adapters support generating mipmaps if you are using any of the following formats: 	
            <code> DXGI_FORMAT_A8_UNORM	
            DXGI_FORMAT_R10G10B10A2_UNORM	
            DXGI_FORMAT_R11G11B10_FLOAT	
            DXGI_FORMAT_R16_FLOAT	
            DXGI_FORMAT_R16_SNORM	
            DXGI_FORMAT_R16_UNORM	
            DXGI_FORMAT_R16G16_FLOAT	
            DXGI_FORMAT_R16G16_SNORM	
            DXGI_FORMAT_R16G16_UNORM	
            DXGI_FORMAT_R16G16B16A16_FLOAT	
            DXGI_FORMAT_R16G16B16A16_SNORM	
            DXGI_FORMAT_R16G16B16A16_UNORM	
            DXGI_FORMAT_R32_FLOAT	
            DXGI_FORMAT_R32G32_FLOAT	
            DXGI_FORMAT_R32G32B32A32_FLOAT	
            DXGI_FORMAT_R8_SNORM	
            DXGI_FORMAT_R8_UNORM	
            DXGI_FORMAT_R8G8_SNORM	
            DXGI_FORMAT_R8G8_UNORM	
            DXGI_FORMAT_R8G8B8A8_SNORM	
            DXGI_FORMAT_R8G8B8A8_UNORM	
            DXGI_FORMAT_R8G8B8A8_UNORM_SRGB </code>	
            	
             Some video adapters support generating mipmaps if you are using this format: 	
            <code> DXGI_FORMAT_R32G32B32_FLOAT </code>	
            	
             For all other unsupported formats, this method will silently fail. 	
            </remarks>	
            <param name="shaderResourceViewRef">Pointer to an <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> interface that represents the shader resource. </param>
            <unmanaged>void ID3D11DeviceContext::GenerateMips([In] ID3D11ShaderResourceView* pShaderResourceView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.SetMinimumLod(SharpDX.Direct3D11.Resource,System.Single)">
            <summary>	
            Sets the minimum level-of-detail (LOD) for a resource.	
            </summary>	
            <remarks>	
            To use a resource with SetResourceMinLOD, you must set the <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.ResourceClamp"/> flag when you create that resource. For Direct3D 10 and Direct3D 10.1, when sampling from a texture resource in a shader, the sampler can define a minimum LOD clamp to force sampling from less detailed mip levels.  For Direct3D 11, this functionality is extended from the sampler to the entire resource. Therefore, the application can specify the highest-resolution mip level of a resource that is available for access. This restricts the set of mip levels that are required to be resident in GPU memory, thereby saving memory. The set of mip levels resident per-resource in GPU memory can be specified by the user. Minimum LOD affects all of the resident mip levels. Therefore, only the resident mip levels can be updated and read from. All methods that access texture resources must adhere to minimum LOD clamps. Empty-set accesses are handled as out-of-bounds cases. 	
            </remarks>	
            <param name="resourceRef">A reference to an <see cref="T:SharpDX.Direct3D11.Resource"/> that represents the resource. </param>
            <param name="minLOD">float The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource. For example, the maximum number of mipmap levels of a 1D texture is specified in the  MipLevels member of the  <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/> structure. </param>
            <unmanaged>void ID3D11DeviceContext::SetResourceMinLOD([In] ID3D11Resource* pResource,[None] float MinLOD)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetMinimumLod(SharpDX.Direct3D11.Resource)">
            <summary>	
            Gets the minimum level-of-detail (LOD).	
            </summary>	
            <param name="resourceRef">A reference to an <see cref="T:SharpDX.Direct3D11.Resource"/> which represents the resource. </param>
            <returns>float Returns the minimum LOD. </returns>
            <unmanaged>float ID3D11DeviceContext::GetResourceMinLOD([In] ID3D11Resource* pResource)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ResolveSubresource_(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,SharpDX.DXGI.Format)">
            <summary>	
            Copy a multisampled resource into a non-multisampled resource.	
            </summary>	
            <remarks>	
            This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass. The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this:  ScenarioRequirements Source and destination are prestructured and typedBoth the source and destination must have identical formats and that format must be specified in the Format parameter. One resource is prestructured and typed and the other is prestructured and typelessThe typed resource must have a format that is compatible with the typeless resource (i.e. the typed resource is DXGI_FORMAT_R32_FLOAT and the typeless resource is DXGI_FORMAT_R32_TYPELESS). The format of the typed resource must be specified in the Format parameter. Source and destination are prestructured and typelessBoth the source and desintation must have the same typeless format (i.e. both must have DXGI_FORMAT_R32_TYPELESS), and the Format parameter must specify a format that is compatible with the source and destination (i.e. if both are DXGI_FORMAT_R32_TYPELESS then DXGI_FORMAT_R32_FLOAT could be specified in the Format parameter). For example, given the DXGI_FORMAT_R16G16B16A16_TYPELESS format:  The source (or dest) format could be DXGI_FORMAT_R16G16B16A16_UNORM The dest (or source) format could be DXGI_FORMAT_R16G16B16A16_FLOAT    ? 	
            </remarks>	
            <param name="dstResourceRef">Destination resource. Must be a created with the <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/> flag and be single-sampled. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="dstSubresource">A zero-based index, that identifies the destination subresource. Use {{D3D11CalcSubresource}} to calculate the index. </param>
            <param name="srcResourceRef">Source resource. Must be multisampled. </param>
            <param name="srcSubresource">&gt;The source subresource of the source resource. </param>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> that indicates how the multisampled resource will be resolved to a single-sampled resource.  See remarks. </param>
            <unmanaged>void ID3D11DeviceContext::ResolveSubresource([In] ID3D11Resource* pDstResource,[In] int DstSubresource,[In] ID3D11Resource* pSrcResource,[In] int SrcSubresource,[In] DXGI_FORMAT Format)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ExecuteCommandList(SharpDX.Direct3D11.CommandList,System.Boolean)">
            <summary>	
            Queues commands from a command list onto a device.	
            </summary>	
            <remarks>	
            Use this method to play back a command list that was recorded by a deferred context on any thread. This method performs some runtime validation related to queries. Queries that are begun in a device context cannot be manipulated indirectly by executing a command list (that is, Begin or End was invoked against the same query by the deferred context which generated the command list). If such a condition occurs, the ExecuteCommandList method does not execute the command list. However, the state of the device context is still maintained, as would be expected (<see cref="M:SharpDX.Direct3D11.DeviceContext.ClearState"/> is performed, unless the application indicates to preserve the device context state). 	
            </remarks>	
            <param name="commandListRef">A reference to an <see cref="T:SharpDX.Direct3D11.CommandList"/> interface that encapsulates a command list. </param>
            <param name="restoreContextState">A Boolean flag that determines whether the immediate context state is saved prior to and restored after the execution of a command list. Use TRUE to indicate that the runtime needs to save and restore the state. Use FALSE to indicate that no state shall be saved or restored, which causes the immediate context to  return to its default state after the command list executes. Applications should typically use FALSE unless they will restore the state to be nearly equivalent to the state that the runtime would restore if TRUE were passed. When applications use FALSE, they can avoid unnecessary and inefficient state transitions. </param>
            <unmanaged>void ID3D11DeviceContext::ExecuteCommandList([In] ID3D11CommandList* pCommandList,[None] BOOL RestoreContextState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetPredication(System.Int32@)">
            <summary>	
            Get the rendering predicate state.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="redicateValueRef">Address of a boolean to fill with the predicate comparison value. FALSE upon device creation. </param>
            <unmanaged>void ID3D11DeviceContext::GetPredication([Out, Optional] ID3D11Predicate** ppPredicate,[Out, Optional] BOOL* pPredicateValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ClearState">
            <summary>	
            Restore all default settings.	
            </summary>	
            <remarks>	
            This method resets any device context to the default settings. This sets all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to NULL. The primitive topology is set to UNDEFINED. For a scenario where you would like to clear a list of commands recorded so far, call <see cref="M:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal(System.Boolean,SharpDX.Direct3D11.CommandList@)"/> and throw away the resulting <see cref="T:SharpDX.Direct3D11.CommandList"/>. 	
            </remarks>	
            <unmanaged>void ID3D11DeviceContext::ClearState()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.Flush">
            <summary>	
            Send queued-up commands in the command buffer to the GPU.	
            </summary>	
            <remarks>	
            Most applications will not need to call this method. Calling this method when not necessary will incur a performance penalty.  Each call to Flush incurs a significant amount of overhead. When Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer.  Flush sends those commands to the GPU for processing. Normally, these commands are sent to the GPU automatically whenever Direct3D determines that  they need to be, such as when the command buffer is full or when mapping a resource. Flush will send the commands manually. Flush should be used when the CPU waits for an arbitrary amount of time (such as when  calling {{Sleep}}). Because Flush operates asynchronously,  it can return either before or after the GPU finishes executing the queued graphics commands. However, the graphics commands will eventually always complete. You can call the <see cref="M:SharpDX.Direct3D11.Device.CreateQuery(SharpDX.Direct3D11.QueryDescription,SharpDX.Direct3D11.Query@)"/> method with the <see cref="F:SharpDX.Direct3D11.QueryType.Event"/> value to create an event query; you can then use that event query in a call to the <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> method to determine when the GPU is finished processing the graphics commands.	
             Direct3D11 defers the destruction of objects, an application cannot rely upon objects immediately being destroyed. Calling Flush will destroy any  objects whose destruction has been deferred.  If an application requires synchronous destruction of an object the application should release all its references, call <see cref="M:SharpDX.Direct3D11.DeviceContext.ClearState"/>, and then call Flush. 	
            </remarks>	
            <unmanaged>void ID3D11DeviceContext::Flush()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetTypeInfo">
            <summary>	
            Gets the type of {{device context}}.	
            </summary>	
            <returns>A member of <see cref="T:SharpDX.Direct3D11.DeviceContextType"/> that indicates the type of device context. </returns>
            <unmanaged>D3D11_DEVICE_CONTEXT_TYPE ID3D11DeviceContext::GetType()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GetContextFlags">
            <summary>	
            Gets the initialization flags associated with the current deferred context.	
            </summary>	
            <remarks>	
            The GetContextFlags method gets the flags that were supplied to the ContextFlags parameter of <see cref="M:SharpDX.Direct3D11.Device.CreateDeferredContext(System.Int32,SharpDX.Direct3D11.DeviceContext@)"/>; however, the context flag is reserved for future use. 	
            </remarks>	
            <returns>No documentation.</returns>
            <unmanaged>int ID3D11DeviceContext::GetContextFlags()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal(System.Boolean,SharpDX.Direct3D11.CommandList@)">
            <summary>	
            Create a command list and record graphics commands into it.	
            </summary>	
            <remarks>	
            Create a command list from a deferred context and record commands into it by calling FinishCommandList. Play back a command list with an immediate context by calling <see cref="M:SharpDX.Direct3D11.DeviceContext.ExecuteCommandList(SharpDX.Direct3D11.CommandList,System.Boolean)"/>. Immediate context state is cleared before and after a command list is executed. A command list has no concept of inheritance. Each call to FinishCommandList will record only the state set since any previous call to  FinishCommandList. For example, the state of a {{device context}} is its render state or pipeline state. To retrieve device context state, an application can call  <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> or  <see cref="M:SharpDX.Direct3D11.DeviceContext.GetPredication(System.Boolean@)"/>. For more information about how to use FinishCommandList, see {{How to: Record a Command List}}. 	
            </remarks>	
            <param name="restoreDeferredContextState">A Boolean flag that determines whether the runtime saves deferred context state before it executes  FinishCommandList and restores it afterwards. Use TRUE to indicate that the runtime needs to save and restore the state. Use FALSE to indicate that the runtime will not save or restore any state. In this case, the deferred context will  return to its default state after the call to  FinishCommandList completes. Typically, use FALSE unless you restore the state to be nearly equivalent to the state that the runtime would restore if you passed TRUE. When you use FALSE, you can avoid unnecessary and inefficient state transitions. </param>
            <param name="commandListRef">Upon completion of the method, the passed reference to an <see cref="T:SharpDX.Direct3D11.CommandList"/> interface reference is initialized with the recorded command list information. </param>
            <returns>Returns S_OK if successful; otherwise, returns one of the following:  Returns DXGI_ERROR_DEVICE_REMOVED if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device. Returns DXGI_ERROR_INVALID_CALL if FinishCommandList cannot be called from the current context. See remarks. Returns E_OUTOFMEMORY if the application has exhausted available memory.  </returns>
            <unmanaged>HRESULT ID3D11DeviceContext::FinishCommandList([None] BOOL RestoreDeferredContextState,[Out, Optional] ID3D11CommandList** ppCommandList)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.InputAssembler">
            <summary>Inner interface giving access to InputAssemblerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.VertexShader">
            <summary>Inner interface giving access to VertexShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.PixelShader">
            <summary>Inner interface giving access to PixelShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.GeometryShader">
            <summary>Inner interface giving access to GeometryShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.StreamOutput">
            <summary>Inner interface giving access to StreamOutputStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.DomainShader">
            <summary>Inner interface giving access to DomainShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.HullShader">
            <summary>Inner interface giving access to HullShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.Rasterizer">
            <summary>Inner interface giving access to RasterizerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMerger">
            <summary>Inner interface giving access to OutputMergerStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.ComputeShader">
            <summary>Inner interface giving access to ComputeShaderStage methods. </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.TypeInfo">
            <summary>	
            Gets the type of {{device context}}.	
            </summary>	
            <unmanaged>D3D11_DEVICE_CONTEXT_TYPE ID3D11DeviceContext::GetType()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.ContextFlags">
            <summary>	
            Gets the initialization flags associated with the current deferred context.	
            </summary>	
            <remarks>	
            The GetContextFlags method gets the flags that were supplied to the ContextFlags parameter of <see cref="M:SharpDX.Direct3D11.Device.CreateDeferredContext(System.Int32,SharpDX.Direct3D11.DeviceContext@)"/>; however, the context flag is reserved for future use. 	
            </remarks>	
            <unmanaged>int ID3D11DeviceContext::GetContextFlags()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.StreamOutputStage">
            <summary>Inner interface StreamOutputStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.SetTargets(SharpDX.Direct3D11.StreamOutputBufferBinding[])">
            <summary>	
            Set the target output {{buffers}} for the {{StreamOutput}} stage, which enables/disables the pipeline to stream-out data.	
            </summary>	
            <remarks>	
            Call ID3D10Device::SOSetTargets (before any draw calls) to stream data out; call SOSetTargets with NULL to stop streaming data out. For an example, see Exercise 01 from the GDC 2007 workshop, which sets the stream output rendertargets before calling draw methods in the RenderInstanceToStream function. An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The {{Debug Layer}} will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device. 	
            </remarks>	
            <param name="bufferBindings">an array of output buffers (see <see cref="T:SharpDX.Direct3D11.StreamOutputBufferBinding"/>) to bind to the device. The buffers must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/> flag. </param>
            <unmanaged>void SOSetTargets([In] int NumBuffers,[In, Buffer, Optional] const ID3D10Buffer** ppSOTargets,[In, Buffer, Optional] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.GetTargets(System.Int32)">
            <summary>	
            Get the target output {{buffers}} for the {{StreamOutput}} stage of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numBuffers">Number of buffers to get. A maximum of four output buffers can be retrieved. </param>
            <returns>an array of output buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to bind to the device.</returns>
            <unmanaged>void SOGetTargets([In] int NumBuffers,[Out, Buffer, Optional] ID3D10Buffer** ppSOTargets,[Out, Buffer, Optional] int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.StreamOutputStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.SetTargets(System.Int32,SharpDX.Direct3D11.Buffer[],System.Int32[])">
            <summary>	
            Set the target output buffers for the stream-output stage of the pipeline.	
            </summary>	
            <remarks>	
            An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="numBuffers">The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to NULL. See Remarks. </param>
            <param name="sOTargetsRef">The array of output buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to bind to the device. The buffers must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/> flag. </param>
            <param name="offsetsRef">Array of offsets to the output buffers from ppSOTargets, one offset for each buffer. The offset values must be in bytes. </param>
            <unmanaged>void SOSetTargets([In] int NumBuffers,[In, Buffer, Optional] const ID3D11Buffer** ppSOTargets,[In, Buffer, Optional] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.GetTargets(System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the target output buffers for the stream-output stage of the pipeline.	
            </summary>	
            <remarks>	
            A maximum of four output buffers can be retrieved. The offsets to the output buffers pointed to in the returned ppSOTargets array may be assumed to be -1 (append), as defined for use in <see cref="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.SetTargets(SharpDX.Direct3D11.StreamOutputBufferBinding[])"/>. Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numBuffers">Number of buffers to get. </param>
            <param name="sOTargetsRef">An array of output buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be retrieved from the device. </param>
            <unmanaged>void SOGetTargets([In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppSOTargets)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1">
            <summary>
            Common Shader class. Provides a common set of methods for a Shader Stage.
            TODO: check if usage of abstract is not introducing an unacceptable overhead...
            </summary>
            <typeparam name = "T">Type of the shader</typeparam>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.Get">
            <summary>
              Gets the shader currently assigned to the device.
            </summary>
            <returns>The shader (null if no shader is assigned).</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.Get(SharpDX.Direct3D11.ClassInstance[])">
            <summary>
              Gets the shader currently assigned to the device.
            </summary>
            <param name = "classInstances">An array that will be used to contain any class instances currently active.</param>
            <returns>The shader (null if no shader is assigned).</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetConstantBuffers(System.Int32,System.Int32)">
            <summary>
              Gets the constant buffers used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving constant buffers.</param>
            <param name = "count">Number of buffers to retrieve.</param>
            <returns>An array of constant buffers.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetSamplers(System.Int32,System.Int32)">
            <summary>
              Gets the sampler states used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving samplers.</param>
            <param name = "count">Number of samplers to retrieve.</param>
            <returns>An array of sampler states.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetShaderResources(System.Int32,System.Int32)">
            <summary>
              Gets the shader resources used by the shader stage.
            </summary>
            <param name = "startSlot">Index into the device's zero-based array from which to begin retrieving shader resources.</param>
            <param name = "count">Number of resources to retrieve.</param>
            <returns>An array of shader resources.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.Set(`0)">
            <summary>
              Assigns a compute shader to the device.
            </summary>
            <param name = "shader">The shader to assign to the device. Assign null to disable the compute shader.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.Set(`0,SharpDX.Direct3D11.ClassInstance[])">
            <summary>
              Assigns a compute shader to the device.
            </summary>
            <param name = "shader">The shader to assign to the device. Assign <c>null</c> to disable the compute shader.</param>
            <param name = "classInstances">An array of class-instance interfaces. Each interface used by a shader must have a corresponding class instance or the shader will get disabled.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetConstantBuffer(System.Int32,SharpDX.Direct3D11.Buffer)">
            <summary>
              Sets a single constant buffer to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the constant buffer.</param>
            <param name = "constantBuffer">constant buffer to set</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetSampler(System.Int32,SharpDX.Direct3D11.SamplerState)">
            <summary>
              Sets a single sampler to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the sampler.</param>
            <param name = "sampler">sampler state to set</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetShaderResource(System.Int32,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
              Sets a single shader resource to be used by the shader stage.
            </summary>
            <param name = "slot">Index into the device's zero-based array to which to set the resource.</param>
            <param name = "resourceView">Resource view to attach</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>
              Get the shader resources.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name = "startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name = "numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name = "shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device.</param>
            <unmanaged>void PSGetShaderResources([In] UINT StartSlot,[In] UINT NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>
              Get an array of sampler states from the shader pipeline stage.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplersRef">Arry of sampler-state interface pointers (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>) to be returned by the device.</param>
            <unmanaged>void PSGetSamplers([In] UINT StartSlot,[In] UINT NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>
              Get the constant buffers used by the shader pipeline stage.
            </summary>
            <remarks>
              Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffersRef">Array of constant buffer interface pointers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method.</param>
            <unmanaged>void PSGetConstantBuffers([In] UINT StartSlot,[In] UINT NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>
              Bind an array of shader resources to the shader stage.
            </summary>
            <remarks>
              If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with NULL.For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device.</param>
            <unmanaged>void PSSetShaderResources([In] UINT StartSlot,[In] UINT NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>
              Set an array of sampler states to the shader pipeline stage.
            </summary>
            <remarks>
              Any sampler may be set to NULL; this invokes the default state, which is defined to be the following.StateDefault ValueFilterD3D11_FILTER_MIN_MAG_MIP_LINEARAddressUD3D11_TEXTURE_ADDRESS_CLAMPAddressVD3D11_TEXTURE_ADDRESS_CLAMPAddressWD3D11_TEXTURE_ADDRESS_CLAMPMipLODBias0MaxAnisotropy1ComparisonFuncD3D11_COMPARISON_NEVERBorderColor[0]1.0fBorderColor[1]1.0fBorderColor[2]1.0fBorderColor[3]1.0fMinLOD-FLT_MAXMaxLODFLT_MAX  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks.</param>
            <unmanaged>void PSSetSamplers([In] UINT StartSlot,[In] UINT NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.CommonShaderStage`1.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>
              Set the constant buffers used by the shader pipeline stage.
            </summary>
            <remarks>
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.
            </remarks>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device.</param>
            <unmanaged>void PSSetConstantBuffers([In] UINT StartSlot,[In] UINT NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage">
            <summary>Inner interface ComputeShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetUnorderedAccessViews(System.Int32,System.Int32)">
            <summary>	
            Gets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to return (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). </param>
            <param name="count">Number of views to get (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot). </param>
            <unmanaged>void CSGetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[Out, Buffer] ID3D11UnorderedAccessView** ppUnorderedAccessViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetUnorderedAccessView(System.Int32,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessView">A reference to an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <unmanaged>void CSSetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[In, Buffer] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetUnorderedAccessView(System.Int32,SharpDX.Direct3D11.UnorderedAccessView,System.Int32)">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessView">A reference to an <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <param name="uavInitialCount">An Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept.   Any other values set the hidden counter for that Appendable/Consumeable UAV. uAVInitialCount is only relevant for UAVs which have the <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag,  otherwise the argument is ignored. </param>
            <unmanaged>void CSSetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[In, Buffer] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessViews">A reference to an array of <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <unmanaged>void CSSetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[In, Buffer] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="unorderedAccessViews">A reference to an array of <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <param name="uavInitialCounts">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept.   Any other values set the hidden counter for that Appendable/Consumeable UAV.  pUAVInitialCounts is only relevant for UAVs which have the <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag,  otherwise the argument is ignored. </param>
            <unmanaged>void CSSetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[In, Buffer] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the compute-shader stage.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.	
             	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void CSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetUnorderedAccessViews(System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Sets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to begin setting. </param>
            <param name="numUAVs">Number of views to set. </param>
            <param name="unorderedAccessViewsRef">A reference to an array of <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> references to be set by the method. </param>
            <param name="uAVInitialCountsRef">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept.   Any other values set the hidden counter for that Appendable/Consumeable UAV.  pUAVInitialCounts is only relevant for UAVs which have the <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag,  otherwise the argument is ignored. </param>
            <unmanaged>void CSSetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[In, Buffer] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetShader(SharpDX.Direct3D11.ComputeShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Set a compute shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. 	
            </remarks>	
            <param name="computeShaderRef">Pointer to a compute shader (see <see cref="T:SharpDX.Direct3D11.ComputeShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void CSSetShader([In, Optional] ID3D11ComputeShader* pComputeShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the compute-shader stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D11_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D11_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void CSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the compute-shader stage.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void CSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the compute-shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void CSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetUnorderedAccessViews(System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Gets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to return (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). </param>
            <param name="numUAVs">Number of views to get (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot). </param>
            <param name="unorderedAccessViewsRef">A reference to an array of interface references (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>) to get. </param>
            <unmanaged>void CSGetUnorderedAccessViews([In] int StartSlot,[In] int NumUAVs,[Out, Buffer] ID3D11UnorderedAccessView** ppUnorderedAccessViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetShader(SharpDX.Direct3D11.ComputeShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the compute shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="computeShaderRef">Address of a reference to a Compute shader (see <see cref="T:SharpDX.Direct3D11.ComputeShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void CSGetShader([Out] ID3D11ComputeShader** ppComputeShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler state interfaces from the compute-shader stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). </param>
            <unmanaged>void CSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.ComputeShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the compute-shader stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void CSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage">
            <summary>Inner interface InputAssemblerStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetVertexBuffers(System.Int32,SharpDX.Direct3D11.VertexBufferBinding)">
            <summary>
              Binds a single vertex buffer to the input assembler.
            </summary>
            <param name = "slot">Index of the slot to which to bind the vertex buffer.</param>
            <param name = "vertexBufferBinding">A binding for the input vertex buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetVertexBuffers(System.Int32,SharpDX.Direct3D11.VertexBufferBinding[])">
            <summary>
              Binds an array of vertex buffers to the input assembler.
            </summary>
            <param name = "firstSlot">Index of the first input slot to use for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots.</param>
            <param name = "vertexBufferBindings">An array of bindings for input vertex buffers.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetInputLayout(SharpDX.Direct3D11.InputLayout)">
            <summary>	
            Bind an input-layout object to the input-assembler stage.	
            </summary>	
            <remarks>	
            Input-layout objects describe how vertex buffer data is streamed into the IA pipeline stage. To create an input-layout object, call <see cref="M:SharpDX.Direct3D11.Device.CreateInputLayout(SharpDX.Direct3D11.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.InputLayout@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="inputLayoutRef">A reference to the input-layout object (see <see cref="T:SharpDX.Direct3D11.InputLayout"/>), which describes the input buffers that will be read by the IA stage. </param>
            <unmanaged>void IASetInputLayout([In, Optional] ID3D11InputLayout* pInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetVertexBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            Bind an array of vertex buffers to the input-assembler stage.	
            </summary>	
            <remarks>	
            For information about creating vertex buffers, see Create a Vertex Buffer. Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind NULL instead because a buffer cannot be bound as both an input and an output at the same time. The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">The first input slot for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numBuffers">The number of vertex buffers in the array. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="vertexBuffersRef">A reference to an array of vertex buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>). The vertex buffers must have been created with the <see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/> flag. </param>
            <param name="stridesRef">Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer. </param>
            <param name="offsetsRef">Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used. </param>
            <unmanaged>void IASetVertexBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppVertexBuffers,[In, Buffer] const int* pStrides,[In, Buffer] const int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetIndexBuffer(SharpDX.Direct3D11.Buffer,SharpDX.DXGI.Format,System.Int32)">
            <summary>	
            Bind an index buffer to the input-assembler stage.	
            </summary>	
            <remarks>	
            For information about creating index buffers, see {{How to: Create an Index Buffer}}. Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind  NULL instead because a buffer cannot be bound as both an input and an output at the same time. The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will  not prevent invalid data from being used by the runtime.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="indexBufferRef">A reference to an <see cref="T:SharpDX.Direct3D11.Buffer"/> object, that contains indices. The index buffer must have been created with  the <see cref="F:SharpDX.Direct3D11.BindFlags.IndexBuffer"/> flag. </param>
            <param name="format">A <see cref="T:SharpDX.DXGI.Format"/> that specifies the format of the data in the index buffer. The only formats allowed for index  buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers. </param>
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use. </param>
            <unmanaged>void IASetIndexBuffer([In, Optional] ID3D11Buffer* pIndexBuffer,[In] DXGI_FORMAT Format,[In] int Offset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.SetPrimitiveTopology(SharpDX.Direct3D.PrimitiveTopology)">
            <summary>	
            Bind information about the primitive type, and data order that describes input data for the input assembler stage.	
            </summary>	
            <param name="topology">The type of primitive and ordering of the primitive data (see <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>). </param>
            <unmanaged>void IASetPrimitiveTopology([In] D3D11_PRIMITIVE_TOPOLOGY Topology)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.GetInputLayout(SharpDX.Direct3D11.InputLayout@)">
            <summary>	
            Get a reference to the input-layout object that is bound to the input-assembler stage.	
            </summary>	
            <remarks>	
            For information about creating an input-layout object, see Creating the Input-Layout Object. Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="inputLayoutRef">A reference to the input-layout object (see <see cref="T:SharpDX.Direct3D11.InputLayout"/>), which describes the input buffers that will be read by the IA stage. </param>
            <unmanaged>void IAGetInputLayout([Out] ID3D11InputLayout** ppInputLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.GetVertexBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[],System.Int32[],System.Int32[])">
            <summary>	
            Get the vertex buffers bound to the input-assembler stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">The input slot of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. There are 16 input slots. </param>
            <param name="numBuffers">The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots. </param>
            <param name="vertexBuffersRef">A reference to an array of vertex buffers returned by the method (see <see cref="T:SharpDX.Direct3D11.Buffer"/>). </param>
            <param name="stridesRef">Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer. </param>
            <param name="offsetsRef">Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used. </param>
            <unmanaged>void IAGetVertexBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer, Optional] ID3D11Buffer** ppVertexBuffers,[Out, Buffer, Optional] int* pStrides,[Out, Buffer, Optional] int* pOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.GetIndexBuffer(SharpDX.Direct3D11.Buffer@,SharpDX.DXGI.Format@,System.Int32@)">
            <summary>	
            Get a reference to the index buffer that is bound to the input-assembler stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces  when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="indexBufferRef">A reference to an index buffer returned by the method (see <see cref="T:SharpDX.Direct3D11.Buffer"/>). </param>
            <param name="format">Specifies format of the data in the index buffer (see <see cref="T:SharpDX.DXGI.Format"/>). These formats provide the size and type of  the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT)  integers. </param>
            <param name="offset">Offset (in bytes) from the start of the index buffer, to the first index to use. </param>
            <unmanaged>void IAGetIndexBuffer([Out, Optional] ID3D11Buffer** pIndexBuffer,[Out, Optional] DXGI_FORMAT* Format,[Out, Optional] int* Offset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.InputAssemblerStage.GetPrimitiveTopology(SharpDX.Direct3D.PrimitiveTopology@)">
            <summary>	
            Get information about the primitive type, and data order that describes input data for the input assembler stage.	
            </summary>	
            <param name="topologyRef">A reference to the type of primitive, and ordering of the primitive data (see <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>). </param>
            <unmanaged>void IAGetPrimitiveTopology([Out] D3D11_PRIMITIVE_TOPOLOGY* pTopology)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.OutputMergerStage">
            <summary>Inner interface OutputMergerStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetRenderTargets(SharpDX.Direct3D11.DepthStencilView@)">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <returns>a depth-stencil view (see <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>) to be filled with the depth-stencil information from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetRenderTargets(System.Int32)">
            <summary>	
            Get references to the render targets that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <returns>an array of render targets views (see <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>) to be filled with the render targets from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetRenderTargets(System.Int32,SharpDX.Direct3D11.DepthStencilView@)">
            <summary>	
            Get references to the render targets and the depth-stencil buffer that are available to the {{output-merger stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <param name="depthStencilViewRef">Pointer to a depth-stencil view (see <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>) to be filled with the depth-stencil information from the device.</param>
            <returns>an array of render targets views (see <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>) to be filled with the render targets from the device.</returns>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D10RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D10DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetBlendState(SharpDX.Color4@,System.Int32@)">
            <summary>	
            Get the {{blend state}} of the output-merger stage.	
            </summary>	
            <remarks>	
            The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned reference(s) when they are no longer needed, or else there will be a memory leak. 	
            </remarks>	
            <param name="blendFactor">Array of blend factors, one for each RGBA component. </param>
            <param name="sampleMaskRef">Pointer to a {{sample mask}}. </param>
            <returns>a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D11.BlendState"/>).</returns>
            <unmanaged>void OMGetBlendState([Out, Optional] ID3D10BlendState** ppBlendState,[Out, Optional] float BlendFactor[4],[Out, Optional] int* pSampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetDepthStencilState(System.Int32@)">
            <summary>	
            Gets the {{depth-stencil}} state of the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="stencilRefRef">Pointer to the stencil reference value used in the {{depth-stencil}} test. </param>
            <returns>a reference to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>) to be filled with information from the device.</returns>
            <unmanaged>void OMGetDepthStencilState([Out, Optional] ID3D10DepthStencilState** ppDepthStencilState,[Out, Optional] int* pStencilRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetUnorderedAccessViews(System.Int32,System.Int32)">
            <summary>	
            Gets an array of views for an unordered resource.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index of the first element in the zero-based array to return (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). </param>
            <param name="count">Number of views to get (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot). </param>
            <unmanaged>void OMGetRenderTargetsAndUnorderedAccessViews([In] int NumRTVs,[Out, Buffer, Optional] ID3D11RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView,[In] int UAVStartSlot,[In] int NumUAVs,[Out, Buffer, Optional] ID3D11UnorderedAccessView** ppUnorderedAccessViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a set of render targets to the output-merger stage.
            </summary>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a single render target to the output-merger stage.
            </summary>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer and a set of render targets to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
              Binds a depth-stencil buffer and a single render target to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.RenderTargetView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>
              Binds a set of unordered access views and a single render target to the output-merger stage.
            </summary>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a set of unordered access views and a set of render targets to the output-merger stage.
            </summary>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a single render target to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a set of render targets to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.RenderTargetView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>
              Binds a set of unordered access views and a single render target to the output-merger stage.
            </summary>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
            <param name = "initialLengths">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept. Any other values set the hidden counter for that Appendable/Consumeable UAV.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[],SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a set of unordered access views and a set of render targets to the output-merger stage.
            </summary>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
            <param name = "initialLengths">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept. Any other values set the hidden counter for that Appendable/Consumeable UAV.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a single render target to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetView">A view of the render target to bind.</param>
            <param name = "initialLengths">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept. Any other values set the hidden counter for that Appendable/Consumeable UAV.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetTargets(SharpDX.Direct3D11.DepthStencilView,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[],SharpDX.Direct3D11.RenderTargetView[])">
            <summary>
              Binds a depth-stencil buffer, a set of unordered access views, and a set of render targets to the output-merger stage.
            </summary>
            <param name = "depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name = "startSlot">Index into a zero-based array to begin setting unordered access views.</param>
            <param name = "unorderedAccessViews">A set of unordered access views to bind.</param>
            <param name = "renderTargetViews">A set of render target views to bind.</param>
            <param name = "initialLengths">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept. Any other values set the hidden counter for that Appendable/Consumeable UAV.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.OutputMergerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetRenderTargets(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView)">
            <summary>	
            Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.	
            </summary>	
            <remarks>	
            The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same subresource to multiple render target slots.  Any render targets not defined by this call are set to NULL. If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline),  those bind points will be NULL'ed out to prevent the same subresource from being read and written simultaneously in a single rendering operation.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  If the render-target views were created from an array resource type, then all of the render-target views must have the same array size.   This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound. 	
            </remarks>	
            <param name="numViews">Number of render targets to bind (ranges between 0 and D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT). </param>
            <param name="renderTargetViewsRef">Pointer to an array of render targets (see <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>) to bind to the device.  If this parameter is NULL, no render targets are bound. See Remarks. </param>
            <param name="depthStencilViewRef">Pointer to a depth-stencil view (see <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>) to bind to the device.  If this parameter is NULL, the depth-stencil state is not bound. </param>
            <unmanaged>void OMSetRenderTargets([In] int NumViews,[In, Buffer, Optional] const ID3D11RenderTargetView** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetRenderTargetsAndUnorderedAccessViews(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView,System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32[])">
            <summary>	
            Binds resources to the output-merger stage.	
            </summary>	
            <remarks>	
            For pixel shaders, the render targets and unordered-access views share the same resource slots when being written out. This means that UAVs must be  given an offset so that they are placed in the slots after the render target views that are being bound.  Note??RTVs, DSV, and UAVs cannot be set independently; they all need to be set at the same time. Two RTVs conflict if they share a subresource (and therefore share the same resource). Two UAVs conflict if they share a subresource (and therefore share the same resource). An RTV conflicts with a UAV if they share a subresource or share a bind point. OMSetRenderTargetsAndUnorderedAccessViews operates properly in the following situations:   NumViews != D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL and NumUAVs != D3D11_KEEP_UNORDERED_ACCESS_VIEWS The following conditions must be true for OMSetRenderTargetsAndUnorderedAccessViews to succeed and for the runtime to pass the bind information to the driver:  NumViews &lt;= 8 UAVStartSlot &gt;= NumViews UAVStartSlot + NumUAVs &lt;= 8 There must be no conflicts in the set of all ppRenderTargetViews and ppUnorderedAccessView. ppDepthStencilView must match the render-target views. For more information about resource views, see {{Introduction to a Resource in Direct3D 11}}.  OMSetRenderTargetsAndUnorderedAccessViews performs the following tasks:  Unbinds all currently bound conflicting resources (stream-output target resources (SOTargets), compute shader (CS) UAVs, shader-resource views (SRVs)). Binds ppRenderTargetViews, ppDepthStencilView, and ppUnorderedAccessView.    NumViews == D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL  In this situation, OMSetRenderTargetsAndUnorderedAccessViews binds only UAVs.  The following conditions must be true for OMSetRenderTargetsAndUnorderedAccessViews to succeed and for the runtime to pass the bind information to the driver:  UAVStartSlot + NumUAVs &lt;= 8 There must be no conflicts in ppUnorderedAccessView.  OMSetRenderTargetsAndUnorderedAccessViews unbinds the following items:  All RTVs in slots &gt;= UAVStartSlot All RTVs that conflict with any UAVs in ppUnorderedAccessView All currently bound resources (SOTargets, CS UAVs, SRVs) that conflict with ppUnorderedAccessView  OMSetRenderTargetsAndUnorderedAccessViews binds ppUnorderedAccessView. OMSetRenderTargetsAndUnorderedAccessViews ignores ppDepthStencilView, and the current depth-stencil view remains bound.   NumUAVs == D3D11_KEEP_UNORDERED_ACCESS_VIEWS In this situation, OMSetRenderTargetsAndUnorderedAccessViews binds only RTVs and DSV.  The following conditions must be true for OMSetRenderTargetsAndUnorderedAccessViews to succeed and for the runtime to pass the bind information to the driver:  NumViews &lt;= 8 There must be no conflicts in ppRenderTargetViews. ppDepthStencilView must match the render-target views. For more information about resource views, see {{Introduction to a Resource in Direct3D 11}}.  OMSetRenderTargetsAndUnorderedAccessViews unbinds the following items:  All UAVs in slots &lt; NumViews All UAVs that conflict with any RTVs in ppRenderTargetViews All currently bound resources (SOTargets, CS UAVs, SRVs) that conflict with ppRenderTargetViews  OMSetRenderTargetsAndUnorderedAccessViews binds ppRenderTargetViews and ppDepthStencilView. OMSetRenderTargetsAndUnorderedAccessViews ignores UAVStartSlot.   	
            </remarks>	
            <param name="numRTVs">Number of render-target views (ppRenderTargetViews) and depth-stencil view (ppDepthStencilView)  to bind. If you set NumViews to D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL (0xffffffff), this method does not modify the currently bound render-target views (RTVs) and also does not modify depth-stencil view (DSV). </param>
            <param name="renderTargetViewsRef">Pointer to an array of <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>s, which represent render-target views. Specify NULL to set none. </param>
            <param name="depthStencilViewRef">Pointer to a <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>, which represents a depth-stencil view. Specify NULL to set none. </param>
            <param name="uAVStartSlot">Index into a zero-based array to begin setting unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For pixel shaders UAVStartSlot should be equal to the number of render-target views being bound.  </param>
            <param name="numUAVs">Number of unordered-access views (UAVs) in ppUnorderedAccessView. If you set NumUAVs to D3D11_KEEP_UNORDERED_ACCESS_VIEWS (0xffffffff), this method does not modify the currently bound unordered-access views. </param>
            <param name="unorderedAccessViewsRef">Pointer to an array of <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>s, which represent unordered-access views. </param>
            <param name="uAVInitialCountsRef">An array of Append/Consume buffer offsets. A value of -1 indicates the current offset should be kept. Any other values set the hidden counter  for that Appendable/Consumeable UAV. pUAVInitialCounts is only relevant for UAVs that have  the <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/> flag, otherwise the argument is ignored. </param>
            <unmanaged>void OMSetRenderTargetsAndUnorderedAccessViews([In] int NumRTVs,[In, Buffer, Optional] const ID3D11RenderTargetView** ppRenderTargetViews,[In, Optional] ID3D11DepthStencilView* pDepthStencilView,[In] int UAVStartSlot,[In] int NumUAVs,[In, Buffer, Optional] const ID3D11UnorderedAccessView** ppUnorderedAccessViews,[In, Buffer, Optional] const int* pUAVInitialCounts)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetBlendState(SharpDX.Direct3D11.BlendState,System.Nullable{SharpDX.Color4},System.Int32)">
            <summary>	
            Set the blend state of the output-merger stage.	
            </summary>	
            <remarks>	
            Blend state is used by the output-merger stage to determine how to blend together two pixel values. The two values are commonly the current pixel value and the pixel value already in the output render target. Use the {{blend operation}} to control where the two pixel values come from and how they are mathematically combined. To create a blend-state interface, call <see cref="M:SharpDX.Direct3D11.Device.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription@,SharpDX.Direct3D11.BlendState@)"/>. Passing in NULL for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.  StateDefault Value AlphaToCoverageEnableFALSE BlendEnableFALSE[8] SrcBlendD3D11_BLEND_ONE DstBlendD3D11_BLEND_ZERO BlendOpD3D11_BLEND_OP_ADD SrcBlendAlphaD3D11_BLEND_ONE DstBlendAlphaD3D11_BLEND_ZERO BlendOpAlphaD3D11_BLEND_OP_ADD RenderTargetWriteMask[8]D3D11_COLOR_WRITE_ENABLE_ALL[8]  ? A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="blendStateRef">Pointer to a blend-state interface (see <see cref="T:SharpDX.Direct3D11.BlendState"/>). Passing in NULL implies a default blend state. See remarks for further details. </param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. This requires a blend state object that specifies the <see cref="F:SharpDX.Direct3D11.BlendOption.BlendFactor"/> option. </param>
            <param name="sampleMask">32-bit sample coverage. The default value is 0xffffffff. See remarks. </param>
            <unmanaged>void OMSetBlendState([In, Optional] ID3D11BlendState* pBlendState,[In, Optional] const SHARPDX_COLOR4* BlendFactor,[In] int SampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetDepthStencilState(SharpDX.Direct3D11.DepthStencilState,System.Int32)">
            <summary>	
            Sets the depth-stencil state of the output-merger stage.	
            </summary>	
            <remarks>	
            To create a depth-stencil state interface, call <see cref="M:SharpDX.Direct3D11.Device.CreateDepthStencilState(SharpDX.Direct3D11.DepthStencilStateDescription@,SharpDX.Direct3D11.DepthStencilState@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="depthStencilStateRef">Pointer to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>) to bind to the device. Set this to NULL to use the default state listed in <see cref="T:SharpDX.Direct3D11.DepthStencilStateDescription"/>. </param>
            <param name="stencilRef">Reference value to perform against when doing a depth-stencil test. See remarks. </param>
            <unmanaged>void OMSetDepthStencilState([In, Optional] ID3D11DepthStencilState* pDepthStencilState,[In] int StencilRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetRenderTargets(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView@)">
            <summary>	
            Get references to the resources bound to the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numViews">Number of render targets to retrieve. </param>
            <param name="renderTargetViewsRef">Pointer to an array of <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>s which represent render target views. Specify NULL for this parameter when retrieval of a render target is not needed.  </param>
            <param name="depthStencilViewRef">Pointer to a <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>, which represents a depth-stencil view. Specify NULL for this parameter when retrieval of the depth-stencil view is not needed. </param>
            <unmanaged>void OMGetRenderTargets([In] int NumViews,[Out, Buffer, Optional] ID3D11RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetRenderTargetsAndUnorderedAccessViews(System.Int32,SharpDX.Direct3D11.RenderTargetView[],SharpDX.Direct3D11.DepthStencilView@,System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Get references to the resources bound to the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call {{IUnknown::Release}} on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="numRTVs">The number of render-target views to retrieve. </param>
            <param name="renderTargetViewsRef">Pointer to an array of <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>s, which represent render-target views. Specify NULL for this parameter when retrieval of render-target views is not required.  </param>
            <param name="depthStencilViewRef">Pointer to a <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>, which represents a depth-stencil view. Specify NULL for this parameter when retrieval of the depth-stencil view is not required. </param>
            <param name="uAVStartSlot">Index into a zero-based array to begin retrieving unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For pixel shaders UAVStartSlot should be equal to the number of render-target views that are bound.  </param>
            <param name="numUAVs">Number of unordered-access views to return in ppUnorderedAccessViews. This number ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot. </param>
            <param name="unorderedAccessViewsRef">Pointer to an array of <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/>s, which represent unordered-access views that are retrieved. Specify NULL for this parameter when retrieval of unordered-access views is not required.  </param>
            <unmanaged>void OMGetRenderTargetsAndUnorderedAccessViews([In] int NumRTVs,[Out, Buffer, Optional] ID3D11RenderTargetView** ppRenderTargetViews,[Out, Optional] ID3D11DepthStencilView** ppDepthStencilView,[In] int UAVStartSlot,[In] int NumUAVs,[Out, Buffer, Optional] ID3D11UnorderedAccessView** ppUnorderedAccessViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetBlendState(SharpDX.Direct3D11.BlendState@,SharpDX.Color4@,System.Int32@)">
            <summary>	
            Get the blend state of the output-merger stage.	
            </summary>	
            <remarks>	
            The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned reference(s) when they are no longer needed, or else there will be a memory leak. 	
            </remarks>	
            <param name="blendStateRef">Address of a reference to a blend-state interface (see <see cref="T:SharpDX.Direct3D11.BlendState"/>). </param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. </param>
            <param name="sampleMaskRef">Pointer to a {{sample mask}}. </param>
            <unmanaged>void OMGetBlendState([Out, Optional] ID3D11BlendState** ppBlendState,[Out, Optional] SHARPDX_COLOR4* BlendFactor,[Out, Optional] int* pSampleMask)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.GetDepthStencilState(SharpDX.Direct3D11.DepthStencilState@,System.Int32@)">
            <summary>	
            Gets the depth-stencil state of the output-merger stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="depthStencilStateRef">Address of a reference to a depth-stencil state interface (see <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>) to be filled with information from the device. </param>
            <param name="stencilRefRef">Pointer to the stencil reference value used in the depth-stencil test. </param>
            <unmanaged>void OMGetDepthStencilState([Out, Optional] ID3D11DepthStencilState** ppDepthStencilState,[Out, Optional] int* pStencilRef)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.BlendFactor">
            <summary>
            Gets or sets the blend factor.
            </summary>
            <value>The blend factor.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.BlendSampleMask">
            <summary>
            Gets or sets the blend sample mask.
            </summary>
            <value>The blend sample mask.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.BlendState">
            <summary>
            Gets or sets the state of the blend.
            </summary>
            <value>The state of the blend.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.DepthStencilReference">
            <summary>
            Gets or sets the depth stencil reference.
            </summary>
            <value>The depth stencil reference.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.DepthStencilState">
            <summary>
            Gets or sets the state of the depth stencil.
            </summary>
            <value>The state of the depth stencil.</value>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.RasterizerStage">
            <summary>Inner interface RasterizerStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetViewports">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:SharpDX.Direct3D11.Viewport"/>).</returns>
            <unmanaged>void RSGetViewports([InOut] int* NumViewports,[Out, Buffer, Optional] D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetViewports(SharpDX.Direct3D11.Viewport[])">
            <summary>	
            Get the array of {{viewports}} bound  to the {{rasterizer stage}} 	
            </summary>	
            <returns>An array of viewports (see <see cref="T:SharpDX.Direct3D11.Viewport"/>).</returns>
            <unmanaged>void RSGetViewports([InOut] int* NumViewports,[Out, Buffer, Optional] D3D10_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetScissorRectangles">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
            <returns>An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>).</returns>
            <unmanaged>void RSGetScissorRects([InOut] int* NumRects,[Out, Buffer, Optional] D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetScissorRectangles(SharpDX.Rectangle[])">
            <summary>	
            Get the array of {{scissor rectangles}} bound to the {{rasterizer stage}}.	
            </summary>	
            <returns>An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>).</returns>
            <unmanaged>void RSGetScissorRects([InOut] int* NumRects,[Out, Buffer, Optional] D3D10_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetScissorRectangles(SharpDX.Rectangle)">
            <summary>
              Binds a single scissor rectangle to the rasterizer stage.
            </summary>
            <param name = "scissorRectangle">The scissor rectangle to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetScissorRectangles(SharpDX.Rectangle[])">
            <summary>
              Binds a set of scissor rectangles to the rasterizer stage.
            </summary>
            <param name = "scissorRectangles">The set of scissor rectangles to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetViewports(SharpDX.Direct3D11.Viewport[])">
            <summary>
              Binds a set of viewports to the rasterizer stage.
            </summary>
            <param name = "viewports">The set of viewports to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetViewports(SharpDX.Direct3D11.Viewport)">
            <summary>
              Binds a single viewport to the rasterizer stage.
            </summary>
            <param name = "viewport">The viewport to bind.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.RasterizerStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetState(SharpDX.Direct3D11.RasterizerState)">
            <summary>	
            Set the {{rasterizer state}} for the rasterizer stage of the pipeline.	
            </summary>	
            <remarks>	
            To create a rasterizer state interface, call <see cref="M:SharpDX.Direct3D11.Device.CreateRasterizerState(SharpDX.Direct3D11.RasterizerStateDescription@,SharpDX.Direct3D11.RasterizerState@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="rasterizerStateRef">Pointer to a rasterizer-state interface (see <see cref="T:SharpDX.Direct3D11.RasterizerState"/>) to bind to the pipeline. </param>
            <unmanaged>void RSSetState([In, Optional] ID3D11RasterizerState* pRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetViewports(System.Int32,SharpDX.Direct3D11.Viewport[])">
            <summary>	
            Bind an array of viewports to the rasterizer stage of the pipeline.	
            </summary>	
            <remarks>	
            All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled. Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array. 	
            </remarks>	
            <param name="numViewports">Number of viewports to bind. </param>
            <param name="viewportsRef">An array of <see cref="T:SharpDX.Direct3D11.Viewport"/> structures to bind to the device. See the structure page for details about how the viewport size is dependent on the device feature level which has changed between Direct3D 11 and Direct3D 10. </param>
            <unmanaged>void RSSetViewports([In] int NumViewports,[In, Buffer, Optional] const D3D11_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetScissorRects(System.Int32,SharpDX.Rectangle[])">
            <summary>	
            Bind an array of scissor rectangles to the rasterizer stage.	
            </summary>	
            <remarks>	
            All scissor rects must be set atomically as one operation. Any scissor rects not defined by the call are disabled. The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/>). Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array. Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <see cref="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetViewports(SharpDX.Direct3D11.Viewport[])"/>). 	
            </remarks>	
            <param name="numRects">Number of scissor rectangles to bind. </param>
            <param name="rectsRef">An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>). </param>
            <unmanaged>void RSSetScissorRects([In] int NumRects,[In, Buffer, Optional] const D3D11_RECT* pRects)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetState(SharpDX.Direct3D11.RasterizerState@)">
            <summary>	
            Get the {{rasterizer state}} from the rasterizer stage of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="rasterizerStateRef">Address of a reference to a rasterizer-state interface (see <see cref="T:SharpDX.Direct3D11.RasterizerState"/>) to fill with information from the device. </param>
            <unmanaged>void RSGetState([Out] ID3D11RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetViewports(System.Int32@,SharpDX.Direct3D11.Viewport[])">
            <summary>	
            Get the array of viewports bound to the rasterizer stage	
            </summary>	
            <param name="numViewportsRef">The input specifies the number of viewports (ranges from 0 to D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  in pViewports, the output contains the actual number of viewports returned.   If pViewports is NULL, this will be filled with the number of viewports currently bound. </param>
            <param name="viewportsRef">An array of <see cref="T:SharpDX.Direct3D11.Viewport"/> structures that are bound to the device. If the number of viewports (in pNumViewports) is  greater than the actual number of viewports currently bound, then unused members of the array will contain 0.  See the structure page for details about how the viewport size is dependent on the device feature level which has changed between Direct3D 11  and Direct3D 10. </param>
            <unmanaged>void RSGetViewports([InOut] int* pNumViewports,[Out, Buffer, Optional] D3D11_VIEWPORT* pViewports)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.GetScissorRects(System.Int32@,SharpDX.Rectangle[])">
            <summary>	
            Get the array of scissor rectangles bound to the rasterizer stage.	
            </summary>	
            <param name="numRectsRef">The number of scissor rectangles (ranges between 0 and D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE) bound; set pRects to NULL to use pNumRects to see how many rectangles would be returned. </param>
            <param name="rectsRef">An array of scissor rectangles (see <see cref="T:SharpDX.Rectangle"/>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0. </param>
            <unmanaged>void RSGetScissorRects([InOut] int* pNumRects,[Out, Buffer, Optional] D3D11_RECT* pRects)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DeviceContext.RasterizerStage.State">
            <summary>	
            Get the {{rasterizer state}} from the rasterizer stage of the pipeline.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <unmanaged>void RSGetState([Out] ID3D11RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.VertexShaderStage">
            <summary>Inner interface VertexShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.VertexShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the vertex shader pipeline stage.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void VSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetShader(SharpDX.Direct3D11.VertexShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Set a vertex shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. 	
            </remarks>	
            <param name="vertexShaderRef">Pointer to a vertex shader (see <see cref="T:SharpDX.Direct3D11.VertexShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void VSSetShader([In, Optional] ID3D11VertexShader* pVertexShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the vertex-shader stage.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void VSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the vertex shader pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D11_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D11_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void VSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the vertex shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void VSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.GetShader(SharpDX.Direct3D11.VertexShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the vertex shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="vertexShaderRef">Address of a reference to a vertex shader (see <see cref="T:SharpDX.Direct3D11.VertexShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void VSGetShader([Out] ID3D11VertexShader** ppVertexShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the vertex shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void VSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler states from the vertex shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Arry of sampler-state interface references (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>) to be returned by the device. </param>
            <unmanaged>void VSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.PixelShaderStage">
            <summary>Inner interface PixelShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.PixelShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the pixel shader stage.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void PSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetShader(SharpDX.Direct3D11.PixelShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Sets a pixel shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. Set ppClassInstances to NULL if no interfaces are used in the shader. If it is non-NULL, the number of class instances must match the number of interfaces used in the shader. Furthermore, each interface reference must have a corresponding class instance or the assigned shader will be disabled. 	
            </remarks>	
            <param name="ixelShaderRef">Pointer to a pixel shader (see <see cref="T:SharpDX.Direct3D11.PixelShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void PSSetShader([In, Optional] ID3D11PixelShader* pPixelShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the pixel shader pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following.  StateDefault Value FilterD3D11_FILTER_MIN_MAG_MIP_LINEAR AddressUD3D11_TEXTURE_ADDRESS_CLAMP AddressVD3D11_TEXTURE_ADDRESS_CLAMP AddressWD3D11_TEXTURE_ADDRESS_CLAMP MipLODBias0 MaxAnisotropy1 ComparisonFuncD3D11_COMPARISON_NEVER BorderColor[0]1.0f BorderColor[1]1.0f BorderColor[2]1.0f BorderColor[3]1.0f MinLOD-FLT_MAX MaxLODFLT_MAX  ?  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void PSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the pixel shader pipeline stage.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void PSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the pixel shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void PSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.GetShader(SharpDX.Direct3D11.PixelShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the pixel shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="pixelShaderRef">Address of a reference to a pixel shader (see <see cref="T:SharpDX.Direct3D11.PixelShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void PSGetShader([Out] ID3D11PixelShader** ppPixelShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler states from the pixel shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Arry of sampler-state interface references (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>) to be returned by the device. </param>
            <unmanaged>void PSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the pixel shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void PSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage">
            <summary>Inner interface GeometryShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the geometry shader pipeline stage.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void GSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetShader(SharpDX.Direct3D11.GeometryShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Set a geometry shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. 	
            </remarks>	
            <param name="shaderRef">Pointer to a geometry shader (see <see cref="T:SharpDX.Direct3D11.GeometryShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void GSSetShader([In, Optional] ID3D11GeometryShader* pShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the geometry shader stage.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void GSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the geometry shader pipeline stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D11_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D11_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void GSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the geometry shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void GSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.GetShader(SharpDX.Direct3D11.GeometryShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the geometry shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="geometryShaderRef">Address of a reference to a geometry shader (see <see cref="T:SharpDX.Direct3D11.GeometryShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void GSGetShader([Out] ID3D11GeometryShader** ppGeometryShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the geometry shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void GSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler state interfaces from the geometry shader pipeline stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). </param>
            <unmanaged>void GSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.DomainShaderStage">
            <summary>Inner interface DomainShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.DomainShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the domain-shader stage.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void DSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.SetShader(SharpDX.Direct3D11.DomainShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Set a domain shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. 	
            </remarks>	
            <param name="domainShaderRef">Pointer to a domain shader (see <see cref="T:SharpDX.Direct3D11.DomainShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void DSSetShader([In, Optional] ID3D11DomainShader* pDomainShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the domain-shader stage.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D11_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D11_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void DSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the domain-shader stage.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void DSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the domain-shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void DSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.GetShader(SharpDX.Direct3D11.DomainShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the domain shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="domainShaderRef">Address of a reference to a domain shader (see <see cref="T:SharpDX.Direct3D11.DomainShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void DSGetShader([Out] ID3D11DomainShader** ppDomainShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler state interfaces from the domain-shader stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). </param>
            <unmanaged>void DSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.DomainShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the domain-shader stage.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void DSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContext.HullShaderStage">
            <summary>Inner interface HullShaderStage.</summary>
            <unmanaged>ID3D11DeviceContext</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DeviceContext.HullShaderStage"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Bind an array of shader resources to the {{hull-shader stage}}.	
            </summary>	
            <remarks>	
            If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with NULL. For information about creating shader-resource views, see <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>.  The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to set to the device. </param>
            <unmanaged>void HSSetShaderResources([In] int StartSlot,[In] int NumViews,[In, Buffer] const ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.SetShader(SharpDX.Direct3D11.HullShader,SharpDX.Direct3D11.ClassInstance[],System.Int32)">
            <summary>	
            Set a hull shader to the device.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  The maximum number of instances a shader can have is 256. 	
            </remarks>	
            <param name="hullShaderRef">Pointer to a hull shader (see <see cref="T:SharpDX.Direct3D11.HullShader"/>). Passing in NULL disables the shader for this pipeline stage. </param>
            <param name="classInstancesRef">A reference to an array of class-instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to NULL if the shader does not use any interfaces. </param>
            <param name="numClassInstances">The number of class-instance interfaces in the array. </param>
            <unmanaged>void HSSetShader([In, Optional] ID3D11HullShader* pHullShader,[In, Buffer, Optional] const ID3D11ClassInstance** ppClassInstances,[None] int NumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Set an array of sampler states to the {{hull-shader stage}}.	
            </summary>	
            <remarks>	
            Any sampler may be set to NULL; this invokes the default state, which is defined to be the following. 	
            <code> //Default sampler state:	
            D3D11_SAMPLER_DESC SamplerDesc;	
            SamplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;	
            SamplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;	
            SamplerDesc.MipLODBias = 0;	
            SamplerDesc.MaxAnisotropy = 1;	
            SamplerDesc.ComparisonFunc = D3D11_COMPARISON_NEVER;	
            SamplerDesc.BorderColor[0] = 1.0f;	
            SamplerDesc.BorderColor[1] = 1.0f;	
            SamplerDesc.BorderColor[2] = 1.0f;	
            SamplerDesc.BorderColor[3] = 1.0f;	
            SamplerDesc.MinLOD = -FLT_MAX;	
            SamplerDesc.MaxLOD = FLT_MAX; </code>	
            	
              The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). See Remarks. </param>
            <unmanaged>void HSSetSamplers([In] int StartSlot,[In] int NumSamplers,[In, Buffer] const ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Set the constant buffers used by the {{hull-shader stage}}.	
            </summary>	
            <remarks>	
            The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.  	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffers (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) being given to the device. </param>
            <unmanaged>void HSSetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[In, Buffer] const ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.GetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Get the hull-shader resources.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1). </param>
            <param name="numViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot). </param>
            <param name="shaderResourceViewsRef">Array of {{shader resource view}} interfaces to be returned by the device. </param>
            <unmanaged>void HSGetShaderResources([In] int StartSlot,[In] int NumViews,[Out, Buffer] ID3D11ShaderResourceView** ppShaderResourceViews)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.GetShader(SharpDX.Direct3D11.HullShader@,SharpDX.Direct3D11.ClassInstance[],System.Int32@)">
            <summary>	
            Get the hull shader currently set on the device.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="hullShaderRef">Address of a reference to a hull shader (see <see cref="T:SharpDX.Direct3D11.HullShader"/>) to be returned by the method. </param>
            <param name="classInstancesRef">Pointer to an array of class instance interfaces (see <see cref="T:SharpDX.Direct3D11.ClassInstance"/>). </param>
            <param name="numClassInstancesRef">The number of class-instance elements in the array. </param>
            <unmanaged>void HSGetShader([Out] ID3D11HullShader** ppHullShader,[Out, Buffer, Optional] ID3D11ClassInstance** ppClassInstances,[InOut] int* pNumClassInstances)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.GetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>	
            Get an array of sampler state interfaces from the {{hull-shader stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1). </param>
            <param name="numSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot). </param>
            <param name="samplersRef">Pointer to an array of sampler-state interfaces (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>). </param>
            <unmanaged>void HSGetSamplers([In] int StartSlot,[In] int NumSamplers,[Out, Buffer] ID3D11SamplerState** ppSamplers)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DeviceContext.HullShaderStage.GetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>	
            Get the constant buffers used by the {{hull-shader stage}}.	
            </summary>	
            <remarks>	
            Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. 	
            </remarks>	
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1). </param>
            <param name="numBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot). </param>
            <param name="constantBuffersRef">Array of constant buffer interface references (see <see cref="T:SharpDX.Direct3D11.Buffer"/>) to be returned by the method. </param>
            <unmanaged>void HSGetConstantBuffers([In] int StartSlot,[In] int NumBuffers,[Out, Buffer] ID3D11Buffer** ppConstantBuffers)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DomainShader">
            <summary>	
            A domain-shader interface manages an executable program (a domain shader) that controls the domain-shader stage.	
            </summary>	
            <unmanaged>ID3D11DomainShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.DomainShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.DomainShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DomainShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.DomainShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.DomainShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.DomainShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransform">
            <summary>	
            Encapsulates forward and inverse FFTs.	
            </summary>	
            <unmanaged>ID3DX11FFT</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.#ctor(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.FastFourierTransformDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.FastFourierTransform" /> class.
            </summary>
            <param name="context">The device context used to create the FFT.</param>
            <param name="description">Information that describes the shape of the FFT data as well as the scaling factors that should be used for forward and inverse transforms.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.#ctor(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.FastFourierTransformDescription,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.FastFourierTransform" /> class.
            </summary>
            <param name="context">The device context used to create the FFT.</param>
            <param name="description">Information that describes the shape of the FFT data as well as the scaling factors that should be used for forward and inverse transforms.</param>
            <param name="flags">Flag affecting the behavior of the FFT.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.AttachBuffersAndPrecompute(SharpDX.Direct3D11.UnorderedAccessView[],SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Attaches buffers to an FFT context and performs any required precomputations.	
            </summary>	
            <remarks>	
            The buffers must be no smaller than the corresponding buffer sizes returned by D3DX11CreateFFT*(). Temporary buffers can be shared between multiple contexts, though care should be taken not  to concurrently execute multiple FFTs which share temp buffers. 	
            </remarks>	
            <param name="temporaryBuffers">Temporary buffers to attach. </param>
            <param name="precomputeBuffers">Buffers to hold precomputed data. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::AttachBuffersAndPrecompute([In] int NumTempBuffers,[In, Buffer] const ID3D11UnorderedAccessView** ppTempBuffers,[In] int NumPrecomputeBuffers,[In, Buffer] const ID3D11UnorderedAccessView** ppPrecomputeBufferSizes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create1DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32)">
            <summary>	
            Creates a new one-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DComplex([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create1DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new one-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DComplex([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create1DReal(SharpDX.Direct3D11.DeviceContext,System.Int32)">
            <summary>	
            Creates a new one-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create1DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new one-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create2DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32)">
            <summary>	
            Creates a new two-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create2DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new two-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create2DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32)">
            <summary>	
            Creates a new two-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create2DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new two-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create3DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Creates a new three-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="z">Length of the third dimension of the FFT.</param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create3DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new three-dimensional complex FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="z">Length of the third dimension of the FFT.</param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create3DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Creates a new three-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="z">Length of the third dimension of the FFT.</param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.Create3DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformCreationFlags)">
            <summary>	
            Creates a new three-dimensional real FFT.	
            </summary>	
            <param name="context">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT.</param>
            <param name="y">Length of the second dimension of the FFT.</param>
            <param name="z">Length of the third dimension of the FFT.</param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <returns>an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference.</returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.SetForwardScale(System.Single)">
            <summary>	
            Sets the scale used for forward transforms.	
            </summary>	
            <remarks>	
            SetForwardScale sets the scale used by <see cref="M:SharpDX.Direct3D11.FastFourierTransform.ForwardTransform(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)"/>. 	
            </remarks>	
            <param name="forwardScale">The scale to use for forward transforms.  Setting ForwardScale to 0 causes the default values of 1 to be used. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::SetForwardScale([None] float ForwardScale)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.GetForwardScale">
            <summary>	
            Gets the scale for forward transforms.	
            </summary>	
            <returns>Scale for forward transforms. </returns>
            <unmanaged>float ID3DX11FFT::GetForwardScale()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.SetInverseScale(System.Single)">
            <summary>	
            Sets the scale used for inverse transforms.	
            </summary>	
            <remarks>	
            SetInverseScale sets the scale used by <see cref="M:SharpDX.Direct3D11.FastFourierTransform.InverseTransform(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)"/>. 	
            </remarks>	
            <param name="inverseScale">Scale used for inverse transforms.  Setting InverseScale to 0 causes the default value of 1/N to be used,  where N is the product of the transformed dimension lengths. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::SetInverseScale([None] float InverseScale)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.GetInverseScale">
            <summary>	
            Get the scale for inverse transforms.	
            </summary>	
            <returns>Scale for inverse transforms. </returns>
            <unmanaged>float ID3DX11FFT::GetInverseScale()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.AttachBuffersAndPrecompute(System.Int32,SharpDX.Direct3D11.UnorderedAccessView[],System.Int32,SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>	
            Attaches buffers to an FFT context and performs any required precomputations.	
            </summary>	
            <remarks>	
            The buffers must be no smaller than the corresponding buffer sizes returned by D3DX11CreateFFT*(). Temporary buffers can be shared between multiple contexts, though care should be taken not  to concurrently execute multiple FFTs which share temp buffers. 	
            </remarks>	
            <param name="numTempBuffers">Number of buffers in ppTempBuffers. </param>
            <param name="tempBuffersRef">Temporary buffers to attach. </param>
            <param name="numPrecomputeBuffers">Number of buffers in ppPrecomputeBufferSizes. </param>
            <param name="precomputeBufferSizesRef">Buffers to hold precomputed data. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::AttachBuffersAndPrecompute([In] int NumTempBuffers,[In, Buffer] const ID3D11UnorderedAccessView** ppTempBuffers,[In] int NumPrecomputeBuffers,[In, Buffer] const ID3D11UnorderedAccessView** ppPrecomputeBufferSizes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.ForwardTransform(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Performs a forward FFT.	
            </summary>	
            <remarks>	
            ForwardTransform can be called after buffers have been attached to the context using <see cref="M:SharpDX.Direct3D11.FastFourierTransform.AttachBuffersAndPrecompute(SharpDX.Direct3D11.UnorderedAccessView[],SharpDX.Direct3D11.UnorderedAccessView[])"/>. The combination of pInputBuffer and *ppOuputBuffer can be one of the temp buffers. The format of complex data is interleaved components (for example, (Real0, Imag0),  (Real1, Imag1) ... , and so on). Data is stored in row major order. 	
            </remarks>	
            <param name="inputBufferRef">Pointer to <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> onto the input buffer. </param>
            <param name="outputBufferRef">Pointer to a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> reference.  If *ppOutputBuffer is NULL, the computation will switch between temp buffers; in addition, the last buffer written to is stored at *ppOutputBuffer. Otherwise, *ppOutputBuffer is used as the output buffer (which might incur an extra copy). </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::ForwardTransform([In] const ID3D11UnorderedAccessView* pInputBuffer,[InOut] ID3D11UnorderedAccessView** ppOutputBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.FastFourierTransform.InverseTransform(SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Performs an inverse FFT.	
            </summary>	
            <param name="inputBufferRef">Pointer to <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> onto the input buffer. </param>
            <param name="outputBufferRef">Pointer to a <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> reference.  If *ppOutput is NULL, then the computation will switch between temp buffers; in addition, the last buffer written to is stored at *ppOutput. Otherwise, *ppOutput is used as the output buffer (which might incur an extra copy). </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11FFT::InverseTransform([In] const ID3D11UnorderedAccessView* pInputBuffer,[InOut] ID3D11UnorderedAccessView** ppOutputBuffer)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FastFourierTransform.BufferRequirements">
            <summary>
            Gets the buffer requirements.
            </summary>
            <value>The buffer requirements.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.FastFourierTransform.ForwardScale">
            <summary>	
            Gets the scale for forward transforms.	
            </summary>	
            <unmanaged>float ID3DX11FFT::GetForwardScale()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FastFourierTransform.InverseScale">
            <summary>	
            Get the scale for inverse transforms.	
            </summary>	
            <unmanaged>float ID3DX11FFT::GetInverseScale()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.InputClassification">
            <summary>	
            Type of data contained in an input slot.	
            </summary>	
            <remarks>	
            Use these values to specify the type of data for a particular input element (see <see cref="T:SharpDX.Direct3D11.InputElement"/>) of an input-layout object. 	
            </remarks>	
            <unmanaged>D3D11_INPUT_CLASSIFICATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputClassification.PerVertexData">
            <summary>	
            Input data is per-vertex data. 	
            </summary>	
            <unmanaged>D3D11_INPUT_PER_VERTEX_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputClassification.PerInstanceData">
            <summary>	
            Input data is per-instance data. 	
            </summary>	
            <unmanaged>D3D11_INPUT_PER_INSTANCE_DATA</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FillMode">
            <summary>	
            Determines the fill mode to use when rendering triangles.	
            </summary>	
            <remarks>	
            This enumeration is part of a rasterizer-state object description (see <see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_FILL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FillMode.Wireframe">
            <summary>	
            Draw lines connecting the vertices. Adjacent vertices are not drawn. 	
            </summary>	
            <unmanaged>D3D11_FILL_WIREFRAME</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FillMode.Solid">
            <summary>	
            Fill the triangles formed by the vertices. Adjacent vertices are not drawn. 	
            </summary>	
            <unmanaged>D3D11_FILL_SOLID</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CullMode">
            <summary>	
            Indicates triangles facing a particular direction are not drawn.	
            </summary>	
            <remarks>	
            This enumeration is part of a rasterizer-state object description (see <see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_CULL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CullMode.None">
            <summary>	
            Always draw all triangles. 	
            </summary>	
            <unmanaged>D3D11_CULL_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CullMode.Front">
            <summary>	
            Do not draw triangles that are front-facing. 	
            </summary>	
            <unmanaged>D3D11_CULL_FRONT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CullMode.Back">
            <summary>	
            Do not draw triangles that are back-facing. 	
            </summary>	
            <unmanaged>D3D11_CULL_BACK</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ResourceDimension">
            <summary>	
            Identifies the type of resource being used.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="M:SharpDX.Direct3D11.Resource.GetDimension(SharpDX.Direct3D11.ResourceDimension@)"/>.  	
            </remarks>	
            <unmanaged>D3D11_RESOURCE_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceDimension.Unknown">
            <summary>	
            Resource is of unknown type. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceDimension.Buffer">
            <summary>	
            Resource is a buffer. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceDimension.Texture1D">
            <summary>	
            Resource is a 1D texture. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceDimension.Texture2D">
            <summary>	
            Resource is a 2D texture. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceDimension.Texture3D">
            <summary>	
            Resource is a 3D texture. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDimension">
            <summary>	
            Specifies how to access a resource used in a depth-stencil view.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/> to create a depth-stencil view. 	
            </remarks>	
            <unmanaged>D3D11_DSV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Unknown">
            <summary>	
            D3D11_DSV_DIMENSION_UNKNOWN is not a valid value for <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/> and is not used. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture1D">
            <summary>	
            The resource will be accessed as a 1D texture. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture1DArray">
            <summary>	
            The resource will be accessed as an array of 1D textures. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture2D">
            <summary>	
            The resource will be accessed as a 2D texture. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture2DArray">
            <summary>	
            The resource will be accessed as an array of 2D textures. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture2DMultisampled">
            <summary>	
            The resource will be accessed as a 2D texture with multisampling. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDimension.Texture2DMultisampledArray">
            <summary>	
            The resource will be accessed as an array of 2D textures with multisampling. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDimension">
            <summary>	
            These flags identify the type of resource that will be viewed as a render target.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/> to create a render-target view. 	
            </remarks>	
            <unmanaged>D3D11_RTV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Unknown">
            <summary>	
            Do not use this value, as it will cause <see cref="M:SharpDX.Direct3D11.Device.CreateRenderTargetView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},SharpDX.Direct3D11.RenderTargetView@)"/> to fail. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Buffer">
            <summary>	
            The resource will be accessed as a buffer. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture1D">
            <summary>	
            The resource will be accessed as a 1D texture. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture1DArray">
            <summary>	
            The resource will be accessed as an array of 1D textures. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture2D">
            <summary>	
            The resource will be accessed as a 2D texture. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture2DArray">
            <summary>	
            The resource will be accessed as an array of 2D textures. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture2DMultisampled">
            <summary>	
            The resource will be accessed as a 2D texture with multisampling. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture2DMultisampledArray">
            <summary>	
            The resource will be accessed as an array of 2D textures with multisampling. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDimension.Texture3D">
            <summary>	
            The resource will be accessed as a 3D texture. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDimension">
            <summary>	
            Unordered-access view options.	
            </summary>	
            <remarks>	
            This enumeration is used by a unordered access-view description (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_UAV_DIMENSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Unknown">
            <summary>	
            The view type is unknown. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Buffer">
            <summary>	
            View the resource as a buffer. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Texture1D">
            <summary>	
            View the resource as a 1D texture. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Texture1DArray">
            <summary>	
            View the resource as a 1D texture array. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Texture2D">
            <summary>	
            View the resource as a 2D texture. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Texture2DArray">
            <summary>	
            View the resource as a 2D texture array. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDimension.Texture3D">
            <summary>	
            View the resource as a 3D texture array. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION_TEXTURE3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ResourceUsage">
            <summary>	
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.	
            </summary>	
            <remarks>	
            An application identifies the way a resource is intended to be used (its usage) in a resource description. There are several structures for creating resources including: <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>, <see cref="T:SharpDX.Direct3D11.BufferDescription"/>.   Differences between Direct3D 9 and Direct3D 10/11: In Direct3D 9, you specify the type of memory a resource should be created in at resource creation time (using D3DPOOL). It was an application's job to decide what memory pool would provide the best combination of functionality and performance. In Direct3D 10/11, an application no longer specifies what type of memory (the pool) to create a resource in. Instead, you specify the intended usage of the resource, and let the runtime (in concert with the driver and a memory manager) choose the type of memory that will achieve the best performance.   ? Resource Usage Restrictions Each usage dictates a tradeoff between functionality and performance. In general, resource accessing is accomplished with the following APIs.  CPU access is done with <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/>. GPU access is done with <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/>, <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/>, or <see cref="M:SharpDX.Direct3D11.DeviceContext.UpdateSubresource(SharpDX.DataBox,SharpDX.Direct3D11.Resource,System.Int32)"/>.  Use the following table to choose the usage that best describes how the resource will need to be accessed by the CPU and/or the GPU. Of course, there will be performance tradeoffs.  Resource UsageDefaultDynamicImmutableStaging GPU-Readyesyes1yesyes1, 2 GPU-Writeyes1yes1, 2 CPU-Readyes1, 2 CPU-Writeyesyes1, 2  ?  1 - This is restricted to <see cref="M:SharpDX.Direct3D11.DeviceContext.CopySubresourceRegion_(SharpDX.Direct3D11.Resource,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.Resource,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion})"/>, <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyResource_(SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.Resource)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.CopyStructureCount(SharpDX.Direct3D11.Buffer,System.Int32,SharpDX.Direct3D11.UnorderedAccessView)"/>. 2 - Cannot be a depth-stencil buffer or a multisampled render target.  Resource Bind Options To maximize performance, not all resource usage options can be used as input or output resources to the pipeline. This table identifies these limitations.  Resource Can Be Bound AsDefaultDynamicImmutableStaging Input to a Stageyes3yes4yes Output from a Stageyes3  ?  3 - If bound as an input and an output using different views, each view must use different subresources. 4 - The resource can only be created with a single subresource. The resource cannot be a texture array. The resource cannot be a mipmap chain.  	
            </remarks>	
            <unmanaged>D3D11_USAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceUsage.Default">
            <summary>	
            A resource that requires read and write access by the GPU. This is likely to be the most common usage choice. 	
            </summary>	
            <unmanaged>D3D11_USAGE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceUsage.Immutable">
            <summary>	
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation. 	
            </summary>	
            <unmanaged>D3D11_USAGE_IMMUTABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceUsage.Dynamic">
            <summary>	
            A resource that is accessible by both the GPU (read only) and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To update a dynamic resource, use a Map method. 	
            </summary>	
            <unmanaged>D3D11_USAGE_DYNAMIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceUsage.Staging">
            <summary>	
            A resource that supports data transfer (copy) from the GPU to the CPU. 	
            </summary>	
            <unmanaged>D3D11_USAGE_STAGING</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.BindFlags">
            <summary>	
            Identifies how to bind a resource to the pipeline.	
            </summary>	
            <remarks>	
            In general, binding flags can be combined using a logical OR (except the constant-buffer flag); however, you should use a single flag to allow the device to optimize the resource usage. This enumeration is used by a:   {{Buffer description}} when creating a buffer. Texture description when creating a texture (see <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/> or <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/> or <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>).  A shader-resource buffer is NOT a constant buffer; rather, it is a texture or buffer resource that is bound to a shader, that contains texture or buffer data (it is not limited to a single element type in the buffer). A shader-resource buffer is created with the D3D11_BIND_SHADER_RESOURCE flag and is bound to the pipeline using one of these APIs: <see cref="M:SharpDX.Direct3D11.DeviceContext.GeometryShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/>, <see cref="M:SharpDX.Direct3D11.DeviceContext.PixelShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/>, or <see cref="M:SharpDX.Direct3D11.DeviceContext.VertexShaderStage.SetShaderResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])"/>. Furthermore, a shader-resource buffer cannot use the <see cref="F:SharpDX.Direct3D11.MapMode.WriteNoOverwrite"/> flag. 	
            </remarks>	
            <unmanaged>D3D11_BIND_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.VertexBuffer">
            <summary>	
            Bind a buffer as a vertex buffer to the input-assembler stage. 	
            </summary>	
            <unmanaged>D3D11_BIND_VERTEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.IndexBuffer">
            <summary>	
            Bind a buffer as an index buffer to the input-assembler stage. 	
            </summary>	
            <unmanaged>D3D11_BIND_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.ConstantBuffer">
            <summary>	
            Bind a buffer as a constant buffer to a shader stage; this flag may NOT be combined with any other bind flag. 	
            </summary>	
            <unmanaged>D3D11_BIND_CONSTANT_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.ShaderResource">
            <summary>	
            Bind a buffer or texture to a shader stage; this flag cannot be used with the <see cref="F:SharpDX.Direct3D11.MapMode.WriteNoOverwrite"/> flag. 	
            </summary>	
            <unmanaged>D3D11_BIND_SHADER_RESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.StreamOutput">
            <summary>	
            Bind an output buffer for the stream-output stage. 	
            </summary>	
            <unmanaged>D3D11_BIND_STREAM_OUTPUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.RenderTarget">
            <summary>	
            Bind a texture as a render target for the output-merger stage. 	
            </summary>	
            <unmanaged>D3D11_BIND_RENDER_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.DepthStencil">
            <summary>	
            Bind a texture as a depth-stencil target for the output-merger stage. 	
            </summary>	
            <unmanaged>D3D11_BIND_DEPTH_STENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.UnorderedAccess">
            <summary>	
            Bind an {{unordered access}} resource. 	
            </summary>	
            <unmanaged>D3D11_BIND_UNORDERED_ACCESS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BindFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CpuAccessFlags">
            <summary>	
            Specifies the types of CPU access allowed for a resource.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D11.BufferDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.  Applications may combine one or more of these flags with a logical OR. When possible, create resources with no CPU access flags, as this enables better resource optimiztion. 	
            </remarks>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CpuAccessFlags.Write">
            <summary>	
            The resource is to be mappable so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage (see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>). 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CpuAccessFlags.Read">
            <summary>	
            The resource is to be mappable so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage (see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>). 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_READ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CpuAccessFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ResourceOptionFlags">
            <summary>	
            Identifies other, less common options for resources.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="T:SharpDX.Direct3D11.BufferDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>, <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>.  These flags can be combined by bitwise OR. 	
            </remarks>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.GenerateMipMaps">
            <summary>	
            Enables mipmap generation using <see cref="M:SharpDX.Direct3D11.DeviceContext.GenerateMips(SharpDX.Direct3D11.ShaderResourceView)"/> on a texture resource. The resource must be created with the {{bind flags}} that specify that the resource is a render target and a shader resource. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_GENERATE_MIPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.Shared">
            <summary>	
            Enables resource data sharing between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures. D3D11_RESOURCE_MISC_SHARED and D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX are mutually exclusive. WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_SHARED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.TextureCube">
            <summary>	
            Enables a resource to be a cube texture created from a Texture2DArray that contains 6 textures. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.DrawindirectArgs">
            <summary>	
            Enables instancing of GPU-generated content. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferAllowRawViews">
            <summary>	
            Enables a resource as a {{byte address buffer}}. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.BufferStructured">
            <summary>	
            Enables a resource as a {{structured buffer}}. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_BUFFER_STRUCTURED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.ResourceClamp">
            <summary>	
            Enables a resource with mipmap clamping for use with <see cref="M:SharpDX.Direct3D11.DeviceContext.SetMinimumLod(SharpDX.Direct3D11.Resource,System.Single)"/>. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_RESOURCE_CLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex">
            <summary>	
            Enables the resource created to be synchronized using the <see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/> and  <see cref="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)"/> APIs.  The following Direct3D 11 resource creation  APIs, that take D3D11_RESOURCE_MISC_FLAG parameters, have been extended to support the new flag.   <see cref="M:SharpDX.Direct3D11.Device.CreateTexture1D(SharpDX.Direct3D11.Texture1DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture1D@)"/>   <see cref="M:SharpDX.Direct3D11.Device.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture2D@)"/>   <see cref="M:SharpDX.Direct3D11.Device.CreateTexture3D(SharpDX.Direct3D11.Texture3DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture3D@)"/>   <see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/>   If any of the above methods is called with the D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX flag set, the interface returned will support the <see cref="T:SharpDX.DXGI.KeyedMutex"/> interface.  The IDXGIKeyedMutex interface can be acquired from the resource using {{IUnknown::QueryInterface}}.  The IDXGIKeyedMutex interface implements the <see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/> and <see cref="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)"/> APIs to synchronize access to the surface. The device creating the surface, and any other device opening the surface (using {{OpenSharedResource}}) is required to call IDXGIKeyedMutex::AcquireSync before any rendering commands to the surface, and IDXGIKeyedMutex::ReleaseSync when it is done rendering. D3D11_RESOURCE_MISC_SHARED and D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX are mutually exclusive. WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible">
            <summary>	
            Enables a resource compatible with GDI. The D3D11_RESOURCE_MISC_GDI_COMPATIBLE flag is required on surfaces that will be used with GDI. Setting the D3D11_RESOURCE_MISC_GDI_COMPATIBLE flag allows GDI rendering on the surface via GetDC.	
             	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceOptionFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MapMode">
            <summary>	
            Identifies a resource to be accessed for reading and writing by the CPU. Applications may combine one or more of these flags.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/>. These remarks are divided into the following topics:   {{Meaning of D3D11_MAP_WRITE_NO_OVERWRITE}} {{Common Usage of D3D11_MAP_WRITE_DISCARD with D3D11_MAP_WRITE_NO_OVERWRITE}}  Meaning of D3D11_MAP_WRITE_NO_OVERWRITE D3D11_MAP_WRITE_NO_OVERWRITE signifies that the application promises not to write to data that the input assembler (IA) stage is using. In exchange, the GPU allows the application to write to other parts of the same buffer.  The application must ensure that it does not write over any data in use by the IA stage. For example, consider the buffer illustrated in the following diagram. If a Draw call has been issued that uses vertices 4-6, then an application that calls Map on this buffer must ensure that it does not write to the vertices that the Draw call will access during rendering. ?  Diagram of a buffer that includes vertices in different stages of utilization ? However, ensuring this can be difficult, because the GPU is often many frames behind the CPU in terms of which frame it is currently processing. Keeping track of which sections of a resource are being used because of calls made 2 to 5 frames ago is difficult and error-prone. Because of this, it is recommended that applications only write to the uninitialized portions of a resource when using D3D11_MAP_WRITE_NO_OVERWRITE. Common Usage of D3D11_MAP_WRITE_DISCARD with D3D11_MAP_WRITE_NO_OVERWRITE D3D11_MAP_WRITE_DISCARD and D3D11_MAP_WRITE_NO_OVERWRITE are normally used in conjunction with dynamic index/vertex buffers. D3D11_MAP_WRITE_DISCARD can also be used with dynamic textures. However, D3D11_MAP_WRITE_NO_OVERWRITE cannot be used with dynamic textures. A common use of these two flags involves filling dynamic index/vertex buffers with geometry that can be seen from the camera's current position. The first time that data is entered into the buffer on a given frame, Map is called with D3D11_MAP_WRITE_DISCARD; doing so invalidates the previous contents of the buffer. The buffer is then filled with all available data. Subsequent writes to the buffer within the same frame should use D3D11_MAP_WRITE_NO_OVERWRITE. This will enable the CPU to access a resource that is potentially being used by the GPU as long as the restrictions described previously are respected. 	
            </remarks>	
            <unmanaged>D3D11_MAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapMode.Read">
            <summary>	
            Resource is mapped for reading. The resource must have been created with read access  (see <see cref="F:SharpDX.Direct3D11.CpuAccessFlags.Read"/>). 	
            </summary>	
            <unmanaged>D3D11_MAP_READ</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapMode.Write">
            <summary>	
            Resource is mapped for writing. The resource must have been created with write  access (see <see cref="F:SharpDX.Direct3D11.CpuAccessFlags.Write"/>). 	
            </summary>	
            <unmanaged>D3D11_MAP_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapMode.ReadWrite">
            <summary>	
            Resource is mapped for reading and writing. The resource must have been created with read and write  access (see {{D3D11_CPU_ACCESS_READ and D3D11_CPU_ACCESS_WRITE}}). 	
            </summary>	
            <unmanaged>D3D11_MAP_READ_WRITE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapMode.WriteDiscard">
            <summary>	
            Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access  and dynamic usage (See <see cref="F:SharpDX.Direct3D11.CpuAccessFlags.Write"/> and <see cref="F:SharpDX.Direct3D11.ResourceUsage.Dynamic"/>). 	
            </summary>	
            <unmanaged>D3D11_MAP_WRITE_DISCARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapMode.WriteNoOverwrite">
            <summary>	
            Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and  index buffers. The resource must have been created with write access (see <see cref="F:SharpDX.Direct3D11.CpuAccessFlags.Write"/>).  Cannot be used on a resource created with the <see cref="F:SharpDX.Direct3D11.BindFlags.ConstantBuffer"/> flag. 	
            </summary>	
            <unmanaged>D3D11_MAP_WRITE_NO_OVERWRITE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MapFlags">
            <summary>	
            Specifies how the CPU should respond when an application calls the <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/> method on a resource that is being used by the GPU.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/>. D3D11_MAP_FLAG_DO_NOT_WAIT cannot be used with <see cref="F:SharpDX.Direct3D11.MapMode.WriteDiscard"/> or {{D3D11_MAP_WRITE_NOOVERWRITE}}. 	
            </remarks>	
            <unmanaged>D3D11_MAP_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapFlags.DoNotWait">
            <summary>	
            Specifies that <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/> should return DXGI_ERROR_WAS_STILL_DRAWING when the GPU blocks the CPU from accessing a resource. For more information about this error code, see <see cref="T:SharpDX.DXGI.DXGIError"/>. 	
            </summary>	
            <unmanaged>D3D11_MAP_FLAG_DO_NOT_WAIT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MapFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilClearFlags">
            <summary>	
            Specifies the parts of the depth stencil to clear.	
            </summary>	
            <remarks>	
            These flags are used when calling <see cref="M:SharpDX.Direct3D11.DeviceContext.ClearDepthStencilView(SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.DepthStencilClearFlags,System.Single,System.Byte)"/>; the flags can be combined with a bitwise OR. 	
            </remarks>	
            <unmanaged>D3D11_CLEAR_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilClearFlags.Depth">
            <summary>	
            Clear the depth buffer. 	
            </summary>	
            <unmanaged>D3D11_CLEAR_DEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilClearFlags.Stencil">
            <summary>	
            Clear the stencil buffer. 	
            </summary>	
            <unmanaged>D3D11_CLEAR_STENCIL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Comparison">
            <summary>	
            Comparison options.	
            </summary>	
            <remarks>	
            A comparison option determines whether how the runtime compares source (new) data against destination (existing) data before storing the new data. The comparison option is declared in a description before an object is created. The API allows you to set a comparison option for a depth-stencil buffer (see <see cref="T:SharpDX.Direct3D11.DepthStencilStateDescription"/>), depth-stencil operations (see <see cref="T:SharpDX.Direct3D11.DepthStencilOperationDescription"/>), or sampler state (see <see cref="T:SharpDX.Direct3D11.SamplerStateDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_COMPARISON_FUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.Never">
            <summary>	
            Never pass the comparison. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_NEVER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.Less">
            <summary>	
            If the source data is less than the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_LESS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.Equal">
            <summary>	
            If the source data is equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.LessEqual">
            <summary>	
            If the source data is less than or equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_LESS_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.Greater">
            <summary>	
            If the source data is greater than the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_GREATER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.NotEqual">
            <summary>	
            If the source data is not equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_NOT_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.GreaterEqual">
            <summary>	
            If the source data is greater than or equal to the destination data, the comparison passes. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_GREATER_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Comparison.Always">
            <summary>	
            Always pass the comparison. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_ALWAYS</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthWriteMask">
            <summary>	
            Identify the portion of a depth-stencil buffer for writing depth data.	
            </summary>	
            <unmanaged>D3D11_DEPTH_WRITE_MASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthWriteMask.Zero">
            <summary>	
            Turn off writes to the depth-stencil buffer. 	
            </summary>	
            <unmanaged>D3D11_DEPTH_WRITE_MASK_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthWriteMask.All">
            <summary>	
            Turn on writes to the depth-stencil buffer. 	
            </summary>	
            <unmanaged>D3D11_DEPTH_WRITE_MASK_ALL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.StencilOperation">
            <summary>	
            The stencil operations that can be performed during depth-stencil testing.	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Keep">
            <summary>	
            Keep the existing stencil data. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_KEEP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Zero">
            <summary>	
            Set the stencil data to 0. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Replace">
            <summary>	
            Set the stencil data to the reference value set by calling <see cref="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetDepthStencilState(SharpDX.Direct3D11.DepthStencilState,System.Int32)"/>. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_REPLACE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.IncrementAndClamp">
            <summary>	
            Increment the stencil value by 1, and clamp the result. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_INCR_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.DecrementAndClamp">
            <summary>	
            Decrement the stencil value by 1, and clamp the result. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_DECR_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Invert">
            <summary>	
            Invert the stencil data. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_INVERT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Increment">
            <summary>	
            Increment the stencil value by 1, and wrap the result if necessary. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_INCR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StencilOperation.Decrement">
            <summary>	
            Increment the stencil value by 1, and wrap the result if necessary. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP_DECR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.BlendOption">
            <summary>	
            Blend options. A blend option identifies the data source and an optional pre-blend operation.	
            </summary>	
            <remarks>	
            Blend operations are specified in a {{blend description}}. 	
            </remarks>	
            <unmanaged>D3D11_BLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.Zero">
            <summary>	
            The data source is the color black (0, 0, 0, 0). No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.One">
            <summary>	
            The data source is the color white (1, 1, 1, 1). No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_ONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.SourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_SRC_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseSourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_SRC_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.SourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_SRC_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseSourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_SRC_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.DestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_DEST_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseDestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_DEST_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.DestinationColor">
            <summary>	
            The data source is color data from a rendertarget. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_DEST_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseDestinationColor">
            <summary>	
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_DEST_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.SourceAlphaSaturate">
            <summary>	
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. 	
             	
            </summary>	
            <unmanaged>D3D11_BLEND_SRC_ALPHA_SAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.BlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetBlendState(SharpDX.Direct3D11.BlendState,System.Nullable{SharpDX.Color4},System.Int32)"/>. No pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND_BLEND_FACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseBlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="M:SharpDX.Direct3D11.DeviceContext.OutputMergerStage.SetBlendState(SharpDX.Direct3D11.BlendState,System.Nullable{SharpDX.Color4},System.Int32)"/>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_BLEND_FACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.SecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 	
            </summary>	
            <unmanaged>D3D11_BLEND_SRC1_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseSecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_SRC1_COLOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.SecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 	
            </summary>	
            <unmanaged>D3D11_BLEND_SRC1_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOption.InverseSecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending. 	
            </summary>	
            <unmanaged>D3D11_BLEND_INV_SRC1_ALPHA</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.BlendOperation">
            <summary>	
            RGB or alpha blending operation.	
            </summary>	
            <remarks>	
            The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a {{blend description}}. The two sources?Source 1, called SrcBlend and SrcBlendAlpha, and Source 2, called DestBlend and DestBlendAlpha?are shown in the blending block diagram. 	
            </remarks>	
            <unmanaged>D3D11_BLEND_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOperation.Add">
            <summary>	
            Add source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP_ADD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOperation.Subtract">
            <summary>	
            Subtract source 1 from source 2. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP_SUBTRACT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOperation.ReverseSubtract">
            <summary>	
            Subtract source 2 from source 1. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP_REV_SUBTRACT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOperation.Minimum">
            <summary>	
            Find the minimum of source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP_MIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.BlendOperation.Maximum">
            <summary>	
            Find the maximum of source 1 and source 2. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP_MAX</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ColorWriteMaskFlags">
            <summary>	
            Identify which components of each pixel of a render target are writable during blending.	
            </summary>	
            <remarks>	
            These flags can be combined with a bitwise OR. 	
            </remarks>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ColorWriteMaskFlags.Red">
            <summary>	
            Allow data to be stored in the red component. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE_RED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ColorWriteMaskFlags.Green">
            <summary>	
            Allow data to be stored in the green component. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE_GREEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ColorWriteMaskFlags.Blue">
            <summary>	
            Allow data to be stored in the blue component. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE_BLUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ColorWriteMaskFlags.Alpha">
            <summary>	
            Allow data to be stored in the alpha component. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ColorWriteMaskFlags.All">
            <summary>	
            Allow data to be stored in all components. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE_ALL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.TextureCubeFace">
            <summary>	
            The different faces of a cube texture.	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.PositiveX">
            <summary>	
            Positive X face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_POSITIVE_X</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.NegativeX">
            <summary>	
            Negative X face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_NEGATIVE_X</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.PositiveY">
            <summary>	
            Positive Y face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_POSITIVE_Y</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.NegativeY">
            <summary>	
            Negative Y face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_NEGATIVE_Y</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.PositiveZ">
            <summary>	
            Positive Z face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_POSITIVE_Z</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureCubeFace.NegativeZ">
            <summary>	
            Negative Z face. 	
            </summary>	
            <unmanaged>D3D11_TEXTURECUBE_FACE_NEGATIVE_Z</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags">
            <summary>	
            Identifies how to bind a raw-buffer resource to the pipeline.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource"/>  	
            </remarks>	
            <unmanaged>D3D11_BUFFEREX_SRV_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags.Raw">
            <summary>	
            Bind a raw buffer to the input-assembler stage. 	
            </summary>	
            <unmanaged>D3D11_BUFFEREX_SRV_FLAG_RAW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewFlags">
            <summary>	
            Depth-stencil view options.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>. Limiting a depth-stencil buffer to read-only access allows more than one depth-stencil view to be bound to the pipeline simultaneously, since it is not possible to have a read/write conflicts between separate views. 	
            </remarks>	
            <unmanaged>D3D11_DSV_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewFlags.ReadOnlyDepth">
            <summary>	
            Indicates that depth values are read only. 	
            </summary>	
            <unmanaged>D3D11_DSV_READ_ONLY_DEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewFlags.ReadOnlyStencil">
            <summary>	
            Indicates that stencil values are read only. 	
            </summary>	
            <unmanaged>D3D11_DSV_READ_ONLY_STENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags">
            <summary>	
            Unordered-access-view buffer options.	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Raw">
            <summary>	
            Resource contains raw, unstructured data.  Requires the UAV format to be DXGI_FORMAT_R32_TYPELESS.  	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV_FLAG_RAW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Append">
            <summary>	
            Allow data to be appended to the end of the buffer.  D3D11_BUFFER_UAV_FLAG_APPEND flag must also be used for  any view that will be used as a {{AppendStructuredBuffer}} or a {{ConsumeStructuredBuffer}}.  Requires the UAV format to be DXGI_FORMAT_UNKNOWN. 	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV_FLAG_APPEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.Counter">
            <summary>	
            Adds a counter to the unordered-access-view buffer.  D3D11_BUFFER_UAV_FLAG_COUNTER can only be used on a UAV that is a  {{RWStructuredBuffer}} and it enables the functionality needed for the {{IncrementCounter}} and {{DecrementCounter}} methods in HLSL.  Requires the UAV format to be DXGI_FORMAT_UNKNOWN. 	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV_FLAG_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Filter">
            <summary>	
            Filtering options during texture sampling.	
            </summary>	
            <remarks>	
            During texture sampling, one or more texels are read and combined (this is calling filtering) to produce a single value. Point sampling reads a single texel while linear sampling reads two texels (endpoints) and linearly interpolates a third value between the endpoints. HLSL texture-sampling functions also support comparison filtering during texture sampling. Comparison filtering compares each sampled texel against a comparison value. The boolean result is blended the same way that normal texture filtering is blended. You can use HLSL intrinsic texture-sampling functions that implement texture filtering only or companion functions that use texture filtering with comparison filtering.  Texture Sampling FunctionTexture Sampling Function with Comparison Filtering samplesamplecmp or samplecmplevelzero  ? Comparison filters only work with textures that have the following DXGI formats: R32_FLOAT_X8X24_TYPELESS, R32_FLOAT, R24_UNORM_X8_TYPELESS, R16_UNORM. 	
            </remarks>	
            <unmanaged>D3D11_FILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinMagMipPoint">
            <summary>	
            Use point sampling for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinMagPointMipLinear">
            <summary>	
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinPointMagLinearMipPoint">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinPointMagMipLinear">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinLinearMagMipPoint">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinLinearMagPointMipLinear">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinMagLinearMipPoint">
            <summary>	
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.MinMagMipLinear">
            <summary>	
            Use linear interpolation for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.Anisotropic">
            <summary>	
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. 	
            </summary>	
            <unmanaged>D3D11_FILTER_ANISOTROPIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinMagMipPoint">
            <summary>	
            Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinMagPointMipLinear">
            <summary>	
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinPointMagLinearMipPoint">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinPointMagMipLinear">
            <summary>	
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinLinearMagMipPoint">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinLinearMagPointMipLinear">
            <summary>	
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinMagLinearMipPoint">
            <summary>	
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonMinMagMipLinear">
            <summary>	
            Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Filter.ComparisonAnisotropic">
            <summary>	
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. 	
            </summary>	
            <unmanaged>D3D11_FILTER_COMPARISON_ANISOTROPIC</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FilterType">
            <summary>	
            Types of magnification or minification sampler filters.	
            </summary>	
            <unmanaged>D3D11_FILTER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterType.Point">
            <summary>	
            Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture.  	
            </summary>	
            <unmanaged>D3D11_FILTER_TYPE_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterType.Linear">
            <summary>	
            Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures.  	
            </summary>	
            <unmanaged>D3D11_FILTER_TYPE_LINEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.TextureAddressMode">
            <summary>	
            Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureAddressMode.Wrap">
            <summary>	
            Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureAddressMode.Mirror">
            <summary>	
            Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.  	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureAddressMode.Clamp">
            <summary>	
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_CLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureAddressMode.Border">
            <summary>	
            Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <see cref="T:SharpDX.Direct3D11.SamplerStateDescription"/> or HLSL code. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_BORDER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureAddressMode.MirrorOnce">
            <summary>	
            Similar to D3D11_TEXTURE_ADDRESS_MIRROR and D3D11_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MIRROR_ONCE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FormatSupport">
            <summary>	
            Which resources are supported for a given format and given device (see <see cref="M:SharpDX.Direct3D11.Device.CheckFormatSupport(SharpDX.DXGI.Format)"/> and <see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/>).	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Buffer">
            <summary>	
            Buffer resources supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.InputAssemblyVertexBuffer">
            <summary>	
            Vertex buffers supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.InputAssemblyIndexBuffer">
            <summary>	
            Index buffers supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.StreamOutputBuffer">
            <summary>	
            Streaming output buffers supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SO_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Texture1D">
            <summary>	
            1D texture resources supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Texture2D">
            <summary>	
            2D texture resources supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Texture3D">
            <summary>	
            3D texture resources supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.TextureCube">
            <summary>	
            Cube texture resources supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderLoad">
            <summary>	
            The intrinsic HLSL function load is supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_LOAD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderSample">
            <summary>	
            The intrinsic HLSL functions sample supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_SAMPLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderSampleComparison">
            <summary>	
            The intrinsic HLSL functions samplecmp and samplecmplevelzero are supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderSampleMonoText">
            <summary>	
            Reserved. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Mip">
            <summary>	
            Mipmaps are supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_MIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.MipAutogen">
            <summary>	
            Automatic generation of mipmaps is supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_MIP_AUTOGEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.RenderTarget">
            <summary>	
            Rendertargets are supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_RENDER_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Blendable">
            <summary>	
            Blend operations supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_BLENDABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.DepthStencil">
            <summary>	
            Depth stencils supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_DEPTH_STENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.CpuLockable">
            <summary>	
            CPU locking supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_CPU_LOCKABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.MultisampleResolve">
            <summary>	
            Multisampling resolution supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.Display">
            <summary>	
            Format can be displayed on screen. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_DISPLAY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.CastWithinBitLayout">
            <summary>	
            Format cannot be cast to another format. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.MultisampleRendertarget">
            <summary>	
            Format can be used as a multisampled rendertarget. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.MultisampleLoad">
            <summary>	
            Format can be used as a multisampled texture and read into a shader with the HLSL load function. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderGather">
            <summary>	
            Format can be used with the HLSL gather function. This value is available in DirectX 10.1 or higher. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_GATHER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.BackBufferCast">
            <summary>	
            Format supports casting when used the resource is a back buffer. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.TypedUnorderedAccessView">
            <summary>	
            Format can be used for an unordered access view. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FormatSupport.ShaderGatherComparison">
            <summary>	
            Format can be used with the HLSL gather with comparison function. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ComputeShaderFormatSupport">
            <summary>	
            Unordered resource support options for a compute shader resource (see <see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/>).	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicAdd">
            <summary>	
            Format supports atomic add. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicBitwiseOps">
            <summary>	
            Format supports atomic bitwise operations. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicCompareStoreOrCompareExchange">
            <summary>	
            Format supports atomic compare with store or exchange. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicExchange">
            <summary>	
            Format supports atomic exchange. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicSignedMinimumOrMaximum">
            <summary>	
            Format supports atomic min and max. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.AtomicUnsignedMinimumOrMaximum">
            <summary>	
            Format supports atomic unsigned min and max. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.TypedLoad">
            <summary>	
            Format supports a typed load. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.TypedStore">
            <summary>	
            Format supports a typed store. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ComputeShaderFormatSupport.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.AsynchronousFlags">
            <summary>	
            Optional flags that control the behavior of {{ID3D11Asynchronous::GetData}}.	
            </summary>	
            <unmanaged>D3D11_ASYNC_GETDATA_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.AsynchronousFlags.DoNotFlush">
            <summary>	
            Do not flush the command buffer. This can potentially cause an infinite loop if GetData is continually called until it returns S_OK as there may still be commands in the command buffer that need to be processed in order for GetData to return S_OK. Since the commands in the command buffer are not flushed they will not be processed and therefore GetData will never return S_OK. 	
            </summary>	
            <unmanaged>D3D11_ASYNC_GETDATA_DONOTFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.AsynchronousFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.QueryType">
            <summary>	
            Query types.	
            </summary>	
            <remarks>	
            Create a query with <see cref="M:SharpDX.Direct3D11.Device.CreateQuery(SharpDX.Direct3D11.QueryDescription,SharpDX.Direct3D11.Query@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_QUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.Event">
            <summary>	
            Determines whether or not the GPU is finished processing commands. When the GPU is finished processing commands <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return S_OK, and pData will point to a BOOL with a value of TRUE. When using this type of query, <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> is disabled. 	
            </summary>	
            <unmanaged>D3D11_QUERY_EVENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.Occlusion">
            <summary>	
            Get the number of samples that passed the depth and stencil tests in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a UINT64. If a depth or stencil test is disabled, then each of those tests will be counted as a pass. 	
            </summary>	
            <unmanaged>D3D11_QUERY_OCCLUSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.Timestamp">
            <summary>	
            Get a timestamp value where <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a UINT64. This kind of query is only useful if two timestamp queries are done in the middle of a D3D11_QUERY_TIMESTAMP_DISJOINT query. The difference of two timestamps can be used to determine how many ticks have elapsed, and the D3D11_QUERY_TIMESTAMP_DISJOINT query will determine if that difference is a reliable value and also has a value that shows how to convert the number of ticks into seconds. See <see cref="T:SharpDX.Direct3D11.QueryDataTimestampDisjoint"/>. When using this type of query, <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> is disabled. 	
            </summary>	
            <unmanaged>D3D11_QUERY_TIMESTAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.TimestampDisjoint">
            <summary>	
            Determines whether or not a D3D11_QUERY_TIMESTAMP is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.QueryDataTimestampDisjoint"/>. This type of query should only be invoked once per frame or less. 	
            </summary>	
            <unmanaged>D3D11_QUERY_TIMESTAMP_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.PipelineStatistics">
            <summary>	
            Get pipeline statistics, such as the number of pixel shader invocations in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.QueryDataPipelineStatistics"/>. 	
            </summary>	
            <unmanaged>D3D11_QUERY_PIPELINE_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.OcclusionPredicate">
            <summary>	
            Similar to D3D11_QUERY_OCCLUSION, except <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL indicating whether or not any samples passed the depth and stencil tests - TRUE meaning at least one passed, FALSE meaning none passed. 	
            </summary>	
            <unmanaged>D3D11_QUERY_OCCLUSION_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputStatistics">
            <summary>	
            Get streaming output statistics, such as the number of primitives streamed out in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputOverflowPredicate">
            <summary>	
            Determines whether or not any of the streaming output buffers overflowed in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_OVERFLOW_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputStatisticsStream0">
            <summary>	
            Get streaming output statistics for stream 0, such as the number of primitives streamed out in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_STATISTICS_STREAM0</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream0">
            <summary>	
            Determines whether or not the stream 0 output buffers overflowed in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputStatisticsStream1">
            <summary>	
            Get streaming output statistics for stream 1, such as the number of primitives streamed out in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_STATISTICS_STREAM1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream1">
            <summary>	
            Determines whether or not the stream 1 output buffers overflowed in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputStatisticsStream2">
            <summary>	
            Get streaming output statistics for stream 2, such as the number of primitives streamed out in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_STATISTICS_STREAM2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream2">
            <summary>	
            Determines whether or not the stream 2 output buffers overflowed in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputStatisticsStream3">
            <summary>	
            Get streaming output statistics for stream 3, such as the number of primitives streamed out in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> will return a <see cref="T:SharpDX.Direct3D11.StreamOutputStatistics"/> structure. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_STATISTICS_STREAM3</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryType.StreamOutputOverflowPredicateStream3">
            <summary>	
            Determines whether or not the stream 3 output buffers overflowed in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>. <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow. 	
            </summary>	
            <unmanaged>D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.QueryFlags">
            <summary>	
            Flags that describe miscellaneous query behavior.	
            </summary>	
            <remarks>	
            This flag is part of a query description (see <see cref="T:SharpDX.Direct3D11.QueryDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_QUERY_MISC_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryFlags.Predicatehint">
            <summary>	
            Tell the hardware that if it is not yet sure if something is hidden or not to draw it anyway. This is only used with an occlusion predicate. Predication data cannot be returned to your application via <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> when using this flag. 	
            </summary>	
            <unmanaged>D3D11_QUERY_MISC_PREDICATEHINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CounterKind">
            <summary>	
            Options for performance counters.	
            </summary>	
            <remarks>	
            Independent hardware vendors may define their own set of performance counters for their devices, by giving the enumeration value a number that is greater than the value for D3D11_COUNTER_DEVICE_DEPENDENT_0. This enumeration is used by <see cref="T:SharpDX.Direct3D11.CounterDescription"/> and <see cref="T:SharpDX.Direct3D11.CounterCapabilities"/>. 	
            </remarks>	
            <unmanaged>D3D11_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterKind.DeviceDependent0">
            <summary>	
            Define a performance counter that is dependent on the hardware device. 	
            </summary>	
            <unmanaged>D3D11_COUNTER_DEVICE_DEPENDENT_0</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CounterType">
            <summary>	
            Data type of a performance counter.	
            </summary>	
            <remarks>	
            These flags are an output parameter in <see cref="M:SharpDX.Direct3D11.Device.CheckCounter(SharpDX.Direct3D11.CounterDescription,SharpDX.Direct3D11.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/>. 	
            </remarks>	
            <unmanaged>D3D11_COUNTER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterType.Float32">
            <summary>	
            32-bit floating point. 	
            </summary>	
            <unmanaged>D3D11_COUNTER_TYPE_FLOAT32</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterType.Uint16">
            <summary>	
            16-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D11_COUNTER_TYPE_UINT16</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterType.Uint32">
            <summary>	
            32-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D11_COUNTER_TYPE_UINT32</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterType.Uint64">
            <summary>	
            64-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D11_COUNTER_TYPE_UINT64</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.StandardMultisampleQualityLevels">
            <summary>	
            Specifies a multi-sample pattern type.	
            </summary>	
            <unmanaged>D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern">
            <summary>	
            Pre-defined multi-sample patterns required for DX11 and DX10.1 hardware. 	
            </summary>	
            <unmanaged>D3D11_STANDARD_MULTISAMPLE_PATTERN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern">
            <summary>	
            Pattern where all of the samples are located at the pixel center. 	
            </summary>	
            <unmanaged>D3D11_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceContextType">
            <summary>	
            Device context options.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="M:SharpDX.Direct3D11.DeviceContext.GetTypeInfo"/>. 	
            </remarks>	
            <unmanaged>D3D11_DEVICE_CONTEXT_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceContextType.Immediate">
            <summary>	
            The device context is an immediate context. 	
            </summary>	
            <unmanaged>D3D11_DEVICE_CONTEXT_IMMEDIATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceContextType.Deferred">
            <summary>	
            The device context is a deferred context. 	
            </summary>	
            <unmanaged>D3D11_DEVICE_CONTEXT_DEFERRED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Feature">
            <summary>	
            Direct3D 11 feature options.	
            </summary>	
            <remarks>	
            This enumeration is used when querying a driver about support for these features by calling <see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/>.   Each value in this enumeration has a corresponding data structure that is required to be passed to the pFeatureSupportData parameter  of ID3D11Device::CheckFeatureSupport. The following table shows the structures associated with each enumerant.  EnumerantAssociated Structure D3D11_FEATURE_THREADING <see cref="T:SharpDX.Direct3D11.FeatureDataThreading"/>  D3D11_FEATURE_DOUBLES <see cref="T:SharpDX.Direct3D11.FeatureDataDoubles"/>  D3D11_FEATURE_FORMAT_SUPPORT <see cref="T:SharpDX.Direct3D11.FeatureDataFormatSupport"/>  D3D11_FEATURE_FORMAT_SUPPORT2 <see cref="T:SharpDX.Direct3D11.FeatureDataFormatSupport2"/>  D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS <see cref="T:SharpDX.Direct3D11.FeatureDataD3D10XHardwareOptions"/>   ? 	
            </remarks>	
            <unmanaged>D3D11_FEATURE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Feature.Threading">
            <summary>	
            The driver supports {{multithreading}}.  To see an example of testing a driver for multithread support, see {{How To: Check for Driver Support}}. 	
            </summary>	
            <unmanaged>D3D11_FEATURE_THREADING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Feature.ShaderDoubles">
            <summary>	
            Supports the use of the  doubles type in HLSL. 	
            </summary>	
            <unmanaged>D3D11_FEATURE_DOUBLES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Feature.FormatSupport">
            <summary>	
            Supports the formats in <see cref="T:SharpDX.Direct3D11.FormatSupport"/>. 	
            </summary>	
            <unmanaged>D3D11_FEATURE_FORMAT_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Feature.ComputeShaders">
            <summary>	
            Supports the formats in <see cref="T:SharpDX.Direct3D11.ComputeShaderFormatSupport"/>. 	
            </summary>	
            <unmanaged>D3D11_FEATURE_FORMAT_SUPPORT2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Feature.D3D10XHardwareOptions">
            <summary>	
            Supports compute shaders and raw and structured buffers. 	
            </summary>	
            <unmanaged>D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DeviceCreationFlags">
            <summary>	
            Describes parameters that are used to create a device.	
            </summary>	
            <remarks>	
            Device creation flags are used by <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> and <see cref="M:SharpDX.Direct3D11.D3D11.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/>. An application might dynamically create (and destroy) threads to improve performance especially on a machine with multiple CPU cores. There may be cases, however, when an application needs to prevent extra threads from being created. This can happen when you want to simplify debugging, profile code or develop a tool for instance. For these cases, use D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS to request that the runtime and video driver not create any additional threads that might interfere with the application. 	
            </remarks>	
            <unmanaged>D3D11_CREATE_DEVICE_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.SingleThreaded">
            <summary>	
            You should use this flag if your application will only call methods of Direct3D 11 interfaces from a single thread. By default, the <see cref="T:SharpDX.Direct3D11.Device"/> object is  {{thread-safe}}.  By using this flag, you can increase performance. However, if you use this flag and your application calls methods of Direct3D 11 interfaces from multiple threads, undefined behavior might result. 	
            </summary>	
            <unmanaged>D3D11_CREATE_DEVICE_SINGLETHREADED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.Debug">
            <summary>	
            Creates a device that supports the debug layer. 	
            </summary>	
            <unmanaged>D3D11_CREATE_DEVICE_DEBUG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.SwitchToRef">
            <summary>	
            Note??This flag is not supported in Direct3D 11. 	
            </summary>	
            <unmanaged>D3D11_CREATE_DEVICE_SWITCH_TO_REF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.PreventThreadingOptimizations">
            <summary>	
            Prevents multiple threads from being created. When this flag is used with a WARP device, no additional threads will be created by WARP  and all rasterization will occur on the calling thread. This flag is not recommended for general use. See remarks. 	
            </summary>	
            <unmanaged>D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport">
            <summary>	
            Required for Direct2D interoperability with Direct3D resources. 	
            </summary>	
            <unmanaged>D3D11_CREATE_DEVICE_BGRA_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DeviceCreationFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ReportingLevel">
            <summary>	
            Options for the amount of information to report about a device object's lifetime.	
            </summary>	
            <remarks>	
            This enumeration is used by <see cref="M:SharpDX.Direct3D11.Debug.ReportLiveDeviceObjects(SharpDX.Direct3D11.ReportingLevel)"/>. Several inline functions exist to combine the options using operators, see the D3D11SDKLayers.h header file for details. 	
            </remarks>	
            <unmanaged>D3D11_RLDO_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ReportingLevel.Summary">
            <summary>	
            Specifies to obtain a summary about a device object's lifetime. 	
            </summary>	
            <unmanaged>D3D11_RLDO_SUMMARY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ReportingLevel.Detail">
            <summary>	
            Specifies to obtain detailed information about a device object's lifetime. 	
            </summary>	
            <unmanaged>D3D11_RLDO_DETAIL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ReportingLevel.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MessageCategory">
            <summary>	
            Categories of debug messages. This will identify the category of a message when retrieving a message with <see cref="M:SharpDX.Direct3D11.InfoQueue.GetMessage(System.Int64,SharpDX.Direct3D11.Message[],SharpDX.Size@)"/> and when adding a message with <see cref="M:SharpDX.Direct3D11.InfoQueue.AddMessage(SharpDX.Direct3D11.MessageCategory,SharpDX.Direct3D11.MessageSeverity,SharpDX.Direct3D11.MessageId,System.String)"/>. When creating an {{info queue filter}}, these values can be used to allow or deny any categories of messages to pass through the storage and retrieval filters.	
            </summary>	
            <remarks>	
            This is part of the Information Queue feature. See <see cref="T:SharpDX.Direct3D11.InfoQueue"/>. 	
            </remarks>	
            <unmanaged>D3D11_MESSAGE_CATEGORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.ApplicationDefined">
            <summary>	
            User defined message. See <see cref="M:SharpDX.Direct3D11.InfoQueue.AddMessage(SharpDX.Direct3D11.MessageCategory,SharpDX.Direct3D11.MessageSeverity,SharpDX.Direct3D11.MessageId,System.String)"/>. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.Miscellaneous">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.Initialization">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_INITIALIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.Cleanup">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_CLEANUP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.Compilation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_COMPILATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.StateCreation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_STATE_CREATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.StateSetting">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_STATE_SETTING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.StateGetting">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_STATE_GETTING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.ResourceManipulation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageCategory.Execution">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY_EXECUTION</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MessageSeverity">
            <summary>	
            Debug message severity levels for an information queue.	
            </summary>	
            <remarks>	
            Use these values to allow or deny message categories to pass through the storage and retrieval filters for an information queue (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>). This API is used by <see cref="M:SharpDX.Direct3D11.InfoQueue.AddApplicationMessage(SharpDX.Direct3D11.MessageSeverity,System.String)"/>. 	
            </remarks>	
            <unmanaged>D3D11_MESSAGE_SEVERITY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageSeverity.Corruption">
            <summary>	
            Defines some type of corruption which has occurred. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY_CORRUPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageSeverity.Error">
            <summary>	
            Defines an error message. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageSeverity.Warning">
            <summary>	
            Defines a warning message. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY_WARNING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageSeverity.Information">
            <summary>	
            Defines an information message. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY_INFO</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MessageId">
            <summary>	
            Debug messages for setting up an info-queue filter (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>); use these messages to allow or deny message categories to pass through the storage and retrieval filters. These IDs are used by methods such as <see cref="M:SharpDX.Direct3D11.InfoQueue.GetMessage(System.Int64,SharpDX.Direct3D11.Message[],SharpDX.Size@)"/> or <see cref="M:SharpDX.Direct3D11.InfoQueue.AddMessage(SharpDX.Direct3D11.MessageCategory,SharpDX.Direct3D11.MessageSeverity,SharpDX.Direct3D11.MessageId,System.String)"/>. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetvertexbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetindexbufferHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOmsetrendertargetsHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSosettargetsHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.StringFromApplication">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_STRING_FROM_APPLICATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedThis">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_THIS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter4">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter5">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter6">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter7">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter8">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter9">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter10">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter11">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter12">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter13">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter14">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedParameter15">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CorruptedMultithreading">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.MessageReportingOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetinputlayoutUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetvertexbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetindexbufferUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetshaderUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetsamplersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GssetshaderUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GssetsamplersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SosettargetsUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetshaderUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetsamplersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RssetstateUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetblendstateUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetdepthstencilstateUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetrendertargetsUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetpredicationUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GetprivatedataMoredata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetprivatedataInvalidfreedata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetprivatedataInvalidiunknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetprivatedataInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetprivatedataChangingparams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetprivatedataOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidsamples">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferUnrecognizedusage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferUnrecognizedbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferUnrecognizedcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferUnrecognizedmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidinitialdata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidmiplevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidconstantbufferbindings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferLargeallocation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnsupportedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidsamples">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnrecognizedusage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnrecognizedbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnrecognizedcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dUnrecognizedmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidinitialdata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidmiplevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture1dLargeallocation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnsupportedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidsamples">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnrecognizedusage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnrecognizedbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnrecognizedcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dUnrecognizedmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidinitialdata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidmiplevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture2dLargeallocation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnsupportedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidsamples">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnrecognizedusage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnrecognizedbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnrecognizedcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dUnrecognizedmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidcpuaccessflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidbindflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidinitialdata">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidmiplevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Createtexture3dLargeallocation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvaliddesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewUnsupportedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewInvaliddesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterendertargetviewOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvaliddesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutToomanyelements">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutIncompatibleformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidslot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidinputslotclass">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutSteprateslotclassmismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidslotclasschange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidstepratechange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutInvalidalignment">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutDuplicatesemantic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutUnparseableinputsignature">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutNullsemantic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutMissingelement">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatevertexshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatevertexshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatevertexshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidnumentries">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputOutputstreamstrideunused">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputUnexpecteddecl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputExpecteddecl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputOutputslot0expected">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidoutputslot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputOnlyoneelementperslot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidcomponentcount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidstartcomponentandcomponentcount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidgapdefinition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputRepeatedoutput">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidoutputstreamstride">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputMissingsemantic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputMaskmismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputCanthaveonlygaps">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputDecltoocomplex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputMissingoutputsignature">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatepixelshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatepixelshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatepixelshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateInvalidfillmode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateInvalidcullmode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateInvaliddepthbiasclamp">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateInvalidslopescaleddepthbias">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvaliddepthwritemask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvaliddepthfunc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidfrontfacestencilfailop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidfrontfacestencilzfailop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidfrontfacestencilpassop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidfrontfacestencilfunc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidbackfacestencilfailop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidbackfacestencilzfailop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidbackfacestencilpassop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateInvalidbackfacestencilfunc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvalidsrcblend">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvaliddestblend">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvalidblendop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvalidsrcblendalpha">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvaliddestblendalpha">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvalidblendopalpha">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateInvalidrendertargetwritemask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidfilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidaddressu">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidaddressv">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidaddressw">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidmiplodbias">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidmaxanisotropy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidcomparisonfunc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidminlod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateInvalidmaxlod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatequeryorpredicateInvalidquery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatequeryorpredicateInvalidmiscflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatequeryorpredicateUnexpectedmiscflag">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatequeryorpredicateNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetprimitivetopologyTopologyUnrecognized">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetprimitivetopologyTopologyUndefined">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetvertexbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetvertexbuffersOffsetTooLarge">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetvertexbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetindexbufferInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetindexbufferFormatInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetindexbufferOffsetTooLarge">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetindexbufferOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SosettargetsInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSosettargetsOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetviewportsInvalidviewport">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetscissorrectsInvalidscissor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ClearrendertargetviewDenormflush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CleardepthstencilviewDenormflush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CleardepthstencilviewInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIagetvertexbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceVsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSogettargetsBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DevicePsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRsgetviewportsViewportsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRsgetscissorrectsRectsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGeneratemipsResourceInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvaliddestinationsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvalidsourcesubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvalidsourcebox">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvalidsource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvaliddestinationstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopysubresourceregionInvalidsourcestate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceInvalidsource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceInvaliddestinationstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceInvalidsourcestate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.UpdatesubresourceInvaliddestinationsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.UpdatesubresourceInvaliddestinationbox">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.UpdatesubresourceInvaliddestinationstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceResolvesubresourceDestinationInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceResolvesubresourceDestinationSubResourceInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceResolvesubresourceSourceInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceResolvesubresourceSourceSubResourceInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceResolvesubresourceFormatInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BufferMapInvalidmaptype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BufferMapInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BufferMapAlreadymapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BufferMapDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BufferUnmapNotmapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DMapInvalidmaptype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DMapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DMapInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DMapAlreadymapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DMapDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DUnmapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture1DUnmapNotmapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DMapInvalidmaptype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DMapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DMapInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DMapAlreadymapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DMapDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DUnmapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture2DUnmapNotmapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DMapInvalidmaptype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DMapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DMapInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DMapAlreadymapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DMapDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DUnmapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.Texture3DUnmapNotmapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckformatsupportFormatDeprecated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckmultisamplequalitylevelsFormatDeprecated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetexceptionmodeUnrecognizedflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetexceptionmodeInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetexceptionmodeDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefSimulatingInfinitelyFastHardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefThreadingMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_THREADING_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefUmdriverException">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefKmdriverException">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefHardwareException">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefAccessingIndexableTempOutOfRange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefProblemParsingShader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefOutOfMemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefInformation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindexedIndexposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawinstancedVertexposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawinstancedInstanceposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindexedinstancedInstanceposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindexedinstancedIndexposOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexShaderNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageSemanticnameNotFound">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageRegisterindex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageComponenttype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageRegistermask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageSystemvalue">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderLinkageNeverwrittenAlwaysreads">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexBufferNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawInputlayoutNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawConstantBufferNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawConstantBufferTooSmall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawSamplerNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawShaderresourceviewNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawViewDimensionMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexBufferStrideTooSmall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexBufferTooSmall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawIndexBufferNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawIndexBufferFormatInvalid">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawIndexBufferTooSmall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawGsInputPrimitiveMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceReturnTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawPositionNotPresent">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawOutputStreamNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawBoundResourceMapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawInvalidPrimitivetopology">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawVertexStrideUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawIndexOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawOutputStreamOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceFormatLdUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceFormatSampleUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceFormatSampleCUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceMultisampleUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawStreamOutputTargetsBoundWithoutSource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawStreamOutputStrideLargerThanBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawOmRenderTargetDoesNotSupportBlending">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawOmDualSourceBlendingCanOnlyHaveRenderTarget0">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRemovalProcessAtFault">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRemovalProcessPossiblyAtFault">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRemovalProcessNotAtFault">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOpenSharedResourceInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOpenSharedResourceOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOpenSharedResourceBadinterfaceReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawViewportNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutTrailingDigitInSemantic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputTrailingDigitInSemantic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetviewportsDenormflush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetrendertargetsInvalidview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSettextfiltersizeInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawSamplerMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.BlendstateGetdescLegacy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ShaderresourceviewGetdescLegacy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatequeryOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatepredicateOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterOutofrangeCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterSimultaneousActiveCountersExhausted">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterUnsupportedWellknownCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterNonexclusiveReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecounterNulldesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckcounterOutofrangeCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckcounterUnsupportedWellknownCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetpredicationInvalidPredicateState">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryBeginUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PredicateBeginDuringPredication">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryBeginDuplicate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryBeginAbandoningPreviousResults">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PredicateEndDuringPredication">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryEndAbandoningPreviousResults">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryEndWithoutBegin">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryGetdataInvalidDatasize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryGetdataInvalidFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.QueryGetdataInvalidCall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawPsOutputTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceFormatGatherUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawInvalidUseOfCenterMultisamplePattern">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetvertexbuffersStrideTooLarge">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetvertexbuffersInvalidrange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutEmptyLayout">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawResourceSampleCountMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.D3D10MessagesEnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_D3D10_MESSAGES_END</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.D3D10L9MessagesStart">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilstateStencilNoTwoSided">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateDepthBiasClampNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateNoComparisonSupport">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateExcessiveAnisotropy">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateBorderOutOfRange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetsamplersNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VssetsamplersTooManySamplers">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetsamplersTooManySamplers">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoArrays">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoVbAndIbBind">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoTexture1d">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceDimensionOutOfRange">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNotBindableAsShaderResource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetrendertargetsTooManyRenderTargets">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetrendertargetsNoDifferingBitDepths">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.IasetvertexbuffersBadBufferIndex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetviewportsTooManyViewports">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetprimitivetopologyAdjacencyUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetscissorrectsTooManyScissors">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceOnlyTexture2dWithinGpuMemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceNoTexture3dReadback">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopyresourceNoTextureOnlyReadback">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateinputlayoutUnsupportedFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNoAlphaToCoverage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreaterasterizerstateDepthClipEnableMustBeTrue">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DrawindexedStartindexlocationMustBePositive">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewMustUseLowestLod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateMinlodMustNotBeFractional">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateMaxlodMustBeFltMaximum">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewFirstarraysliceMustBeZero">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewCubesMustHave6Sides">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNotBindableAsRenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoDwordIndexBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceMsaaPrecludesShaderResource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourcePresentationPrecludesShaderResource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNoIndependentBlendEnable">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNoIndependentWriteMasks">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoStreamOut">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceOnlyVbIbForBuffers">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNoAutogenForVolumes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceDxgiFormatR8G8B8A8CannotBeShared">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.VsshaderresourcesNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.GeometryShaderNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.StreamOutNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.TextFilterNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNoSeparateAlphaBlend">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateNoMrtBlend">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateblendstateOperationNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateNoMirroronce">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DrawinstancedNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DrawindexedinstancedNotSupportedBelow93">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DrawindexedPointListUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SetblendstateSampleMaskCannotBeZero">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceDimensionExceedsFeatureLevelDefinition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceOnlySingleMipLevelDepthStencilSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceRssetscissorrectsNegativescissor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.SlotZeroMustBeD3D10InputPerVertexData">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateresourceNonPow2Mipmap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatesamplerstateBorderNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetrendertargetsNoSRgbMrt">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.D3D10L9MessagesEnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.D3D11MessagesStart">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_D3D11_MESSAGES_START</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedepthstencilviewInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatevertexshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidnumstreams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidstreamtorasterizer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputUnexpectedstreams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatepixelshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedeferredcontextInvalidCommandlistflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedeferredcontextSinglethreaded">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedeferredcontextInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedeferredcontextInvalidCallReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedeferredcontextOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.FinishdisplaylistOnimmediatecontext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.FinishdisplaylistOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.FinishdisplaylistInvalidCallReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidstream">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputUnexpectedentries">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputUnexpectedstrides">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreategeometryshaderwithstreamoutputInvalidnumstrides">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.HssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.HssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatehullshaderInvalidcall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatehullshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatehullshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatehullshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatehullshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.HssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceHsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedomainshaderInvalidcall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedomainshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedomainshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedomainshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatedomainshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawHsXorDsMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeferredContextRemovalProcessAtFault">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindirectInvalidArgBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindirectOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawindirectOffsetOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapInvalidmaptype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapAlreadymapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapDeviceremovedReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceMapWithoutInitialDiscard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceUnmapInvalidsubresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ResourceUnmapNotmapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawRasterizingControlPoints">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceIasetprimitivetopologyTopologyUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawHsDsSignatureMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawHullShaderInputTopologyMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawHsDsControlPointCountMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawHsDsTessellatorDomainMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateContext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_CONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveContext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_CONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyContext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_CONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateTexture1D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveTexture1D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyTexture1D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateTexture2D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveTexture2D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyTexture2D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateTexture3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveTexture3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyTexture3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateShaderresourceview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveShaderresourceview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyShaderresourceview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateRendertargetview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveRendertargetview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyRendertargetview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateDepthstencilview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveDepthstencilview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyDepthstencilview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateVertexshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_VERTEXSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveVertexshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_VERTEXSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyVertexshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateHullshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_HULLSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveHullshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_HULLSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyHullshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_HULLSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateDomainshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_DOMAINSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveDomainshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_DOMAINSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyDomainshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateGeometryshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveGeometryshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyGeometryshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatePixelshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_PIXELSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LivePixelshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_PIXELSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyPixelshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_PIXELSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateInputlayout">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveInputlayout">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyInputlayout">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateSampler">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveSampler">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroySampler">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateBlendstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_BLENDSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveBlendstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_BLENDSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyBlendstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_BLENDSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateDepthstencilstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveDepthstencilstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyDepthstencilstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateRasterizerstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveRasterizerstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyRasterizerstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateQuery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_QUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveQuery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_QUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyQuery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_QUERY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatePredicate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LivePredicate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyPredicate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_PREDICATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyCounter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_COUNTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateCommandlist">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_COMMANDLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveCommandlist">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_COMMANDLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyCommandlist">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_COMMANDLIST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateClassinstance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveClassinstance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyClassinstance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateClasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveClasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyClasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_DEVICE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveObjectSummary">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateComputeshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_COMPUTESHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveComputeshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_COMPUTESHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyComputeshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateUnorderedaccessview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.LiveUnorderedaccessview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DestroyUnorderedaccessview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInterfacesFeaturelevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInterfaceCountMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInvalidInstance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInvalidInstanceIndex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInvalidInstanceType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInvalidInstanceData">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderUnboundInstanceData">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetshaderInstanceDataBindings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreateshaderClasslinkageFull">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCheckfeaturesupportUnrecognizedFeature">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCheckfeaturesupportMismatchedDataSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCheckfeaturesupportInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetshaderresourcesHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetconstantbuffersHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CssetshaderresourcesUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CssetconstantbuffersUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecomputeshaderInvalidcall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecomputeshaderOutofmemory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecomputeshaderInvalidshaderbytecode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecomputeshaderInvalidshadertype">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatecomputeshaderInvalidclasslinkage">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CssetconstantbuffersInvalidbuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCsgetshaderresourcesViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCsgetconstantbuffersBuffersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCsgetsamplersSamplersEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreatevertexshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreatehullshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreatedomainshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreategeometryshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreategeometryshaderwithstreamoutputDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreatepixelshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCreatecomputeshaderDoublefloatopsnotsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreatebufferInvalidstructurestride">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresourceviewInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvaliddesc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvaliddimensions">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewUnrecognizedformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOmsetrendertargetsandunorderedaccessviewsHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOmsetrendertargetsandunorderedaccessviewsOverlappingOldSlots">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceOmsetrendertargetsandunorderedaccessviewsNoOperation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CssetunorderedaccessviewsUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.PssetunorderedaccessviewsUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvalidargReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewOutofmemoryReturn">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetunorderedaccessviewsHazard">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ClearunorderedaccessviewDenormflush">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetunorderedaccesssViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCsgetunorderedaccesssViewsEmpty">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateunorderedaccessviewInvalidflags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CreateshaderresesourceviewToomanyobjects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchindirectInvalidArgBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchindirectOffsetUnaligned">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchindirectOffsetOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetresourceminlodInvalidcontext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetresourceminlodInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceSetresourceminlodInvalidminlod">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGetresourceminlodInvalidcontext">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceGetresourceminlodInvalidresource">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.OmsetdepthstencilUnbinddeletingobject">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CleardepthstencilviewDepthReadonly">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CleardepthstencilviewStencilReadonly">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckfeaturesupportFormatDeprecated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewReturnTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewNotSet">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDrawUnorderedaccessviewRendertargetviewOverlap">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewDimensionMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAppendUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicsUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewStructureStrideMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewBufferTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewRawUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewFormatLdUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewFormatStoreUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicAddUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicBitwiseOpsUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicCmpstoreCmpexchangeUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicExchangeUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicSignedMinmaxUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewAtomicUnsignedMinmaxUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchBoundResourceMapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchThreadgroupcountOverflow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchThreadgroupcountZero">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderresourceviewStructureStrideMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderresourceviewBufferTypeMismatch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceShaderresourceviewRawUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceDispatchindirectUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopystructurecountInvalidoffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopystructurecountLargeoffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopystructurecountInvaliddestinationstate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CopystructurecountInvalidsourcestate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.CheckformatsupportFormatNotSupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetunorderedaccessviewsInvalidview">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetunorderedaccessviewsInvalidoffset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceCssetunorderedaccessviewsToomanyviews">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.ClearunorderedaccessviewfloatInvalidformat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.DeviceUnorderedaccessviewCounterUnsupported">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.RefWarning">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_REF_WARNING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MessageId.D3D11MessagesEnd">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID_D3D11_MESSAGES_END</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DebugFeatureFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_DEBUG_FEATURE_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DebugFeatureFlags.FlushPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DebugFeatureFlags.FinishPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DebugFeatureFlags.PresentPerRender">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FilterFlags">
            <summary>	
            Texture filtering flags.	
            </summary>	
            <remarks>	
            D3DX11 automatically performs gamma correction (to convert color data from RGB space to standard RGB space) when loading texture data. This is automatically done for instance when RGB data is loaded from a .png file into an sRGB texture. Use the SRGB filter flags to indicate if the data does not need to be converted into sRGB space. 	
            </remarks>	
            <unmanaged>D3DX11_FILTER_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.None">
            <summary>	
            No scaling or filtering will take place. Pixels outside the bounds of the source image are assumed to be transparent black. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Point">
            <summary>	
            Each destination pixel is computed by sampling the nearest pixel from the source image. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Linear">
            <summary>	
            Each destination pixel is computed by sampling the four nearest pixels from the source image. This filter works best when the scale on both axes is less than two. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_LINEAR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Triangle">
            <summary>	
            Every pixel in the source image contributes equally to the destination image. This is the slowest of the filters. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_TRIANGLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Box">
            <summary>	
            Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_BOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.MirrorU">
            <summary>	
            Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_MIRROR_U</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.MirrorV">
            <summary>	
            Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_MIRROR_V</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.MirrorW">
            <summary>	
            Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_MIRROR_W</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Mirror">
            <summary>	
            Specifying this flag is the same as specifying the D3DX_FILTER_MIRROR_U, D3DX_FILTER_MIRROR_V, and D3DX_FILTER_MIRROR_W flags. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.Dither">
            <summary>	
            The resulting image must be dithered using a 4x4 ordered dither algorithm. This happens when converting from one format to another. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_DITHER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.DitherDiffusion">
            <summary>	
            Do diffuse dithering on the image when changing from one format to another. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_DITHER_DIFFUSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.SRgbIn">
            <summary>	
            Input data is in standard RGB (sRGB) color space. See remarks. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_SRGB_IN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.SRgbOut">
            <summary>	
            Output data is in standard RGB (sRGB) color space. See remarks. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_SRGB_OUT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FilterFlags.SRgb">
            <summary>	
            Same as specifying D3DX_FILTER_SRGB_IN | D3DX_FILTER_SRGB_OUT. See remarks. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_SRGB</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.NormalMapFlags">
            <summary>	
            Normal map options. Any number of these flags may be OR'd together in any combination.	
            </summary>	
            <remarks>	
            These flags are used by <see cref="M:SharpDX.Direct3D11.D3DX11.ComputeNormalMap(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.NormalMapFlags,SharpDX.Direct3D11.Channel,System.Single,SharpDX.Direct3D11.Texture2D)"/>. 	
            </remarks>	
            <unmanaged>D3DX11_NORMALMAP_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.MirrorU">
            <summary>	
            Indicates that pixels off the edge of the texture on the U-axis should be mirrored, not wraped. 	
            </summary>	
            <unmanaged>D3DX11_NORMALMAP_MIRROR_U</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.MirrorV">
            <summary>	
            Indicates that pixels off the edge of the texture on the V-axis should be mirrored, not wraped. 	
            </summary>	
            <unmanaged>D3DX11_NORMALMAP_MIRROR_V</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.Mirror">
            <summary>	
            Same as D3DX11_NORMALMAP_MIRROR_U | D3DX11_NORMALMAP_MIRROR_V. 	
            </summary>	
            <unmanaged>D3DX11_NORMALMAP_MIRROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.Invertsign">
            <summary>	
            Inverts the direction of each normal. 	
            </summary>	
            <unmanaged>D3DX11_NORMALMAP_INVERTSIGN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.ComputeOcclusion">
            <summary>	
            Computes the per pixel occlusion term and encodes it into the alpha. An Alpha of 1 means that the pixel is not obscured in any way, and an alpha of 0 would mean that the pixel is completly obscured. 	
            </summary>	
            <unmanaged>D3DX11_NORMALMAP_COMPUTE_OCCLUSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.NormalMapFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Channel">
            <summary>	
            These flags are used by functions which operate on one or more channels in a texture.	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.Red">
            <summary>	
            Indicates the red channel should be used. 	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_RED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.Blue">
            <summary>	
            Indicates the blue channel should be used. 	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_BLUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.Green">
            <summary>	
            Indicates the green channel should be used. 	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_GREEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.Alpha">
            <summary>	
            Indicates the alpha channel should be used. 	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_ALPHA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.Luminance">
            <summary>	
            Indicates the luminaces of the red, green, and blue channels should be used. 	
            </summary>	
            <unmanaged>D3DX11_CHANNEL_LUMINANCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Channel.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ImageFileFormat">
            <summary>	
            Image file formats supported by D3DX11Createxxx and D3DX11Savexxx functions.	
            </summary>	
            <remarks>	
            See {{Types of Bitmaps (GDI+)}} for more information on some of these formats. 	
            </remarks>	
            <unmanaged>D3DX11_IMAGE_FILE_FORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Bmp">
            <summary>	
            Windows bitmap (BMP) file format. Contains a header that describes the resolution of the device on which the rectangle of pixels was created, the dimensions of the rectangle, the size of the array of bits, a logical palette, and an array of bits that defines the relationship between pixels in the bitmapped image and entries in the logical palette. 	
            </summary>	
            <unmanaged>D3DX11_IFF_BMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Jpg">
            <summary>	
            Joint Photographic Experts Group (JPEG) compressed file format. Specifies variable compression of 24-bit RGB color and 8-bit gray-scale Tagged Image File Format (TIFF) image document files. 	
            </summary>	
            <unmanaged>D3DX11_IFF_JPG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Png">
            <summary>	
            Portable Network Graphics (PNG) file format. A non-proprietary bitmap format using lossless compression. 	
            </summary>	
            <unmanaged>D3DX11_IFF_PNG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Dds">
            <summary>	
            DirectDraw surface (DDS) file format. Stores textures, volume textures, and cubic environment maps, with or without mipmap levels, and with or without pixel compression. 	
            </summary>	
            <unmanaged>D3DX11_IFF_DDS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Tiff">
            <summary>	
            Tagged Image File Format (TIFF). 	
            </summary>	
            <unmanaged>D3DX11_IFF_TIFF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Gif">
            <summary>	
            Graphics Interchange Format (GIF). 	
            </summary>	
            <unmanaged>D3DX11_IFF_GIF</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageFileFormat.Wmp">
            <summary>	
            Windows Media Player format (WMP). 	
            </summary>	
            <unmanaged>D3DX11_IFF_WMP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ScanDataType">
            <summary>	
            Type for scan data.	
            </summary>	
            <unmanaged>D3DX11_SCAN_DATA_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanDataType.Float">
            <summary>	
            FLOAT data. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_DATA_TYPE_FLOAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanDataType.Int">
            <summary>	
            INT data. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_DATA_TYPE_INT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanDataType.UInt">
            <summary>	
            UINT data. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_DATA_TYPE_UINT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ScanOpcode">
            <summary>	
            Scan opcodes.	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Add">
            <summary>	
            Add values. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_ADD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Minimum">
            <summary>	
            Take the minimum value. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_MIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Maximum">
            <summary>	
            Take the maximum value. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_MAX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Mul">
            <summary>	
            Multiply the values. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_MUL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.And">
            <summary>	
            Perform a logical AND on the values. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_AND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Or">
            <summary>	
            Perform a logical OR on the values. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_OR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanOpcode.Xor">
            <summary>	
            Perform a logical XOR on the values. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_OPCODE_XOR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ScanDirection">
            <summary>	
            Direction to perform scan in.	
            </summary>	
            <unmanaged>D3DX11_SCAN_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanDirection.Forward">
            <summary>	
            Scan forward. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_DIRECTION_FORWARD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ScanDirection.Backward">
            <summary>	
            Scan backward. 	
            </summary>	
            <unmanaged>D3DX11_SCAN_DIRECTION_BACKWARD</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransformDataType">
            <summary>	
            FFT data types.	
            </summary>	
            <unmanaged>D3DX11_FFT_DATA_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDataType.Real">
            <summary>	
            Real numbers. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DATA_TYPE_REAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDataType.Complex">
            <summary>	
            Complex numbers. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DATA_TYPE_COMPLEX</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransformDimensions">
            <summary>	
            Number of dimensions for FFT data.	
            </summary>	
            <unmanaged>D3DX11_FFT_DIM_MASK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDimensions.Dimension1D">
            <summary>	
            One dimension. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DIM_MASK_1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDimensions.Dimension2D">
            <summary>	
            Two dimensions. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DIM_MASK_2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDimensions.Dimension3D">
            <summary>	
            Three dimensions. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DIM_MASK_3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags">
            <summary>	
            FFT creation flags.	
            </summary>	
            <unmanaged>D3DX11_FFT_CREATE_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformCreationFlags.NoPrecomputeBuffers">
            <summary>	
            Do not AddRef or Release temp and precompute buffers, caller is responsible for holding  references to these buffers. 	
            </summary>	
            <unmanaged>D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformCreationFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.D3D11">
            <summary>
            D3D11 Functions.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D11.D3D11.SdkVersion">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3D11.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)">
            <summary>	
            Creates a device that represents the display adapter.	
            </summary>	
            <remarks>	
            This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to  Windows Vista (KB971644). Set ppDevice and ppImmediateContext to NULL to determine which feature level is supported by looking  at pFeatureLevel without creating a device. For an example, see {{How To: Create a Device and Immediate Context}}; to create a device and a swap chain at the same time,  use <see cref="M:SharpDX.Direct3D11.D3D11.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/>. If you set the pAdapter parameter to a non-NULL value, you must also set the DriverType parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the pAdapter parameter to a non-NULL value and the DriverType parameter to the D3D_DRIVER_TYPE_HARDWARE value, D3D11CreateDevice returns an <see cref="T:System.Int32"/> of E_INVALIDARG.   Differences between Direct3D 10 and Direct3D 11: In Direct3D 10, the presence of pAdapter dictated which adapter to use and the DriverType could  mismatch what the adapter was. In Direct3D 11, if you are trying to create a hardware or a software device, set pAdapter != NULL which constrains  the other inputs to be:  DriverType must be D3D_DRIVER_TYPE_UNKNOWN Software must be NULL.  On the other hand, if pAdapter == NULL, the DriverType cannot be set to D3D_DRIVER_TYPE_UNKNOWN; it can be set to either:  If DriverType == D3D_DRIVER_TYPE_SOFTWARE,  Software cannot be NULL. If DriverType == D3D_DRIVER_TYPE_HARDWARE, the adapter used will be the default adapter, which is the first adapter that is enumerated by {{IDXGIFactory1::EnumAdapters}}     ? 	
            </remarks>	
            <param name="adapterRef">A reference to the video adapter to use when creating a {{device}}. Pass NULL to use the default adapter, which is the first adapter that is enumerated by {{IDXGIFactory1::EnumAdapters}}.  Note??Do not mix the use of DXGI 1.0 (<see cref="T:SharpDX.DXGI.Factory"/>) and DXGI 1.1 (<see cref="T:SharpDX.DXGI.Factory1"/>) in an application. Use IDXGIFactory or IDXGIFactory1, but not both in an application. </param>
            <param name="driverType">The <see cref="T:SharpDX.Direct3D.DriverType"/>, which represents the driver type to create. </param>
            <param name="software">A handle to a DLL that implements a software rasterizer.  If DriverType is D3D_DRIVER_TYPE_SOFTWARE,  Software must not be NULL. Get the handle by  calling {{LoadLibrary}},  {{LoadLibraryEx}} ,  or {{GetModuleHandle}}. </param>
            <param name="flags">The runtime {{layers}} to enable (see <see cref="T:SharpDX.Direct3D11.DeviceCreationFlags"/>);  values can be bitwise OR'd together. </param>
            <param name="featureLevelsRef">A reference to an array of <see cref="T:SharpDX.Direct3D.FeatureLevel"/>s, which determine the order of feature levels to attempt to create.  Use default parameters to get the greatest feature level available. If pFeatureLevels is set to NULL,  the following array of feature levels will be used: <code> { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_1, D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_9_3, D3D_FEATURE_LEVEL_9_2, D3D_FEATURE_LEVEL_9_1,}; </code> </param>
            <param name="featureLevels">The number of elements in pFeatureLevels. </param>
            <param name="sDKVersion">The SDK version; use D3D11_SDK_VERSION. </param>
            <param name="deviceRef">Returns the address of a reference to an <see cref="T:SharpDX.Direct3D11.Device"/> object that represents the device created. </param>
            <param name="featureLevelRef">If successful, returns the first <see cref="T:SharpDX.Direct3D.FeatureLevel"/> from the pFeatureLevels array which succeeded. Otherwise, returns 0. </param>
            <param name="immediateContextRef">Returns the address of a reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object that represents the device context. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D11CreateDevice([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D11_CREATE_DEVICE_FLAG Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] int FeatureLevels,[None] int SDKVersion,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3D11.CreateDeviceAndSwapChain(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain@,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)">
            <summary>	
            Creates a device that represents the display adapter and a swap chain used for rendering.	
            </summary>	
            <remarks>	
            This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to  Windows Vista (KB971644). Also, see the remarks section in <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> for details about input parameter dependencies. To create a device without  creating a swap chain, use the <see cref="M:SharpDX.Direct3D11.D3D11.CreateDevice(SharpDX.DXGI.Adapter,SharpDX.Direct3D.DriverType,System.IntPtr,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[],System.Int32,System.Int32,SharpDX.Direct3D11.Device@,SharpDX.Direct3D.FeatureLevel@,SharpDX.Direct3D11.DeviceContext@)"/> function.  If you set the pAdapter parameter to a non-NULL value, you must also set the DriverType parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the pAdapter parameter to a non-NULL value and the DriverType parameter to the D3D_DRIVER_TYPE_HARDWARE value, D3D11CreateDeviceAndSwapChain returns an <see cref="T:System.Int32"/> of E_INVALIDARG. 	
            </remarks>	
            <param name="adapterRef">A reference to the video adapter to use when creating a {{device}}. Pass NULL to use the default adapter, which is the first adapter enumerated  by {{IDXGIFactory1::EnumAdapters}}.  Note??Do not mix the use of DXGI 1.0 (<see cref="T:SharpDX.DXGI.Factory"/>) and DXGI 1.1 (<see cref="T:SharpDX.DXGI.Factory1"/>) in an application. Use IDXGIFactory or IDXGIFactory1, but not both in an application. </param>
            <param name="driverType">The <see cref="T:SharpDX.Direct3D.DriverType"/>, which represents the driver type to create. </param>
            <param name="software">A handle to a DLL that implements a software rasterizer.  If DriverType is D3D_DRIVER_TYPE_SOFTWARE, Software must not be NULL. Get the handle by  calling {{LoadLibrary}},  {{LoadLibraryEx}} ,  or {{GetModuleHandle}}. The value should be non-NULL  when <see cref="T:SharpDX.Direct3D.DriverType"/> is D3D_DRIVER_TYPE_SOFTWARE and NULL otherwise. </param>
            <param name="flags">The runtime {{layers}} to enable (see <see cref="T:SharpDX.Direct3D11.DeviceCreationFlags"/>);  values can be bitwise OR'd together. </param>
            <param name="featureLevelsRef">A reference to an array of <see cref="T:SharpDX.Direct3D.FeatureLevel"/>s, which determine the order of feature levels to attempt to create.  Use default parameters to get the greatest feature level available. If pFeatureLevels is set to NULL, the following array of feature  levels will be used: <code> { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_1, D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_9_3, D3D_FEATURE_LEVEL_9_2, D3D_FEATURE_LEVEL_9_1,}; </code> </param>
            <param name="featureLevels">The number of elements in pFeatureLevels. </param>
            <param name="sDKVersion">The SDK version; use D3D11_SDK_VERSION. </param>
            <param name="swapChainDescRef">A reference to a swap chain description (see <see cref="T:SharpDX.DXGI.SwapChainDescription"/>) that contains initialization parameters for the swap chain. </param>
            <param name="swapChainRef">Returns the address of a reference to the <see cref="T:SharpDX.DXGI.SwapChain"/> object that represents the swap chain used for rendering. </param>
            <param name="deviceRef">Returns the address of a reference to an <see cref="T:SharpDX.Direct3D11.Device"/> object that represents the device created. Supply NULL as an input to  return the highest supported feature level in pFeatureLevel. </param>
            <param name="featureLevelRef">Returns a reference to a <see cref="T:SharpDX.Direct3D.FeatureLevel"/>, which represents the first element in an array of feature levels supported  by the device. </param>
            <param name="immediateContextRef">Returns the address of a reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object that represents the device context. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3D11CreateDeviceAndSwapChain([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] void* Software,[None] D3D11_CREATE_DEVICE_FLAG Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] int FeatureLevels,[None] int SDKVersion,[In] const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out, Optional] IDXGISwapChain** ppSwapChain,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.D3DX11">
            <summary>
            D3DX11 Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CheckVersion(System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="d3DSdkVersion">No documentation.</param>
            <param name="d3DX11SdkVersion">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT D3DX11CheckVersion([None] int D3DSdkVersion,[None] int D3DX11SdkVersion)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.GetImageInfoFromFile(System.String,System.IntPtr,SharpDX.Direct3D11.ImageInformation@,System.Int32@)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <remarks>	
            This function supports both Unicode and ANSI strings. 	
            </remarks>	
            <param name="srcFileRef">File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.ImageInformation"/> to be filled with the description of the data in the source file. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.GetImageInfoFromResource(System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D11.ImageInformation@,System.Int32@)">
            <summary>	
            Retrieves information about a given image in a resource.	
            </summary>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DX11GetImageInfoFromResourceW. Otherwise, the function call resolves to D3DX11GetImageInfoFromResourceA because ANSI strings are being used. 	
            </remarks>	
            <param name="hSrcModule">Module where the resource is loaded. Set this parameter to NULL to specify the module associated with the image that the operating system used to create the current process. </param>
            <param name="srcResourceRef">Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Pointer to a D3DX11_IMAGE_INFO structure to be filled with the description of the data in the source file. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromResourceW([None] void* hSrcModule,[None] const wchar_t* pSrcResource,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.GetImageInfoFromMemory(System.IntPtr,SharpDX.Size,System.IntPtr,SharpDX.Direct3D11.ImageInformation@,System.Int32@)">
            <summary>	
            Get information about an image already loaded into memory.	
            </summary>	
            <param name="srcDataRef">Pointer to the image in memory. </param>
            <param name="srcDataSize">Size of the image in memory, in bytes. </param>
            <param name="umpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See <see cref="T:System.IntPtr"/>. </param>
            <param name="srcInfoRef">Information about the image in memory. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromMemory([None] const void* pSrcData,[None] SIZE_T SrcDataSize,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateShaderResourceViewFromFile(SharpDX.Direct3D11.Device,System.String,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a file.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="srcFileRef">Name of the file that contains the shader-resource view. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">Pointer to a thread-pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromFileW([None] ID3D11Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateTextureFromFile(SharpDX.Direct3D11.Device,System.String,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.Resource@,System.Int32@)">
            <summary>	
            Create a texture resource from a file.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="srcFileRef">The name of the file containing the resource. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="textureRef">The address of a reference to the texture resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateTextureFromFileW([None] ID3D11Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateShaderResourceViewFromResource(SharpDX.Direct3D11.Device,System.IntPtr,System.String,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a resource.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="hSrcModule">Handle to the resource module containing the shader-resource view. HMODULE can be obtained with {{GetModuleHandle Function}}. </param>
            <param name="srcResourceRef">Name of the shader resource view in hSrcModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromResourceW([None] ID3D11Device* pDevice,[None] void* hSrcModule,[None] const wchar_t* pSrcResource,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateTextureFromResource(SharpDX.Direct3D11.Device,System.IntPtr,System.String,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.Resource@,System.Int32@)">
            <summary>	
            Create a texture from another resource.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="hSrcModule">A handle to the source resource. HMODULE can be obtained with {{GetModuleHandle Function}}. </param>
            <param name="srcResourceRef">A string that contains the name of the source resource.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.  </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="textureRef">The address of a reference to the texture resource (see <see cref="T:SharpDX.Direct3D11.Resource"/>). </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateTextureFromResourceW([None] ID3D11Device* pDevice,[None] void* hSrcModule,[None] const wchar_t* pSrcResource,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateShaderResourceViewFromMemory(SharpDX.Direct3D11.Device,System.IntPtr,SharpDX.Size,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.ShaderResourceView@,System.Int32@)">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="srcDataRef">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="srcDataSize">Size of the file in memory. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="shaderResourceViewRef">Address of a reference to the newly created shader resource view. See <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D11Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.CreateTextureFromMemory(SharpDX.Direct3D11.Device,System.IntPtr,SharpDX.Size,System.Nullable{SharpDX.Direct3D11.ImageLoadInformation},System.IntPtr,SharpDX.Direct3D11.Resource@,System.Int32@)">
            <summary>	
            Create a texture resource from a file residing in system memory.	
            </summary>	
            <param name="deviceRef">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="srcDataRef">Pointer to the resource in system memory. </param>
            <param name="srcDataSize">Size of the resource in system memory. </param>
            <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded. </param>
            <param name="umpRef">A reference to a thread pump interface (see <see cref="T:System.IntPtr"/>). If NULL is specified, this function will behave synchronously and will not return until it is finished. </param>
            <param name="textureRef">Address of a reference to the created resource. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="hResultRef">A reference to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateTextureFromMemory([None] ID3D11Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.LoadTextureFromTexture(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.TextureLoadInformation@,SharpDX.Direct3D11.Resource)">
            <summary>	
            Load a texture from a texture.	
            </summary>	
            <param name="contextRef">Pointer to the source texture. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="srcTextureRef">Pointer to texture loading parameters. See <see cref="T:SharpDX.Direct3D11.TextureLoadInformation"/>. </param>
            <param name="loadInfoRef">Pointer to the destination texture. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="dstTextureRef">No documentation.</param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11LoadTextureFromTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D11Resource* pDstTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.FilterTexture(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,System.Int32,System.Int32)">
            <summary>	
            Generates mipmap chain using a particular texture filter.	
            </summary>	
            <param name="contextRef">A reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object. </param>
            <param name="textureRef">The texture object to be filtered. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="srcLevel">The mipmap level whose data is used to generate the rest of the mipmap chain. </param>
            <param name="mipFilter">Flags controlling how each miplevel is filtered (or D3DX11_DEFAULT for D3DX11_FILTER_BOX). See <see cref="T:SharpDX.Direct3D11.FilterFlags"/>. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11FilterTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pTexture,[None] int SrcLevel,[None] int MipFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.SaveTextureToFile(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.ImageFileFormat,System.String)">
            <summary>	
            Save a texture to a file.	
            </summary>	
            <param name="contextRef">A reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object. </param>
            <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="destFormat">The format the texture will be saved as (see <see cref="T:SharpDX.Direct3D11.ImageFileFormat"/>). D3DX11_IFF_DDS is the preferred format since it is the only option that supports all the formats in <see cref="T:SharpDX.DXGI.Format"/>. </param>
            <param name="destFileRef">Name of the destination output file where the texture will be saved.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}; use the return value to see if the DestFormat is supported. </returns>
            <unmanaged>HRESULT D3DX11SaveTextureToFileW([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[None] const wchar_t* pDestFile)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.SaveTextureToMemory(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.ImageFileFormat,SharpDX.Direct3D.Blob@,System.Int32)">
            <summary>	
            Save a texture to memory.	
            </summary>	
            <param name="contextRef">A reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object. </param>
            <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="T:SharpDX.Direct3D11.Resource"/>. </param>
            <param name="destFormat">The format the texture will be saved as. See <see cref="T:SharpDX.Direct3D11.ImageFileFormat"/>. </param>
            <param name="destBufRef">Address of a reference to the memory containing the saved texture. </param>
            <param name="flags">Optional. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11SaveTextureToMemory([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[Out] ID3D10Blob** ppDestBuf,[None] int Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.ComputeNormalMap(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.NormalMapFlags,SharpDX.Direct3D11.Channel,System.Single,SharpDX.Direct3D11.Texture2D)">
            <summary>	
            Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.	
            </summary>	
            <remarks>	
            This method computes the normal by using the central difference with a kernel size of 3x3. RGB channels in the destination contain biased (x,y,z) components of the normal. The central differencing denominator is hardcoded to 2.0. 	
            </remarks>	
            <param name="contextRef">Pointer to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface, representing the source height-map texture. </param>
            <param name="srcTextureRef">Pointer to an <see cref="T:SharpDX.Direct3D11.Texture2D"/> interface, representing the source height-map texture. </param>
            <param name="flags">One or more D3DX_NORMALMAP flags that control generation of normal maps. </param>
            <param name="channel">One D3DX_CHANNEL flag specifying the source of height information. </param>
            <param name="amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible. </param>
            <param name="destTextureRef">Pointer to an <see cref="T:SharpDX.Direct3D11.Texture2D"/> interface, representing the destination texture. </param>
            <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following value: D3DERR_INVALIDCALL. </returns>
            <unmanaged>HRESULT D3DX11ComputeNormalMap([None] ID3D11DeviceContext* pContext,[None] ID3D11Texture2D* pSrcTexture,[None] D3DX11_NORMALMAP_FLAG Flags,[None] D3DX11_CHANNEL_FLAG Channel,[None] float Amplitude,[None] ID3D11Texture2D* pDestTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11.SHProjectCubeMap(SharpDX.Direct3D11.DeviceContext,System.Int32,SharpDX.Direct3D11.Texture2D,System.Single[],System.Single[],System.Single[])">
            <summary>	
            Projects a function represented in a cube map into spherical harmonics.	
            </summary>	
            <param name="contextRef">A reference to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> object. </param>
            <param name="order">Order of the SH evaluation, generates Order^2 coefficients whose degree is Order-1. Valid range is between 2 and 6. </param>
            <param name="cubeMapRef">A reference to an <see cref="T:SharpDX.Direct3D11.Texture2D"/> that represents a cubemap that is going to be projected into spherical harmonics. </param>
            <param name="rOutRef">Output SH vector for red. </param>
            <param name="gOutRef">Output SH vector for green. </param>
            <param name="bOutRef">Output SH vector for blue. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11SHProjectCubeMap([None] ID3D11DeviceContext* pContext,[In] int Order,[None] ID3D11Texture2D* pCubeMap,[Out, Buffer] float* pROut,[Out, Buffer, Optional] float* pGOut,[Out, Buffer, Optional] float* pBOut)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.D3DCSX">
            <summary>
            D3DCSX Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateScan(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,SharpDX.Direct3D11.Scan@)">
            <summary>	
            Creates a scan context.	
            </summary>	
            <param name="deviceContextRef">The <see cref="T:SharpDX.Direct3D11.DeviceContext"/> the scan is associated with. </param>
            <param name="maxElementScanSize">Maximum single scan size, in elements (FLOAT, UINT, or INT) </param>
            <param name="maxScanCount">Maximum number of scans in multiscan. </param>
            <param name="scanRef">Pointer to a <see cref="T:SharpDX.Direct3D11.Scan"/> reference that will be set to the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateScan([In] ID3D11DeviceContext* pDeviceContext,[None] int MaxElementScanSize,[None] int MaxScanCount,[Out] ID3DX11Scan** ppScan)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateSegmentedScan(SharpDX.Direct3D11.DeviceContext,System.Int32,SharpDX.Direct3D11.SegmentedScan@)">
            <summary>	
            Creates a segmented scan context.	
            </summary>	
            <param name="deviceContextRef">Pointer to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface. </param>
            <param name="maxElementScanSize">Maximum single scan size, in elements (FLOAT, UINT, or INT). </param>
            <param name="scanRef">Pointer to a <see cref="T:SharpDX.Direct3D11.SegmentedScan"/> reference that will be set to the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateSegmentedScan([In] ID3D11DeviceContext* pDeviceContext,[None] int MaxElementScanSize,[Out] ID3DX11SegmentedScan** ppScan)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.FastFourierTransformDescription@,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="descRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformDescription"/> structure that describes the shape of the FFT data as well as the scaling factors that should be used for forward and inverse transforms. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT([None] ID3D11DeviceContext* pDeviceContext,[In] const D3DX11_FFT_DESC* pDesc,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT1DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT1DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT1DComplex([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT2DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="y">Length of the second dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT2DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Y,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT2DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="y">Length of the second dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT2DComplex([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Y,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT3DReal(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="y">Length of the second dimension of the FFT. </param>
            <param name="z">Length of the third dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT3DReal([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Y,[None] int Z,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DCSX.CreateFFT3DComplex(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)">
            <summary>	
            Creates an ID3DX11FFT COM interface object.	
            </summary>	
            <param name="deviceContextRef">Pointer to the <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface to use for the FFT. </param>
            <param name="x">Length of the first dimension of the FFT. </param>
            <param name="y">Length of the second dimension of the FFT. </param>
            <param name="z">Length of the third dimension of the FFT. </param>
            <param name="flags">Flag affecting the behavior of the FFT, can be 0 or a combination of flags from <see cref="T:SharpDX.Direct3D11.FastFourierTransformCreationFlags"/>. </param>
            <param name="bufferInfoRef">Pointer to a <see cref="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements"/> struct that will be filled out with buffer requirements for the FFT. </param>
            <param name="fFTRef">Pointer to an <see cref="T:SharpDX.Direct3D11.FastFourierTransform"/> interface reference that will be set the created interface object. </param>
            <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DX11CreateFFT3DComplex([None] ID3D11DeviceContext* pDeviceContext,[None] int X,[None] int Y,[None] int Z,[None] int Flags,[Out] D3DX11_FFT_BUFFER_INFO* pBufferInfo,[Out] ID3DX11FFT** ppFFT)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RasterizerState">
            <summary>	
            A rasterizer-state interface accesses rasterizer state for the rasterizer stage.	
            </summary>	
            <unmanaged>ID3D11RasterizerState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.RasterizerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.RasterizerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.RasterizerState.GetDescription(SharpDX.Direct3D11.RasterizerStateDescription@)">
            <summary>	
            Get the properties of a rasterizer-state object.	
            </summary>	
            <param name="descRef">Pointer to a rasterizer-state description (see <see cref="T:SharpDX.Direct3D11.RasterizerStateDescription"/>). </param>
            <unmanaged>void ID3D11RasterizerState::GetDesc([Out] D3D11_RASTERIZER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.RasterizerState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.RasterizerStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.RasterizerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.RasterizerState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.RasterizerStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.RasterizerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerState.Description">
            <summary>	
            Get the properties of a rasterizer-state object.	
            </summary>	
            <unmanaged>void ID3D11RasterizerState::GetDesc([Out] D3D11_RASTERIZER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture1D">
            <summary>	
            A 1D texture interface accesses texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D11Texture1D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture1D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Texture1D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Texture1D.GetDescription(SharpDX.Direct3D11.Texture1DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D11.Texture1DDescription"/>). </param>
            <unmanaged>void ID3D11Texture1D::GetDesc([Out] D3D11_TEXTURE1D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture1D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture1D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription,SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture1D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture1DDescription,SharpDX.DataStream[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture1D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="P:SharpDX.Direct3D11.Texture1D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D11Texture1D::GetDesc([Out] D3D11_TEXTURE1D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture2D">
            <summary>	
            A 2D texture interface manages texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D11Texture2D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Texture2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.GetDescription(SharpDX.Direct3D11.Texture2DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D11.Texture2DDescription"/>). </param>
            <unmanaged>void ID3D11Texture2D::GetDesc([Out] D3D11_TEXTURE2D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription,SharpDX.DataRectangle)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2DDescription,SharpDX.DataRectangle[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture2D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture2D.ComputeNormalMap(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.NormalMapFlags,SharpDX.Direct3D11.Channel,System.Single)">
            <summary>
              Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.
            </summary>
            <param name = "context">The device used to create the normal map.</param>
            <param name = "source">The source height map texture.</param>
            <param name = "destination">The destination texture.</param>
            <param name = "flags">One or more flags that control generation of normal maps.</param>
            <param name = "channel">One or more flag specifying the source of height information.</param>
            <param name = "amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
        </member>
        <member name="P:SharpDX.Direct3D11.Texture2D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D11Texture2D::GetDesc([Out] D3D11_TEXTURE2D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture3D">
            <summary>	
            A 3D texture interface accesses texel data, which is structured memory.	
            </summary>	
            <unmanaged>ID3D11Texture3D</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Texture3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Texture3D.GetDescription(SharpDX.Direct3D11.Texture3DDescription@)">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D11.Texture3DDescription"/>). </param>
            <unmanaged>void ID3D11Texture3D::GetDesc([Out] D3D11_TEXTURE3D_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture3D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture3D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription,SharpDX.DataBox)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">The initial texture data.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Texture3D.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture3DDescription,SharpDX.DataBox[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Texture3D" /> class.
            </summary>
            <param name = "device">The device with which to associate the texture.</param>
            <param name = "description">The description of the texture.</param>
            <param name = "data">An array of initial texture data for each subresource.</param>
        </member>
        <member name="P:SharpDX.Direct3D11.Texture3D.Description">
            <summary>	
            Get the properties of the texture resource.	
            </summary>	
            <unmanaged>void ID3D11Texture3D::GetDesc([Out] D3D11_TEXTURE3D_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceView">
            <summary>	
            A shader-resource-view interface specifies the subresources a shader can access during rendering. Examples of shader resources include a constant buffer, a texture buffer, a texture or a sampler.	
            </summary>	
            <unmanaged>ID3D11ShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.GetDescription(SharpDX.Direct3D11.ShaderResourceViewDescription@)">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <param name="descRef">A reference to a <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/> structure to be filled with data about the shader resource view. </param>
            <unmanaged>void ID3D11ShaderResourceView::GetDesc([Out] D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">ShaderResource</see> flag.</param>
            <unmanaged>ID3D11Device::CreateShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.ShaderResourceViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.ShaderResourceView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.ShaderResourceView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">ShaderResource</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D11.ShaderResourceView" /> to be created.</param>
            <unmanaged>ID3D11Device::CreateShaderResourceView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromFile(SharpDX.Direct3D11.Device,System.String)">
            <summary>	
            Create a shader-resource view from a file. Read the characteristics of a texture when the texture is loaded.
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="fileName">Name of the file that contains the shader-resource view.</param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromFile(SharpDX.Direct3D11.Device,System.String,SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="fileName">Name of the file that contains the shader-resource view.</param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar_t* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromMemory(SharpDX.Direct3D11.Device,System.Byte[])">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="memory">Pointer to a memory location that contains the shader-resource view. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromMemory(SharpDX.Direct3D11.Device,System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file in memory.	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="memory">Pointer to a memory location that contains the shader-resource view. </param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromStream(SharpDX.Direct3D11.Device,System.IO.Stream,System.Int32)">
            <summary>	
            Create a shader-resource view from a file in a stream..	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="stream">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="sizeInBytes">Size of the file to read from the stream</param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ShaderResourceView.FromStream(SharpDX.Direct3D11.Device,System.IO.Stream,System.Int32,SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>	
            Create a shader-resource view from a file in a stream..	
            </summary>	
            <param name="device">A reference to the device (see <see cref="T:SharpDX.Direct3D11.Device"/>) that will use the resource. </param>
            <param name="stream">Pointer to the file in memory that contains the shader-resource view. </param>
            <param name="sizeInBytes">Size of the file to read from the stream</param>
            <param name="loadInformation">Identifies the characteristics of a texture (see <see cref="T:SharpDX.Direct3D11.ImageLoadInformation"/>) when the data processor is created. </param>
            <returns>Returns a reference to the shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>). </returns>
            <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] const void* pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] ID3DX11ThreadPump* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ShaderResourceView.Description">
            <summary>	
            Get the shader resource view's description.	
            </summary>	
            <unmanaged>void ID3D11ShaderResourceView::GetDesc([Out] D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetView">
            <summary>	
            A render-target-view interface identifies the render-target subresources that can be accessed during rendering.	
            </summary>	
            <unmanaged>ID3D11RenderTargetView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.RenderTargetView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.RenderTargetView.GetDescription(SharpDX.Direct3D11.RenderTargetViewDescription@)">
            <summary>	
            Get the properties of a render target view.	
            </summary>	
            <param name="descRef">Pointer to the description of a render target view (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). </param>
            <unmanaged>void ID3D11RenderTargetView::GetDesc([Out] D3D11_RENDER_TARGET_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.RenderTargetView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">RenderTarget</see> flag.</param>
            <unmanaged>ID3D11Device::CreateRenderTargetView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.RenderTargetView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.RenderTargetViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.RenderTargetView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.RenderTargetView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">RenderTarget</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D11.RenderTargetView" /> to be created.</param>
            <unmanaged>ID3D11Device::CreateRenderTargetView</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RenderTargetView.Description">
            <summary>	
            Get the properties of a render target view.	
            </summary>	
            <unmanaged>void ID3D11RenderTargetView::GetDesc([Out] D3D11_RENDER_TARGET_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessView">
            <summary>	
            A view interface specifies the parts of a resource the pipeline can access during rendering.	
            </summary>	
            <unmanaged>ID3D11UnorderedAccessView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.UnorderedAccessView.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.UnorderedAccessView.GetDescription(SharpDX.Direct3D11.UnorderedAccessViewDescription@)">
            <summary>	
            Get a description of the resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <param name="descRef">Pointer to a resource description (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>.) </param>
            <unmanaged>void ID3D11UnorderedAccessView::GetDesc([Out] D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.UnorderedAccessView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.UnorderedAccessView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.UnorderedAccessView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">UnorderedAccess</see> flag.</param>
            <unmanaged>ID3D11Device::CreateUnorderedAccessView</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.UnorderedAccessView.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.UnorderedAccessViewDescription)">
            <summary>
              Creates a <see cref = "T:SharpDX.Direct3D11.UnorderedAccessView" /> for accessing resource data.
            </summary>
            <param name = "device">The device to use when creating this <see cref = "T:SharpDX.Direct3D11.UnorderedAccessView" />.</param>
            <param name = "resource">The resource that represents the render-target surface. This surface must have been created with the <see cref = "T:SharpDX.Direct3D11.BindFlags">UnorderedAccess</see> flag.</param>
            <param name = "description">A structure describing the <see cref = "T:SharpDX.Direct3D11.UnorderedAccessView" /> to be created.</param>
            <unmanaged>ID3D11Device::CreateUnorderedAccessView</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.UnorderedAccessView.Description">
            <summary>	
            Get a description of the resource.	
            </summary>	
            <remarks>	
            </remarks>	
            <unmanaged>void ID3D11UnorderedAccessView::GetDesc([Out] D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.VertexShader">
            <summary>	
            A vertex-shader interface manages an executable program (a vertex shader) that controls the vertex-shader stage.	
            </summary>	
            <unmanaged>ID3D11VertexShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.VertexShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.VertexShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.VertexShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.VertexShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.VertexShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.VertexShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.HullShader">
            <summary>	
            A hull-shader interface manages an executable program (a hull shader) that controls the hull-shader stage.	
            </summary>	
            <unmanaged>ID3D11HullShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.HullShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.HullShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.HullShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.HullShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.HullShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.HullShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.GeometryShader">
            <summary>	
            A geometry-shader interface manages an executable program (a geometry shader) that controls the geometry-shader stage.	
            </summary>	
            <unmanaged>ID3D11GeometryShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.GeometryShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.GeometryShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.GeometryShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.GeometryShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.GeometryShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.StreamOutputElement[],System.Int32[],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "elements">An array of <see cref = "T:SharpDX.Direct3D11.StreamOutputElement" /> instances describing the layout of the output buffers.</param>
            <param name = "bufferedStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
            <param name = "rasterizedStream">The index number of the stream to be sent to the rasterizer stage. Set to NoRasterizedStream if no stream is to be rasterized.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.GeometryShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.StreamOutputElement[],System.Int32[],System.Int32,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.GeometryShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "elements">An array of <see cref = "T:SharpDX.Direct3D11.StreamOutputElement" /> instances describing the layout of the output buffers.</param>
            <param name = "bufferedStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
            <param name = "rasterizedStream">The index number of the stream to be sent to the rasterizer stage. Set to NoRasterizedStream if no stream is to be rasterized.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.PixelShader">
            <summary>	
            A pixel-shader interface manages an executable program (a pixel shader) that controls the pixel-shader stage.	
            </summary>	
            <unmanaged>ID3D11PixelShader</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.PixelShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.PixelShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.PixelShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.PixelShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.PixelShader.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.ClassLinkage)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.PixelShader" /> class.
            </summary>
            <param name = "device">The device used to create the shader.</param>
            <param name = "shaderBytecode">The compiled shader bytecode.</param>
            <param name = "linkage">A dynamic class linkage interface.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.InputLayout">
            <summary>	
            An input-layout interface accesses the input data for the input-assembler stage.	
            </summary>	
            <unmanaged>ID3D11InputLayout</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InputLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.InputLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.InputLayout.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderBytecode,SharpDX.Direct3D11.InputElement[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.InputLayout" /> object to describe the
              input-buffer data for the input-assembler stage.
            </summary>
            <unmanaged>ID3D11Device::CreateInputLayout</unmanaged>
            <param name = "device">The device used to create the layout.</param>
            <param name = "elements">An array of input elements describing the layout of the input data.</param>
            <param name = "shaderBytecode">The compiled shader used to validate the input elements.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.InputLayout.#ctor(SharpDX.Direct3D11.Device,SharpDX.D3DCompiler.ShaderSignature,SharpDX.Direct3D11.InputElement[])">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.InputLayout" /> object to describe the
              input-buffer data for the input-assembler stage.
            </summary>
            <unmanaged>ID3D11Device::CreateInputLayout</unmanaged>
            <param name = "device">The device used to create the layout.</param>
            <param name = "elements">An array of input elements describing the layout of the input data.</param>
            <param name = "shaderSignature">The shader signature used to validate the input elements.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.SamplerState">
            <summary>	
            A sampler-state interface accesses sampler state for a texture.	
            </summary>	
            <unmanaged>ID3D11SamplerState</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SamplerState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.SamplerState"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.SamplerState.GetDescription(SharpDX.Direct3D11.SamplerStateDescription@)">
            <summary>	
            Get the sampler state.	
            </summary>	
            <param name="descRef">A reference to the sampler state (see <see cref="T:SharpDX.Direct3D11.SamplerStateDescription"/>). </param>
            <unmanaged>void ID3D11SamplerState::GetDesc([Out] D3D11_SAMPLER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SamplerState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.SamplerStateDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.SamplerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:SharpDX.Direct3D11.SamplerState.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.SamplerStateDescription@)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.SamplerState" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The state description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D11.SamplerState.Description">
            <summary>	
            Get the sampler state.	
            </summary>	
            <unmanaged>void ID3D11SamplerState::GetDesc([Out] D3D11_SAMPLER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Query">
            <summary>	
            A query interface queries information from the GPU.	
            </summary>	
            <unmanaged>ID3D11Query</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Query.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Query"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Query.GetDescription(SharpDX.Direct3D11.QueryDescription@)">
            <summary>	
            Get a query description.	
            </summary>	
            <param name="descRef">Pointer to a query description (see <see cref="T:SharpDX.Direct3D11.QueryDescription"/>). </param>
            <unmanaged>void ID3D11Query::GetDesc([Out] D3D11_QUERY_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Query.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.QueryDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.Query" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:SharpDX.Direct3D11.Query.Description">
            <summary>	
            Get a query description.	
            </summary>	
            <unmanaged>void ID3D11Query::GetDesc([Out] D3D11_QUERY_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Predicate">
            <summary>	
            A predicate interface determines whether geometry should be processed depending on the results of a previous draw call.	
            </summary>	
            <unmanaged>ID3D11Predicate</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Predicate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Predicate"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Predicate.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.QueryDescription)">
            <summary>
              Constructs a new <see cref = "T:SharpDX.Direct3D11.Predicate" /> based on the specified description.
            </summary>
            <param name = "device">The device with which to associate the state object.</param>
            <param name = "description">The query description.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="T:SharpDX.Direct3D11.CommandList">
            <summary>	
            The ID3D11CommandList interface encapsulates a list of graphics commands for play back.	
            </summary>	
            <unmanaged>ID3D11CommandList</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.CommandList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.CommandList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.CommandList.GetContextFlags">
            <summary>	
            Gets the initialization flags associated with the deferred context that created the command list.	
            </summary>	
            <remarks>	
            The GetContextFlags method gets the flags that were supplied to the ContextFlags parameter of <see cref="M:SharpDX.Direct3D11.Device.CreateDeferredContext(System.Int32,SharpDX.Direct3D11.DeviceContext@)"/>; however, the context flag is reserved for future use. 	
            </remarks>	
            <returns>The context flag is reserved for future use and is always 0. </returns>
            <unmanaged>int ID3D11CommandList::GetContextFlags()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.CommandList.ContextFlags">
            <summary>	
            Gets the initialization flags associated with the deferred context that created the command list.	
            </summary>	
            <remarks>	
            The GetContextFlags method gets the flags that were supplied to the ContextFlags parameter of <see cref="M:SharpDX.Direct3D11.Device.CreateDeferredContext(System.Int32,SharpDX.Direct3D11.DeviceContext@)"/>; however, the context flag is reserved for future use. 	
            </remarks>	
            <unmanaged>int ID3D11CommandList::GetContextFlags()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.SwitchToRef">
            <summary>	
            Note??The ID3D11SwitchToRef interface and its methods are not supported in Direct3D 11.	
            </summary>	
            <unmanaged>ID3D11SwitchToRef</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SwitchToRef.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.SwitchToRef"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.SwitchToRef.SetUseRef(System.Boolean)">
            <summary>	
            Note??The <see cref="T:SharpDX.Direct3D11.SwitchToRef"/> interface and its methods are not supported in Direct3D 11.	
            </summary>	
            <param name="useRef">Reserved. </param>
            <returns>Reserved. </returns>
            <unmanaged>BOOL ID3D11SwitchToRef::SetUseRef([None] BOOL UseRef)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SwitchToRef.GetUseRef">
            <summary>	
            Note??The <see cref="T:SharpDX.Direct3D11.SwitchToRef"/> interface and its methods are not supported in Direct3D 11.	
            </summary>	
            <returns>Reserved. </returns>
            <unmanaged>BOOL ID3D11SwitchToRef::GetUseRef()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.SwitchToRef.UseRef">
            <summary>	
            Note??The <see cref="T:SharpDX.Direct3D11.SwitchToRef"/> interface and its methods are not supported in Direct3D 11.	
            </summary>	
            <unmanaged>BOOL ID3D11SwitchToRef::GetUseRef()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.InfoQueue">
            <summary>	
            An information-queue interface stores, retrieves, and filters debug messages. The queue consists of a message queue, an optional storage filter stack, and a optional retrieval filter stack.	
            </summary>	
            <unmanaged>ID3D11InfoQueue</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.InfoQueue"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.SetMessageCountLimit(System.Int64)">
            <summary>	
            Set the maximum number of messages that can be added to the message queue.	
            </summary>	
            <remarks>	
            When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out. 	
            </remarks>	
            <param name="messageCountLimit">Maximum number of messages that can be added to the message queue. -1 means no limit. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::SetMessageCountLimit([In] __int64 MessageCountLimit)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.ClearStoredMessages">
            <summary>	
            Clear all messages from the message queue.	
            </summary>	
            <unmanaged>void ID3D11InfoQueue::ClearStoredMessages()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetMessage(System.Int64,SharpDX.Direct3D11.Message[],SharpDX.Size@)">
            <summary>	
            Get a message from the message queue.	
            </summary>	
            <remarks>	
            This method does not remove any messages from the message queue. This method gets messages from the message queue after an optional retrieval filter has been applied. Applications should call this method twice to retrieve a message - first to obtain the size of the message and second to get the message. Here is a typical example: 	
            <code> // Get the size of the message	
            SIZE_T messageLength = 0;	
            HRESULT hr = pInfoQueue-&gt;GetMessage(0, NULL, &amp;messageLength); // Allocate space and get the message	
            D3D11_MESSAGE * pMessage = (D3D11_MESSAGE*)malloc(messageLength);	
            hr = pInfoQueue-&gt;GetMessage(0, pMessage, &amp;messageLength); </code>	
            	
             For an overview see {{Information Queue Overview}}. 	
            </remarks>	
            <param name="messageIndex">Index into message queue after an optional retrieval filter has been applied. This can be between 0 and the number of messages in the message queue that pass through the retrieval filter (which can be obtained with <see cref="M:SharpDX.Direct3D11.InfoQueue.GetNumStoredMessagesAllowedByRetrievalFilter"/>). 0 is the message at the front of the message queue. </param>
            <param name="messageRef">Returned message (see <see cref="T:SharpDX.Direct3D11.Message"/>). </param>
            <param name="messageByteLengthRef">Size of pMessage in bytes, including the size of the message string that the pMessage points to. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::GetMessage([In] __int64 MessageIndex,[Out, Buffer, Optional] D3D11_MESSAGE* pMessage,[InOut] SIZE_T* pMessageByteLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetNumMessagesAllowedByStorageFilter">
            <summary>	
            Get the number of messages that were allowed to pass through a storage filter.	
            </summary>	
            <returns>Number of messages allowed by a storage filter. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesAllowedByStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetNumMessagesDeniedByStorageFilter">
            <summary>	
            Get the number of messages that were denied passage through a storage filter.	
            </summary>	
            <returns>Number of messages denied by a storage filter. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesDeniedByStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetNumStoredMessages">
            <summary>	
            Get the number of messages currently stored in the message queue.	
            </summary>	
            <returns>Number of messages currently stored in the message queue. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetNumStoredMessages()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetNumStoredMessagesAllowedByRetrievalFilter">
            <summary>	
            Get the number of messages that are able to pass through a retrieval filter.	
            </summary>	
            <returns>Number of messages allowed by a retrieval filter. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetNumStoredMessagesAllowedByRetrievalFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetNumMessagesDiscardedByMessageCountLimit">
            <summary>	
            Get the number of messages that were discarded due to the message count limit.	
            </summary>	
            <remarks>	
            Get and set the message count limit with <see cref="M:SharpDX.Direct3D11.InfoQueue.GetMessageCountLimit"/> and <see cref="M:SharpDX.Direct3D11.InfoQueue.SetMessageCountLimit(System.Int64)"/>, respectively. 	
            </remarks>	
            <returns>Number of messages discarded. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesDiscardedByMessageCountLimit()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetMessageCountLimit">
            <summary>	
            Get the maximum number of messages that can be added to the message queue.	
            </summary>	
            <remarks>	
            When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out. 	
            </remarks>	
            <returns>Maximum number of messages that can be added to the queue. -1 means no limit. </returns>
            <unmanaged>__int64 ID3D11InfoQueue::GetMessageCountLimit()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.AddStorageFilterEntries(SharpDX.Direct3D11.InfoQueueFilter@)">
            <summary>	
            Add storage filters to the top of the storage-filter stack.	
            </summary>	
            <param name="filterRef">Array of storage filters (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::AddStorageFilterEntries([In] D3D11_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetStorageFilter(SharpDX.Direct3D11.InfoQueueFilter[],SharpDX.Size@)">
            <summary>	
            Get the storage filter at the top of the storage-filter stack.	
            </summary>	
            <param name="filterRef">Storage filter at the top of the storage-filter stack. </param>
            <param name="filterByteLengthRef">Size of the storage filter in bytes. If pFilter is NULL, the size of the storage filter will be output to this parameter. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::GetStorageFilter([Out, Buffer, Optional] D3D11_INFO_QUEUE_FILTER* pFilter,[InOut] SIZE_T* pFilterByteLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.ClearStorageFilter">
            <summary>	
            Remove a storage filter from the top of the storage-filter stack.	
            </summary>	
            <unmanaged>void ID3D11InfoQueue::ClearStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushEmptyStorageFilter">
            <summary>	
            Push an empty storage filter onto the storage-filter stack.	
            </summary>	
            <remarks>	
            An empty storage filter allows all messages to pass through. 	
            </remarks>	
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushEmptyStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushCopyOfStorageFilter">
            <summary>	
            Push a copy of storage filter currently on the top of the storage-filter stack onto the storage-filter stack.	
            </summary>	
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushCopyOfStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushStorageFilter(SharpDX.Direct3D11.InfoQueueFilter@)">
            <summary>	
            Push a storage filter onto the storage-filter stack.	
            </summary>	
            <param name="filterRef">Pointer to a storage filter (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushStorageFilter([In] D3D11_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PopStorageFilter">
            <summary>	
            Pop a storage filter from the top of the storage-filter stack.	
            </summary>	
            <unmanaged>void ID3D11InfoQueue::PopStorageFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetStorageFilterStackSize">
            <summary>	
            Get the size of the storage-filter stack in bytes.	
            </summary>	
            <returns>Size of the storage-filter stack in bytes. </returns>
            <unmanaged>int ID3D11InfoQueue::GetStorageFilterStackSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.AddRetrievalFilterEntries(SharpDX.Direct3D11.InfoQueueFilter@)">
            <summary>	
            Add storage filters to the top of the retrieval-filter stack.	
            </summary>	
            <remarks>	
            The following code example shows how to use ID3D11InfoQueue::AddRetrievalFilterEntries: 	
            <code> D3D11_MESSAGE_CATEGORY cats[] = { ..., ..., ... };	
            D3D11_MESSAGE_SEVERITY sevs[] = { ..., ..., ... };	
            UINT ids[] = { ..., ..., ... }; D3D11_INFO_QUEUE_FILTER filter;	
            memset( &amp;filter, 0, sizeof(filter) ); // To set the type of messages to allow, 	
            // set filter.AllowList as follows:	
            filter.AllowList.NumCategories = sizeof(cats / sizeof(D3D11_MESSAGE_CATEGORY)); 	
            filter.AllowList.pCategoryList = cats;	
            filter.AllowList.NumSeverities = sizeof(sevs / sizeof(D3D11_MESSAGE_SEVERITY)); 	
            filter.AllowList.pSeverityList = sevs;	
            filter.AllowList.NumIDs = sizeof(ids) / sizeof(UINT);	
            filter.AllowList.pIDList = ids; // To set the type of messages to deny, set filter.DenyList 	
            // similarly to the preceding filter.AllowList. // The following single call sets all of the preceding information.	
            hr = infoQueue-&gt;AddRetrievalFilterEntries( &amp;filter ); </code>	
            	
             	
            </remarks>	
            <param name="filterRef">Array of retrieval filters (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::AddRetrievalFilterEntries([In] D3D11_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetRetrievalFilter(SharpDX.Direct3D11.InfoQueueFilter[],SharpDX.Size@)">
            <summary>	
            Get the retrieval filter at the top of the retrieval-filter stack.	
            </summary>	
            <param name="filterRef">Retrieval filter at the top of the retrieval-filter stack. </param>
            <param name="filterByteLengthRef">Size of the retrieval filter in bytes. If pFilter is NULL, the size of the retrieval filter will be output to this parameter. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::GetRetrievalFilter([Out, Buffer, Optional] D3D11_INFO_QUEUE_FILTER* pFilter,[InOut] SIZE_T* pFilterByteLength)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.ClearRetrievalFilter">
            <summary>	
            Remove a retrieval filter from the top of the retrieval-filter stack.	
            </summary>	
            <unmanaged>void ID3D11InfoQueue::ClearRetrievalFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushEmptyRetrievalFilter">
            <summary>	
            Push an empty retrieval filter onto the retrieval-filter stack.	
            </summary>	
            <remarks>	
            An empty retrieval filter allows all messages to pass through. 	
            </remarks>	
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushEmptyRetrievalFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushCopyOfRetrievalFilter">
            <summary>	
            Push a copy of retrieval filter currently on the top of the retrieval-filter stack onto the retrieval-filter stack.	
            </summary>	
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushCopyOfRetrievalFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PushRetrievalFilter(SharpDX.Direct3D11.InfoQueueFilter@)">
            <summary>	
            Push a retrieval filter onto the retrieval-filter stack.	
            </summary>	
            <param name="filterRef">Pointer to a retrieval filter (see <see cref="T:SharpDX.Direct3D11.InfoQueueFilter"/>). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::PushRetrievalFilter([In] D3D11_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.PopRetrievalFilter">
            <summary>	
            Pop a retrieval filter from the top of the retrieval-filter stack.	
            </summary>	
            <unmanaged>void ID3D11InfoQueue::PopRetrievalFilter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetRetrievalFilterStackSize">
            <summary>	
            Get the size of the retrieval-filter stack in bytes.	
            </summary>	
            <returns>Size of the retrieval-filter stack in bytes. </returns>
            <unmanaged>int ID3D11InfoQueue::GetRetrievalFilterStackSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.AddMessage(SharpDX.Direct3D11.MessageCategory,SharpDX.Direct3D11.MessageSeverity,SharpDX.Direct3D11.MessageId,System.String)">
            <summary>	
            Add a debug message to the message queue and send that message to debug output.	
            </summary>	
            <remarks>	
            This method is used by the runtime's internal mechanisms to add debug messages to the message queue and send them to debug output. For applications to add their own custom messages to the message queue and send them to debug output, call <see cref="M:SharpDX.Direct3D11.InfoQueue.AddApplicationMessage(SharpDX.Direct3D11.MessageSeverity,System.String)"/>. 	
            </remarks>	
            <param name="category">Category of a message (see <see cref="T:SharpDX.Direct3D11.MessageCategory"/>). </param>
            <param name="severity">Severity of a message (see <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>). </param>
            <param name="id">Unique identifier of a message (see <see cref="T:SharpDX.Direct3D11.MessageId"/>). </param>
            <param name="descriptionRef">User-defined message. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::AddMessage([In] D3D11_MESSAGE_CATEGORY Category,[In] D3D11_MESSAGE_SEVERITY Severity,[In] D3D11_MESSAGE_ID ID,[In] const char* pDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.AddApplicationMessage(SharpDX.Direct3D11.MessageSeverity,System.String)">
            <summary>	
            Add a user-defined message to the message queue and send that message to debug output.	
            </summary>	
            <param name="severity">Severity of a message (see <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>). </param>
            <param name="descriptionRef">Message string. </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::AddApplicationMessage([In] D3D11_MESSAGE_SEVERITY Severity,[In] const char* pDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.SetBreakOnCategory(SharpDX.Direct3D11.MessageCategory,System.Boolean)">
            <summary>	
            Set a message category to break on when a message with that category passes through the storage filter.	
            </summary>	
            <param name="category">Message category to break on (see <see cref="T:SharpDX.Direct3D11.MessageCategory"/>). </param>
            <param name="bEnable">Turns this breaking condition on or off (true for on, false for off). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::SetBreakOnCategory([In] D3D11_MESSAGE_CATEGORY Category,[In] BOOL bEnable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.SetBreakOnSeverity(SharpDX.Direct3D11.MessageSeverity,System.Boolean)">
            <summary>	
            Set a message severity level to break on when a message with that severity level passes through the storage filter.	
            </summary>	
            <param name="severity">A <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>, which represents a message severity level to break on. </param>
            <param name="bEnable">Turns this breaking condition on or off (true for on, false for off). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::SetBreakOnSeverity([In] D3D11_MESSAGE_SEVERITY Severity,[In] BOOL bEnable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.SetBreakOnID(SharpDX.Direct3D11.MessageId,System.Boolean)">
            <summary>	
            Set a message identifier to break on when a message with that identifier passes through the storage filter.	
            </summary>	
            <param name="id">Message identifier to break on (see <see cref="T:SharpDX.Direct3D11.MessageId"/>). </param>
            <param name="bEnable">Turns this breaking condition on or off (true for on, false for off). </param>
            <returns>This method returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11InfoQueue::SetBreakOnID([In] D3D11_MESSAGE_ID ID,[In] BOOL bEnable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetBreakOnCategory(SharpDX.Direct3D11.MessageCategory)">
            <summary>	
            Get a message category to break on when a message with that category passes through the storage filter.	
            </summary>	
            <param name="category">Message category to break on (see <see cref="T:SharpDX.Direct3D11.MessageCategory"/>). </param>
            <returns>Whether this breaking condition is turned on or off (true for on, false for off). </returns>
            <unmanaged>BOOL ID3D11InfoQueue::GetBreakOnCategory([In] D3D11_MESSAGE_CATEGORY Category)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetBreakOnSeverity(SharpDX.Direct3D11.MessageSeverity)">
            <summary>	
            Get a message severity level to break on when a message with that severity level passes through the storage filter.	
            </summary>	
            <param name="severity">Message severity level to break on (see <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>). </param>
            <returns>Whether this breaking condition is turned on or off (true for on, false for off). </returns>
            <unmanaged>BOOL ID3D11InfoQueue::GetBreakOnSeverity([In] D3D11_MESSAGE_SEVERITY Severity)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetBreakOnID(SharpDX.Direct3D11.MessageId)">
            <summary>	
            Get a message identifier to break on when a message with that identifier passes through the storage filter.	
            </summary>	
            <param name="id">Message identifier to break on (see <see cref="T:SharpDX.Direct3D11.MessageId"/>). </param>
            <returns>Whether this breaking condition is turned on or off (true for on, false for off). </returns>
            <unmanaged>BOOL ID3D11InfoQueue::GetBreakOnID([In] D3D11_MESSAGE_ID ID)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.SetMuteDebugOutput(System.Boolean)">
            <summary>	
            Set a boolean that turns the debug output on or off.	
            </summary>	
            <remarks>	
            This will stop messages that pass the storage filter from being printed out in the debug output, however those messages will still be added to the message queue. 	
            </remarks>	
            <param name="bMute">Disable/Enable the debug output (TRUE to disable or mute the output, FALSE to enable the output). </param>
            <unmanaged>void ID3D11InfoQueue::SetMuteDebugOutput([In] BOOL bMute)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InfoQueue.GetMuteDebugOutput">
            <summary>	
            Get a boolean that turns the debug output on or off.	
            </summary>	
            <returns>Whether the debug output is on or off (true for on, false for off). </returns>
            <unmanaged>BOOL ID3D11InfoQueue::GetMuteDebugOutput()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.MessageCountLimit">
            <summary>	
            Get the maximum number of messages that can be added to the message queue.	
            </summary>	
            <remarks>	
            When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out. 	
            </remarks>	
            <unmanaged>__int64 ID3D11InfoQueue::GetMessageCountLimit()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.NumMessagesAllowedByStorageFilter">
            <summary>	
            Get the number of messages that were allowed to pass through a storage filter.	
            </summary>	
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesAllowedByStorageFilter()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.NumMessagesDeniedByStorageFilter">
            <summary>	
            Get the number of messages that were denied passage through a storage filter.	
            </summary>	
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesDeniedByStorageFilter()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.NumStoredMessages">
            <summary>	
            Get the number of messages currently stored in the message queue.	
            </summary>	
            <unmanaged>__int64 ID3D11InfoQueue::GetNumStoredMessages()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.NumStoredMessagesAllowedByRetrievalFilter">
            <summary>	
            Get the number of messages that are able to pass through a retrieval filter.	
            </summary>	
            <unmanaged>__int64 ID3D11InfoQueue::GetNumStoredMessagesAllowedByRetrievalFilter()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.NumMessagesDiscardedByMessageCountLimit">
            <summary>	
            Get the number of messages that were discarded due to the message count limit.	
            </summary>	
            <remarks>	
            Get and set the message count limit with <see cref="M:SharpDX.Direct3D11.InfoQueue.GetMessageCountLimit"/> and <see cref="M:SharpDX.Direct3D11.InfoQueue.SetMessageCountLimit(System.Int64)"/>, respectively. 	
            </remarks>	
            <unmanaged>__int64 ID3D11InfoQueue::GetNumMessagesDiscardedByMessageCountLimit()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.StorageFilterStackSize">
            <summary>	
            Get the size of the storage-filter stack in bytes.	
            </summary>	
            <unmanaged>int ID3D11InfoQueue::GetStorageFilterStackSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.RetrievalFilterStackSize">
            <summary>	
            Get the size of the retrieval-filter stack in bytes.	
            </summary>	
            <unmanaged>int ID3D11InfoQueue::GetRetrievalFilterStackSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.InfoQueue.MuteDebugOutput">
            <summary>	
            Get a boolean that turns the debug output on or off.	
            </summary>	
            <unmanaged>BOOL ID3D11InfoQueue::GetMuteDebugOutput()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Scan">
            <summary>	
            Scan context.	
            </summary>	
            <unmanaged>ID3DX11Scan</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Scan.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Scan"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.Scan.SetScanDirection(SharpDX.Direct3D11.ScanDirection)">
            <summary>	
            Sets which direction to perform scans in.	
            </summary>	
            <remarks>	
            SetScanDirection sets the direction <see cref="M:SharpDX.Direct3D11.Scan.PerformScan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)"/> and <see cref="M:SharpDX.Direct3D11.Scan.PerformMultiscan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)"/> will performed scans in. 	
            </remarks>	
            <param name="direction">Direction to perform scans in.  See <see cref="T:SharpDX.Direct3D11.ScanDirection"/>. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11Scan::SetScanDirection([None] D3DX11_SCAN_DIRECTION Direction)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Scan.PerformScan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Performs an unsegmented scan of a sequence.	
            </summary>	
            <remarks>	
            You must point the parameters pSrc and pDst to typed buffers (and not to raw or structured buffers). For information about buffer types, see {{Types of Resources}}. The format of these typed buffers must be <see cref="F:SharpDX.DXGI.Format.R32_Float"/>, DXGI_FORMAT_R32_UINT, or DXGI_FORMAT_R32_INT. In addition, the format of these typed buffers must match the scan data type that you specify in the ElementType parameter. For example, if the scan data type is <see cref="F:SharpDX.Direct3D11.ScanDataType.UInt"/>, the buffer formats must be DXGI_FORMAT_R32_UINT. 	
            </remarks>	
            <param name="elementType">The type of element in the sequence.  See <see cref="T:SharpDX.Direct3D11.ScanDataType"/> for more information. </param>
            <param name="opCode">The binary operation to perform.  See <see cref="T:SharpDX.Direct3D11.ScanOpcode"/> for more information. </param>
            <param name="elementScanSize">Size of scan in elements. </param>
            <param name="srcRef">Input sequence on the device.  Set pSrc and pDst to the same value for in-place scans.  </param>
            <param name="dstRef">Output sequence on the device. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11Scan::Scan([None] D3DX11_SCAN_DATA_TYPE ElementType,[None] D3DX11_SCAN_OPCODE OpCode,[None] int ElementScanSize,[In] ID3D11UnorderedAccessView* pSrc,[In] ID3D11UnorderedAccessView* pDst)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Scan.PerformMultiscan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Performs a multiscan of a sequence.	
            </summary>	
            <remarks>	
            You must point the parameters pSrc and pDst to typed buffers (and not to raw or structured buffers). For information about buffer types, see {{Types of Resources}}. The format of these typed buffers must be <see cref="F:SharpDX.DXGI.Format.R32_Float"/>, DXGI_FORMAT_R32_UINT, or DXGI_FORMAT_R32_INT. In addition, the format of these typed buffers must match the scan data type that you specify in the ElementType parameter. For example, if the scan data type is <see cref="F:SharpDX.Direct3D11.ScanDataType.UInt"/>, the buffer formats must be DXGI_FORMAT_R32_UINT. 	
            </remarks>	
            <param name="elementType">The type of element in the sequence.  See <see cref="T:SharpDX.Direct3D11.ScanDataType"/> for more information. </param>
            <param name="opCode">The binary operation to perform.  See <see cref="T:SharpDX.Direct3D11.ScanOpcode"/> for more information. </param>
            <param name="elementScanSize">Size of scan in elements. </param>
            <param name="elementScanPitch">Pitch of the next scan in elements. </param>
            <param name="scanCount">Number of scans in the multiscan. </param>
            <param name="srcRef">Input sequence on the device.  Set pSrc and pDst to the same value for in-place scans.  </param>
            <param name="dstRef">Output sequence on the device. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11Scan::Multiscan([None] D3DX11_SCAN_DATA_TYPE ElementType,[None] D3DX11_SCAN_OPCODE OpCode,[None] int ElementScanSize,[None] int ElementScanPitch,[None] int ScanCount,[In] ID3D11UnorderedAccessView* pSrc,[In] ID3D11UnorderedAccessView* pDst)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Scan.#ctor(SharpDX.Direct3D11.DeviceContext,System.Int32,System.Int32)">
            <summary>	
            Creates a scan context.	
            </summary>	
            <param name="deviceContext">The <see cref="T:SharpDX.Direct3D11.DeviceContext"/> the scan is associated with. </param>
            <param name="maxElementScanSize">Maximum single scan size, in elements (FLOAT, UINT, or INT) </param>
            <param name="maxScanCount">Maximum number of scans in multiscan. </param>
            <unmanaged>HRESULT D3DX11CreateScan([In] ID3D11DeviceContext* pDeviceContext,[None] int MaxElementScanSize,[None] int MaxScanCount,[Out] ID3DX11Scan** ppScan)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.SegmentedScan">
            <summary>	
            Segmented scan context.	
            </summary>	
            <unmanaged>ID3DX11SegmentedScan</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SegmentedScan.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.SegmentedScan"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D11.SegmentedScan.SetScanDirection(SharpDX.Direct3D11.ScanDirection)">
            <summary>	
            Sets which direction to perform scans in.	
            </summary>	
            <remarks>	
            SetScanDirection sets the direction <see cref="M:SharpDX.Direct3D11.SegmentedScan.PerformSegmentedScan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)"/> will performed scans in. 	
            </remarks>	
            <param name="direction">Direction to perform scans in.  See <see cref="T:SharpDX.Direct3D11.ScanDirection"/>. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11SegmentedScan::SetScanDirection([None] D3DX11_SCAN_DIRECTION Direction)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SegmentedScan.PerformSegmentedScan(SharpDX.Direct3D11.ScanDataType,SharpDX.Direct3D11.ScanOpcode,System.Int32,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView,SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>	
            Performs a segmented scan of a sequence.	
            </summary>	
            <remarks>	
            You must point the parameters pSrc and pDst to typed buffers (and not to raw or structured buffers). For information about buffer types, see {{Types of Resources}}. The format of these typed buffers must be <see cref="F:SharpDX.DXGI.Format.R32_Float"/>, DXGI_FORMAT_R32_UINT, or DXGI_FORMAT_R32_INT. In addition, the format of these typed buffers must match the scan data type that you specify in the ElementType parameter. For example, if the scan data type is <see cref="F:SharpDX.Direct3D11.ScanDataType.UInt"/>, the buffer formats must be DXGI_FORMAT_R32_UINT. The format of the resource view to which the pSrcElementFlags parameter points must be <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. 	
            </remarks>	
            <param name="elementType">The type of element in the sequence.  See <see cref="T:SharpDX.Direct3D11.ScanDataType"/> for more information. </param>
            <param name="opCode">The binary operation to perform.  See <see cref="T:SharpDX.Direct3D11.ScanOpcode"/> for more information. </param>
            <param name="elementScanSize">Size of scan in elements. </param>
            <param name="srcRef">Input sequence on the device.  Set pSrc and pDst to the same value for in-place scans.  </param>
            <param name="srcElementFlagsRef">Compact array of bits with one bit per element of pSrc.  A set value indicates the start of a new segment. </param>
            <param name="dstRef">Output sequence on the device. </param>
            <returns>Returns one of the return codes described in the topic {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3DX11SegmentedScan::SegScan([None] D3DX11_SCAN_DATA_TYPE ElementType,[None] D3DX11_SCAN_OPCODE OpCode,[None] int ElementScanSize,[In, Optional] ID3D11UnorderedAccessView* pSrc,[In] ID3D11UnorderedAccessView* pSrcElementFlags,[In] ID3D11UnorderedAccessView* pDst)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.SegmentedScan.#ctor(SharpDX.Direct3D11.DeviceContext,System.Int32)">
            <summary>	
            Creates a segmented scan context.	
            </summary>	
            <param name="deviceContext">Pointer to an <see cref="T:SharpDX.Direct3D11.DeviceContext"/> interface. </param>
            <param name="maxElementScanSize">Maximum single scan size, in elements (FLOAT, UINT, or INT). </param>
            <unmanaged>HRESULT D3DX11CreateSegmentedScan([In] ID3D11DeviceContext* pDeviceContext,[None] int MaxElementScanSize,[Out] ID3DX11SegmentedScan** ppScan)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.InputElement">
            <summary>	
            A description of a single element for the input-assembler stage.	
            </summary>	
            <remarks>	
            An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout  object by calling <see cref="M:SharpDX.Direct3D11.Device.CreateInputLayout(SharpDX.Direct3D11.InputElement[],System.Int32,System.IntPtr,SharpDX.Size,SharpDX.Direct3D11.InputLayout@)"/>. For an example, see Create an input-layout object. 	
            </remarks>	
            <unmanaged>D3D11_INPUT_ELEMENT_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.SemanticName">
            <summary>	
            The HLSL semantic associated with this element in a shader input-signature. 	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.SemanticIndex">
            <summary>	
            The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a  case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic  name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3). 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.Format">
            <summary>	
            The data type of the element data. See <see cref="T:SharpDX.DXGI.Format"/>. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.Slot">
            <summary>	
            An integer value that identifies the input-assembler (see input slot). Valid values are between 0 and 15, defined in D3D11.h. 	
            </summary>	
            <unmanaged>int InputSlot</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.AlignedByteOffset">
            <summary>	
            Optional. Offset (in bytes) between each element. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly  after the previous one, including any packing if necessary. 	
            </summary>	
            <unmanaged>int AlignedByteOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.Classification">
            <summary>	
            Identifies the input data class for a single input slot (see <see cref="T:SharpDX.Direct3D11.InputClassification"/>). 	
            </summary>	
            <unmanaged>D3D11_INPUT_CLASSIFICATION InputSlotClass</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InputElement.InstanceDataStepRate">
            <summary>	
            The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an  element that contains per-vertex data (the slot class is set to D3D11_INPUT_PER_VERTEX_DATA). 	
            </summary>	
            <unmanaged>int InstanceDataStepRate</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32,SharpDX.Direct3D11.InputClassification,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
            <param name = "slotClass">Identifies the input data class for a single input slot.</param>
            <param name = "stepRate">The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "offset">Offset (in bytes) between each element. Use AppendAligned for convenience to define the current element directly after the previous one, including any packing if necessary.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.InputElement.#ctor(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.InputElement" /> struct.
            </summary>
            <param name = "name">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name = "index">The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).</param>
            <param name = "format">The data type of the element data.</param>
            <param name = "slot">An integer value that identifies the input-assembler. Valid values are between 0 and 15.</param>
        </member>
        <member name="P:SharpDX.Direct3D11.InputElement.AppendAligned">
            <summary>
              Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
              should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
            <returns>A value used to align input elements.</returns>
            <unmanaged>D3D11_APPEND_ALIGNED_ELEMENT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.StreamOutputElement">
            <summary>	
            Description of a vertex element in a vertex buffer in an output slot.	
            </summary>	
            <unmanaged>D3D11_SO_DECLARATION_ENTRY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.Stream">
            <summary>	
            Zero-based, stream number. 	
            </summary>	
            <unmanaged>int Stream</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.SemanticName">
            <summary>	
            Type of output element; possible values include: "POSITION", "NORMAL", or "TEXCOORD0". Note that if SemanticName is NULL then  ComponentCount can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.  	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.SemanticIndex">
            <summary>	
            Output element's zero-based index. Should be used if, for example, you have more than one texture coordinate stored in each vertex. 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.StartComponent">
            <summary>	
            Which component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2. 	
            </summary>	
            <unmanaged>byte StartComponent</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.ComponentCount">
            <summary>	
            The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2.  Note that if SemanticName is NULL then  ComponentCount can be greater than 4 and the described entry will be a gap in the stream out where no data will be written. 	
            </summary>	
            <unmanaged>byte ComponentCount</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputElement.OutputSlot">
            <summary>	
            The associated stream output buffer that is bound to the pipeline  (see <see cref="M:SharpDX.Direct3D11.DeviceContext.StreamOutputStage.SetTargets(SharpDX.Direct3D11.StreamOutputBufferBinding[])"/>).  The valid range for OutputSlot is 0 to 3. 	
            </summary>	
            <unmanaged>byte OutputSlot</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Viewport">
            <summary>	
            Defines the dimensions of a viewport.	
            </summary>	
            <remarks>	
            In all cases, Width and Height must be &gt;= 0 and TopLeftX + Width and TopLeftY + Height must be &lt;= D3D11_VIEWPORT_BOUNDS_MAX.   Viewport Sizes and Feature Level Support Differences between Direct3D 11 and Direct3D 10: The range for the minimum and maximum viewport size is dependent on the feature level defined by <see cref="T:SharpDX.Direct3D.FeatureLevel"/>.  Direct3D 11 supports fractional viewports; the parameter types are  floating-point numbers. The feature level, D3D_FEATURE_LEVEL_11_0, supports (D3D11_VIEWPORT_BOUNDS_MIN, D3D11_VIEWPORT_BOUNDS_MAX) values between (-32768, 32,767). Direct3D 10 does not support fractional viewports. The feature levels, D3D_FEATURE_LEVEL_10_1 (or below), supports (D3D10_VIEWPORT_BOUNDS_MIN, D3D10_VIEWPORT_BOUNDS_MAX) values between (-16384, 16383).    ? 	
            </remarks>	
            <unmanaged>D3D11_VIEWPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.TopLeftX">
            <summary>	
            X position of the left hand side of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX. 	
            </summary>	
            <unmanaged>float TopLeftX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.TopLeftY">
            <summary>	
            Y position of the top of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX. 	
            </summary>	
            <unmanaged>float TopLeftY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.Width">
            <summary>	
            Width of the viewport. 	
            </summary>	
            <unmanaged>float Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.Height">
            <summary>	
            Height of the viewport. 	
            </summary>	
            <unmanaged>float Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.MinDepth">
            <summary>	
            Minimum depth of the viewport. Ranges between 0 and 1. 	
            </summary>	
            <unmanaged>float MinDepth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Viewport.MaxDepth">
            <summary>	
            Maximum depth of the viewport. Ranges between 0 and 1. 	
            </summary>	
            <unmanaged>float MaxDepth</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Viewport" /> structure.
            </summary>
            <param name = "x">The X coordinate of the viewport.</param>
            <param name = "y">The Y coordinate of the viewport.</param>
            <param name = "width">The width of the viewport.</param>
            <param name = "height">The height of the viewport.</param>
            <param name = "minZ">The minimum Z distance of the viewport.</param>
            <param name = "maxZ">The maximum Z distance of the viewport.</param>
        </member>
        <member name="M:SharpDX.Direct3D11.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.Viewport" /> structure.
            </summary>
            <param name = "x">The X coordinate of the viewport.</param>
            <param name = "y">The Y coordinate of the viewport.</param>
            <param name = "width">The width of the viewport.</param>
            <param name = "height">The height of the viewport.</param>
        </member>
        <member name="T:SharpDX.Direct3D11.ResourceRegion">
            <summary>	
            Defines a 3D box.	
            </summary>	
            <remarks>	
            The following diagram shows a 3D box, where the origin is the left, front, top corner.  ?  Diagram of a 3D box, where the origin is the left, front, top corner ? 	
            </remarks>	
            <unmanaged>D3D11_BOX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Left">
            <summary>	
            The x position of the left hand side of the box. 	
            </summary>	
            <unmanaged>int left</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Top">
            <summary>	
            The y position of the top of the box. 	
            </summary>	
            <unmanaged>int top</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Front">
            <summary>	
            The z position of the front of the box. 	
            </summary>	
            <unmanaged>int front</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Right">
            <summary>	
            The x position of the right hand side of the box. 	
            </summary>	
            <unmanaged>int right</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Bottom">
            <summary>	
            The y position of the bottom of the box. 	
            </summary>	
            <unmanaged>int bottom</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ResourceRegion.Back">
            <summary>	
            The z position of the back of the box. 	
            </summary>	
            <unmanaged>int back</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilOperationDescription">
            <summary>	
            Stencil operations that can be performed based on the results of stencil test.	
            </summary>	
            <remarks>	
            All stencil operations are specified as a <see cref="T:SharpDX.Direct3D11.StencilOperation"/>. The stencil operation can be set differently based on the outcome of the stencil test (which is referred to as StencilFunc in the stencil test portion of depth-stencil testing. This structure is a member of a {{depth-stencil description}}.  	
            </remarks>	
            <unmanaged>D3D11_DEPTH_STENCILOP_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilOperationDescription.FailOperation">
            <summary>	
            The stencil operation to perform when stencil testing fails. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP StencilFailOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilOperationDescription.DepthFailOperation">
            <summary>	
            The stencil operation to perform when stencil testing passes and depth testing fails. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP StencilDepthFailOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilOperationDescription.PassOperation">
            <summary>	
            The stencil operation to perform when stencil testing and depth testing both pass. 	
            </summary>	
            <unmanaged>D3D11_STENCIL_OP StencilPassOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilOperationDescription.Comparison">
            <summary>	
            A function that compares stencil data against existing stencil data. The function options are listed in <see cref="T:SharpDX.Direct3D11.Comparison"/>. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_FUNC StencilFunc</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilStateDescription">
            <summary>	
            Describes depth-stencil state.	
            </summary>	
            <remarks>	
            Depth-stencil state controls how depth-stencil testing is performed by the output-merger stage. The following table shows the default values of depth-stencil states.  StateDefault Value DepthEnableTRUE DepthWriteMaskD3D11_DEPTH_WRITE_MASK_ALL DepthFuncD3D11_COMPARISON_LESS StencilEnableFALSE StencilReadMaskD3D11_DEFAULT_STENCIL_READ_MASK StencilWriteMaskD3D11_DEFAULT_STENCIL_WRITE_MASK StencilFuncD3D11_COMPARISON_ALWAYS StencilDepthFailOpD3D11_STENCIL_OP_KEEP StencilPassOpD3D11_STENCIL_OP_KEEP StencilFailOpD3D11_STENCIL_OP_KEEP  ? The formats that support stenciling are DXGI_FORMAT_D24_UNORM_S8_UINT and DXGI_FORMAT_D32_FLOAT_S8X24_UINT. 	
            </remarks>	
            <unmanaged>D3D11_DEPTH_STENCIL_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.DepthWriteMask">
            <summary>	
            Identify a portion of the depth-stencil buffer that can be modified by depth data (see <see cref="T:SharpDX.Direct3D11.DepthWriteMask"/>). 	
            </summary>	
            <unmanaged>D3D11_DEPTH_WRITE_MASK DepthWriteMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.DepthComparison">
            <summary>	
            A function that compares depth data against existing depth data. The function options are listed in <see cref="T:SharpDX.Direct3D11.Comparison"/>. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_FUNC DepthFunc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.StencilReadMask">
            <summary>	
            Identify a portion of the depth-stencil buffer for reading stencil data. 	
            </summary>	
            <unmanaged>byte StencilReadMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.StencilWriteMask">
            <summary>	
            Identify a portion of the depth-stencil buffer for writing stencil data. 	
            </summary>	
            <unmanaged>byte StencilWriteMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.FrontFace">
            <summary>	
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera (see <see cref="T:SharpDX.Direct3D11.DepthStencilOperationDescription"/>). 	
            </summary>	
            <unmanaged>D3D11_DEPTH_STENCILOP_DESC FrontFace</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilStateDescription.BackFace">
            <summary>	
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera (see <see cref="T:SharpDX.Direct3D11.DepthStencilOperationDescription"/>). 	
            </summary>	
            <unmanaged>D3D11_DEPTH_STENCILOP_DESC BackFace</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DepthStencilStateDescription.IsDepthEnabled">
            <summary>	
            Enable depth testing. 	
            </summary>	
            <unmanaged>BOOL DepthEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.DepthStencilStateDescription.IsStencilEnabled">
            <summary>	
            Enable stencil testing. 	
            </summary>	
            <unmanaged>BOOL StencilEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetBlendDescription">
            <summary>	
            Describes the blend state for a render target.	
            </summary>	
            <remarks>	
            To see how blending is done, see the output-merger stage. These are the default values for blend state.  StateDefault Value BlendEnableFALSE SrcBlendD3D11_BLEND_ONE DestBlendD3D11_BLEND_ZERO BlendOpD3D11_BLEND_OP_ADD SrcBlendAlphaD3D11_BLEND_ONE DestBlendAlphaD3D11_BLEND_ZERO BlendOpAlphaD3D11_BLEND_OP_ADD RenderTargetWriteMaskD3D11_COLOR_WRITE_ENABLE_ALL  ? 	
            </remarks>	
            <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.SourceBlend">
            <summary>	
            This {{blend option}} specifies the first RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND SrcBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.DestinationBlend">
            <summary>	
            This {{blend option}} specifies the second RGB data source and includes an optional pre-blend operation. 	
            </summary>	
            <unmanaged>D3D11_BLEND DestBlend</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.BlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the RGB data sources. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP BlendOp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.SourceAlphaBlend">
            <summary>	
            This {{blend option}} specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D11_BLEND SrcBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.DestinationAlphaBlend">
            <summary>	
            This {{blend option}} specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 	
            </summary>	
            <unmanaged>D3D11_BLEND DestBlendAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.AlphaBlendOperation">
            <summary>	
            This {{blend operation}} defines how to combine the alpha data sources. 	
            </summary>	
            <unmanaged>D3D11_BLEND_OP BlendOpAlpha</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetBlendDescription.RenderTargetWriteMask">
            <summary>	
            A write mask. 	
            </summary>	
            <unmanaged>D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RenderTargetBlendDescription.IsBlendEnabled">
            <summary>	
            Enable (or disable) blending. 	
            </summary>	
            <unmanaged>BOOL BlendEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.BlendStateDescription">
            <summary>	
            Describes the blend state.	
            </summary>	
            <remarks>	
            These are the default values for blend state.  StateDefault Value AlphaToCoverageEnableFALSE IndependentBlendEnableFALSE RenderTarget[0].BlendEnableFALSE RenderTarget[0].SrcBlendD3D11_BLEND_ONE RenderTarget[0].DestBlendD3D11_BLEND_ZERO RenderTarget[0].BlendOpD3D11_BLEND_OP_ADD RenderTarget[0].SrcBlendAlphaD3D11_BLEND_ONE RenderTarget[0].DestBlendAlphaD3D11_BLEND_ZERO RenderTarget[0].BlendOpAlphaD3D11_BLEND_OP_ADD RenderTarget[0].RenderTargetWriteMaskD3D11_COLOR_WRITE_ENABLE_ALL  ? Note that D3D11_BLEND_DESC is identical to <see cref="!:SharpDX.Direct3D10.BlendStateDescription1"/>. If the driver type is set to <see cref="F:SharpDX.Direct3D.DriverType.Hardware"/>, the feature level is set to less than or equal to <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_9_3"/>, and the pixel format of the render target is set to <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/>, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, or DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, the display device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than D3D_FEATURE_LEVEL_9_3, the display device performs the blend in linear space. 	
            </remarks>	
            <unmanaged>D3D11_BLEND_DESC</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.BlendStateDescription.AlphaToCoverageEnable">
            <summary>	
            Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget. 	
            </summary>	
            <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.BlendStateDescription.IndependentBlendEnable">
            <summary>	
            Set to TRUE to enable independent blending in simultaneous render targets.  If set to FALSE, only the RenderTarget[0] members are used. RenderTarget[1..7] are ignored. 	
            </summary>	
            <unmanaged>BOOL IndependentBlendEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.BlendStateDescription.RenderTarget">
            <summary>	
            An array of render-target-blend descriptions (see <see cref="T:SharpDX.Direct3D11.RenderTargetBlendDescription"/>); these correspond to the eight rendertargets  that can be set to the output-merger stage at one time. 	
            </summary>	
            <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RasterizerStateDescription">
            <summary>	
            Describes rasterizer state.	
            </summary>	
            <remarks>	
            Rasterizer state defines the behavior of the rasterizer stage; to set rasterizer state, call <see cref="M:SharpDX.Direct3D11.DeviceContext.RasterizerStage.SetState(SharpDX.Direct3D11.RasterizerState)"/>. These are the default values for rasterizer state.  StateDefault Value FillModeSolid CullModeBack FrontCounterClockwiseFALSE DepthBias0 SlopeScaledDepthBias0.0f DepthBiasClamp0.0f DepthClipEnableTRUE ScissorEnableFALSE MultisampleEnableFALSE AntialiasedLineEnableFALSE  ? 	
            </remarks>	
            <unmanaged>D3D11_RASTERIZER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RasterizerStateDescription.FillMode">
            <summary>	
            Determines the fill mode to use when rendering (see <see cref="T:SharpDX.Direct3D11.FillMode"/>). 	
            </summary>	
            <unmanaged>D3D11_FILL_MODE FillMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RasterizerStateDescription.CullMode">
            <summary>	
            Indicates triangles facing the specified direction are not drawn (see <see cref="T:SharpDX.Direct3D11.CullMode"/>). 	
            </summary>	
            <unmanaged>D3D11_CULL_MODE CullMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RasterizerStateDescription.DepthBias">
            <summary>	
            Depth value added to a given pixel. 	
            </summary>	
            <unmanaged>int DepthBias</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RasterizerStateDescription.DepthBiasClamp">
            <summary>	
            Maximum depth bias of a pixel. 	
            </summary>	
            <unmanaged>float DepthBiasClamp</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RasterizerStateDescription.SlopeScaledDepthBias">
            <summary>	
            Scalar on a given pixel's slope. 	
            </summary>	
            <unmanaged>float SlopeScaledDepthBias</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerStateDescription.IsFrontCounterClockwise">
            <summary>	
            Determines if a triangle is front- or back-facing. If this parameter is true, then a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is false then the opposite is true. 	
            </summary>	
            <unmanaged>BOOL FrontCounterClockwise</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerStateDescription.IsDepthClipEnabled">
            <summary>	
            Enable clipping based on distance. 	
            </summary>	
            <unmanaged>BOOL DepthClipEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerStateDescription.IsScissorEnabled">
            <summary>	
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled. 	
            </summary>	
            <unmanaged>BOOL ScissorEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerStateDescription.IsMultisampleEnabled">
            <summary>	
            Enable multisample antialiasing. 	
            </summary>	
            <unmanaged>BOOL MultisampleEnable</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.RasterizerStateDescription.IsAntialiasedLineEnabled">
            <summary>	
            Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false. 	
            </summary>	
            <unmanaged>BOOL AntialiasedLineEnable</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.SubResourceData">
            <summary>	
            Specifies data for initializing a subresource.	
            </summary>	
            <remarks>	
            This structure is used in calls to create buffers (<see cref="M:SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.Direct3D11.SubResourceData},SharpDX.Direct3D11.Buffer@)"/>) and  textures (<see cref="M:SharpDX.Direct3D11.Device.CreateTexture1D(SharpDX.Direct3D11.Texture1DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture1D@)"/>, <see cref="M:SharpDX.Direct3D11.Device.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture2D@)"/>,  and <see cref="M:SharpDX.Direct3D11.Device.CreateTexture3D(SharpDX.Direct3D11.Texture3DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture3D@)"/>). If the resource being created does not require a system-memory pitch or a system-memory-pitch  slice, then you are free to use those members to pass size information which may help you when debugging a problem creating a resource. Note that an application should not rely on SysMemPitch being exactly equal to the number of texels in a line times the size of a texel. In some cases SysMemPitch will include padding to skip past additional data in a line.  This could be padding for alignment or  the texture could be a subsection of a larger texture.  For example the D3D11_SUBRESOURCE_DATA structure could represent a 32 by 32 subsection of a 128 by 128 texture.   The value for SysMemSlicePitch will reflect any padding included in SysMemPitch. 	
            </remarks>	
            <unmanaged>D3D11_SUBRESOURCE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SubResourceData.DataPointer">
            <summary>	
            Pointer to the initialization data. 	
            </summary>	
            <unmanaged>const void* pSysMem</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SubResourceData.Pitch">
            <summary>	
            The distance (in bytes) from the beginning of one line of a texture to the next line.   System-memory pitch is used only for 2D and 3D texture data as it is has no meaning for the other resource types. 	
            </summary>	
            <unmanaged>int SysMemPitch</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SubResourceData.SlicePitch">
            <summary>	
            The distance (in bytes) from the beginning of one depth level to the next.   System-memory-slice pitch is only used for 3D texture data as it has no meaning for the other resource types. 	
            </summary>	
            <unmanaged>int SysMemSlicePitch</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.MappedSubResource">
            <summary>	
            Provides access to subresource data.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_MAPPED_SUBRESOURCE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MappedSubResource.PData">
            <summary>	
            Pointer to the data. When <see cref="M:SharpDX.Direct3D11.DeviceContext.Map(SharpDX.Direct3D11.Resource,System.Int32,SharpDX.Direct3D11.MapMode,SharpDX.Direct3D11.MapFlags,SharpDX.Direct3D11.MappedSubResource@)"/> provides the reference, the runtime ensures that the reference has a specific alignment, depending on the following feature levels:  For <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_10_0"/> and higher, the reference is aligned to 16 bytes. For lower than <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_10_0"/>, the reference is aligned to 4 bytes.  	
            </summary>	
            <unmanaged>void* pData</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MappedSubResource.RowPitch">
            <summary>	
            The row pitch, or width, or physical size (in bytes) of the data. 	
            </summary>	
            <unmanaged>int RowPitch</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.MappedSubResource.DepthPitch">
            <summary>	
            The depth pitch, or width, or physical size (in bytes)of the data. 	
            </summary>	
            <unmanaged>int DepthPitch</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture1DDescription">
            <summary>	
            Describes a 1D texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D11.Device.CreateTexture1D(SharpDX.Direct3D11.Texture1DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture1D@)"/>. A helpful derived structure CD3D11_TEXTURE1D_DESC is declared in D3D11.h, to help create a texture description. 	
            </remarks>	
            <unmanaged>D3D11_TEXTURE1D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.Width">
            <summary>	
            Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE1D_U_DIMENSION (16384). 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.MipLevels">
            <summary>	
            The maximum number of mipmap levels in the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.ArraySize">
            <summary>	
            Number of textures in the array. The  range is from 1 to D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION (2048). 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: D3D11_BIND_SHADER_RESOURCE, D3D11_BIND_RENDER_TARGET and D3D11_BIND_DEPTH_STENCIL. 	
            </summary>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture1DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture2DDescription">
            <summary>	
            Describes a 2D texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D11.Device.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture2D@)"/>. A helpful derived structure CD3D11_TEXTURE2D_DESC is declared in D3D11.h, to help create a texture description. The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource. 	
            </remarks>	
            <unmanaged>D3D11_TEXTURE2D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.Width">
            <summary>	
            Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.Height">
            <summary>	
            Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.MipLevels">
            <summary>	
            The maximum number of mipmap levels in the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.ArraySize">
            <summary>	
            Number of textures in the texture array. The  range is from 1 to D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION (2048). For a texture cube-map, this value is a multiple of 6 (that is, 6 times the value in the NumCubes member of <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/>), and the  range is from 6 to D3D11_REQ_TEXTURECUBE_DIMENSION. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.SampleDescription">
            <summary>	
            Structure that specifies multisampling parameters for the texture. See <see cref="T:SharpDX.DXGI.SampleDescription"/>. 	
            </summary>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR. 	
            </summary>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture2DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <see cref="F:SharpDX.Direct3D11.ResourceOptionFlags.TextureCube"/> flag. Cube-map arrays (that is, ArraySize &gt; 6) require feature level <see cref="F:SharpDX.Direct3D.FeatureLevel.Level_10_1"/> or higher. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Texture3DDescription">
            <summary>	
            Describes a 3D texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D11.Device.CreateTexture3D(SharpDX.Direct3D11.Texture3DDescription@,SharpDX.Direct3D11.SubResourceData[],SharpDX.Direct3D11.Texture3D@)"/>. A helpful derived structure CD3D11_TEXTURE3D_DESC is declared in D3D11.h, to help create a texture description. The device restricts the size of subsampled, block compressed, and bit format resources to be multiples of sizes specific to each format. 	
            </remarks>	
            <unmanaged>D3D11_TEXTURE3D_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.Width">
            <summary>	
            Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.Height">
            <summary>	
            Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.Depth">
            <summary>	
            Texture depth (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.MipLevels">
            <summary>	
            The maximum number of mipmap levels in the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.Format">
            <summary>	
            Texture format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.Usage">
            <summary>	
            Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="T:SharpDX.Direct3D11.ResourceUsage"/> for all possible values. 	
            </summary>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.BindFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR. 	
            </summary>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.CpuAccessFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Texture3DDescription.OptionFlags">
            <summary>	
            Flags (see <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription">
            <summary>	
            Describes a shader-resource view.	
            </summary>	
            <remarks>	
            A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read. When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a DXGI_FORMAT_R32G32B32_TYPELESS resource can be viewed with one of these typed formats: DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, and DXGI_FORMAT_R32G32B32_SINT, since these typed formats are compatible with the typeless resource. Create a shader-resource-view description by calling <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/>. To view a shader-resource-view description, call <see cref="M:SharpDX.Direct3D11.ShaderResourceView.GetDescription(SharpDX.Direct3D11.ShaderResourceViewDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_SHADER_RESOURCE_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Format">
            <summary>	
            A <see cref="T:SharpDX.DXGI.Format"/> specifying the viewing format. See remarks. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Dimension">
            <summary>	
            The resource type of the view. See <see cref="T:SharpDX.Direct3D.ShaderResourceViewDimension"/>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below. 	
            </summary>	
            <unmanaged>D3D11_SRV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Buffer">
            <summary>	
            View the resource as a buffer using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFER_SRV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1D">
            <summary>	
            View the resource as a 1D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_SRV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArray">
            <summary>	
            View the resource as a 1D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2D">
            <summary>	
            View the resource as a 2D-texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_SRV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArray">
            <summary>	
            View the resource as a 2D-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMS">
            <summary>	
            View the resource as a 2D-multisampled texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMSArray">
            <summary>	
            View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3D">
            <summary>	
            View the resource as a 3D texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX3D_SRV Texture3D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCube">
            <summary>	
            View the resource as a 3D-cube texture using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEXCUBE_SRV TextureCube</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArray">
            <summary>	
            View the resource as a 3D-cube-texture array using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferEx">
            <summary>	
            View the resource as an extended buffer using information from a shader-resource view (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFEREX_SRV BufferEx</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource">
            <summary>	
            Specifies the elements in a buffer resource to use in a shader-resource view.	
            </summary>	
            <remarks>	
            The D3D11_BUFFER_SRV structure is a member of the  <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/> structure, which represents a shader-resource view description. You can create a shader-resource view by calling the <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> method. 	
            </remarks>	
            <unmanaged>D3D11_BUFFER_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource.FirstElement">
            <summary>	
            The offset of the first element in the view to access, relative to element 0. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementOffset">
            <summary>	
            The total number of elements in the view. 	
            </summary>	
            <unmanaged>int ElementOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource.ElementWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ElementWidth</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource">
            <summary>	
            Describes a raw buffer resource.	
            </summary>	
            <remarks>	
            This structure is used by <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/> to create a raw buffer. 	
            </remarks>	
            <unmanaged>D3D11_BUFFEREX_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.FirstElement">
            <summary>	
            The index of the first element to be accessed by the view. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.ElementCount">
            <summary>	
            The number of elements in the resource. 	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource.Flags">
            <summary>	
            Options for binding a raw buffer (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFEREX_SRV_FLAG Flags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource">
            <summary>	
            Specifies the subresource from a 1D texture to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). As an example, assuming MostDetailedMip = 6 and MipLevels = 2, the view will have access to 2 mipmap levels, 6 and 7, of the original texture for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates the view. In this situation, MostDetailedMip is greater than the MipLevels in the view. However, MostDetailedMip is not greater than the MipLevels in the original resource. 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture1D for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view  of the texture. See the remarks. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the subresources from an array of 1D textures to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture1D for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource">
            <summary>	
            Specifies the subresource from a 2D texture to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture2D for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the subresources from an array of 2D textures to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture2D for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource">
            <summary>	
            Specifies the subresources from a 3D texture to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX3D_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture3D for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource">
            <summary>	
            Specifies the subresource from a cube texture to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEXCUBE_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original TextureCube for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource">
            <summary>	
            Specifies the subresources from an array of cube textures to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEXCUBE_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.MostDetailedMip">
            <summary>	
            Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original TextureCube for which <see cref="M:SharpDX.Direct3D11.Device.CreateShaderResourceView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription},SharpDX.Direct3D11.ShaderResourceView@)"/> creates a view) -1. 	
            </summary>	
            <unmanaged>int MostDetailedMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.MipLevels">
            <summary>	
            The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.First2DArrayFace">
            <summary>	
            Index of the first 2D texture to use. 	
            </summary>	
            <unmanaged>int First2DArrayFace</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource.CubeCount">
            <summary>	
            Number of cube textures in the array. 	
            </summary>	
            <unmanaged>int NumCubes</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the subresources from a multisampled 2D texture to use in a shader-resource view.	
            </summary>	
            <remarks>	
            Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Integer of any value. See remarks. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the subresources from an array of multisampled 2D textures to use in a shader-resource view.	
            </summary>	
            <remarks>	
            This structure is one member of a shader-resource-view description (see <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_SRV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription">
            <summary>	
            Specifies the subresources from a resource that are accessible using a render-target view.	
            </summary>	
            <remarks>	
            A render-target-view description is passed into <see cref="M:SharpDX.Direct3D11.Device.CreateRenderTargetView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},SharpDX.Direct3D11.RenderTargetView@)"/> to create a render target. A render-target-view cannot use the following formats:  Any typeless format. DXGI_FORMAT_R32G32B32 if the view will be used to bind a buffer (vertex, index, constant, or stream-output).  If the format is set to DXGI_FORMAT_UNKNOWN, then the format of the resource that the view binds to the pipeline will be used. 	
            </remarks>	
            <unmanaged>D3D11_RENDER_TARGET_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Format">
            <summary>	
            The data format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Dimension">
            <summary>	
            The resource type (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDimension"/>), which specifies how the render-target resource will be accessed. 	
            </summary>	
            <unmanaged>D3D11_RTV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Buffer">
            <summary>	
            Specifies which buffer elements can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFER_RTV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1D">
            <summary>	
            Specifies the subresources in a 1D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_RTV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArray">
            <summary>	
            Specifies the subresources in a 1D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2D">
            <summary>	
            Specifies the subresources in a 2D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_RTV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArray">
            <summary>	
            Specifies the subresources in a 2D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_ARRAY_RTV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMS">
            <summary>	
            Specifies a single subresource because a multisampled 2D texture only contains one subresource (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMSArray">
            <summary>	
            Specifies the subresources in a multisampled 2D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3D">
            <summary>	
            Specifies subresources in a 3D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX3D_RTV Texture3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource">
            <summary>	
            Specifies the elements in a buffer resource to use in a render-target view.	
            </summary>	
            <remarks>	
            A render-target view is a member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). Create a render-target view by calling <see cref="M:SharpDX.Direct3D11.Device.CreateRenderTargetView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},SharpDX.Direct3D11.RenderTargetView@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_BUFFER_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource.FirstElement">
            <summary>	
            Number of bytes between the beginning of the buffer and the first element to access. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementOffset">
            <summary>	
            The width of each element (in bytes). This can be determined from the format stored in the render-target-view description. 	
            </summary>	
            <unmanaged>int ElementOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource.ElementWidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ElementWidth</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource">
            <summary>	
            Specifies the subresource from a 1D texture to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use mip slice. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the subresources from an array of 1D textures to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            The index of the mipmap level to use mip slice. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource">
            <summary>	
            Specifies the subresource from a 2D texture to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use mip slice. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the subresource from a multisampled 2D texture to use in a render-target view.	
            </summary>	
            <remarks>	
            Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Integer of any value. See remarks. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the subresources from an array of 2D textures to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            The index of the mipmap level to use mip slice. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures in the array to use in the render target view, starting from FirstArraySlice. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render-target-view description (see <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource">
            <summary>	
            Specifies the subresources from a 3D texture to use in a render-target view.	
            </summary>	
            <remarks>	
            This structure is one member of a render target view. See <see cref="T:SharpDX.Direct3D11.RenderTargetViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX3D_RTV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource.MipSlice">
            <summary>	
            The index of the mipmap level to use mip slice. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource.FirstDepthSlice">
            <summary>	
            First depth level to use. 	
            </summary>	
            <unmanaged>int FirstWSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource.DepthSliceCount">
            <summary>	
            Number of depth levels to use in the render-target view, starting from FirstWSlice. A value of -1 indicates all of the slices along the w axis, starting from FirstWSlice. 	
            </summary>	
            <unmanaged>int WSize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription">
            <summary>	
            Specifies the subresources of a texture that are accessible from a depth-stencil view.	
            </summary>	
            <remarks>	
            These are valid formats for a depth-stencil view:  DXGI_FORMAT_D16_UNORM DXGI_FORMAT_D24_UNORM_S8_UINT DXGI_FORMAT_D32_FLOAT DXGI_FORMAT_D32_FLOAT_S8X24_UINT DXGI_FORMAT_UNKNOWN  A depth-stencil view cannot use a typeless format.  If the format chosen is DXGI_FORMAT_UNKNOWN, then the format of the parent resource is used. A depth-stencil-view description is needed when calling <see cref="M:SharpDX.Direct3D11.Device.CreateDepthStencilView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.DepthStencilViewDescription},SharpDX.Direct3D11.DepthStencilView@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_DEPTH_STENCIL_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Format">
            <summary>	
            Resource data  format (see <see cref="T:SharpDX.DXGI.Format"/>). See remarks for allowable formats. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Dimension">
            <summary>	
            Type of resource (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDimension"/>). Specifies how a depth-stencil resource will be accessed; the value is stored in the  union in this structure. 	
            </summary>	
            <unmanaged>D3D11_DSV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Flags">
            <summary>	
            A value that describes whether the texture is read only.  Pass 0 to specify that it is not read only; otherwise, pass one of the members of  the <see cref="T:SharpDX.Direct3D11.DepthStencilViewFlags"/> enumerated type. 	
            </summary>	
            <unmanaged>D3D11_DSV_FLAG Flags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1D">
            <summary>	
            Specifies a 1D texture subresource (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_DSV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArray">
            <summary>	
            Specifies an array of 1D texture subresources (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_ARRAY_DSV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2D">
            <summary>	
            Specifies a 2D texture subresource (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_DSV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArray">
            <summary>	
            Specifies an array of 2D texture subresources (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_ARRAY_DSV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMS">
            <summary>	
            Specifies a multisampled 2D texture (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_DSV Texture2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMSArray">
            <summary>	
            Specifies an array of multisampled 2D textures (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DResource">
            <summary>	
            Specifies the subresource from a 1D texture that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource">
            <summary>	
            Specifies the subresources from an array of 1D textures to use in a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DResource">
            <summary>	
            Specifies the subresource from a 2D texture that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource">
            <summary>	
            Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            The index of the first mipmap level to use. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource">
            <summary>	
            Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view.	
            </summary>	
            <remarks>	
            Because a multisampled 2D texture contains a single subtexture, there is nothing to specify; this unused member is included so that this structure will compile in C. 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource.UnusedFieldNothingToDefine">
            <summary>	
            Unused. 	
            </summary>	
            <unmanaged>int UnusedField_NothingToDefine</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource">
            <summary>	
            Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view.	
            </summary>	
            <remarks>	
            This structure is one member of a depth-stencil-view description (see <see cref="T:SharpDX.Direct3D11.DepthStencilViewDescription"/>). 	
            </remarks>	
            <unmanaged>D3D11_TEX2DMS_ARRAY_DSV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource.FirstArraySlice">
            <summary>	
            The index of the first texture to use in an array of textures. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource.ArraySize">
            <summary>	
            Number of textures to use. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription">
            <summary>	
            Specifies the subresources from a resource that are accessible using an unordered-access view.	
            </summary>	
            <remarks>	
            An unordered-access-view description is passed into <see cref="M:SharpDX.Direct3D11.Device.CreateUnorderedAccessView(SharpDX.Direct3D11.Resource,System.Nullable{SharpDX.Direct3D11.UnorderedAccessViewDescription},SharpDX.Direct3D11.UnorderedAccessView@)"/> to create a view. 	
            </remarks>	
            <unmanaged>D3D11_UNORDERED_ACCESS_VIEW_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Format">
            <summary>	
            The data format (see <see cref="T:SharpDX.DXGI.Format"/>). 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Dimension">
            <summary>	
            The resource type (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDimension"/>), which specifies how the resource will be accessed. 	
            </summary>	
            <unmanaged>D3D11_UAV_DIMENSION ViewDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Buffer">
            <summary>	
            Specifies which buffer elements can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV Buffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1D">
            <summary>	
            Specifies the subresources in a 1D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_UAV Texture1D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArray">
            <summary>	
            Specifies the subresources in a 1D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2D">
            <summary>	
            Specifies the subresources in a 2D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_UAV Texture2D</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArray">
            <summary>	
            Specifies the subresources in a 2D texture array that can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX2D_ARRAY_UAV Texture2DArray</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3D">
            <summary>	
            Specifies subresources in a 3D texture that can be accessed (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource"/>). 	
            </summary>	
            <unmanaged>D3D11_TEX3D_UAV Texture3D</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource">
            <summary>	
            Describes a unordered-access buffer resource.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_BUFFER_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource.FirstElement">
            <summary>	
            The zero-based index of the first element to be accessed. 	
            </summary>	
            <unmanaged>int FirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource.ElementCount">
            <summary>	
            The number of elements in the resource. For structured buffers, this is the number of structures in the buffer. 	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource.Flags">
            <summary>	
            View options for the resource (see <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/>). 	
            </summary>	
            <unmanaged>D3D11_BUFFER_UAV_FLAG Flags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource">
            <summary>	
            Describes a unordered-access 1D texture resource.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource.MipSlice">
            <summary>	
            The mipmap slice index. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource">
            <summary>	
            Describes an array of unordered-access 1D texture resources.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX1D_ARRAY_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.MipSlice">
            <summary>	
            The mipmap slice index. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.FirstArraySlice">
            <summary>	
            The zero-based index of the first array slice to be accessed. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource.ArraySize">
            <summary>	
            The number of slices in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource">
            <summary>	
            Describes a unordered-access 2D texture resource.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource.MipSlice">
            <summary>	
            The mipmap slice index. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource">
            <summary>	
            Describes an array of unordered-access 2D texture resources.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX2D_ARRAY_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.MipSlice">
            <summary>	
            The mipmap slice index. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.FirstArraySlice">
            <summary>	
            The zero-based index of the first array slice to be accessed. 	
            </summary>	
            <unmanaged>int FirstArraySlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource.ArraySize">
            <summary>	
            The number of slices in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource">
            <summary>	
            Describes a unordered-access 3D texture resource.	
            </summary>	
            <remarks>	
            This structure is used by a <see cref="T:SharpDX.Direct3D11.UnorderedAccessViewDescription"/>. 	
            </remarks>	
            <unmanaged>D3D11_TEX3D_UAV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.MipSlice">
            <summary>	
            The mipmap slice index. 	
            </summary>	
            <unmanaged>int MipSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.FirstWSlice">
            <summary>	
            The zero-based index of the first depth slice to be accessed. 	
            </summary>	
            <unmanaged>int FirstWSlice</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource.WSize">
            <summary>	
            The number of depth slices. 	
            </summary>	
            <unmanaged>int WSize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.SamplerStateDescription">
            <summary>	
            Describes a sampler state.	
            </summary>	
            <remarks>	
            These are the default values for sampler state.  StateDefault Value FilterMIN_MAG_MIP_LINEAR AddressUClamp AddressVClamp AddressWClamp MinLOD-3.402823466e+38F (-FLT_MAX) MaxLOD3.402823466e+38F (FLT_MAX) MipMapLODBias0.0f MaxAnisotropy16 ComparisonFuncNever BorderColorfloat4(0.0f,0.0f,0.0f,0.0f) TextureN/A  ? 	
            </remarks>	
            <unmanaged>D3D11_SAMPLER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.Filter">
            <summary>	
            Filtering method to use when sampling a texture (see <see cref="T:SharpDX.Direct3D11.Filter"/>). 	
            </summary>	
            <unmanaged>D3D11_FILTER Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.AddressU">
            <summary>	
            Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <see cref="T:SharpDX.Direct3D11.TextureAddressMode"/>). 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressU</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.AddressV">
            <summary>	
            Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressV</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.AddressW">
            <summary>	
            Method to use for resolving a w texture coordinate that is outside the 0 to 1 range. 	
            </summary>	
            <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressW</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.MipLodBias">
            <summary>	
            Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. 	
            </summary>	
            <unmanaged>float MipLODBias</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.MaximumAnisotropy">
            <summary>	
            Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16. 	
            </summary>	
            <unmanaged>int MaxAnisotropy</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.ComparisonFunction">
            <summary>	
            A function that compares sampled data against existing sampled data. The function options are listed in <see cref="T:SharpDX.Direct3D11.Comparison"/>. 	
            </summary>	
            <unmanaged>D3D11_COMPARISON_FUNC ComparisonFunc</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.BorderColor">
            <summary>	
            Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive. 	
            </summary>	
            <unmanaged>SHARPDX_COLOR4 BorderColor</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.MinimumLod">
            <summary>	
            Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. 	
            </summary>	
            <unmanaged>float MinLOD</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.SamplerStateDescription.MaximumLod">
            <summary>	
            Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D11_FLOAT32_MAX. 	
            </summary>	
            <unmanaged>float MaxLOD</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.QueryDescription">
            <summary>	
            Describes a query.	
            </summary>	
            <unmanaged>D3D11_QUERY_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDescription.Type">
            <summary>	
            Type of query (see <see cref="T:SharpDX.Direct3D11.QueryType"/>). 	
            </summary>	
            <unmanaged>D3D11_QUERY Query</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDescription.Flags">
            <summary>	
            Miscellaneous flags (see <see cref="T:SharpDX.Direct3D11.QueryFlags"/>). 	
            </summary>	
            <unmanaged>D3D11_QUERY_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.QueryDataTimestampDisjoint">
            <summary>	
            Query information about the reliability of a timestamp query.	
            </summary>	
            <remarks>	
            For a list of query types see <see cref="T:SharpDX.Direct3D11.QueryType"/>. 	
            </remarks>	
            <unmanaged>D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataTimestampDisjoint.Frequency">
            <summary>	
            How frequently the GPU counter increments in Hz. 	
            </summary>	
            <unmanaged>__int64 Frequency</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.QueryDataTimestampDisjoint.Disjoint">
            <summary>	
            If this is TRUE, something occurred in between the query's <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/> calls that caused the timestamp counter to become discontinuous or disjoint, such as unplugging the AC chord on a laptop, overheating, or throttling up/down due to laptop savings events. The timestamp returned by <see cref="M:SharpDX.Direct3D11.DeviceContext.GetDataInternal(SharpDX.Direct3D11.Asynchronous,System.IntPtr,System.Int32,SharpDX.Direct3D11.AsynchronousFlags)"/> for a timestamp query is only reliable if Disjoint is FALSE. 	
            </summary>	
            <unmanaged>BOOL Disjoint</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.QueryDataPipelineStatistics">
            <summary>	
            Query information about graphics-pipeline activity in between calls to <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>.	
            </summary>	
            <unmanaged>D3D11_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.IAVerticeCount">
            <summary>	
            Number of vertices read by input assembler. 	
            </summary>	
            <unmanaged>__int64 IAVertices</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.IAPrimitiveCount">
            <summary>	
            Number of primitives read by the input assembler. This number can be different depending on the primitive topology used. For example, a triangle strip with 6 vertices will produce 4 triangles, however a triangle list with 6 vertices will produce 2 triangles.  	
            </summary>	
            <unmanaged>__int64 IAPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.VSInvocationCount">
            <summary>	
            Number of times a vertex shader was invoked. Direct3D invokes the vertex shader once per vertex. 	
            </summary>	
            <unmanaged>__int64 VSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.GSInvocationCount">
            <summary>	
            Number of times a geometry shader was invoked. When the geometry shader is set to NULL, this statistic may or may not increment depending on the hardware manufacturer. 	
            </summary>	
            <unmanaged>__int64 GSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.GSPrimitiveCount">
            <summary>	
            Number of primitives output by a geometry shader. 	
            </summary>	
            <unmanaged>__int64 GSPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.CInvocationCount">
            <summary>	
            Number of primitives that were sent to the rasterizer. When the rasterizer is disabled, this will not increment. 	
            </summary>	
            <unmanaged>__int64 CInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.CPrimitiveCount">
            <summary>	
            Number of primitives that were rendered. This may be larger or smaller than CInvocations because after a primitive is clipped sometimes it is either broken up into more than one primitive or completely culled. 	
            </summary>	
            <unmanaged>__int64 CPrimitives</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.PSInvocationCount">
            <summary>	
            Number of times a pixel shader was invoked. 	
            </summary>	
            <unmanaged>__int64 PSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.HSInvocationCount">
            <summary>	
            Number of times a hull shader was invoked. 	
            </summary>	
            <unmanaged>__int64 HSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.DSInvocationCount">
            <summary>	
            Number of times a domain shader was invoked. 	
            </summary>	
            <unmanaged>__int64 DSInvocations</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.QueryDataPipelineStatistics.CSInvocationCount">
            <summary>	
            Number of times a compute shader was invoked. 	
            </summary>	
            <unmanaged>__int64 CSInvocations</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.StreamOutputStatistics">
            <summary>	
            Query information about the amount of data streamed out to the stream-output buffers in between <see cref="M:SharpDX.Direct3D11.DeviceContext.Begin(SharpDX.Direct3D11.Asynchronous)"/> and <see cref="M:SharpDX.Direct3D11.DeviceContext.End(SharpDX.Direct3D11.Asynchronous)"/>.	
            </summary>	
            <unmanaged>D3D11_QUERY_DATA_SO_STATISTICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputStatistics.NumPrimitivesWritten">
            <summary>	
            Number of primitives (that is, points, lines, and triangles) written to the stream-output buffers. 	
            </summary>	
            <unmanaged>__int64 NumPrimitivesWritten</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.StreamOutputStatistics.PrimitivesStorageNeeded">
            <summary>	
            Number of primitives that would have been written to the stream-output buffers if there had been enough space for them all. 	
            </summary>	
            <unmanaged>__int64 PrimitivesStorageNeeded</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CounterDescription">
            <summary>	
            Describes a counter.	
            </summary>	
            <remarks>	
            This structure is used by <see cref="M:SharpDX.Direct3D11.Counter.GetDescription(SharpDX.Direct3D11.CounterDescription@)"/>, <see cref="M:SharpDX.Direct3D11.Device.CheckCounter(SharpDX.Direct3D11.CounterDescription,SharpDX.Direct3D11.CounterType@,System.Int32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/> and <see cref="M:SharpDX.Direct3D11.Device.CreateCounter(SharpDX.Direct3D11.CounterDescription,SharpDX.Direct3D11.Counter@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_COUNTER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterDescription.Counter">
            <summary>	
            Type of counter (see <see cref="T:SharpDX.Direct3D11.CounterKind"/>). 	
            </summary>	
            <unmanaged>D3D11_COUNTER Counter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterDescription.MiscFlags">
            <summary>	
            Reserved. 	
            </summary>	
            <unmanaged>int MiscFlags</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.CounterCapabilities">
            <summary>	
            Information about the video card's performance counter capabilities.	
            </summary>	
            <remarks>	
            This structure is returned by <see cref="M:SharpDX.Direct3D11.Device.GetCounterCapabilities"/>. 	
            </remarks>	
            <unmanaged>D3D11_COUNTER_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterCapabilities.LastDeviceDependentCounter">
            <summary>	
            Largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Otherwise it will be greater than or equal to D3D11_COUNTER_DEVICE_DEPENDENT_0. See <see cref="T:SharpDX.Direct3D11.CounterKind"/>. 	
            </summary>	
            <unmanaged>D3D11_COUNTER LastDeviceDependentCounter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterCapabilities.SimultaneousCounterCount">
            <summary>	
            Number of counters that can be simultaneously supported. 	
            </summary>	
            <unmanaged>int NumSimultaneousCounters</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.CounterCapabilities.DetectableParallelUnitCount">
            <summary>	
            Number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Use NumDetectableParallelUnits to interpret the values of the VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, and OTHER_GPU_PROCESSING counters.  	
            </summary>	
            <unmanaged>byte NumDetectableParallelUnits</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ClassInstanceDescription">
            <summary>	
            Describes an HLSL class instance.	
            </summary>	
            <remarks>	
            The D3D11_CLASS_INSTANCE_DESC structure is returned by the <see cref="M:SharpDX.Direct3D11.ClassInstance.GetDescription(SharpDX.Direct3D11.ClassInstanceDescription@)"/> method. The members of this structure except InstanceIndex are valid (non default values) if they describe a class instance aquired using  <see cref="M:SharpDX.Direct3D11.ClassLinkage.CreateClassInstance(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D11.ClassInstance@)"/>.  The InstanceIndex member is only valid when the class instance is aquired using <see cref="M:SharpDX.Direct3D11.ClassLinkage.GetClassInstance(System.String,System.Int32)"/>. 	
            </remarks>	
            <unmanaged>D3D11_CLASS_INSTANCE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.InstanceId">
            <summary>	
            The instance ID of an HLSL class; the default value is 0. 	
            </summary>	
            <unmanaged>int InstanceId</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.InstanceIndex">
            <summary>	
            The instance index of an HLSL class; the default value is 0. 	
            </summary>	
            <unmanaged>int InstanceIndex</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.TypeId">
            <summary>	
            The type ID of an HLSL class; the default value is 0. 	
            </summary>	
            <unmanaged>int TypeId</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.ConstantBuffer">
            <summary>	
            Describes the constant buffer associated with an HLSL class; the default value is 0. 	
            </summary>	
            <unmanaged>int ConstantBuffer</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.BaseConstantBufferOffset">
            <summary>	
            The base constant buffer offset associated with an HLSL class; the default value is 0. 	
            </summary>	
            <unmanaged>int BaseConstantBufferOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.BaseTexture">
            <summary>	
            The base texture associated with an HLSL class; the default value is 127. 	
            </summary>	
            <unmanaged>int BaseTexture</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ClassInstanceDescription.BaseSampler">
            <summary>	
            The base sampler associated with an HLSL class; the default value is 15. 	
            </summary>	
            <unmanaged>int BaseSampler</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.ClassInstanceDescription.IsCreated">
            <summary>	
            True if the class was created; the default value is false. 	
            </summary>	
            <unmanaged>BOOL Created</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FeatureDataThreading">
            <summary>	
            Describes the multi-threading features that are supported by the current graphics driver.	
            </summary>	
            <remarks>	
            Use the D3D11_FEATURE_DATA_THREADING structure with the <see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/> method to determine multi-threading support. 	
            </remarks>	
            <unmanaged>D3D11_FEATURE_DATA_THREADING</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FeatureDataThreading.DriverConcurrentCreates">
            <summary>	
            TRUE means resources can be created concurrently on multiple threads while drawing; FALSE means that the presence of coarse synchronization will prevent concurrency. 	
            </summary>	
            <unmanaged>BOOL DriverConcurrentCreates</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FeatureDataThreading.DriverCommandLists">
            <summary>	
            TRUE means command lists are supported by the current driver; FALSE means that the API will emulate deferred contexts and command lists with software. 	
            </summary>	
            <unmanaged>BOOL DriverCommandLists</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FeatureDataDoubles">
            <summary>	
            Describes double data type support in the current graphics driver.	
            </summary>	
            <unmanaged>D3D11_FEATURE_DATA_DOUBLES</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FeatureDataDoubles.DoublePrecisionFloatShaderOps">
            <summary>	
            If TRUE doubles are allowed; otherwise FALSE. 	
            </summary>	
            <unmanaged>BOOL DoublePrecisionFloatShaderOps</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FeatureDataFormatSupport">
            <summary>	
            Describes which resources are supported by the current graphics driver for a given format.	
            </summary>	
            <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FeatureDataFormatSupport.InFormat">
            <summary>	
            <see cref="T:SharpDX.DXGI.Format"/> to return information on. 	
            </summary>	
            <unmanaged>DXGI_FORMAT InFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FeatureDataFormatSupport.OutFormatSupport">
            <summary>	
            Combination of <see cref="T:SharpDX.Direct3D11.FormatSupport"/> flags indicating which resources are supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT OutFormatSupport</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FeatureDataFormatSupport2">
            <summary>	
            Describes which unordered resource options are supported by the current graphics driver for a given format.	
            </summary>	
            <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FeatureDataFormatSupport2.InFormat">
            <summary>	
            <see cref="T:SharpDX.DXGI.Format"/> to return information on. 	
            </summary>	
            <unmanaged>DXGI_FORMAT InFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FeatureDataFormatSupport2.OutFormatSupport2">
            <summary>	
            Combination of <see cref="T:SharpDX.Direct3D11.ComputeShaderFormatSupport"/> flags indicating which unordered resource options are supported. 	
            </summary>	
            <unmanaged>D3D11_FORMAT_SUPPORT2 OutFormatSupport2</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FeatureDataD3D10XHardwareOptions">
            <summary>	
            Describes compute shader and raw and structured buffer support in the current graphics driver.	
            </summary>	
            <remarks>	
            Direct3D 11 devices (D3D_FEATURE_LEVEL_11_0) are required to support Compute Shader model 5.0.  Direct3D 10.x devices (D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_10_1) can optionally support Compute Shader model 4.0 or 4.1. 	
            </remarks>	
            <unmanaged>D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FeatureDataD3D10XHardwareOptions.ComputeShadersPlusRawAndStructuredBuffersViaShader4X">
            <summary>	
            TRUE if compute shaders and raw and structured buffers are supported; otherwise FALSE. 	
            </summary>	
            <unmanaged>BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.Message">
            <summary>	
            A debug message in the Information Queue.	
            </summary>	
            <remarks>	
            This structure is returned from <see cref="M:SharpDX.Direct3D11.InfoQueue.GetMessage(System.Int64,SharpDX.Direct3D11.Message[],SharpDX.Size@)"/> as part of the Information Queue feature (see <see cref="T:SharpDX.Direct3D11.InfoQueue"/>). 	
            </remarks>	
            <unmanaged>D3D11_MESSAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Message.Category">
            <summary>	
            The category of the message. See <see cref="T:SharpDX.Direct3D11.MessageCategory"/>. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY Category</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Message.Severity">
            <summary>	
            The severity of the message. See <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY Severity</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Message.Id">
            <summary>	
            The ID of the message. See <see cref="T:SharpDX.Direct3D11.MessageId"/>. 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID ID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Message.PDescription">
            <summary>	
            The message string. 	
            </summary>	
            <unmanaged>const char* pDescription</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.Message.DescriptionByteLength">
            <summary>	
            The length of pDescription in bytes. 	
            </summary>	
            <unmanaged>SIZE_T DescriptionByteLength</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.InfoQueueFilterDescription">
            <summary>	
            Allow or deny certain types of messages to pass through a filter.	
            </summary>	
            <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.CategorieCount">
            <summary>	
            Number of message categories to allow or deny. 	
            </summary>	
            <unmanaged>int NumCategories</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.PCategoryList">
            <summary>	
            Array of message categories to allow or deny. Array must have at least NumCategories members (see <see cref="T:SharpDX.Direct3D11.MessageCategory"/>). 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_CATEGORY* pCategoryList</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.SeveritieCount">
            <summary>	
            Number of message severity levels to allow or deny. 	
            </summary>	
            <unmanaged>int NumSeverities</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.PSeverityList">
            <summary>	
            Array of message severity levels to allow or deny. Array must have at least NumSeverities members (see <see cref="T:SharpDX.Direct3D11.MessageSeverity"/>). 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_SEVERITY* pSeverityList</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.IDCount">
            <summary>	
            Number of message IDs to allow or deny. 	
            </summary>	
            <unmanaged>int NumIDs</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilterDescription.PIDList">
            <summary>	
            Array of message IDs to allow or deny. Array must have at least NumIDs members (see <see cref="T:SharpDX.Direct3D11.MessageId"/>). 	
            </summary>	
            <unmanaged>D3D11_MESSAGE_ID* pIDList</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.InfoQueueFilter">
            <summary>	
            Debug message filter; contains a lists of message types to allow or deny.	
            </summary>	
            <remarks>	
            For use with an <see cref="T:SharpDX.Direct3D11.InfoQueue"/>. 	
            </remarks>	
            <unmanaged>D3D11_INFO_QUEUE_FILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilter.AllowList">
            <summary>	
            Types of messages that you want to allow. See <see cref="T:SharpDX.Direct3D11.InfoQueueFilterDescription"/>. 	
            </summary>	
            <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC AllowList</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.InfoQueueFilter.DenyList">
            <summary>	
            Types of messages that you want to deny. 	
            </summary>	
            <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC DenyList</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ImageInformation">
            <summary>	
            Optionally provide information to texture loader APIs to control how textures get loaded. A value of D3DX11_DEFAULT for any of these parameters will cause D3DX to automatically pick use the value from the source file.	
            </summary>	
            <remarks>	
            This structure is used by methods such as: {{D3DX11GetImageInfoFromFile}}, <see cref="M:SharpDX.Direct3D11.D3DX11.GetImageInfoFromMemory(System.IntPtr,SharpDX.Size,System.IntPtr,SharpDX.Direct3D11.ImageInformation@,System.Int32@)"/>, or {{D3DX11GetImageInfoFromResource}}. 	
            </remarks>	
            <unmanaged>D3DX11_IMAGE_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.Width">
            <summary>	
            The target width of the texture. If the actual width of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target width. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.Height">
            <summary>	
            The target height of the texture. If the actual height of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target height. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.Depth">
            <summary>	
            The depth of the texture. This only applies to volume textures. 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.ArraySize">
            <summary>	
            The number of elements in the array. 	
            </summary>	
            <unmanaged>int ArraySize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.MipLevels">
            <summary>	
            The maximum number of mipmap levels in the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Using 0 or D3DX11_DEFAULT will cause a full mipmap chain to be created. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.OptionFlags">
            <summary>	
            Miscellaneous resource properties specified with a <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/> flag. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.Format">
            <summary>	
            A <see cref="T:SharpDX.DXGI.Format"/> enumeration specifying the format the texture will be in after it is loaded. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.ResourceDimension">
            <summary>	
            A <see cref="T:SharpDX.Direct3D11.ResourceDimension"/> value, which identifies the type of resource. 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_DIMENSION ResourceDimension</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageInformation.ImageFileFormat">
            <summary>	
            A <see cref="T:SharpDX.Direct3D11.ImageFileFormat"/> value, which identifies the image format. 	
            </summary>	
            <unmanaged>D3DX11_IMAGE_FILE_FORMAT ImageFileFormat</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ImageInformation.FromFile(System.String)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <param name="fileName">File name of image to retrieve information about.</param>
            <returns>If the function succeeds, returns a <see cref="T:SharpDX.Direct3D11.ImageInformation"/> filled with the description of the data in the source file. else returns null </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.ImageInformation.FromMemory(System.Byte[])">
            <summary>	
            Retrieves information about a given image file from a memory location.
            </summary>	
            <param name="memory">an array to the image in memory</param>
            <returns>If the function succeeds, returns a <see cref="T:SharpDX.Direct3D11.ImageInformation"/> filled with the description of the data from the image memory. else returns null </returns>
            <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar_t* pSrcFile,[None] ID3DX11ThreadPump* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.ImageLoadInformation">
            <summary>	
            Optionally provide information to texture loader APIs to control how textures get loaded. A value of D3DX11_DEFAULT for any of these parameters will cause D3DX to automatically pick use the value from the source file.	
            </summary>	
            <remarks>	
            When initializing the structure, you may set any member to D3DX11_DEFAULT and D3DX will initialize it with a default value from the source texture when the texture is loaded. This structure can be used by APIs that:  Create resources, such as {{D3DX11CreateTextureFromFile}} and {{D3DX11CreateShaderResourceViewFromFile}}. Create data processors, such as {{D3DX11CreateAsyncTextureInfoProcessor}} or	
            {{D3DX11CreateAsyncShaderResourceViewProcessor}}.  The default values are: 	
            <code> Width = D3DX11_DEFAULT; Height = D3DX11_DEFAULT; Depth = D3DX11_DEFAULT; FirstMipLevel = D3DX11_DEFAULT; MipLevels = D3DX11_DEFAULT; Usage = (D3D11_USAGE) D3DX11_DEFAULT; BindFlags = D3DX11_DEFAULT; CpuAccessFlags = D3DX11_DEFAULT; MiscFlags = D3DX11_DEFAULT; Format = DXGI_FORMAT_FROM_FILE; Filter = D3DX11_DEFAULT; MipFilter = D3DX11_DEFAULT; pSrcInfo = NULL; </code>	
            	
             Here is a brief example that uses this structure to supply the pixel format when loading a texture. For the complete code, see HDRFormats10.cpp in {{HDRToneMappingCS11 Sample}}. 	
            <code> ID3D11ShaderResourceView* pCubeRV = NULL;	
            WCHAR strPath[MAX_PATH];	
            D3DX11_IMAGE_LOAD_INFO LoadInfo; DXUTFindDXSDKMediaFileCch( strPath, MAX_PATH,  L"Light Probes\\uffizi_cross.dds" ); LoadInfo.Format = DXGI_FORMAT_R16G16B16A16_FLOAT; hr = D3DX11CreateShaderResourceViewFromFile( pd3dDevice, strPath,  &amp;LoadInfo, NULL, &amp;pCubeRV, NULL ); </code>	
            	
             	
            </remarks>	
            <unmanaged>D3DX11_IMAGE_LOAD_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.FileDefaultValue">
            <summary>
            The default value for load options.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Width">
            <summary>	
            The target width of the texture. If the actual width of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target width. 	
            </summary>	
            <unmanaged>int Width</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Height">
            <summary>	
            The target height of the texture. If the actual height of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target height. 	
            </summary>	
            <unmanaged>int Height</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Depth">
            <summary>	
            The depth of the texture. This only applies to volume textures. 	
            </summary>	
            <unmanaged>int Depth</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.FirstMipLevel">
            <summary>	
            The highest resolution mipmap level of the texture. If this is greater than 0, then after the texture is loaded FirstMipLevel will be mapped to mipmap level 0. 	
            </summary>	
            <unmanaged>int FirstMipLevel</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.MipLevels">
            <summary>	
            The maximum number of mipmap levels in the texture. See the remarks in <see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Using 0 or D3DX11_DEFAULT will cause a full mipmap chain to be created. 	
            </summary>	
            <unmanaged>int MipLevels</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Usage">
            <summary>	
            The way the texture resource is intended to be used. See <see cref="T:SharpDX.Direct3D11.ResourceUsage"/>. 	
            </summary>	
            <unmanaged>D3D11_USAGE Usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.BindFlags">
            <summary>	
            The pipeline stages that the texture will be allowed to bind to. See <see cref="T:SharpDX.Direct3D11.BindFlags"/>. 	
            </summary>	
            <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.CpuAccessFlags">
            <summary>	
            The access permissions the cpu will have for the texture resource. See <see cref="T:SharpDX.Direct3D11.CpuAccessFlags"/>. 	
            </summary>	
            <unmanaged>D3D11_CPU_ACCESS_FLAG CpuAccessFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.OptionFlags">
            <summary>	
            Miscellaneous resource properties (see <see cref="T:SharpDX.Direct3D11.ResourceOptionFlags"/>). 	
            </summary>	
            <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Format">
            <summary>	
            A <see cref="T:SharpDX.DXGI.Format"/> enumeration indicating the format the texture will be in after it is loaded. 	
            </summary>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.Filter">
            <summary>	
            Filter the texture using the specified filter (only when resampling). See <see cref="T:SharpDX.Direct3D11.FilterFlags"/>. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_FLAG Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.MipFilter">
            <summary>	
            Filter the texture mip levels using the specified filter (only if generating mipmaps). Valid values are D3DX11_FILTER_NONE, D3DX11_FILTER_POINT, D3DX11_FILTER_LINEAR, or D3DX11_FILTER_TRIANGLE. See <see cref="T:SharpDX.Direct3D11.FilterFlags"/>. 	
            </summary>	
            <unmanaged>D3DX11_FILTER_FLAG MipFilter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.ImageLoadInformation.PSrcInfo">
            <summary>	
            Information about the original image. See <see cref="T:SharpDX.Direct3D11.ImageInformation"/>. Can be obtained with {{D3DX11GetImageInfoFromFile}}, <see cref="M:SharpDX.Direct3D11.D3DX11.GetImageInfoFromMemory(System.IntPtr,SharpDX.Size,System.IntPtr,SharpDX.Direct3D11.ImageInformation@,System.Int32@)"/>, or {{D3DX11GetImageInfoFromResource}}. 	
            </summary>	
            <unmanaged>D3DX11_IMAGE_INFO* pSrcInfo</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.TextureLoadInformation">
            <summary>	
            Describes parameters used to load a texture from another texture.	
            </summary>	
            <remarks>	
            This structure is used in a call to <see cref="M:SharpDX.Direct3D11.D3DX11.LoadTextureFromTexture(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Resource,SharpDX.Direct3D11.TextureLoadInformation@,SharpDX.Direct3D11.Resource)"/>. The default values are: 	
            <code> pSrcBox = NULL; pDstBox = NULL; SrcFirstMip = 0; DstFirstMip = 0; NumMips = D3DX11_DEFAULT; SrcFirstElement = 0; DstFirstElement = 0; NumElements = D3DX11_DEFAULT; Filter = D3DX11_DEFAULT; MipFilter = D3DX11_DEFAULT; </code>	
            	
             	
            </remarks>	
            <unmanaged>D3DX11_TEXTURE_LOAD_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.SourceRegionPointer">
            <summary>	
            Source texture box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pSrcBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.DestinationRegionPointer">
            <summary>	
            Destination texture box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pDstBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.FirstSourceMip">
            <summary>	
            Source texture mipmap level, see {{D3D11CalcSubresource}} for more detail. 	
            </summary>	
            <unmanaged>int SrcFirstMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.FirstDestinationMip">
            <summary>	
            Destination texture mipmap level, see {{D3D11CalcSubresource}} for more detail. 	
            </summary>	
            <unmanaged>int DstFirstMip</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.MipCount">
            <summary>	
            Number of mipmap levels in the source texture. 	
            </summary>	
            <unmanaged>int NumMips</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.FirstSourceElement">
            <summary>	
            First element of the source texture. 	
            </summary>	
            <unmanaged>int SrcFirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.FirstDestinationElement">
            <summary>	
            First element of the destination texture. 	
            </summary>	
            <unmanaged>int DstFirstElement</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.ElementCount">
            <summary>	
            Number of elements to load. 	
            </summary>	
            <unmanaged>int NumElements</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.Filter">
            <summary>	
            Filtering options during resampling (see <see cref="T:SharpDX.Direct3D11.FilterFlags"/>). 	
            </summary>	
            <unmanaged>D3DX11_FILTER_FLAG Filter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.MipFilter">
            <summary>	
            Filtering options when generating mip levels (see <see cref="T:SharpDX.Direct3D11.FilterFlags"/>). 	
            </summary>	
            <unmanaged>D3DX11_FILTER_FLAG MipFilter</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.SourceRegion">
            <summary>	
            Source texture box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pSrcBox</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.TextureLoadInformation.DestinationRegion">
            <summary>	
            Destination texture box (see <see cref="T:SharpDX.Direct3D11.ResourceRegion"/>). 	
            </summary>	
            <unmanaged>D3D11_BOX* pDstBox</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransformDescription">
            <summary>	
            Describes an FFT.	
            </summary>	
            <unmanaged>D3DX11_FFT_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDescription.DimensionCount">
            <summary>	
            Number of dimension in the FFT. 	
            </summary>	
            <unmanaged>int NumDimensions</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDescription.Dimensions">
            <summary>	
            Combination of <see cref="T:SharpDX.Direct3D11.FastFourierTransformDimensions"/> flags indicating the  dimensions to transform. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DIM_MASK DimensionMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformDescription.DataType">
            <summary>	
            <see cref="T:SharpDX.Direct3D11.FastFourierTransformDataType"/> flag indicating the type of data being transformed. 	
            </summary>	
            <unmanaged>D3DX11_FFT_DATA_TYPE Type</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.FastFourierTransformDescription.ElementLengths">
            <summary>	
            Length of each dimension in the FFT. 	
            </summary>	
            <unmanaged>int ElementLengths[32]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.FastFourierTransformBufferRequirements">
            <summary>	
            Buffer requirements for an FFT.	
            </summary>	
            <remarks>	
            The D3DX11_FFT_BUFFER_INFO structure is initialized by a call to one of the <see cref="M:SharpDX.Direct3D11.D3DCSX.CreateFFT(SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.FastFourierTransformDescription@,System.Int32,SharpDX.Direct3D11.FastFourierTransformBufferRequirements@,SharpDX.Direct3D11.FastFourierTransform@)"/> functions  (see {{D3DX Functions}}). 	
            </remarks>	
            <unmanaged>D3DX11_FFT_BUFFER_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformBufferRequirements.TemporaryBufferCount">
            <summary>	
            Number of temporary buffers needed. Allowed range is 0 to D3DX11_FFT_MAX_TEMP_BUFFERS. 	
            </summary>	
            <unmanaged>int NumTempBufferSizes</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformBufferRequirements.TemporaryBufferSizes">
            <summary>	
            Minimum sizes (in FLOATs) of temporary buffers. 	
            </summary>	
            <unmanaged>int TempBufferFloatSizes[4]</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformBufferRequirements.PrecomputeBufferCount">
            <summary>	
            Number of precompute buffers required.  Allowed range is 0 to D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS. 	
            </summary>	
            <unmanaged>int NumPrecomputeBufferSizes</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.FastFourierTransformBufferRequirements.PrecomputeBufferSizes">
            <summary>	
            Minimum sizes (in FLOATs) for precompute buffers. 	
            </summary>	
            <unmanaged>int PrecomputeBufferFloatSizes[4]</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D11.StreamOutputBufferBinding">
            <summary>
              Properties defining the way a buffer is bound to the pipeline as a target for stream output operations.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.StreamOutputBufferBinding.#ctor(SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.StreamOutputBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:SharpDX.Direct3D11.StreamOutputBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.StreamOutputBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D11.VertexBufferBinding">
            <summary>
              Properties defining the way a buffer (containing vertex data) is bound
              to the pipeline for rendering.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.VertexBufferBinding.#ctor(SharpDX.Direct3D11.Buffer,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.Direct3D11.VertexBufferBinding" /> struct.
            </summary>
            <param name = "buffer">The buffer being bound.</param>
            <param name = "stride">The stride between vertex element (in bytes).</param>
            <param name = "offset">The offset to the first vertex (in bytes).</param>
        </member>
        <member name="P:SharpDX.Direct3D11.VertexBufferBinding.Buffer">
            <summary>
              Gets or sets the buffer being bound.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.VertexBufferBinding.Stride">
            <summary>
              Gets or sets the stride between vertex elements in the buffer (in bytes).
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.VertexBufferBinding.Offset">
            <summary>
              Gets or sets the offset from the start of the buffer of the first vertex to use (in bytes).
            </summary>
        </member>
    </members>
</doc>

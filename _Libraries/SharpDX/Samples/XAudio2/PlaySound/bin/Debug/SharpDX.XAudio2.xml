<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.XAudio2</name>
    </assembly>
    <members>
        <member name="T:SharpDX.XAudio2.EffectDescriptor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_EFFECT_DESCRIPTOR</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.EffectDescriptor.#ctor(SharpDX.XAPO.AudioProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.EffectDescriptor"/> class with a Stereo Effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SharpDX.XAudio2.EffectDescriptor.#ctor(SharpDX.XAPO.AudioProcessor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.EffectDescriptor"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="outputChannelCount">The output channel count.</param>
        </member>
        <member name="F:SharpDX.XAudio2.EffectDescriptor.EffectPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IUnknown* pEffect</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.EffectDescriptor.OutputChannelCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int OutputChannels</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.EffectDescriptor.Effect">
            <summary>
            Gets or sets the AudioProcessor. The AudioProcessor cannot be set more than one.
            </summary>
            <value>The effect.</value>
        </member>
        <member name="P:SharpDX.XAudio2.EffectDescriptor.InitialState">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL InitialState</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.AudioBuffer">
            <summary>	
            Represents an audio data buffer, used with <see cref="M:SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer(SharpDX.XAudio2.AudioBuffer@,System.Nullable{SharpDX.XAudio2.BufferWma})"/>.	
            </summary>	
            <unmanaged>XAUDIO2_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.LoopInfinite">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.Flags">
            <summary>	
            Flags that provide additional information about the audio buffer. May be 0, or the following value. ValueDescriptionXAUDIO2_END_OF_STREAMIndicates that there cannot be any buffers in the queue after this buffer. The only effect of this flag is to suppress debug output warnings caused by starvation of the buffer queue.? 	
            </summary>	
            <unmanaged>XAUDIO2_BUFFER_FLAGS Flags</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.AudioBytes">
            <summary>	
            Size of the audio data, in bytes. Must be no larger than XAUDIO2_MAX_BUFFER_BYTES (defined in xaudio2.h) for PCM data and no larger than XMA_READBUFFER_MAX_BYTES (defined in xma2defs.h) for XMA data. Note XMA buffers submitted to an XAudio2 voice using <see cref="M:SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer(SharpDX.XAudio2.AudioBuffer@,System.Nullable{SharpDX.XAudio2.BufferWma})"/> must contain complete XMA blocks. A complete XMA block must be equal in size to the XMA2WAVEFORMATEX.BytesPerBlock value, except for the last XMA block in a file, which may be shorter but will still be considered complete. 	
            </summary>	
            <unmanaged>int AudioBytes</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.AudioDataPointer">
            <summary>	
            Pointer to the audio data. Xbox 360  The memory allocated for a buffer containing XMA data must have a block alignment of 2048. This is accomplished using XPhysicalAlloc with the ulAlignment argument set to 2048.  	
            </summary>	
            <unmanaged>const byte* pAudioData</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.PlayBegin">
            <summary>	
            First sample in the buffer that should be played. For XMA buffers this value must be a multiple of 128 samples. 	
            </summary>	
            <unmanaged>int PlayBegin</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.PlayLength">
            <summary>	
            Length of the region to be played, in samples. A value of zero means to play the entire buffer, and, in this case, PlayBegin must be zero as well. For XMA data this value must be a multiple of 128 samples. For ADPCM data this value must be a multiple of wSamplesPerBlock in the {{ADPCMWAVEFORMAT}} structure that contains this XAUDIO2_BUFFER structure. 	
            </summary>	
            <unmanaged>int PlayLength</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.LoopBegin">
            <summary>	
            First sample of the region to be looped. The value of LoopBegin must be less than PlayBegin + PlayLength. LoopBegin can be less than PlayBegin. LoopBegin must be 0 if LoopCount is 0. For XMA data this value must be a multiple of 128 samples. For xWMA data this value must be 0, see {{xWMA Overview}} for additional information. 	
            </summary>	
            <unmanaged>int LoopBegin</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.LoopLength">
            <summary>	
            Length of the loop region, in samples. The value of LoopBegin+LoopLength must be greater than PlayBegin and less than PlayBegin + PlayLength. LoopLength must be zero if LoopCount is 0. If LoopCount is not 0 then a loop length of zero indicates the entire sample should be looped. For XMA data this value must be a multiple of 128 samples. For ADPCM data this value must be a multiple of wSamplesPerBlock in the {{ADPCMWAVEFORMAT}} structure that contains this XAUDIO2_BUFFER structure. For xWMA data this value must be 0 or equal to the number of samples of the entire buffer, see {{xWMA Overview}} for additional information. 	
            </summary>	
            <unmanaged>int LoopLength</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.LoopCount">
            <summary>	
            Number of times to loop through the loop region. This value can be between 0 and XAUDIO2_MAX_LOOP_COUNT. If LoopCount is zero no looping is performed and LoopBegin and LoopLength must be 0. To loop forever, set LoopCount to XAUDIO2_LOOP_INFINITE. For xWMA data if this value is not 0 then Flags must be XAUDIO2_END_OF_STREAM, see {{xWMA Overview}} for additional information. 	
            </summary>	
            <unmanaged>int LoopCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.AudioBuffer.Context">
            <summary>	
            Context value to be passed back in callbacks to the client. This may be NULL. 	
            </summary>	
            <unmanaged>void* pContext</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.AudioBuffer.Stream">
            <summary>
            Gets or sets the datastream associated to this audio buffer
            </summary>
            <value>The stream.</value>
        </member>
        <member name="T:SharpDX.XAudio2.EngineCallback">
            <summary>	
            The IXAudio2EngineCallback interface contains methods that notify the client when certain events happen in the <see cref="T:SharpDX.XAudio2.XAudio2"/> engine. This interface should be implemented by the XAudio2 client. XAudio2 calls these methods via an interface pointer provided by the client, using either the {{XAudio2Create}} or <see cref="M:SharpDX.XAudio2.XAudio2.Initialize(System.Int32,SharpDX.XAudio2.WindowsProcessorSpecifier)"/> method. Methods in this interface return void, rather than an HRESULT.	
            </summary>	
            <unmanaged>IXAudio2EngineCallback</unmanaged>
            <summary>	
            The IXAudio2EngineCallback interface contains methods that notify the client when certain events happen in the <see cref="T:SharpDX.XAudio2.XAudio2"/> engine. This interface should be implemented by the XAudio2 client. XAudio2 calls these methods via an interface reference provided by the client, using either the {{XAudio2Create}} or <see cref="M:SharpDX.XAudio2.XAudio2.Initialize(System.Int32,SharpDX.XAudio2.WindowsProcessorSpecifier)"/> method. Methods in this interface return void, rather than an HRESULT.	
            </summary>	
            <unmanaged>IXAudio2EngineCallback</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.EngineCallback.OnProcessingPassStart">
            <summary>	
            Called by XAudio2 just before an audio processing pass begins.	
            </summary>	
            <unmanaged>void IXAudio2EngineCallback::OnProcessingPassStart()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.EngineCallback.OnProcessingPassEnd">
            <summary>	
            Called by XAudio2 just after an audio processing pass ends.	
            </summary>	
            <unmanaged>void IXAudio2EngineCallback::OnProcessingPassEnd()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.EngineCallback.OnCriticalError(SharpDX.Result)">
            <summary>	
            Called if a critical system error occurs that requires XAudio2 to be closed down and restarted.	
            </summary>	
            <param name="error"> Error code returned by XAudio2. </param>
            <unmanaged>void IXAudio2EngineCallback::OnCriticalError([None] HRESULT Error)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.EngineCallbackImpl">
            <summary>
            Internal EngineCallback Callback Impl
            </summary>
        </member>
        <member name="T:SharpDX.XAudio2.EngineCallbackImpl.OnProcessingPassEndDelegate">
            <summary>	
            Called by XAudio2 just after an audio processing pass ends.	
            </summary>	
            <unmanaged>void IXAudio2EngineCallback::OnProcessingPassEnd()</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.EngineCallbackImpl.OnCriticalErrorDelegate">
            <summary>	
            Called if a critical system error occurs that requires XAudio2 to be closed down and restarted.	
            </summary>
            <param name="thisObject">This pointer</param>
            <param name="error"> Error code returned by XAudio2. </param>
            <unmanaged>void IXAudio2EngineCallback::OnCriticalError([None] HRESULT Error)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.ErrorEventArgs">
            <summary>
            EventArgs used by <see cref="E:SharpDX.XAudio2.XAudio2.CriticalError"/>.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.ErrorEventArgs.#ctor(SharpDX.Result)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.ErrorEventArgs"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:SharpDX.XAudio2.ErrorEventArgs.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:SharpDX.XAudio2.WindowsProcessorSpecifier">
            <summary>	
            Windows-specific enumerator for available processors.	
            </summary>	
            <unmanaged>XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor1</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor2</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor3</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor4">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor4</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor5">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor5</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor6">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor6</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor7">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor7</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor8">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor8</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor9">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor9</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor10">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor10</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor11">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor11</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor12">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor12</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor13">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor13</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor14">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor14</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor15">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor15</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor16">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor16</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor17">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor17</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor18">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor18</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor19">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor19</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor20">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor20</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor21">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor21</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor22">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor22</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor23">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor23</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor24">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor24</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor25">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor25</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor26">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor26</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor27">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor27</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor28">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor28</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor29">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor29</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor30">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor30</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor31">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor31</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.Processor32">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>Processor32</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.AnyProcessor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_ANY_PROCESSOR</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.WindowsProcessorSpecifier.DefaultProcessor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_DEFAULT_PROCESSOR</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.DeviceRole">
            <summary>	
            Used in the <see cref="T:SharpDX.XAudio2.DeviceDetails"/> structure to describe the role assigned to the device by the user.	
            </summary>	
            <unmanaged>XAUDIO2_DEVICE_ROLE</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.NotDefaultDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>NotDefaultDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.DefaultConsoleDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DefaultConsoleDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.DefaultMultimediaDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DefaultMultimediaDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.DefaultCommunicationsDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DefaultCommunicationsDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.DefaultGameDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DefaultGameDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.GlobalDefaultDevice">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>GlobalDefaultDevice</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceRole.InvalidDeviceRole">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>InvalidDeviceRole</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.FilterType">
            <summary>	
            Indicates whether a filter is low pass, band pass, high pass, or notch.	
            </summary>	
            <unmanaged>XAUDIO2_FILTER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterType.LowPassFilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>LowPassFilter</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterType.BandPassFilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BandPassFilter</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterType.HighPassFilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HighPassFilter</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterType.NotchFilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>NotchFilter</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceSendFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_SEND_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendFlags.Usefilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_SEND_USEFILTER</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceFlags.Nopitch">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_NOPITCH</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceFlags.Nosrc">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_NOSRC</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceFlags.Usefilter">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_USEFILTER</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceFlags.Music">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_MUSIC</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.XAudio2Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.XAudio2Flags.DebugEngine">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_DEBUG_ENGINE</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.XAudio2Flags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.PlayFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_PLAY_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PlayFlags.Tails">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_PLAY_TAILS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PlayFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.LogType">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Errors">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_ERRORS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Warnings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_WARNINGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Information">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Detail">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_DETAIL</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.ApiCalls">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_API_CALLS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.FunctionCalls">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_FUNC_CALLS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Timing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_TIMING</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Locks">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_LOCKS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Memory">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_MEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.LogType.Streaming">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_LOG_STREAMING</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.BufferFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_BUFFER_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.BufferFlags.EndOfStream">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_END_OF_STREAM</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.BufferFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.XAudio2FxContants">
            <summary>
            XAudio2FxContants Functions.
            </summary>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.XAudio2FxContants.CLSID_AudioVolumeMeter">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.XAudio2FxContants.CLSID_AudioVolumeMeter_Debug">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.XAudio2FxContants.CLSID_AudioReverb">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.XAudio2FxContants.CLSID_AudioReverb_Debug">
            <summary>Constant None.</summary>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.VolumemeterLevels">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2FX_VOLUMEMETER_LEVELS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.VolumemeterLevels.PeakLevelPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float* pPeakLevels</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.VolumemeterLevels.RmsLevelsPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float* pRMSLevels</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.VolumemeterLevels.ChannelCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ChannelCount</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.ReverbParameters">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2FX_REVERB_PARAMETERS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.WetDryMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float WetDryMix</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.ReflectionsDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ReflectionsDelay</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.ReverbDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte ReverbDelay</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.RearDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte RearDelay</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.PositionLeft">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte PositionLeft</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.PositionRight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte PositionRight</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.PositionMatrixLeft">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte PositionMatrixLeft</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.PositionMatrixRight">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte PositionMatrixRight</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.EarlyDiffusion">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte EarlyDiffusion</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.LateDiffusion">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte LateDiffusion</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.LowEQGain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte LowEQGain</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.LowEQCutoff">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte LowEQCutoff</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.HighEQGain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte HighEQGain</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.HighEQCutoff">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>byte HighEQCutoff</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.RoomFilterFreq">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float RoomFilterFreq</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.RoomFilterMain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float RoomFilterMain</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.RoomFilterHF">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float RoomFilterHF</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.ReflectionsGain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ReflectionsGain</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.ReverbGain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ReverbGain</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.DecayTime">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float DecayTime</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.Density">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float Density</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbParameters.RoomSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float RoomSize</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2FX_REVERB_I3DL2_PARAMETERS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.WetDryMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float WetDryMix</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.Room">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int Room</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.RoomHF">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int RoomHF</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.RoomRolloffFactor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float RoomRolloffFactor</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.DecayTime">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float DecayTime</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.DecayHFRatio">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float DecayHFRatio</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.Reflections">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int Reflections</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.ReflectionsDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ReflectionsDelay</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.Reverb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int Reverb</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.ReverbDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float ReverbDelay</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.Diffusion">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float Diffusion</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.Density">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float Density</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.Fx.ReverbI3DL2Parameters.HFReference">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float HFReference</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.XAudio2">
            <summary>	
            IXAudio2 is the interface for the XAudio2 object, which manages all audio engine states, the audio processing thread, the voice graph, and so forth. This is the only XAudio2 interface that is derived from the COM IUnknown interface. It controls the lifetime of the XAudio2 object using two methods derived from IUnknown: {{IXAudio2::AddRef}} and {{IXAudio2::Release}}. No other XAudio2 objects are reference-counted; their lifetimes are explicitly controlled using create and destroy calls, and are bounded by the lifetime of the XAudio2 object that owns them.	
            </summary>	
            <unmanaged>IXAudio2</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.XAudio2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="F:SharpDX.XAudio2.XAudio2.CLSID_XAudio2">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.XAudio2.CLSID_XAudio2_Debug">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.XAudio2.XAudio2.IID_IXAudio2">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.GetDeviceCount(System.Int32@)">
            <summary>	
            Returns the number of available audio output devices.	
            </summary>	
            <param name="countRef">[out]  Number of available audio output devices that is returned.  On Xbox 360 this value will always be 1. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::GetDeviceCount([Out] int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.GetDeviceDetails(System.Int32,SharpDX.XAudio2.DeviceDetails@)">
            <summary>	
            Returns information about an audio output device.	
            </summary>	
            <param name="index">[in]  Index of the device to be queried. This value must be less than the count returned by <see cref="M:SharpDX.XAudio2.XAudio2.GetDeviceCount(System.Int32@)"/>. </param>
            <param name="deviceDetailsRef">[out]  On success, reference to an <see cref="T:SharpDX.XAudio2.DeviceDetails"/> structure that is returned. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::GetDeviceDetails([None] int Index,[Out] XAUDIO2_DEVICE_DETAILS* pDeviceDetails)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.Initialize(System.Int32,SharpDX.XAudio2.WindowsProcessorSpecifier)">
            <summary>	
            Sets XAudio2 parameters and prepares XAudio2 for use.	
            </summary>	
            <param name="flags">[in]  Flags that specify the behavior of the XAudio2 object. This value must be 0. </param>
            <param name="xAudio2Processor">[in]  An enumeration value that specifies which CPU to use. The values have different meanings on different platforms: Windows  See the <see cref="T:SharpDX.XAudio2.WindowsProcessorSpecifier"/> enumerator for details. Note Specifying a processor should generally be avoided because it can interfere with the scheduler's ability to schedule threads effectively across processors. Instead, pass the XAUDIO2_DEFAULT_PROCESSOR value.  Xbox 360  See the {{XAUDIO2_XBOX_HWTHREAD_SPECIFIER}} enumerator for details.  Specifying the value XAUDIO2_DEFAULT_PROCESSOR causes XAudio2 to use its default processor on each platform. Note that Xaudio2 only supports a single thread at a time and only one processor may be specified. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::Initialize([None] int Flags,[None] XAUDIO2_PROCESSOR XAudio2Processor)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.RegisterForCallbacks_(System.IntPtr)">
            <summary>	
            Adds an <see cref="T:SharpDX.XAudio2.EngineCallback"/> reference to the {{XAudio2}} engine callback list.  	
            </summary>	
            <param name="callbackRef">[in]  <see cref="T:SharpDX.XAudio2.EngineCallback"/> reference to add to the {{XAudio2}} engine callback list. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::RegisterForCallbacks([In] IXAudio2EngineCallback* pCallback)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.UnregisterForCallbacks_(System.IntPtr)">
            <summary>	
            Removes an <see cref="T:SharpDX.XAudio2.EngineCallback"/> reference from the {{XAudio2}} engine callback list.	
            </summary>	
            <param name="callbackRef">[in]  <see cref="T:SharpDX.XAudio2.EngineCallback"/> reference to remove from the {{XAudio2}} engine callback list. If the given reference is present more than once in the list, only the first instance in the list will be removed. </param>
            <unmanaged>void IXAudio2::UnregisterForCallbacks([In] IXAudio2EngineCallback* pCallback)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CreateSourceVoice_(SharpDX.XAudio2.SourceVoice@,SharpDX.Multimedia.WaveFormat@,SharpDX.XAudio2.VoiceFlags,System.Single,System.IntPtr,System.Nullable{SharpDX.XAudio2.VoiceSendDescriptors},System.Nullable{SharpDX.XAudio2.EffectChain})">
            <summary>	
            Creates and configures a source voice.	
            </summary>	
            <param name="sourceVoiceRef">[out]  If successful, returns a reference to the new <see cref="T:SharpDX.XAudio2.SourceVoice"/> object. </param>
            <param name="sourceFormatRef">[in]  Pointer to a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="T:SharpDX.Multimedia.WaveFormat"/> have a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
            <param name="flags">[in]  Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following: ValueDescriptionXAUDIO2_VOICE_NOPITCHNo pitch control is available on the voice.?XAUDIO2_VOICE_NOSRCNo sample rate conversion is available on the voice, the voice's  outputs must have the same sample rate.Note The XAUDIO2_VOICE_NOSRC flag causes the voice to behave as though the XAUDIO2_VOICE_NOPITCH flag also is specified. ?XAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.?XAUDIO2_VOICE_MUSICThe voice is used to play background music. The system automatically  can replace the voice with music selected by the user.? </param>
            <param name="maxFrequencyRatio">[in]  Highest allowable frequency ratio that can be set on this voice. The value for this argument must be between XAUDIO2_MIN_FREQ_RATIO and XAUDIO2_MAX_FREQ_RATIO. Subsequent calls to <see cref="M:SharpDX.XAudio2.SourceVoice.SetFrequencyRatio(System.Single,System.Int32)"/> are clamped between XAUDIO2_MIN_FREQ_RATIO and MaxFrequencyRatio. The maximum value for this argument is defined as XAUDIO2_MAX_FREQ_RATIO, which allows pitch to be raised by up to 10 octaves. If MaxFrequencyRatio is less than 1.0, the voice will use that ratio immediately after being created (rather than the default of 1.0). Xbox 360  For XMA voices there is an additional restriction on the MaxFrequencyRatio argument and the voice's sample rate. The product of these two numbers cannot exceed XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO for one-channel voices or XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL for voices with any other number of channels. If the value specified for MaxFrequencyRatio is too high for the specified format, the call to CreateSourceVoice fails and produces a debug message.  Note XAudio2's memory usage can be reduced by using the lowest possible MaxFrequencyRatio value. </param>
            <param name="callbackRef">[in, optional]  Pointer to a client-provided callback interface, <see cref="T:SharpDX.XAudio2.VoiceCallback"/>. </param>
            <param name="sendListRef">[in, optional]  Pointer to a list of <see cref="T:SharpDX.XAudio2.VoiceSendDescriptors"/> structures that describe the set of destination voices for the source voice. If pSendList is NULL, the send list defaults to a single output to the first mastering voice created. </param>
            <param name="effectChainRef">[in, optional]  Pointer to a list of <see cref="T:SharpDX.XAudio2.EffectChain"/> structures that describe an effect chain to use in the source voice. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] XAUDIO2_VOICE_FLAGS Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CreateSubmixVoice(SharpDX.XAudio2.SubmixVoice@,System.Int32,System.Int32,SharpDX.XAudio2.VoiceSendFlags,System.Int32,System.Nullable{SharpDX.XAudio2.VoiceSendDescriptors},System.Nullable{SharpDX.XAudio2.EffectChain})">
            <summary>	
            Creates and configures a submix voice.	
            </summary>	
            <param name="submixVoiceRef">[out]  On success, returns a reference to the new  <see cref="T:SharpDX.XAudio2.SubmixVoice"/> object. </param>
            <param name="inputChannels">[in]  Number of channels in the input audio data of the submix voice. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of submix voice. This rate must be a multiple of  XAUDIO2_QUANTUM_DENOMINATOR.  InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. </param>
            <param name="flags">[in]  Flags that specify the behavior of the submix voice. Can be 0 or the following: ValueDescriptionXAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.? </param>
            <param name="processingStage">[in]  An arbitrary number that specifies when this voice is processed with respect to other submix  voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other  voices that include a smaller ProcessingStage value, and before all other voices  that include a larger ProcessingStage value. Voices that include the same  ProcessingStage value are processed in any order. A submix voice cannot send to  another submix voice with a lower or equal ProcessingStage value; this prevents  audio being lost due to a submix cycle. </param>
            <param name="sendListRef">[in, optional]  Pointer to a list of <see cref="T:SharpDX.XAudio2.VoiceSendDescriptors"/> structures that describe the set  of destination voices for the submix voice. If pSendList is NULL, the send list will default to a single output to the  first mastering voice created. </param>
            <param name="effectChainRef">[in, optional]  Pointer to a list of <see cref="T:SharpDX.XAudio2.EffectChain"/> structures that describe an  effect chain to use in the submix voice. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] int InputChannels,[None] int InputSampleRate,[None] XAUDIO2_VOICE_SEND_FLAGS Flags,[None] int ProcessingStage,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CreateMasteringVoice(SharpDX.XAudio2.MasteringVoice@,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{SharpDX.XAudio2.EffectChain})">
            <summary>	
            Creates and configures a mastering voice.	
            </summary>	
            <param name="masteringVoiceRef">[out]  If successful, returns a reference to the new <see cref="T:SharpDX.XAudio2.MasteringVoice"/> object. </param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of the mastering voice. This rate must be a multiple of XAUDIO2_QUANTUM_DENOMINATOR. InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. InputSampleRate can be set to XAUDIO2_DEFAULT_SAMPLERATE, with the default being determined by the current platform. Windows  Windows XP defaults to 44100. Windows Vista and Windows 7 default to the setting specified in the Sound Control Panel. The default for this setting is 44100 (or 48000 if required by the driver).  Xbox 360  Defaults to 48000.  </param>
            <param name="flags">[in]  Flags that specify the behavior of the mastering voice. Must be 0. </param>
            <param name="deviceIndex">[in]  Index of the output device that will be sent input by the mastering voice. Specifying the default value of 0 causes XAudio2 to select the global default audio device. </param>
            <param name="effectChainRef">[in, optional]  Pointer to an <see cref="T:SharpDX.XAudio2.EffectChain"/> structure that describe an effect chain to use in the mastering voice, or NULL to use no effects. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] int InputChannels,[None] int InputSampleRate,[None] int Flags,[None] int DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.StartEngine">
            <summary>	
            Creates and starts the audio processing thread.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::StartEngine()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.StopEngine">
            <summary>	
            Stops and destroys the audio processing thread.	
            </summary>	
            <unmanaged>void IXAudio2::StopEngine()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CommitChanges(System.Int32)">
            <summary>	
            Atomically applies a set of operations that are tagged with a given identifier.	
            </summary>	
            <param name="operationSet">[in]  Identifier of the set of operations to be applied. To commit all pending operations, pass XAUDIO2_COMMIT_ALL. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CommitChanges([None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.GetPerformanceData(SharpDX.XAudio2.PerformanceData@)">
            <summary>	
            Returns current resource usage details, such as available memory or CPU usage.	
            </summary>	
            <param name="erfDataRef">[out]  On success, reference to an <see cref="T:SharpDX.XAudio2.PerformanceData"/> structure that is returned. </param>
            <unmanaged>void IXAudio2::GetPerformanceData([Out] XAUDIO2_PERFORMANCE_DATA* pPerfData)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.SetDebugConfiguration(System.Nullable{SharpDX.XAudio2.DebugConfiguration},System.IntPtr)">
            <summary>	
            Changes global debug logging options for XAudio2.	
            </summary>	
            <param name="debugConfigurationRef">Pointer to a <see cref="T:SharpDX.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration. </param>
            <param name="reservedRef">No documentation.</param>
            <unmanaged>void IXAudio2::SetDebugConfiguration([In, Optional] const XAUDIO2_DEBUG_CONFIGURATION* pDebugConfiguration,[In, Optional] void* pReserved)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.XAudio2"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.#ctor(SharpDX.XAudio2.XAudio2Flags,SharpDX.XAudio2.WindowsProcessorSpecifier)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.XAudio2"/> class.
            </summary>
            <param name="flags">Specify a Debug or Normal XAudio2 instance.</param>
            <param name="processorSpecifier">The processor specifier.</param>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SharpDX.XAudio2.XAudio2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.GetDeviceDetails(System.Int32)">
            <summary>	
            Returns information about an audio output device.	
            </summary>	
            <param name="index">[in]  Index of the device to be queried. This value must be less than the count returned by <see cref="M:SharpDX.XAudio2.XAudio2.GetDeviceCount(System.Int32@)"/>. </param>
            <returns>On success, pointer to an <see cref="T:SharpDX.XAudio2.DeviceDetails"/> structure that is returned. </returns>
            <unmanaged>HRESULT IXAudio2::GetDeviceDetails([None] UINT32 Index,[Out] XAUDIO2_DEVICE_DETAILS* pDeviceDetails)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.AmplitudeRatioToDecibels(System.Single)">
            <summary>
            Calculate a decibel from a volume.
            </summary>
            <param name="volume">The volume.</param>
            <returns>a dB value</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CutoffFrequencyToRadians(System.Single,System.Int32)">
            <summary>
            Calculate radians from a cutoffs frequency.
            </summary>
            <param name="cutoffFrequency">The cutoff frequency.</param>
            <param name="sampleRate">The sample rate.</param>
            <returns>radian</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.RadiansToCutoffFrequency(System.Single,System.Single)">
            <summary>
            Calculate a cutoff frequency from a radian.
            </summary>
            <param name="radians">The radians.</param>
            <param name="sampleRate">The sample rate.</param>
            <returns>cutoff frequency</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.DecibelsToAmplitudeRatio(System.Single)">
            <summary>
            Calculate a volume from a decibel
            </summary>
            <param name="decibels">a dB value</param>
            <returns>an amplitude value</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.FrequencyRatioToSemitones(System.Single)">
            <summary>
            Calculate semitones from a Frequency ratio
            </summary>
            <param name="frequencyRatio">The frequency ratio.</param>
            <returns>semitones</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.SemitonesToFrequencyRatio(System.Single)">
            <summary>
            Calculate frequency from semitones.
            </summary>
            <param name="semitones">The semitones.</param>
            <returns>the frequency</returns>
        </member>
        <member name="M:SharpDX.XAudio2.XAudio2.CommitChanges">
            <summary>	
            Atomically applies a set of operations for all pending operations.
            </summary>	
            <unmanaged>HRESULT IXAudio2::CommitChanges([None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.XAudio2.DeviceCount">
            <summary>	
            Returns the number of available audio output devices.	
            </summary>	
            <unmanaged>HRESULT IXAudio2::GetDeviceCount([Out] int* pCount)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.XAudio2.PerformanceData">
            <summary>	
            Returns current resource usage details, such as available memory or CPU usage.	
            </summary>	
            <unmanaged>void IXAudio2::GetPerformanceData([Out] XAUDIO2_PERFORMANCE_DATA* pPerfData)</unmanaged>
        </member>
        <member name="E:SharpDX.XAudio2.XAudio2.ProcessingPassStart">
            <summary>	
            Called by XAudio2 just before an audio processing pass begins.	
            </summary>	
        </member>
        <member name="E:SharpDX.XAudio2.XAudio2.ProcessingPassEnd">
            <summary>	
            Called by XAudio2 just after an audio processing pass ends.	
            </summary>	
        </member>
        <member name="E:SharpDX.XAudio2.XAudio2.CriticalError">
            <summary>
            Called if a critical system error occurs that requires XAudio2 to be closed down and restarted.
            </summary>
        </member>
        <member name="T:SharpDX.XAudio2.Voice">
            <summary>	
            IXAudio2Voice represents the base interface from which <see cref="T:SharpDX.XAudio2.SourceVoice"/>, <see cref="T:SharpDX.XAudio2.SubmixVoice"/> and <see cref="T:SharpDX.XAudio2.MasteringVoice"/> are derived. The methods listed below are common to all voice subclasses.	
            </summary>	
            <unmanaged>IXAudio2Voice</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.Voice"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetVoiceDetails(SharpDX.XAudio2.VoiceDetails@)">
            <summary>	
            Returns information about the creation flags, input channels, and sample rate of a voice.	
            </summary>	
            <param name="voiceDetailsRef">[in, out]  <see cref="T:SharpDX.XAudio2.VoiceDetails"/> structure containing information about the voice. </param>
            <unmanaged>void IXAudio2Voice::GetVoiceDetails([Out] XAUDIO2_VOICE_DETAILS* pVoiceDetails)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputVoices(System.Nullable{SharpDX.XAudio2.VoiceSendDescriptors})">
            <summary>	
            Designates a new set of submix or mastering voices to receive the output of the voice.	
            </summary>	
            <param name="sendListRef">[in]  Array of <see cref="T:SharpDX.XAudio2.VoiceSendDescriptors"/> structure references to destination voices. If pSendList is NULL, the voice will send its output to the current mastering voice. To set the voice to not send its output anywhere set the OutputCount member of <see cref="T:SharpDX.XAudio2.VoiceSendDescriptors"/> to 0. All of the voices in a send list must have the same input sample rate, see {{XAudio2 Sample Rate Conversions}} for additional information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputVoices([In, Optional] const XAUDIO2_VOICE_SENDS* pSendList)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectChain(System.Nullable{SharpDX.XAudio2.EffectChain})">
            <summary>	
            Replaces the effect chain of the voice.	
            </summary>	
            <param name="effectChainRef">[in, optional]  Pointer to an <see cref="T:SharpDX.XAudio2.EffectChain"/> structure that describes the new effect chain to use. If NULL is passed, the current effect chain is removed. Note If pEffectChain is non-NULL, the <see cref="T:SharpDX.XAudio2.EffectChain"/> structure that it points to must specify at least one effect. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectChain([In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.EnableEffect(System.Int32,System.Int32)">
            <summary>	
            Enables the effect at a given position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::EnableEffect([None] int EffectIndex,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.DisableEffect(System.Int32,System.Int32)">
            <summary>	
            Disables the effect at a given position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::DisableEffect([None] int EffectIndex,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetEffectState(System.Int32,System.Int32@)">
            <summary>	
            Returns the running state of the effect at a specified position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <param name="enabledRef">[out]  Returns TRUE If the effect is enabled. If the effect is disabled, returns FALSE. </param>
            <unmanaged>void IXAudio2Voice::GetEffectState([None] int EffectIndex,[Out] BOOL* pEnabled)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectParameters(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="arametersRef">[in]  Returns the current values of the effect-specific parameters. </param>
            <param name="parametersByteSize">[in]  Size of the pParameters array in bytes. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview  for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] int EffectIndex,[In, Buffer] const void* pParameters,[None] int ParametersByteSize,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetEffectParameters(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Returns the current effect-specific parameters of a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="arametersRef">[out]  Returns the current values of the effect-specific parameters. </param>
            <param name="parametersByteSize">[out]  Size, in bytes, of the pParameters array. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::GetEffectParameters([None] int EffectIndex,[Out, Buffer] void* pParameters,[None] int ParametersByteSize)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetFilterParameters(SharpDX.XAudio2.FilterParameters,System.Int32)">
            <summary>	
            Sets the voice's filter parameters.	
            </summary>	
            <param name="arametersRef">[in]  Pointer to an <see cref="T:SharpDX.XAudio2.FilterParameters"/> structure containing the filter information. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetFilterParameters([In] const XAUDIO2_FILTER_PARAMETERS* pParameters,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetFilterParameters(SharpDX.XAudio2.FilterParameters@)">
            <summary>	
            Gets the voice's filter parameters.	
            </summary>	
            <param name="arametersRef">[out]  Pointer to an <see cref="T:SharpDX.XAudio2.FilterParameters"/> structure containing the filter information. </param>
            <unmanaged>void IXAudio2Voice::GetFilterParameters([Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputFilterParameters(SharpDX.XAudio2.Voice,SharpDX.XAudio2.FilterParameters,System.Int32)">
            <summary>	
            Sets the filter parameters on one of this voice's sends.	
            </summary>	
            <param name="destinationVoiceRef">[in]  <see cref="T:SharpDX.XAudio2.Voice"/> reference to the destination voice of the send whose filter parameters will be set. </param>
            <param name="arametersRef">[in]  Pointer to an <see cref="T:SharpDX.XAudio2.FilterParameters"/> structure containing the filter information. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputFilterParameters([In, Optional] IXAudio2Voice* pDestinationVoice,[In] const XAUDIO2_FILTER_PARAMETERS* pParameters,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetOutputFilterParameters(SharpDX.XAudio2.Voice,SharpDX.XAudio2.FilterParameters@)">
            <summary>	
            Returns the filter parameters from one of this voice's sends.	
            </summary>	
            <param name="destinationVoiceRef">[in]  <see cref="T:SharpDX.XAudio2.Voice"/> reference to the destination voice of the send whose filter parameters will be read. </param>
            <param name="arametersRef">[out]  Pointer to an <see cref="T:SharpDX.XAudio2.FilterParameters"/> structure containing the filter information. </param>
            <unmanaged>void IXAudio2Voice::GetOutputFilterParameters([In, Optional] IXAudio2Voice* pDestinationVoice,[Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetVolume(System.Single,System.Int32)">
            <summary>	
            Sets the overall volume level for the voice.	
            </summary>	
            <param name="volume">[in]  Overall volume level to use. See Remarks for more information on volume levels. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetVolume([None] float Volume,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetVolume(System.Single@)">
            <summary>	
            Gets the current overall volume level of the voice.	
            </summary>	
            <param name="volumeRef">[out]  Returns the current overall volume level of the voice. See Remarks for more information on volume levels. </param>
            <unmanaged>void IXAudio2Voice::GetVolume([Out] float* pVolume)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetChannelVolumes(System.Int32,System.Single[],System.Int32)">
            <summary>	
            Sets the volume levels for the voice, per channel.	
            </summary>	
            <param name="channels">[in]  Number of channels in the voice. </param>
            <param name="volumesRef">[in]  Array containing the new volumes of each channel in the voice.  The array must have Channels elements.  See Remarks for more information on  volume levels. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetChannelVolumes([None] int Channels,[In, Buffer] const float* pVolumes,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetChannelVolumes(System.Int32,System.Single[])">
            <summary>	
            Returns the volume levels for the voice, per channel.	
            </summary>	
            <param name="channels">[in]  Confirms the channel count of the voice. </param>
            <param name="volumesRef">[out]  Returns the current volume level of each channel in the voice. The array must have at least Channels elements. See  Remarks for more information on volume levels.  </param>
            <unmanaged>void IXAudio2Voice::GetChannelVolumes([None] int Channels,[Out, Buffer] float* pVolumes)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputMatrix(SharpDX.XAudio2.Voice,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>	
            Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
            </summary>	
            <param name="destinationVoiceRef">[in]  Pointer to a destination <see cref="T:SharpDX.XAudio2.Voice"/> for which to set volume levels. Note If the voice sends to a single target voice then specifying NULL will cause SetOutputMatrix to operate on that target voice. </param>
            <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
            <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
            <param name="levelMatrixRef">[in]  Array of [SourceChannels ? DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is specified in the form pLevelMatrix[SourceChannels ? D + S]. For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels?but is absent from the center and low-frequency channels?the matrix might have the values shown in the following table.  OutputLeft InputRight Input Left1.00.0 Right0.01.0 Front Center0.00.0 LFE0.00.0 Rear Left0.80.0 Rear Right0.00.8  Note that the left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels. See Remarks for more information on volume levels. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] int SourceChannels,[None] int DestinationChannels,[In, Buffer] const float* pLevelMatrix,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetOutputMatrix(SharpDX.XAudio2.Voice,System.Int32,System.Int32,System.Single[])">
            <summary>	
            Gets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
            </summary>	
            <param name="destinationVoiceRef">[in]  Pointer specifying the destination <see cref="T:SharpDX.XAudio2.Voice"/> to retrieve the output matrix for. Note If the voice sends to a single target voice then specifying NULL will cause GetOutputMatrix to operate on that target voice. </param>
            <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
            <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
            <param name="levelMatrixRef">[out]  Array of [SourceChannels * DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is returned in the form pLevelMatrix[DestinationChannels ? S + D]. See Remarks for more information on volume levels. </param>
            <unmanaged>void IXAudio2Voice::GetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] int SourceChannels,[None] int DestinationChannels,[Out, Buffer] float* pLevelMatrix)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.DestroyVoice">
            <summary>	
            Destroys the voice. If necessary, stops the voice and removes it from the XAudio2 graph.	
            </summary>	
            <unmanaged>void IXAudio2Voice::DestroyVoice()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.EnableEffect(System.Int32)">
            <summary>	
            Enables the effect at a given position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::EnableEffect([None] UINT32 EffectIndex,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.DisableEffect(System.Int32)">
            <summary>	
            Disables the effect at a given position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::DisableEffect([None] UINT32 EffectIndex,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.IsEffectEnabled(System.Int32)">
            <summary>	
            Returns the running state of the effect at a specified position in the effect chain of the voice.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
            <returns>Returns TRUE If the effect is enabled. If the effect is disabled, returns FALSE.</returns>
            <unmanaged>void IXAudio2Voice::GetEffectState([None] UINT32 EffectIndex,[Out] BOOL* pEnabled)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetEffectParameters``1(System.Int32)">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <returns>Returns the current values of the effect-specific parameters.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] UINT32 EffectIndex,[In, Buffer] const void* pParameters,[None] UINT32 ParametersByteSize,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.GetEffectParameters(System.Int32,System.Byte[])">
            <summary>	
            Returns the current effect-specific parameters of a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="effectParameters">[out]  Returns the current values of the effect-specific parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::GetEffectParameters([None] UINT32 EffectIndex,[Out, Buffer] void* pParameters,[None] UINT32 ParametersByteSize)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectParameters(System.Int32,System.Byte[])">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="effectParameter">[in]  Returns the current values of the effect-specific parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] UINT32 EffectIndex,[In, Buffer] const void* pParameters,[None] UINT32 ParametersByteSize,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectParameters(System.Int32,System.Byte[],System.Int32)">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="effectParameter">[in]  Returns the current values of the effect-specific parameters. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview  for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] UINT32 EffectIndex,[In, Buffer] const void* pParameters,[None] UINT32 ParametersByteSize,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectParameters``1(System.Int32,``0)">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="effectParameter">[in]  Returns the current values of the effect-specific parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] UINT32 EffectIndex,[In, Buffer] const void* pParameters,[None] UINT32 ParametersByteSize,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectParameters``1(System.Int32,``0,System.Int32)">
            <summary>	
            Sets parameters for a given effect in the voice's effect chain.	
            </summary>	
            <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
            <param name="effectParameter">[in]  Returns the current values of the effect-specific parameters. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview  for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] UINT32 EffectIndex,[In, Buffer] const void* pParameters,[None] UINT32 ParametersByteSize,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetEffectChain(SharpDX.XAudio2.EffectDescriptor[])">
            <summary>	
            Replaces the effect chain of the voice.	
            </summary>	
            <param name="effectDescriptors">[in, optional]  an array of <see cref="T:SharpDX.XAudio2.EffectDescriptor"/> structure that describes the new effect chain to use. If NULL is passed, the current effect chain is removed. If array is non null, its length must be at least of 1. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetEffectChain([In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputVoices(SharpDX.XAudio2.VoiceSendDescriptor[])">
            <summary>	
            Designates a new set of submix or mastering voices to receive the output of the voice.	
            </summary>	
            <param name="outputVoices">[in]  Array of <see cref="T:SharpDX.XAudio2.VoiceSendDescriptor"/> structure pointers to destination voices. If outputVoices is NULL, the voice will send its output to the current mastering voice. To set the voice to not send its output anywhere set an array of lenvth 0. All of the voices in a send list must have the same input sample rate, see {{XAudio2 Sample Rate Conversions}} for additional information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputVoices([In, Optional] const XAUDIO2_VOICE_SENDS* pSendList)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputMatrix(System.Int32,System.Int32,System.Single[])">
            <summary>	
            Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
            </summary>	
            <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
            <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
            <param name="levelMatrixRef">[in]  Array of [SourceChannels ? DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is specified in the form pLevelMatrix[SourceChannels ? D + S]. For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels?but is absent from the center and low-frequency channels?the matrix might have the values shown in the following table.  OutputLeft InputRight Input Left1.00.0 Right0.01.0 Front Center0.00.0 LFE0.00.0 Rear Left0.80.0 Rear Right0.00.8  Note that the left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels. See Remarks for more information on volume levels. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] UINT32 SourceChannels,[None] UINT32 DestinationChannels,[In, Buffer] const float* pLevelMatrix,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputMatrix(SharpDX.XAudio2.Voice,System.Int32,System.Int32,System.Single[])">
            <summary>	
            Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
            </summary>	
            <param name="destinationVoiceRef">[in]  Pointer to a destination <see cref="T:SharpDX.XAudio2.Voice"/> for which to set volume levels. Note If the voice sends to a single target voice then specifying NULL will cause SetOutputMatrix to operate on that target voice. </param>
            <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
            <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
            <param name="levelMatrixRef">[in]  Array of [SourceChannels ? DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is specified in the form pLevelMatrix[SourceChannels ? D + S]. For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels?but is absent from the center and low-frequency channels?the matrix might have the values shown in the following table.  OutputLeft InputRight Input Left1.00.0 Right0.01.0 Front Center0.00.0 LFE0.00.0 Rear Left0.80.0 Rear Right0.00.8  Note that the left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels. See Remarks for more information on volume levels. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] UINT32 SourceChannels,[None] UINT32 DestinationChannels,[In, Buffer] const float* pLevelMatrix,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.Voice.SetOutputMatrix(System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>	
            Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
            </summary>	
            <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
            <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
            <param name="levelMatrixRef">[in]  Array of [SourceChannels ? DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is specified in the form pLevelMatrix[SourceChannels ? D + S]. For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels?but is absent from the center and low-frequency channels?the matrix might have the values shown in the following table.  OutputLeft InputRight Input Left1.00.0 Right0.01.0 Front Center0.00.0 LFE0.00.0 Rear Left0.80.0 Rear Right0.00.8  Note that the left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels. See Remarks for more information on volume levels. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2Voice::SetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] UINT32 SourceChannels,[None] UINT32 DestinationChannels,[In, Buffer] const float* pLevelMatrix,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.Voice.VoiceDetails">
            <summary>	
            Returns information about the creation flags, input channels, and sample rate of a voice.	
            </summary>	
            <unmanaged>void IXAudio2Voice::GetVoiceDetails([Out] XAUDIO2_VOICE_DETAILS* pVoiceDetails)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.Voice.OutputVoices">
            <summary>	
            Designates a new set of submix or mastering voices to receive the output of the voice.	
            </summary>	
            <unmanaged>HRESULT IXAudio2Voice::SetOutputVoices([In, Optional] const XAUDIO2_VOICE_SENDS* pSendList)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.Voice.FilterParameters">
            <summary>	
            Gets the voice's filter parameters.	
            </summary>	
            <unmanaged>void IXAudio2Voice::GetFilterParameters([Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.Voice.Volume">
            <summary>	
            Gets the current overall volume level of the voice.	
            </summary>	
            <unmanaged>void IXAudio2Voice::GetVolume([Out] float* pVolume)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.SourceVoice">
            <summary>	
            A source voice is used to submit audio data into the XAudio2 processing pipeline. Voice data must be sent to a mastering voice to be heard, either directly or through intermediate submix voices.	
            </summary>	
            <unmanaged>IXAudio2SourceVoice</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.SourceVoice"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.Start(System.Int32,System.Int32)">
            <summary>	
            Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering voices, or to the output device.	
            </summary>	
            <param name="flags">[in]  Flags that control how the voice is started. Must be 0. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::Start([None] int Flags,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.Stop(SharpDX.XAudio2.PlayFlags,System.Int32)">
            <summary>	
            Stops consumption of audio by the current voice.	
            </summary>	
            <param name="flags">[in]  Flags that control how the voice is stopped. Can be 0 or the following: ValueDescriptionXAUDIO2_PLAY_TAILSContinue emitting effect output after the voice is stopped.? </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the  {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::Stop([None] XAUDIO2_PLAY_FLAGS Flags,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer(SharpDX.XAudio2.AudioBuffer@,System.Nullable{SharpDX.XAudio2.BufferWma})">
            <summary>	
            Adds a new audio buffer to the voice queue.	
            </summary>	
            <param name="bufferRef">[in]  Pointer to an <see cref="T:SharpDX.XAudio2.AudioBuffer"/> structure to queue. </param>
            <param name="bufferWMARef">[in]  Pointer to an additional <see cref="T:SharpDX.XAudio2.BufferWma"/> structure used when  submitting WMA data. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::SubmitSourceBuffer([In] const XAUDIO2_BUFFER* pBuffer,[In, Optional] const XAUDIO2_BUFFER_WMA* pBufferWMA)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.FlushSourceBuffers">
            <summary>	
            Removes all pending audio buffers from the voice queue.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::FlushSourceBuffers()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.Discontinuity">
            <summary>	
            Notifies an XAudio2 voice that no more buffers are coming after the last one that is currently in its queue.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::Discontinuity()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.ExitLoop(System.Int32)">
            <summary>	
            Stops looping the voice when it reaches the end of the current loop region.	
            </summary>	
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::ExitLoop([None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.GetState(SharpDX.XAudio2.VoiceState@)">
            <summary>	
            Returns the voice's current cursor position data.	
            </summary>	
            <param name="voiceStateRef">Pointer to an <see cref="T:SharpDX.XAudio2.VoiceState"/> structure containing the state of the voice. </param>
            <unmanaged>void IXAudio2SourceVoice::GetState([Out] XAUDIO2_VOICE_STATE* pVoiceState)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.SetFrequencyRatio(System.Single,System.Int32)">
            <summary>	
            Sets the frequency adjustment ratio of the voice.	
            </summary>	
            <param name="ratio">[in]  Frequency adjustment ratio. This value must be between XAUDIO2_MIN_FREQ_RATIO and the MaxFrequencyRatio parameter specified when the voice was created (see <see cref="M:SharpDX.XAudio2.XAudio2.CreateSourceVoice_(SharpDX.XAudio2.SourceVoice@,SharpDX.Multimedia.WaveFormat@,SharpDX.XAudio2.VoiceFlags,System.Single,System.IntPtr,System.Nullable{SharpDX.XAudio2.VoiceSendDescriptors},System.Nullable{SharpDX.XAudio2.EffectChain})"/>). XAUDIO2_MIN_FREQ_RATIO currently is 0.0005, which allows pitch to be lowered by up to 11 octaves. </param>
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::SetFrequencyRatio([None] float Ratio,[None] int OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.GetFrequencyRatio(System.Single@)">
            <summary>	
            Returns the frequency adjustment ratio of the voice.	
            </summary>	
            <param name="ratioRef">[out]  Returns the current frequency adjustment ratio if successful. </param>
            <unmanaged>void IXAudio2SourceVoice::GetFrequencyRatio([Out] float* pRatio)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.SetSourceSampleRate(System.Int32)">
            <summary>	
            Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was created.	
            </summary>	
            <param name="newSourceSampleRate">[in]  The new sample rate the voice should process submitted data at. Valid sample rates are 1kHz to 200kHz. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::SetSourceSampleRate([None] int NewSourceSampleRate)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.Multimedia.WaveFormat)">
            <summary>	
            Creates and configures a source voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="sourceFormat">[in]  Pointer to a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="T:SharpDX.Multimedia.WaveFormat"/> have a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] UINT32 Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.Multimedia.WaveFormat,SharpDX.XAudio2.VoiceFlags)">
            <summary>	
            Creates and configures a source voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="sourceFormat">[in]  Pointer to a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="T:SharpDX.Multimedia.WaveFormat"/> have a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
            <param name="flags">[in]  Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following: ValueDescriptionXAUDIO2_VOICE_NOPITCHNo pitch control is available on the voice.?XAUDIO2_VOICE_NOSRCNo sample rate conversion is available on the voice, the voice's  outputs must have the same sample rate.Note The XAUDIO2_VOICE_NOSRC flag causes the voice to behave as though the XAUDIO2_VOICE_NOPITCH flag also is specified. ?XAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.?XAUDIO2_VOICE_MUSICThe voice is used to play background music. The system automatically  can replace the voice with music selected by the user.? </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] UINT32 Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.Multimedia.WaveFormat,SharpDX.XAudio2.VoiceFlags,System.Single)">
            <summary>	
            Creates and configures a source voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="sourceFormat">[in]  Pointer to a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="T:SharpDX.Multimedia.WaveFormat"/> have a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
            <param name="flags">[in]  Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following: ValueDescriptionXAUDIO2_VOICE_NOPITCHNo pitch control is available on the voice.?XAUDIO2_VOICE_NOSRCNo sample rate conversion is available on the voice, the voice's  outputs must have the same sample rate.Note The XAUDIO2_VOICE_NOSRC flag causes the voice to behave as though the XAUDIO2_VOICE_NOPITCH flag also is specified. ?XAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.?XAUDIO2_VOICE_MUSICThe voice is used to play background music. The system automatically  can replace the voice with music selected by the user.? </param>
            <param name="maxFrequencyRatio">[in]  Highest allowable frequency ratio that can be set on this voice. The value for this argument must be between XAUDIO2_MIN_FREQ_RATIO and XAUDIO2_MAX_FREQ_RATIO. Subsequent calls to <see cref="M:SharpDX.XAudio2.SourceVoice.SetFrequencyRatio(System.Single,System.Int32)"/> are clamped between XAUDIO2_MIN_FREQ_RATIO and MaxFrequencyRatio. The maximum value for this argument is defined as XAUDIO2_MAX_FREQ_RATIO, which allows pitch to be raised by up to 10 octaves. If MaxFrequencyRatio is less than 1.0, the voice will use that ratio immediately after being created (rather than the default of 1.0). Xbox 360  For XMA voices there is an additional restriction on the MaxFrequencyRatio argument and the voice's sample rate. The product of these two numbers cannot exceed XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO for one-channel voices or XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL for voices with any other number of channels. If the value specified for MaxFrequencyRatio is too high for the specified format, the call to CreateSourceVoice fails and produces a debug message.  Note XAudio2's memory usage can be reduced by using the lowest possible MaxFrequencyRatio value. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] UINT32 Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.Multimedia.WaveFormat,SharpDX.XAudio2.VoiceFlags,System.Single,SharpDX.XAudio2.VoiceCallback)">
            <summary>	
            Creates and configures a source voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="sourceFormat">[in]  Pointer to a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="T:SharpDX.Multimedia.WaveFormat"/> have a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
            <param name="flags">[in]  Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following: ValueDescriptionXAUDIO2_VOICE_NOPITCHNo pitch control is available on the voice.?XAUDIO2_VOICE_NOSRCNo sample rate conversion is available on the voice, the voice's  outputs must have the same sample rate.Note The XAUDIO2_VOICE_NOSRC flag causes the voice to behave as though the XAUDIO2_VOICE_NOPITCH flag also is specified. ?XAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.?XAUDIO2_VOICE_MUSICThe voice is used to play background music. The system automatically  can replace the voice with music selected by the user.? </param>
            <param name="maxFrequencyRatio">[in]  Highest allowable frequency ratio that can be set on this voice. The value for this argument must be between XAUDIO2_MIN_FREQ_RATIO and XAUDIO2_MAX_FREQ_RATIO. Subsequent calls to <see cref="M:SharpDX.XAudio2.SourceVoice.SetFrequencyRatio(System.Single,System.Int32)"/> are clamped between XAUDIO2_MIN_FREQ_RATIO and MaxFrequencyRatio. The maximum value for this argument is defined as XAUDIO2_MAX_FREQ_RATIO, which allows pitch to be raised by up to 10 octaves. If MaxFrequencyRatio is less than 1.0, the voice will use that ratio immediately after being created (rather than the default of 1.0). Xbox 360  For XMA voices there is an additional restriction on the MaxFrequencyRatio argument and the voice's sample rate. The product of these two numbers cannot exceed XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO for one-channel voices or XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL for voices with any other number of channels. If the value specified for MaxFrequencyRatio is too high for the specified format, the call to CreateSourceVoice fails and produces a debug message.  Note XAudio2's memory usage can be reduced by using the lowest possible MaxFrequencyRatio value. </param>
            <param name="callback">[in, optional]  Pointer to a client-provided callback interface, <see cref="T:SharpDX.XAudio2.VoiceCallback"/>. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] UINT32 Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.Start">
            <summary>	
            Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering voices, or to the output device, with CommitNow changes.
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::Start([None] UINT32 Flags,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SourceVoice.Start(System.Int32)">
            <summary>	
            Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering voices, or to the output device.	
            </summary>	
            <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2SourceVoice::Start([None] UINT32 Flags,[None] UINT32 OperationSet)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.SourceVoice.State">
            <summary>	
            Returns the voice's current cursor position data.	
            </summary>	
            <unmanaged>void IXAudio2SourceVoice::GetState([Out] XAUDIO2_VOICE_STATE* pVoiceState)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.SourceVoice.FrequencyRatio">
            <summary>	
            Returns the frequency adjustment ratio of the voice.	
            </summary>	
            <unmanaged>void IXAudio2SourceVoice::GetFrequencyRatio([Out] float* pRatio)</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.SourceVoice.SourceSampleRate">
            <summary>	
            Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was created.	
            </summary>	
            <unmanaged>HRESULT IXAudio2SourceVoice::SetSourceSampleRate([None] int NewSourceSampleRate)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.SubmixVoice">
            <summary>	
            A submix voice is used primarily for performance improvements and effects processing. Data buffers cannot be submitted directly to submix voices and will not be audible unless submitted to a mastering voice. A submix voice can be used to ensure that a particular set of voice data is converted to the same format and/or to have a particular effect chain processed on the collective result.	
            </summary>	
            <unmanaged>IXAudio2SubmixVoice</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SubmixVoice.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.SubmixVoice"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.XAudio2.SubmixVoice.#ctor(SharpDX.XAudio2.XAudio2)">
            <summary>	
            Creates and configures a mastering voice on the default audio device, with stereo channels at 44100Hz.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SubmixVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32)">
            <summary>	
            Creates and configures a mastering voice on the default audio device and 44100Hz.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SubmixVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32,System.Int32)">
            <summary>	
            Creates and configures a mastering voice on the default audio device.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of the mastering voice. This rate must be a multiple of XAUDIO2_QUANTUM_DENOMINATOR. InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. InputSampleRate can be set to XAUDIO2_DEFAULT_SAMPLERATE, with the default being determined by the current platform. Windows  Windows XP defaults to 44100. Windows Vista and Windows 7 default to the setting specified in the Sound Control Panel. The default for this setting is 44100 (or 48000 if required by the driver).  Xbox 360  Defaults to 48000.  </param>
            <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.SubmixVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32,System.Int32,SharpDX.XAudio2.VoiceSendFlags,System.Int32)">
            <summary>	
            Creates and configures a submix voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels in the input audio data of the submix voice. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of submix voice. This rate must be a multiple of  XAUDIO2_QUANTUM_DENOMINATOR.  InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. </param>
            <param name="flags">[in]  Flags that specify the behavior of the submix voice. Can be 0 or the following: ValueDescriptionXAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.? </param>
            <param name="processingStage">[in]  An arbitrary number that specifies when this voice is processed with respect to other submix  voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other  voices that include a smaller ProcessingStage value, and before all other voices  that include a larger ProcessingStage value. Voices that include the same  ProcessingStage value are processed in any order. A submix voice cannot send to  another submix voice with a lower or equal ProcessingStage value; this prevents  audio being lost due to a submix cycle. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 ProcessingStage,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.MasteringVoice">
            <summary>	
            A mastering voice is used to represent the audio output device. Data buffers cannot be submitted directly to mastering voices, but data submitted to other types of voices must be directed to a mastering voice to be heard.	
            </summary>	
            <unmanaged>IXAudio2MasteringVoice</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.MasteringVoice.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.MasteringVoice"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.XAudio2.MasteringVoice.#ctor(SharpDX.XAudio2.XAudio2)">
            <summary>	
            Creates and configures a mastering voice on the default audio device, with stereo channels at 44100Hz.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.MasteringVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32)">
            <summary>	
            Creates and configures a mastering voice on the default audio device and 44100Hz.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.MasteringVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32,System.Int32)">
            <summary>	
            Creates and configures a mastering voice on the default audio device.
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of the mastering voice. This rate must be a multiple of XAUDIO2_QUANTUM_DENOMINATOR. InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. InputSampleRate can be set to XAUDIO2_DEFAULT_SAMPLERATE, with the default being determined by the current platform. Windows  Windows XP defaults to 44100. Windows Vista and Windows 7 default to the setting specified in the Sound Control Panel. The default for this setting is 44100 (or 48000 if required by the driver).  Xbox 360  Defaults to 48000.  </param>
            <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.MasteringVoice.#ctor(SharpDX.XAudio2.XAudio2,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Creates and configures a mastering voice.	
            </summary>	
            <param name="device">an instance of <see cref="T:SharpDX.XAudio2.XAudio2"/></param>
            <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
            <param name="inputSampleRate">[in]  Sample rate of the input audio data of the mastering voice. This rate must be a multiple of XAUDIO2_QUANTUM_DENOMINATOR. InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. InputSampleRate can be set to XAUDIO2_DEFAULT_SAMPLERATE, with the default being determined by the current platform. Windows  Windows XP defaults to 44100. Windows Vista and Windows 7 default to the setting specified in the Sound Control Panel. The default for this setting is 44100 (or 48000 if required by the driver).  Xbox 360  Defaults to 48000.  </param>
            <param name="deviceIndex">[in]  Index of the output device that will be sent input by the mastering voice. Specifying the default value of 0 causes XAudio2 to select the global default audio device. </param>
            <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] UINT32 InputChannels,[None] UINT32 InputSampleRate,[None] UINT32 Flags,[None] UINT32 DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceCallback">
            <summary>	
            The IXAudio2VoiceCallback interface contains methods that notify the client when certain events happen in a given <see cref="T:SharpDX.XAudio2.SourceVoice"/>. This interface should be implemented by the XAudio2 client. XAudio2 calls these methods through an interface reference provided by the client in the <see cref="M:SharpDX.XAudio2.XAudio2.CreateSourceVoice_(SharpDX.XAudio2.SourceVoice@,SharpDX.Multimedia.WaveFormat@,SharpDX.XAudio2.VoiceFlags,System.Single,System.IntPtr,System.Nullable{SharpDX.XAudio2.VoiceSendDescriptors},System.Nullable{SharpDX.XAudio2.EffectChain})"/> method. Methods in this interface return void, rather than an HRESULT.	
            </summary>	
            <unmanaged>IXAudio2VoiceCallback</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnVoiceProcessingPassStart(System.Int32)">
            <summary>	
            Called during each processing pass for each voice, just before XAudio2 reads data from the voice's buffer queue.	
            </summary>	
            <param name="bytesRequired"> The number of bytes that must be submitted immediately to avoid starvation. This allows the implementation of just-in-time streaming scenarios; the client can keep the absolute minimum data queued on the voice at all times, and pass it fresh data just before the data is required. This model provides the lowest possible latency attainable with XAudio2. For xWMA and XMA data BytesRequired will always be zero, since the concept of a frame of xWMA or XMA data is meaningless. Note In a situation where there is always plenty of data available on the source voice, BytesRequired should always report zero, because it doesn't need any samples immediately to avoid glitching. </param>
            <unmanaged>void IXAudio2VoiceCallback::OnVoiceProcessingPassStart([None] UINT32 BytesRequired)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnVoiceProcessingPassEnd">
            <summary>	
            Called just after the processing pass for the voice ends.	
            </summary>	
            <unmanaged>void IXAudio2VoiceCallback::OnVoiceProcessingPassEnd()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnStreamEnd">
            <summary>	
            Called when the voice has just finished playing a contiguous audio stream.	
            </summary>	
            <unmanaged>void IXAudio2VoiceCallback::OnStreamEnd()</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnBufferStart(System.IntPtr)">
            <summary>	
            Called when the voice is about to start processing a new audio buffer.	
            </summary>	
            <param name="context"> Context pointer that was assigned to the pContext member of the <see cref="T:SharpDX.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
            <unmanaged>void IXAudio2VoiceCallback::OnBufferStart([None] void* pBufferContext)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnBufferEnd(System.IntPtr)">
            <summary>	
            Called when the voice finishes processing a buffer.	
            </summary>	
            <param name="context"> Context pointer assigned to the pContext member of the <see cref="T:SharpDX.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
            <unmanaged>void IXAudio2VoiceCallback::OnBufferEnd([None] void* pBufferContext)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnLoopEnd(System.IntPtr)">
            <summary>	
            Called when the voice reaches the end position of a loop.	
            </summary>	
            <param name="context"> Context pointer that was assigned to the pContext member of the <see cref="T:SharpDX.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
            <unmanaged>void IXAudio2VoiceCallback::OnLoopEnd([None] void* pBufferContext)</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceCallback.OnVoiceError(System.IntPtr,SharpDX.Result)">
            <summary>	
            Called when a critical error occurs during voice processing.	
            </summary>	
            <param name="context"> Context pointer that was assigned to the pContext member of the <see cref="T:SharpDX.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
            <param name="error"> The HRESULT code of the error encountered. </param>
            <unmanaged>void IXAudio2VoiceCallback::OnVoiceError([None] void* pBufferContext,[None] HRESULT Error)</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.DeviceDetails">
            <summary>	
            Provides information about an audio device.	
            </summary>	
            <unmanaged>XAUDIO2_DEVICE_DETAILS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceDetails.DeviceID">
            <summary>	
            String identifier for the audio device. 	
            </summary>	
            <unmanaged>wchar_t DeviceID[256]</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceDetails.DisplayName">
            <summary>	
            Friendly name, which is suitable for display to the user. 	
            </summary>	
            <unmanaged>wchar_t DisplayName[256]</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceDetails.Role">
            <summary>	
            Roles are assigned by the user, and specify which audio scenarios use the device as a default device. See the <see cref="T:SharpDX.XAudio2.DeviceRole"/> enumeration for details. 	
            </summary>	
            <unmanaged>XAUDIO2_DEVICE_ROLE Role</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DeviceDetails.OutputFormat">
            <summary>	
            <see cref="T:SharpDX.Multimedia.WaveFormatExtensible"/> structure that describes the device's native PCM audio format. 	
            </summary>	
            <unmanaged>WAVEFORMATEXTENSIBLE OutputFormat</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceDetails">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_DETAILS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceDetails.CreationFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int CreationFlags</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceDetails.InputChanneCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int InputChannels</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceDetails.InputSampleRate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int InputSampleRate</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceSendDescriptor">
            <summary>	
            Defines a destination voice that is the target of a send from another voice and specifies whether a filter should be used.	
            </summary>	
            <unmanaged>XAUDIO2_SEND_DESCRIPTOR</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendDescriptor.Flags">
            <summary>	
            Indicates whether a filter should be used on data sent to the voice pointed to by pOutputVoice.   Flags can be 0 or XAUDIO2_SEND_USEFILTER. 	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_SEND_FLAGS Flags</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendDescriptor.OutputVoicePointer">
            <summary>	
            A reference to an <see cref="T:SharpDX.XAudio2.Voice"/> that will be the target of the send.   The pOutputVoice member cannot be NULL. 	
            </summary>	
            <unmanaged>IXAudio2Voice* pOutputVoice</unmanaged>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceSendDescriptor.#ctor(SharpDX.XAudio2.Voice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.VoiceSendDescriptor"/> struct.
            </summary>
            <param name="outputVoice">The output voice.</param>
        </member>
        <member name="M:SharpDX.XAudio2.VoiceSendDescriptor.#ctor(SharpDX.XAudio2.VoiceSendFlags,SharpDX.XAudio2.Voice)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.VoiceSendDescriptor"/> struct.
            </summary>
            <param name="flags">The send flags.</param>
            <param name="outputVoice">The output voice.</param>
        </member>
        <member name="P:SharpDX.XAudio2.VoiceSendDescriptor.OutputVoice">
            <summary>
            Gets or sets the output voice. This parameter cannot be null.
            </summary>
            <value>The output voice.</value>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceSendDescriptors">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_SENDS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendDescriptors.SendCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int SendCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceSendDescriptors.SendPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_SEND_DESCRIPTOR* pSends</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.EffectChain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_EFFECT_CHAIN</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.EffectChain.EffectCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int EffectCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.EffectChain.EffectDescriptorPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_EFFECT_DESCRIPTOR* pEffectDescriptors</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.FilterParameters">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_FILTER_PARAMETERS</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterParameters.Type">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_FILTER_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterParameters.Frequency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float Frequency</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.FilterParameters.OneOverQ">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float OneOverQ</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.BufferWma">
            <summary>	
            Used with <see cref="M:SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer(SharpDX.XAudio2.AudioBuffer@,System.Nullable{SharpDX.XAudio2.BufferWma})"/> when submitting xWMA data.	
            </summary>	
            <unmanaged>XAUDIO2_BUFFER_WMA</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.BufferWma.DecodedPacketCumulativeBytesPointer">
            <summary>	
            Decoded packet cumulative data size array, each element is the number of bytes accumulated  after the corresponding xWMA packet is decoded in order, must have PacketCount elements. 	
            </summary>	
            <unmanaged>const int* pDecodedPacketCumulativeBytes</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.BufferWma.PacketCount">
            <summary>	
            Number of xWMA packets submitted, must be &gt;= 1 and divide evenly into  the respective {{XAUDIO2_BUFFER.AudioBytes}} value passed to  <see cref="M:SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer(SharpDX.XAudio2.AudioBuffer@,System.Nullable{SharpDX.XAudio2.BufferWma})"/>. 	
            </summary>	
            <unmanaged>int PacketCount</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceState">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_VOICE_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceState.Context">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void* pCurrentBufferContext</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceState.BuffersQueued">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int BuffersQueued</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.VoiceState.SamplesPlayed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>__int64 SamplesPlayed</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.PerformanceData">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_PERFORMANCE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.AudioCyclesSinceLastQuery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>__int64 AudioCyclesSinceLastQuery</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.TotalCyclesSinceLastQuery">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>__int64 TotalCyclesSinceLastQuery</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.MinimumCyclesPerQuantum">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int MinimumCyclesPerQuantum</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.MaximumCyclesPerQuantum">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int MaximumCyclesPerQuantum</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.MemoryUsageInBytes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int MemoryUsageInBytes</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.CurrentLatencyInSamples">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int CurrentLatencyInSamples</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.GlitchesSinceEngineStarted">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int GlitchesSinceEngineStarted</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveSourceVoiceCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveSourceVoiceCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.TotalSourceVoiceCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int TotalSourceVoiceCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveSubmixVoiceCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveSubmixVoiceCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveResamplerCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveResamplerCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveMatrixMixCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveMatrixMixCount</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveXmaSourceVoices">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveXmaSourceVoices</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.PerformanceData.ActiveXmaStreams">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int ActiveXmaStreams</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.DebugConfiguration">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>XAUDIO2_DEBUG_CONFIGURATION</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DebugConfiguration.TraceMask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int TraceMask</unmanaged>
        </member>
        <member name="F:SharpDX.XAudio2.DebugConfiguration.BreakMask">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int BreakMask</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.DebugConfiguration.LogThreadID">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL LogThreadID</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.DebugConfiguration.LogFileline">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL LogFileline</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.DebugConfiguration.LogFunctionName">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL LogFunctionName</unmanaged>
        </member>
        <member name="P:SharpDX.XAudio2.DebugConfiguration.LogTiming">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL LogTiming</unmanaged>
        </member>
        <member name="T:SharpDX.XAudio2.VoiceCallBackImpl">
            <summary>
            Internal VoiceCallback Callback Impl
            </summary>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.Reverb">
            <summary>
            A Reverb XAudio2 AudioProcessor.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.Fx.Reverb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.Fx.Reverb"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.Fx.Reverb.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.Fx.Reverb"/> class.
            </summary>
        </member>
        <member name="T:SharpDX.XAudio2.Fx.VolumeMeter">
            <summary>
            A VolumeMeter XAudio2 AudioProcessor.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.Fx.VolumeMeter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.Fx.VolumeMeter"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.XAudio2.Fx.VolumeMeter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.XAudio2.Fx.VolumeMeter"/> class.
            </summary>
        </member>
    </members>
</doc>

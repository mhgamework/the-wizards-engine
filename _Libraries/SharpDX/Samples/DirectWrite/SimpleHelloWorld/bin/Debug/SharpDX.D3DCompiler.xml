<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.D3DCompiler</name>
    </assembly>
    <members>
        <member name="T:SharpDX.D3DCompiler.InputPrimitive">
            <summary>	
            Values that indicate how the pipeline interprets geometry or hull shader input primitives.	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetGeometryShaderSInputPrimitive"/> method returns a D3D_PRIMITIVE-typed value. 	
            </remarks>	
            <unmanaged>D3D_PRIMITIVE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.Undefined">
            <summary>	
            The shader has not been initialized with an input primitive type. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.Point">
            <summary>	
            Interpret the input primitive as a point. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.Line">
            <summary>	
            Interpret the input primitive as a line.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_LINE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.Triangle">
            <summary>	
            Interpret the input primitive as a triangle.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TRIANGLE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.LineWithAdjacency">
            <summary>	
            Interpret the input primitive as a line with adjacency data.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_LINE_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.TriangleWithAdjacency">
            <summary>	
            Interpret the input primitive as a triangle with adjacency data.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TRIANGLE_ADJ</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith1ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_1_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith2ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_2_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith3ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_3_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith4ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_4_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith5ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_5_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith6ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_6_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith7ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_7_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith8ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_8_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith9ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_9_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith10ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_10_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith11ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_11_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith12ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_12_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith13ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_13_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith14ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_14_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith15ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_15_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith16ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_16_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith17ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_17_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith18ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_18_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith19ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.  	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_19_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith20ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_20_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith21ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_21_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith22ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_22_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith23ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_23_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith24ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_24_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith25ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_25_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith26ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_26_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith27ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_27_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith28ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_28_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith29ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_29_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith30ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_30_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith31ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_31_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputPrimitive.PatchWith32ControlPoints">
            <summary>	
            Interpret the input primitive as a control point patch.   	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_32_CONTROL_POINT_PATCH</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.IncludeType">
            <summary>	
            Values that indicate the location of a shader #include file. 	
            </summary>	
            <remarks>	
            You pass a D3D_INCLUDE_TYPE-typed value to the  IncludeType parameter in a call to the  <see cref="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)"/> method to indicate the location of the #include file. 	
            </remarks>	
            <unmanaged>D3D_INCLUDE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.IncludeType.Local">
            <summary>	
            The local directory. 	
            </summary>	
            <unmanaged>D3D_INCLUDE_LOCAL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.IncludeType.System">
            <summary>	
            The system directory. 	
            </summary>	
            <unmanaged>D3D_INCLUDE_SYSTEM</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderVariableClass">
            <summary>	
            Values that identify the class of a shader variable.	
            </summary>	
            <remarks>	
            The class of a shader variable is not a programming class; the class identifies the variable class such as scalar, vector, object, and so on. D3D_SHADER_VARIABLE_CLASS-typed values are specified in the Class member of the <see cref="T:SharpDX.D3DCompiler.ShaderTypeDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SHADER_VARIABLE_CLASS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.Scalar">
            <summary>	
            The shader variable is a scalar. 	
            </summary>	
            <unmanaged>D3D_SVC_SCALAR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.Vector">
            <summary>	
            The shader variable is a vector. 	
            </summary>	
            <unmanaged>D3D_SVC_VECTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.MatrixRows">
            <summary>	
            The shader variable is a row-major matrix. 	
            </summary>	
            <unmanaged>D3D_SVC_MATRIX_ROWS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.MatrixColumns">
            <summary>	
            The shader variable is a column-major matrix. 	
            </summary>	
            <unmanaged>D3D_SVC_MATRIX_COLUMNS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.Object">
            <summary>	
            The shader variable is an object. 	
            </summary>	
            <unmanaged>D3D_SVC_OBJECT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.Struct">
            <summary>	
            The shader variable is a structure. 	
            </summary>	
            <unmanaged>D3D_SVC_STRUCT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.InterfaceClass">
            <summary>	
            The shader variable is a class. 	
            </summary>	
            <unmanaged>D3D_SVC_INTERFACE_CLASS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableClass.InterfacePointer">
            <summary>	
            The shader variable is an interface. 	
            </summary>	
            <unmanaged>D3D_SVC_INTERFACE_POINTER</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderVariableFlags">
            <summary>	
            Values that identify information about a shader variable.	
            </summary>	
            <remarks>	
            A call to the  <see cref="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription(SharpDX.D3DCompiler.ShaderVariableDescription@)"/> method returns D3D_SHADER_VARIABLE_FLAGS values in the  uFlags member of a  <see cref="T:SharpDX.D3DCompiler.ShaderVariableDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SHADER_VARIABLE_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableFlags.Userpacked">
            <summary>	
            Indicates that the registers assigned to this shader variable were explicitly declared in shader code (instead of automatically assigned by the compiler). 	
            </summary>	
            <unmanaged>D3D_SVF_USERPACKED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableFlags.Used">
            <summary>	
            Indicates that this variable is used by this shader. This value confirms that a particular shader variable (which can be common to many different shaders) is indeed used by a particular shader. 	
            </summary>	
            <unmanaged>D3D_SVF_USED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableFlags.InterfacePointer">
            <summary>	
            Indicates that this variable is an interface. 	
            </summary>	
            <unmanaged>D3D_SVF_INTERFACE_POINTER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableFlags.InterfaceParameter">
            <summary>	
            Indicates that this variable is a parameter of an interface. 	
            </summary>	
            <unmanaged>D3D_SVF_INTERFACE_PARAMETER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderVariableType">
            <summary>	
            Values that identify various data, texture, and buffer types that can be assigned to a shader variable.	
            </summary>	
            <remarks>	
            A call to the <see cref="M:SharpDX.D3DCompiler.ShaderReflectionType.GetDescription(SharpDX.D3DCompiler.ShaderTypeDescription@)"/> method returns a D3D_SHADER_VARIABLE_TYPE value in the  Type member of a  <see cref="T:SharpDX.D3DCompiler.ShaderTypeDescription"/> structure. The types in a structured buffer describe the structure of the elements in the buffer. The layout of these types generally match their C++ struct counterparts. The following examples show structured buffers: 	
            <code> struct mystruct {float4 val; uint ind;}; RWStructuredBuffer&lt;mystruct&gt; rwbuf;	
            RWStructuredBuffer&lt;float3&gt; rwbuf2; </code>	
            	
             	
            </remarks>	
            <unmanaged>D3D_SHADER_VARIABLE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Void">
            <summary>	
            The variable is a void reference. 	
            </summary>	
            <unmanaged>D3D_SVT_VOID</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Bool">
            <summary>	
            The variable is a boolean. 	
            </summary>	
            <unmanaged>D3D_SVT_BOOL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Int">
            <summary>	
            The variable is an integer. 	
            </summary>	
            <unmanaged>D3D_SVT_INT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Float">
            <summary>	
            The variable is a floating-point number. 	
            </summary>	
            <unmanaged>D3D_SVT_FLOAT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.String">
            <summary>	
            The variable is a string. 	
            </summary>	
            <unmanaged>D3D_SVT_STRING</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture">
            <summary>	
            The variable is a texture. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture1D">
            <summary>	
            The variable is a 1D texture. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture2D">
            <summary>	
            The variable is a 2D texture. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture3D">
            <summary>	
            The variable is a 3D texture. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.TextureCube">
            <summary>	
            The variable is a texture cube. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURECUBE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Sampler">
            <summary>	
            The variable is a sampler. 	
            </summary>	
            <unmanaged>D3D_SVT_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Sampler1d">
            <summary>	
            The variable is a pixel shader. 	
            </summary>	
            <unmanaged>D3D_SVT_SAMPLER1D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Sampler2d">
            <summary>	
            The variable is a vertex shader. 	
            </summary>	
            <unmanaged>D3D_SVT_SAMPLER2D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Sampler3d">
            <summary>	
            The variable is an unsigned integer. 	
            </summary>	
            <unmanaged>D3D_SVT_SAMPLER3D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Samplercube">
            <summary>	
            The variable is an 8-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D_SVT_SAMPLERCUBE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Pixelshader">
            <summary>	
            The variable is a geometry shader. 	
            </summary>	
            <unmanaged>D3D_SVT_PIXELSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Vertexshader">
            <summary>	
            The variable is a rasterizer-state object. 	
            </summary>	
            <unmanaged>D3D_SVT_VERTEXSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Pixelfragment">
            <summary>	
            The variable is a depth-stencil-state object. 	
            </summary>	
            <unmanaged>D3D_SVT_PIXELFRAGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Vertexfragment">
            <summary>	
            The variable is a blend-state object. 	
            </summary>	
            <unmanaged>D3D_SVT_VERTEXFRAGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.UInt">
            <summary>	
            The variable is a buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_UINT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.UInt8">
            <summary>	
            The variable is a constant buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_UINT8</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Geometryshader">
            <summary>	
            The variable is a texture buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_GEOMETRYSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Rasterizer">
            <summary>	
            The variable is a 1D-texture array. 	
            </summary>	
            <unmanaged>D3D_SVT_RASTERIZER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Depthstencil">
            <summary>	
            The variable is a 2D-texture array. 	
            </summary>	
            <unmanaged>D3D_SVT_DEPTHSTENCIL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Blend">
            <summary>	
            The variable is a render-target view. 	
            </summary>	
            <unmanaged>D3D_SVT_BLEND</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Buffer">
            <summary>	
            The variable is a depth-stencil view. 	
            </summary>	
            <unmanaged>D3D_SVT_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.ConstantBuffer">
            <summary>	
            The variable is a 2D-multisampled texture. 	
            </summary>	
            <unmanaged>D3D_SVT_CBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.TextureBuffer">
            <summary>	
            The variable is a 2D-multisampled-texture array. 	
            </summary>	
            <unmanaged>D3D_SVT_TBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture1DArray">
            <summary>	
            The variable is a texture-cube array. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture2DArray">
            <summary>	
            The variable holds a compiled hull-shader binary. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Rendertargetview">
            <summary>	
            The variable holds a compiled domain-shader binary. 	
            </summary>	
            <unmanaged>D3D_SVT_RENDERTARGETVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Depthstencilview">
            <summary>	
            The variable is an interface. 	
            </summary>	
            <unmanaged>D3D_SVT_DEPTHSTENCILVIEW</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture2DMultisampled">
            <summary>	
            The variable holds a compiled compute-shader binary. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE2DMS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texture2DMultisampledArray">
            <summary>	
            The variable is a double precision (64-bit) floating-point number. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURE2DMSARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Texturecubearray">
            <summary>	
            The variable is a 1D read-and-write texture. 	
            </summary>	
            <unmanaged>D3D_SVT_TEXTURECUBEARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Hullshader">
            <summary>	
            The variable is an array of 1D read-and-write textures. 	
            </summary>	
            <unmanaged>D3D_SVT_HULLSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Domainshader">
            <summary>	
            The variable is a 2D read-and-write texture. 	
            </summary>	
            <unmanaged>D3D_SVT_DOMAINSHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.InterfacePointer">
            <summary>	
            The variable is an array of 2D read-and-write textures. 	
            </summary>	
            <unmanaged>D3D_SVT_INTERFACE_POINTER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Computeshader">
            <summary>	
            The variable is a 3D read-and-write texture. 	
            </summary>	
            <unmanaged>D3D_SVT_COMPUTESHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.Double">
            <summary>	
            The variable is a read-and-write buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_DOUBLE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWTexture1D">
            <summary>	
            The variable is a byte-address buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_RWTEXTURE1D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWTexture1DArray">
            <summary>	
            The variable is a read-and-write byte-address buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_RWTEXTURE1DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWTexture2D">
            <summary>	
            The variable is a structured buffer.  For more information about structured buffer, see the Remarks section. 	
            </summary>	
            <unmanaged>D3D_SVT_RWTEXTURE2D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWTexture2DArray">
            <summary>	
            The variable is a read-and-write structured buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_RWTEXTURE2DARRAY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWTexture3D">
            <summary>	
            The variable is an append structured buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_RWTEXTURE3D</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWBuffer">
            <summary>	
            The variable is a consume structured buffer. 	
            </summary>	
            <unmanaged>D3D_SVT_RWBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.ByteaddressBuffer">
            <summary>	
            The variable is a void reference. 	
            </summary>	
            <unmanaged>D3D_SVT_BYTEADDRESS_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RWByteAddressBuffer">
            <summary>	
            The variable is a boolean. 	
            </summary>	
            <unmanaged>D3D_SVT_RWBYTEADDRESS_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.StructuredBuffer">
            <summary>	
            The variable is an integer. 	
            </summary>	
            <unmanaged>D3D_SVT_STRUCTURED_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.RwstructuredBuffer">
            <summary>	
            The variable is a floating-point number. 	
            </summary>	
            <unmanaged>D3D_SVT_RWSTRUCTURED_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.AppendStructuredBuffer">
            <summary>	
            The variable is a string. 	
            </summary>	
            <unmanaged>D3D_SVT_APPEND_STRUCTURED_BUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableType.ConsumeStructuredBuffer">
            <summary>	
            The variable is a texture. 	
            </summary>	
            <unmanaged>D3D_SVT_CONSUME_STRUCTURED_BUFFER</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderInputFlags">
            <summary>	
            Values that identify shader-input options.	
            </summary>	
            <remarks>	
            D3D_SHADER_INPUT_FLAGS-typed values are specified in the uFlags member of the <see cref="T:SharpDX.D3DCompiler.InputBindingDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SHADER_INPUT_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.Userpacked">
            <summary>	
            Assign a shader input to a register based on the register assignment in the HLSL code (instead of letting the compiler choose the register). 	
            </summary>	
            <unmanaged>D3D_SIF_USERPACKED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.ComparisonSampler">
            <summary>	
            Use a comparison sampler, which uses the {{SampleCmp (DirectX HLSL Texture Object)}} and {{SampleCmpLevelZero (DirectX HLSL Texture Object)}} sampling functions. 	
            </summary>	
            <unmanaged>D3D_SIF_COMPARISON_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.TextureComponent0">
            <summary>	
            A 2-bit value for encoding texture components. 	
            </summary>	
            <unmanaged>D3D_SIF_TEXTURE_COMPONENT_0</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.TextureComponent1">
            <summary>	
            A 2-bit value for encoding texture components. 	
            </summary>	
            <unmanaged>D3D_SIF_TEXTURE_COMPONENT_1</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.TextureComponents">
            <summary>	
            A 2-bit value for encoding texture components. 	
            </summary>	
            <unmanaged>D3D_SIF_TEXTURE_COMPONENTS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderInputType">
            <summary>	
            Values that identify resource types that can be bound to a shader and that are reflected as part of the resource description for the shader.	
            </summary>	
            <remarks>	
            D3D_SHADER_INPUT_TYPE-typed values are specified in the Type member of the <see cref="T:SharpDX.D3DCompiler.InputBindingDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SHADER_INPUT_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.ConstantBuffer">
            <summary>	
            The shader resource is a constant buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_CBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.TextureBuffer">
            <summary>	
            The shader resource is a texture buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_TBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.Texture">
            <summary>	
            The shader resource is a texture. 	
            </summary>	
            <unmanaged>D3D_SIT_TEXTURE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.Sampler">
            <summary>	
            The shader resource is a sampler. 	
            </summary>	
            <unmanaged>D3D_SIT_SAMPLER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewRwtyped">
            <summary>	
            The shader resource is a read-and-write buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_RWTYPED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.Structured">
            <summary>	
            The shader resource is a structured buffer. For more information about structured buffer, see the Remarks section. 	
            </summary>	
            <unmanaged>D3D_SIT_STRUCTURED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewRwstructured">
            <summary>	
            The shader resource is a read-and-write structured buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_RWSTRUCTURED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.Byteaddress">
            <summary>	
            The shader resource is a byte-address buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_BYTEADDRESS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewRWByteAddress">
            <summary>	
            The shader resource is a read-and-write byte-address buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_RWBYTEADDRESS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewAppendStructured">
            <summary>	
            The shader resource is an append-structured buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_APPEND_STRUCTURED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewConsumeStructured">
            <summary>	
            The shader resource is a consume-structured buffer. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_CONSUME_STRUCTURED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderInputType.UnorderedAccessViewRwstructuredWithCounter">
            <summary>	
            The shader resource is a read-and-write structured buffer that uses the built-in counter to append or consume. 	
            </summary>	
            <unmanaged>D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ConstantBufferFlags">
            <summary>	
            Values that identify the indended use of a constant-data buffer.	
            </summary>	
            <remarks>	
            D3D_SHADER_CBUFFER_FLAGS-typed values are specified in the uFlags member of the <see cref="T:SharpDX.D3DCompiler.ConstantBufferDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_SHADER_CBUFFER_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferFlags.ConstantBufferUserpacked">
            <summary>	
            Bind the constant buffer to an input slot defined in HLSL code (instead of letting the compiler choose the input slot). 	
            </summary>	
            <unmanaged>D3D_CBF_USERPACKED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ConstantBufferType">
            <summary>	
            Values that identify the intended use of constant-buffer data. 	
            </summary>	
            <unmanaged>D3D_CBUFFER_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferType.ConstantBuffer">
            <summary>	
            A buffer containing scalar constants. 	
            </summary>	
            <unmanaged>D3D_CT_CBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferType.TextureBuffer">
            <summary>	
            A buffer containing texture data. 	
            </summary>	
            <unmanaged>D3D_CT_TBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferType.InterfacePointers">
            <summary>	
            A buffer containing interface references. 	
            </summary>	
            <unmanaged>D3D_CT_INTERFACE_POINTERS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferType.ResourceBindInformation">
            <summary>	
            A buffer containing binding information. 	
            </summary>	
            <unmanaged>D3D_CT_RESOURCE_BIND_INFO</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.SystemValueType">
            <summary>	
            Values that identify shader parameters that use system-value semantics.	
            </summary>	
            <remarks>	
            The D3D_NAME values identify shader parameters that have {{predefined system-value}} semantics. These values are used in a shader-signature description. For more information about shader-signature description, see <see cref="T:SharpDX.D3DCompiler.ShaderParameterDescription"/>. 	
            </remarks>	
            <unmanaged>D3D_NAME</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.Undefined">
            <summary>	
            This parameter does not use a predefined system-value semantic. 	
            </summary>	
            <unmanaged>D3D_NAME_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.Position">
            <summary>	
            This parameter contains position data. 	
            </summary>	
            <unmanaged>D3D_NAME_POSITION</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.ClipDistance">
            <summary>	
            This parameter contains clip-distance data. 	
            </summary>	
            <unmanaged>D3D_NAME_CLIP_DISTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.CullDistance">
            <summary>	
            This parameter contains cull-distance data. 	
            </summary>	
            <unmanaged>D3D_NAME_CULL_DISTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.RenderTargetArrayIndex">
            <summary>	
            This parameter contains a render-target-array index. 	
            </summary>	
            <unmanaged>D3D_NAME_RENDER_TARGET_ARRAY_INDEX</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.ViewportArrayIndex">
            <summary>	
            This parameter contains a viewport-array index. 	
            </summary>	
            <unmanaged>D3D_NAME_VIEWPORT_ARRAY_INDEX</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.VertexId">
            <summary>	
            This parameter contains a vertex ID. 	
            </summary>	
            <unmanaged>D3D_NAME_VERTEX_ID</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.PrimitiveId">
            <summary>	
            This parameter contains a primitive ID. 	
            </summary>	
            <unmanaged>D3D_NAME_PRIMITIVE_ID</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.InstanceId">
            <summary>	
            This parameter contains an instance ID. 	
            </summary>	
            <unmanaged>D3D_NAME_INSTANCE_ID</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.IsFrontFace">
            <summary>	
            This parameter contains data that identifies whether or not the primitive faces the camera. 	
            </summary>	
            <unmanaged>D3D_NAME_IS_FRONT_FACE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.SampleIndex">
            <summary>	
            This parameter contains a sampler-array index. 	
            </summary>	
            <unmanaged>D3D_NAME_SAMPLE_INDEX</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalQuadEdgeTessfactor">
            <summary>	
            This parameter contains one of four tessellation factors that correspond to the amount of parts that a quad patch is broken into along the given edge. This flag is used to tessellate a quad patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalQuadInsideTessfactor">
            <summary>	
            This parameter contains one of two tessellation factors that correspond to the amount of parts that a quad patch is broken into vertically and horizontally within the patch. This flag is used to tessellate a quad patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalTriEdgeTessfactor">
            <summary>	
            This parameter contains one of three tessellation factors that correspond to the amount of parts that a tri patch is broken into along the given edge. This flag is used to tessellate a tri patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalTriInsideTessfactor">
            <summary>	
            This parameter contains the tessellation factor that corresponds to the amount of parts that a tri patch is broken into within the patch. This flag is used to tessellate a tri patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalLineDetailTessfactor">
            <summary>	
            This parameter contains the tessellation factor that corresponds to the number of lines broken into within the patch. This flag is used to tessellate an isolines patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.FinalLineDensityTessfactor">
            <summary>	
            This parameter contains the tessellation factor that corresponds to the number of lines that are created within the patch. This flag is used to tessellate an isolines patch. 	
            </summary>	
            <unmanaged>D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.Target">
            <summary>	
            This parameter contains render-target data. 	
            </summary>	
            <unmanaged>D3D_NAME_TARGET</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.Depth">
            <summary>	
            This parameter contains depth data. 	
            </summary>	
            <unmanaged>D3D_NAME_DEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.Coverage">
            <summary>	
            This parameter contains alpha-coverage data. 	
            </summary>	
            <unmanaged>D3D_NAME_COVERAGE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.DepthGreaterEqual">
            <summary>	
            This parameter signifies that the value is greater than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader. 	
            </summary>	
            <unmanaged>D3D_NAME_DEPTH_GREATER_EQUAL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.SystemValueType.DepthLessEqual">
            <summary>	
            This parameter signifies that the value is less than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader. 	
            </summary>	
            <unmanaged>D3D_NAME_DEPTH_LESS_EQUAL</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ResourceReturnType">
            <summary>	
            Values that identify the return type of a resource.	
            </summary>	
            <remarks>	
            A resource return type is specified in the ReturnType member of the <see cref="T:SharpDX.D3DCompiler.InputBindingDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_RESOURCE_RETURN_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.UNorm">
            <summary>	
            Return type is an unsigned integer value normalized to a value between 0 and 1. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_UNORM</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.SNorm">
            <summary>	
            Return type is a signed integer value normalized to a value between -1 and 1. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_SNORM</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.SInt">
            <summary>	
            Return type is a signed integer. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_SINT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.UInt">
            <summary>	
            Return type is an unsigned integer. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_UINT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.Float">
            <summary>	
            Return type is a floating-point number. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_FLOAT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.Mixed">
            <summary>	
            Return type is unknown. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_MIXED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.Double">
            <summary>	
            Return type is a double-precision value. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_DOUBLE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ResourceReturnType.Continued">
            <summary>	
            Return type is a multiple-dword type, such as a double or uint64, and the component is continued from the previous component that was declared.  The first component represents the lower bits. 	
            </summary>	
            <unmanaged>D3D_RETURN_TYPE_CONTINUED</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.RegisterComponentType">
            <summary>	
            Values that identify the data types that can be stored in a register.	
            </summary>	
            <remarks>	
            A register component type is specified in the ComponentType member of the <see cref="T:SharpDX.D3DCompiler.ShaderParameterDescription"/> structure. 	
            </remarks>	
            <unmanaged>D3D_REGISTER_COMPONENT_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentType.Unknown">
            <summary>	
            The data type is unknown. 	
            </summary>	
            <unmanaged>D3D_REGISTER_COMPONENT_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentType.Uint32">
            <summary>	
            32-bit unsigned integer. 	
            </summary>	
            <unmanaged>D3D_REGISTER_COMPONENT_UINT32</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentType.Sint32">
            <summary>	
            32-bit signed integer. 	
            </summary>	
            <unmanaged>D3D_REGISTER_COMPONENT_SINT32</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentType.Float32">
            <summary>	
            32-bit floating-point number. 	
            </summary>	
            <unmanaged>D3D_REGISTER_COMPONENT_FLOAT32</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.TessellatorDomain">
            <summary>	
            Values that identify domain options for tessellator data.	
            </summary>	
            <remarks>	
            The data domain defines the type of data. This enumeration is used by <see cref="T:SharpDX.D3DCompiler.ShaderDescription"/>. 	
            </remarks>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorDomain.Undefined">
            <summary>	
            The data type is undefined. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorDomain.Isoline">
            <summary>	
            Isoline data. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN_ISOLINE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorDomain.Triangle">
            <summary>	
            Triangle data. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN_TRI</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorDomain.Quad">
            <summary>	
            Quad data. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN_QUAD</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.TessellatorPartitioning">
            <summary>	
            Values that identify partitioning options.	
            </summary>	
            <remarks>	
            During tessellation, the partition option helps to determine how the algorithm chooses the next partition value; this enumeration is used by <see cref="T:SharpDX.D3DCompiler.ShaderDescription"/>. 	
            </remarks>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorPartitioning.Undefined">
            <summary>	
            The partitioning type is undefined. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorPartitioning.Integer">
            <summary>	
            Partition with integers only. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING_INTEGER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorPartitioning.PowerOfTwo">
            <summary>	
            Partition with a power-of-two number only. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING_POW2</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorPartitioning.FractionalOdd">
            <summary>	
            Partition with an odd, fractional number. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorPartitioning.FractionalEven">
            <summary>	
            Partition with an even, fractional number. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.TessellatorOutputPrimitive">
            <summary>	
            Values that identify output primitive types.	
            </summary>	
            <remarks>	
            The output primitive type determines how the tessellator output data is organized; this enumeration is used by <see cref="T:SharpDX.D3DCompiler.ShaderDescription"/>. 	
            </remarks>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_PRIMITIVE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorOutputPrimitive.Undefined">
            <summary>	
            The output primitive type is undefined. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorOutputPrimitive.Point">
            <summary>	
            The output primitive type is a point. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_POINT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorOutputPrimitive.Line">
            <summary>	
            The output primitive type is a line. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_LINE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorOutputPrimitive.TriangleClockwise">
            <summary>	
            The output primitive type is a clockwise triangle. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.TessellatorOutputPrimitive.TriangleCounterclockwise">
            <summary>	
            The output primitive type is a counter clockwise triangle. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderVersion">
            <summary>	
            Indicates shader type.	
            </summary>	
            <unmanaged>D3D11_SHADER_VERSION_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.PixelShader">
            <summary>	
            Pixel shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_PIXEL_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.VertexShader">
            <summary>	
            Vertex shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_VERTEX_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.GeometryShader">
            <summary>	
            Geometry shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_GEOMETRY_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.HullShader">
            <summary>	
            Hull shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_HULL_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.DomainShader">
            <summary>	
            Domain shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_DOMAIN_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVersion.ComputeShader">
            <summary>	
            Compute shader. 	
            </summary>	
            <unmanaged>D3D11_SHVER_COMPUTE_SHADER</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.StripFlags">
            <summary>	
            Strip flag options.	
            </summary>	
            <remarks>	
            These flags are used by <see cref="M:SharpDX.D3DCompiler.D3D.StripShader(System.IntPtr,SharpDX.Size,SharpDX.D3DCompiler.StripFlags,SharpDX.Direct3D.Blob@)"/>. 	
            </remarks>	
            <unmanaged>D3DCOMPILER_STRIP_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.StripFlags.CompilerStripReflectionData">
            <summary>	
            Remove reflection data. 	
            </summary>	
            <unmanaged>D3DCOMPILER_STRIP_REFLECTION_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.StripFlags.CompilerStripDebugInformation">
            <summary>	
            Remove debug information. 	
            </summary>	
            <unmanaged>D3DCOMPILER_STRIP_DEBUG_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.StripFlags.CompilerStripTestBlobs">
            <summary>	
            Remove test blob data. 	
            </summary>	
            <unmanaged>D3DCOMPILER_STRIP_TEST_BLOBS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.StripFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderBytecodePart">
            <summary>	
            Values that identify parts of the content of an arbitrary length data buffer.	
            </summary>	
            <remarks>	
            These values are passed to the <see cref="M:SharpDX.D3DCompiler.D3D.GetBlobPart(System.IntPtr,SharpDX.Size,SharpDX.D3DCompiler.ShaderBytecodePart,System.Int32,SharpDX.Direct3D.Blob@)"/> function. 	
            </remarks>	
            <unmanaged>D3D_BLOB_PART</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.InputSignatureBlob">
            <summary>	
            The blob part is an input signature. 	
            </summary>	
            <unmanaged>D3D_BLOB_INPUT_SIGNATURE_BLOB</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.OutputSignatureBlob">
            <summary>	
            The blob part is an output signature. 	
            </summary>	
            <unmanaged>D3D_BLOB_OUTPUT_SIGNATURE_BLOB</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.InputAndOutputSignatureBlob">
            <summary>	
            The blob part is an input and output signature. 	
            </summary>	
            <unmanaged>D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.PatchConstantSignatureBlob">
            <summary>	
            The blob part is a patch constant signature. 	
            </summary>	
            <unmanaged>D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.AllSignatureBlob">
            <summary>	
            The blob part is all signature. 	
            </summary>	
            <unmanaged>D3D_BLOB_ALL_SIGNATURE_BLOB</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.DebugInformation">
            <summary>	
            The blob part is debug information. 	
            </summary>	
            <unmanaged>D3D_BLOB_DEBUG_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.LegacyShader">
            <summary>	
            The blob part is a legacy shader. 	
            </summary>	
            <unmanaged>D3D_BLOB_LEGACY_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.XnaPrepassShader">
            <summary>	
            The blob part is an XNA prepass shader. 	
            </summary>	
            <unmanaged>D3D_BLOB_XNA_PREPASS_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.XnaShader">
            <summary>	
            The blob part is an XNA shader. 	
            </summary>	
            <unmanaged>D3D_BLOB_XNA_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.TestAlternateShader">
            <summary>	
            The blob part is a test alternate shader. Note??This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders. 	
            </summary>	
            <unmanaged>D3D_BLOB_TEST_ALTERNATE_SHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.TestCompileDetails">
            <summary>	
            The blob part is test compilation details.  Note??This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders. 	
            </summary>	
            <unmanaged>D3D_BLOB_TEST_COMPILE_DETAILS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderBytecodePart.TestCompilePerf">
            <summary>	
            The blob part is test compilation performance.  Note??This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders. 	
            </summary>	
            <unmanaged>D3D_BLOB_TEST_COMPILE_PERF</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_SHADER_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.Debug">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_DEBUG</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.SkipValidation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_SKIP_VALIDATION</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.SkipOptimization">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_SKIP_OPTIMIZATION</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.PackMatrixRowMajor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_PACK_MATRIX_ROW_MAJOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.PackMatrixColumnMajor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.PartialPrecision">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_PARTIAL_PRECISION</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.ForceVsSoftwareNoOpt">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.ForcePsSoftwareNoOpt">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.NoPreshader">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_NO_PRESHADER</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.AvoidFlowControl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_AVOID_FLOW_CONTROL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.PreferFlowControl">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_PREFER_FLOW_CONTROL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.EnableStrictness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_ENABLE_STRICTNESS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.EnableBackwardsCompatibility">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.IeeeStrictness">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_IEEE_STRICTNESS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.OptimizationLevel0">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL0</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.OptimizationLevel1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL1</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.OptimizationLevel2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL2</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.OptimizationLevel3">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL3</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.Reserved16">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_RESERVED16</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.Reserved17">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_RESERVED17</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.WarningsAreErrors">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_WARNINGS_ARE_ERRORS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.EffectFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_EFFECT_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.EffectFlags.ChildEffect">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_EFFECT_CHILD_EFFECT</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.EffectFlags.AllowSlowOperations">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.EffectFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.DisassemblyFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DCOMPILE_DISASM_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.EnableColorCode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D_DISASM_ENABLE_COLOR_CODE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.EnableDefaultValuePrints">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.EnableInstructionNumbering">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.EnableInstructionCycle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.DisableDebugInformation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D_DISASM_DISABLE_DEBUG_INFO</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.DisassemblyFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.D3D">
            <summary>
            D3D Functions.
            </summary>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.Compile(System.IntPtr,SharpDX.Size,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Compile HLSL code into bytecode for a given target.	
            </summary>	
            <param name="srcDataRef">A reference to uncompiled shader data; either ASCII HLSL code or a compiled effect. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="sourceNameRef">Optional. The name of the shader file. Use either this or pSrcData. </param>
            <param name="definesRef">Optional. An array of NULL-terminated macro definitions (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>). </param>
            <param name="includeRef">Optional. A reference to an <see cref="T:SharpDX.D3DCompiler.Include"/> for handling include files. Setting this to NULL will cause a compile error if a shader contains a #include. </param>
            <param name="entrypointRef">The name of the shader entry point function. </param>
            <param name="targetRef">The shader target or set of shader features to compile against. </param>
            <param name="flags1">Shader {{compile options}}. </param>
            <param name="flags2">Effect {{compile options}}. When you compile a shader and not an effect file, D3DCompile ignores Flags2; therefore, you can set Flags2 to zero. </param>
            <param name="codeRef">The address of a <see cref="T:SharpDX.Direct3D.Blob"/> that contains the compiled code. </param>
            <param name="errorMsgsRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains compiler error messages, or NULL if there were no errors. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DCompile([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In, Optional] const char* pSourceName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[In, Optional] ID3DInclude* pInclude,[In] const char* pEntrypoint,[In] const char* pTarget,[In] D3DCOMPILE_SHADER_FLAGS Flags1,[In] D3DCOMPILE_EFFECT_FLAGS Flags2,[Out] ID3DBlob** ppCode,[Out, Optional] ID3DBlob** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.Preprocess(System.IntPtr,SharpDX.Size,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses uncompiled HLSL code.	
            </summary>	
            <remarks>	
            D3DPreprocess outputs {{#line}} directives and preserves line numbering of source input so that output line numbering can be properly related to the input source. 	
            </remarks>	
            <param name="srcDataRef">A reference to uncompiled shader data; either ASCII HLSL code or a compiled effect. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="sourceNameRef">Optional. The name of the file that contains the uncompiled HLSL code. </param>
            <param name="definesRef">Optional. An array of NULL-terminated macro definitions (see <see cref="T:SharpDX.Direct3D.ShaderMacro"/>). </param>
            <param name="includeRef">Optional. A reference to an <see cref="T:SharpDX.D3DCompiler.Include"/> for handling include files. Setting this to NULL will cause a compile error if a shader contains a #include. </param>
            <param name="codeTextRef">The address of a <see cref="T:SharpDX.Direct3D.Blob"/> that contains the compiled code. </param>
            <param name="errorMsgsRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains compiler error messages, or NULL if there were no errors. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DPreprocess([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In, Optional] const char* pSourceName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[In, Optional] ID3DInclude* pInclude,[Out] ID3DBlob** ppCodeText,[Out, Optional] ID3DBlob** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.GetDebugInfo(System.IntPtr,SharpDX.Size,SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets shader debug information.	
            </summary>	
            <remarks>	
            Debug information is embedded in the body of the shader after calling <see cref="M:SharpDX.D3DCompiler.D3D.Compile(System.IntPtr,SharpDX.Size,System.String,SharpDX.Direct3D.ShaderMacro[],System.IntPtr,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/>. 	
            </remarks>	
            <param name="srcDataRef">A reference to source data; either uncompiled or compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="debugInfoRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains debug information. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DGetDebugInfo([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[Out] ID3DBlob** ppDebugInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.Reflect(System.IntPtr,SharpDX.Size,System.Guid,System.IntPtr@)">
            <summary>	
            Gets a reference to a reflection interface.	
            </summary>	
            <remarks>	
            Shader code contains metadata that can be inspected using the reflection APIs. The following code illustrates retrieving a ID3D11ShaderReflection Interface from a shader. 	
            <code> pd3dDevice-&gt;CreatePixelShader( pPixelShaderBuffer-&gt;GetBufferPointer(), pPixelShaderBuffer-&gt;GetBufferSize(), g_pPSClassLinkage, &amp;g_pPixelShader ); ID3D11ShaderReflection* pReflector = NULL; 	
            D3DReflect( pPixelShaderBuffer-&gt;GetBufferPointer(), pPixelShaderBuffer-&gt;GetBufferSize(),  IID_ID3D11ShaderReflection, (void**) &amp;pReflector); </code>	
            	
            </remarks>	
            <param name="srcDataRef">A reference to source data as compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="interfaceRef">The reference GUID of the COM interface to use. For example, IID_ID3D11ShaderReflection or IID_ID3D10ShaderReflection. </param>
            <param name="reflectorRef">A reference to a reflection interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DReflect([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In] GUID* pInterface,[Out] void** ppReflector)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.Disassemble(System.IntPtr,SharpDX.Size,SharpDX.D3DCompiler.DisassemblyFlags,System.String,SharpDX.Direct3D.Blob@)">
            <summary>	
            Disassembles compiled HLSL code.	
            </summary>	
            <param name="srcDataRef">A reference to source data as compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="flags">Flags affecting the behavior of D3DDisassemble.  Flags can be a combination of zero or more of the following values.   FlagDescription D3D_DISASM_ENABLE_COLOR_CODEEnable the output of color codes. D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTSEnable the output of default values. D3D_DISASM_ENABLE_INSTRUCTION_NUMBERINGEnable instruction numbering. D3D_DISASM_ENABLE_INSTRUCTION_CYCLENo effect.  ? </param>
            <param name="szComments">Optional. </param>
            <param name="disassemblyRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains assembly text. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DDisassemble([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In] D3DCOMPILE_DISASM_FLAGS Flags,[In, Optional] const char* szComments,[Out] ID3DBlob** ppDisassembly)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.Disassemble10Effect(System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Disassembles compiled HLSL code from a Direct3D10 effect.	
            </summary>	
            <param name="effectRef">A reference to source data as compiled HLSL code. </param>
            <param name="flags">Shader {{compile options}}. </param>
            <param name="disassemblyRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains disassembly text. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DDisassemble10Effect([In] ID3D10Effect* pEffect,[In] int Flags,[Out] ID3DBlob** ppDisassembly)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.GetInputSignatureBlob(System.IntPtr,SharpDX.Size,SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets the input signature from a compilation result.	
            </summary>	
            <param name="srcDataRef">A reference to source data as compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="signatureBlobRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains a compiled shader. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DGetInputSignatureBlob([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[Out] ID3DBlob** ppSignatureBlob)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.GetOutputSignatureBlob(System.IntPtr,SharpDX.Size,SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets the output signature from a compilation result.	
            </summary>	
            <param name="srcDataRef">A reference to source data as compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="signatureBlobRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains a compiled shader. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DGetOutputSignatureBlob([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[Out] ID3DBlob** ppSignatureBlob)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.GetInputAndOutputSignatureBlob(System.IntPtr,SharpDX.Size,SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets the input and output signatures from a compilation result.	
            </summary>	
            <param name="srcDataRef">A reference to source data as compiled HLSL code. </param>
            <param name="srcDataSize">Length of pSrcData. </param>
            <param name="signatureBlobRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains a compiled shader. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DGetInputAndOutputSignatureBlob([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[Out] ID3DBlob** ppSignatureBlob)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.StripShader(System.IntPtr,SharpDX.Size,SharpDX.D3DCompiler.StripFlags,SharpDX.Direct3D.Blob@)">
            <summary>	
            Removes blobs from a compilation result.	
            </summary>	
            <param name="shaderBytecodeRef">A reference to source data as compiled HLSL code. </param>
            <param name="bytecodeLength">Length of pSrcData. </param>
            <param name="uStripFlags">Strip flag options, represented by <see cref="T:SharpDX.D3DCompiler.StripFlags"/>. </param>
            <param name="strippedBlobRef">Optional. A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that contains compiler error messages, or NULL if there were no errors. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DStripShader([In, Buffer] const void* pShaderBytecode,[In] SIZE_T BytecodeLength,[In] D3DCOMPILER_STRIP_FLAGS uStripFlags,[Out] ID3DBlob** ppStrippedBlob)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.GetBlobPart(System.IntPtr,SharpDX.Size,SharpDX.D3DCompiler.ShaderBytecodePart,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Retrieves a specific part from a compilation result.	
            </summary>	
            <remarks>	
            D3DGetBlobPart retrieves the part of a blob (arbitrary length data buffer) that contains the type of data that the  Part parameter specifies. 	
            </remarks>	
            <param name="srcDataRef">A reference to uncompiled shader data; either ASCII HLSL code or a compiled effect. </param>
            <param name="srcDataSize">Length of uncompiled shader data that pSrcData points to. </param>
            <param name="part">A <see cref="T:SharpDX.D3DCompiler.ShaderBytecodePart"/>-typed value that specifies the part of the buffer to retrieve. </param>
            <param name="flags">Flags that indicate how to retrieve the blob part. Currently, no flags are defined. </param>
            <param name="partRef">The address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> interface that is used to retrieve the specified part of the buffer. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DGetBlobPart([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In] D3D_BLOB_PART Part,[In] int Flags,[Out] ID3DBlob** ppPart)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.CompressShaders(System.Int32,SharpDX.D3DCompiler.ShaderData[],System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Compresses a set of shaders into a more compact form. 	
            </summary>	
            <param name="uNumShaders">The number of shaders to compress. </param>
            <param name="shaderDataRef">An array of <see cref="T:SharpDX.D3DCompiler.ShaderData"/> structures that describe the set of shaders to compress. </param>
            <param name="uFlags">Flags that indicate how to compress the shaders. Currently, only the  D3D_COMPRESS_SHADER_KEEP_ALL_PARTS (0x00000001) flag is defined. </param>
            <param name="compressedDataRef">The address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> interface that is used to retrieve the compressed shader data. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DCompressShaders([In] int uNumShaders,[In, Buffer] D3D_SHADER_DATA* pShaderData,[In] int uFlags,[Out] ID3DBlob** ppCompressedData)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.D3D.DecompressShaders(System.IntPtr,SharpDX.Size,System.Int32,System.Int32,System.Int32[],System.Int32,SharpDX.Direct3D.Blob[],System.Int32@)">
            <summary>	
            Decompresses one or more shaders from a compressed set. 	
            </summary>	
            <param name="srcDataRef">A reference to uncompiled shader data; either ASCII HLSL code or a compiled effect. </param>
            <param name="srcDataSize">Length of uncompiled shader data that pSrcData points to. </param>
            <param name="uNumShaders">The number of shaders to decompress. </param>
            <param name="uStartIndex">The index of the first shader to decompress. </param>
            <param name="indicesRef">An array of indexes that represent the shaders to decompress. </param>
            <param name="uFlags">Flags that indicate how to decompress. Currently, no flags are defined. </param>
            <param name="shadersRef">The address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> interface that is used to retrieve the decompressed shader data. </param>
            <param name="totalShadersRef">A reference to a variable that receives the total number of shaders that  D3DDecompressShaders decompressed. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT D3DDecompressShaders([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In] int uNumShaders,[In] int uStartIndex,[In, Buffer, Optional] int* pIndices,[In] int uFlags,[Out, Buffer] ID3DBlob** ppShaders,[Out, Optional] int* pTotalShaders)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.Include">
            <summary>	
            An include interface allows an application to create user-overridable methods for opening and closing files when loading an effect from memory.	
            </summary>	
            <unmanaged>ID3DInclude</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)">
            <summary>	
            A user-implemented method for opening and reading the contents of a shader #include file.	
            </summary>	
            <param name="type">A <see cref="T:SharpDX.D3DCompiler.IncludeType"/>-typed value that indicates the location of the #include file. </param>
            <param name="fileName">Name of the #include file.</param>
            <param name="parentStream">Pointer to the container that includes the #include file.</param>
            <param name="stream">Stream that is associated with fileName to be read. This reference remains valid until <see cref="M:SharpDX.D3DCompiler.Include.Close(System.IO.Stream)"/> is called.</param>
            <unmanaged>HRESULT Open([None] D3D_INCLUDE_TYPE IncludeType,[None] const char* pFileName,[None] LPCVOID pParentData,[None] LPCVOID* ppData,[None] UINT* pBytes)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.Include.Close(System.IO.Stream)">
            <summary>	
            A user-implemented method for closing a shader #include file.	
            </summary>	
            <remarks>	
            If <see cref="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)"/> was successful, Close is guaranteed to be called before the API using the <see cref="T:SharpDX.D3DCompiler.Include"/> interface returns.	
            </remarks>	
            <param name="stream">This is a reference that was returned by the corresponding <see cref="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)"/> call.</param>
            <unmanaged>HRESULT Close([None] LPCVOID pData)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderReflectionType">
            <summary>	
            This shader-reflection interface provides access to variable type.	
            </summary>	
            <unmanaged>ID3D11ShaderReflectionType</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetDescription(SharpDX.D3DCompiler.ShaderTypeDescription@)">
            <summary>	
            Get the description of a shader-reflection-variable type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="descRef">A reference to a shader-type description (see <see cref="T:SharpDX.D3DCompiler.ShaderTypeDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetMemberType(System.Int32)">
            <summary>	
            Get a shader-reflection-variable type by index.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="index">Zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByIndex([In] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetMemberType(System.String)">
            <summary>	
            Get a shader-reflection-variable type by name.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="name">Member name. </param>
            <returns>A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByName([In] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetMemberTypeName(System.Int32)">
            <summary>	
            Get a shader-reflection-variable type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="index">Zero-based index. </param>
            <returns>The variable type. </returns>
            <unmanaged>const char* ID3D11ShaderReflectionType::GetMemberTypeName([In] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.IsEqual_(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether two <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> references have the same underlying type.	
            </summary>	
            <remarks>	
            IsEqual indicates whether the sources of the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> references have the same underlying type. For example, if two ID3D11ShaderReflectionType Interface references were retrieved from variables, IsEqual can be used to see if  the variables have the same type. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="typeRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns S_OK if the references have the same underlying type; otherwise returns S_FALSE. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::IsEqual([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetSubType">
            <summary>	
            Gets the base class of a class.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns a reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> containing the base class type.  Returns NULL if the class does not have a base class. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetSubType()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetBaseClass">
            <summary>	
            Gets an <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> interface containing the variable base class type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetBaseClass()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetNumInterfaces">
            <summary>	
            Gets the number of interfaces.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns the number of interfaces. </returns>
            <unmanaged>int ID3D11ShaderReflectionType::GetNumInterfaces()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.GetInterface(System.Int32)">
            <summary>	
            Get an interface by index.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="uIndex">Zero-based index. </param>
            <returns>A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetInterfaceByIndex([In] int uIndex)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.IsOfType_(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether a variable is of the specified type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="typeRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns S_OK if object being queried is equal to or inherits from the type in the pType parameter; otherwise returns S_FALSE. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::IsOfType([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.ImplementsInterface_(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether a class type implements an interface.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="baseRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns S_OK if the interface is implemented; otherwise return S_FALSE. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::ImplementsInterface([In] ID3D11ShaderReflectionType* pBase)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.IsEqual(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether two <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> references have the same underlying type.	
            </summary>	
            <remarks>	
            IsEqual indicates whether the sources of the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> references have the same underlying type. For example, if two ID3D11ShaderReflectionType Interface references were retrieved from variables, IsEqual can be used to see if  the variables have the same type. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="typeRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns true if the references have the same underlying type; otherwise returns false. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::IsEqual([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.IsOfType(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether a variable is of the specified type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="typeRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns true if object being queried is equal to or inherits from the type in the pType parameter; otherwise returns false. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::IsOfType([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionType.ImplementsInterface(SharpDX.D3DCompiler.ShaderReflectionType)">
            <summary>	
            Indicates whether a class type implements an interface.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="baseRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </param>
            <returns>Returns true if the interface is implemented; otherwise return false. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionType::ImplementsInterface([In] ID3D11ShaderReflectionType* pBase)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionType.Description">
            <summary>	
            Get the description of a shader-reflection-variable type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11ShaderReflectionType::GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionType.SubType">
            <summary>	
            Gets the base class of a class.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetSubType()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionType.BaseClass">
            <summary>	
            Gets an <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/> interface containing the variable base class type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetBaseClass()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionType.NumInterfaces">
            <summary>	
            Gets the number of interfaces.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflectionType::GetNumInterfaces()</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderReflectionVariable">
            <summary>	
            This shader-reflection interface provides access to a variable.	
            </summary>	
            <unmanaged>ID3D11ShaderReflectionVariable</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionVariable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription(SharpDX.D3DCompiler.ShaderVariableDescription@)">
            <summary>	
            Get a shader-variable description.	
            </summary>	
            <remarks>	
            This method can be used to determine if the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionVariable"/> is valid, the method returns E_FAIL when the variable is not valid. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="descRef">A reference to a shader-variable description (see <see cref="T:SharpDX.D3DCompiler.ShaderVariableDescription"/>). </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionVariable::GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetVariableType">
            <summary>	
            Get a shader-variable type.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>A reference to a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionType"/>. </returns>
            <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionVariable::GetType()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflectionVariable::GetBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetInterfaceSlot(System.Int32)">
            <summary>	
            Gets the corresponding interface slot for a variable that represents an interface reference.	
            </summary>	
            <remarks>	
            GetInterfaceSlot gets the corresponding slot in an dynamic linkage array for an interface instance.  The returned slot number is used to set an interface instance to a particular class instance.  See the HLSL {{Interfaces and Classes}} overview for additional information. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="uArrayIndex">Index of the array element to get the slot number for.  For a non-array variable this value will be zero. </param>
            <returns>Returns the index of the interface in the interface array. </returns>
            <unmanaged>int ID3D11ShaderReflectionVariable::GetInterfaceSlot([In] int uArrayIndex)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionVariable.Description">
            <summary>	
            Get a shader-variable description.	
            </summary>	
            <remarks>	
            This method can be used to determine if the <see cref="T:SharpDX.D3DCompiler.ShaderReflectionVariable"/> is valid, the method returns E_FAIL when the variable is not valid. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11ShaderReflectionVariable::GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflectionVariable.Buffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflectionVariable::GetBuffer()</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ConstantBuffer">
            <summary>	
            This shader-reflection interface provides access to a constant buffer.	
            </summary>	
            <unmanaged>ID3D11ShaderReflectionConstantBuffer</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ConstantBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ConstantBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.D3DCompiler.ConstantBuffer.GetDescription(SharpDX.D3DCompiler.ConstantBufferDescription@)">
            <summary>	
            Get a constant-buffer description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="descRef">A reference to a <see cref="T:SharpDX.D3DCompiler.ConstantBufferDescription"/>, which represents a shader-buffer description. </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflectionConstantBuffer::GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ConstantBuffer.GetVariable(System.Int32)">
            <summary>	
            Get a shader-reflection variable by index.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="index">Zero-based index. </param>
            <returns>A reference to a shader-reflection variable interface (see <see cref="T:SharpDX.D3DCompiler.ShaderReflectionVariable"/>). </returns>
            <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex([In] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ConstantBuffer.GetVariable(System.String)">
            <summary>	
            Get a shader-reflection variable by name.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="name">Variable name. </param>
            <returns>Returns a sentinel object (end of list marker). To determine if GetVariableByName successfully completed, call <see cref="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription(SharpDX.D3DCompiler.ShaderVariableDescription@)"/> and check the returned HRESULT; any return value other than success means that GetVariableByName failed. </returns>
            <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByName([In] const char* Name)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ConstantBuffer.Description">
            <summary>	
            Get a constant-buffer description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11ShaderReflectionConstantBuffer::GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderReflection">
            <summary>	
            A shader-reflection interface accesses shader information.	
            </summary>	
            <unmanaged>ID3D11ShaderReflection</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ShaderReflection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetDescription(SharpDX.D3DCompiler.ShaderDescription@)">
            <summary>	
            Get a shader description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="descRef">A reference to a shader description. See <see cref="T:SharpDX.D3DCompiler.ShaderDescription"/>. </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetConstantBuffer(System.Int32)">
            <summary>	
            Get a constant buffer by index.	
            </summary>	
            <remarks>	
            A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="index">Zero-based index. </param>
            <returns>A reference to a constant buffer (see <see cref="T:SharpDX.D3DCompiler.ConstantBuffer"/>). </returns>
            <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByIndex([In] int Index)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetConstantBuffer(System.String)">
            <summary>	
            Get a constant buffer by name.	
            </summary>	
            <remarks>	
            A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="name">The constant-buffer name. </param>
            <returns>A reference to a constant buffer (see <see cref="T:SharpDX.D3DCompiler.ConstantBuffer"/>). </returns>
            <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByName([In] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.Int32)">
            <summary>	
            Get a description of how a resource is bound to a shader.	
            </summary>	
            <remarks>	
            A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. GetResourceBindingDesc gets information about how one resource in the set is bound as an input to the shader. The  ResourceIndex parameter specifies the index for the resource. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="resourceIndex">A zero-based resource index. </param>
            <returns>A reference to an input-binding description. See <see cref="T:SharpDX.D3DCompiler.InputBindingDescription"/>. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDesc([In] int ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetInputParameterDescription(System.Int32)">
            <summary>	
            Get an input-parameter description for a shader.	
            </summary>	
            <remarks>	
            An input-parameter description is also called a shader signature. The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="parameterIndex">A zero-based parameter index. </param>
            <returns>A reference to a shader-input-signature description. See <see cref="T:SharpDX.D3DCompiler.ShaderParameterDescription"/>. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetInputParameterDesc([In] int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetOutputParameterDescription(System.Int32)">
            <summary>	
            Get an output-parameter description for a shader.	
            </summary>	
            <remarks>	
            An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="parameterIndex">A zero-based parameter index. </param>
            <returns>A reference to a shader-output-parameter description. See <see cref="T:SharpDX.D3DCompiler.ShaderParameterDescription"/>. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetOutputParameterDesc([In] int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetPatchConstantParameterDescription(System.Int32)">
            <summary>	
            Get a patch-constant parameter description for a shader.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="parameterIndex">A zero-based parameter index. </param>
            <returns>A reference to a shader-input-signature description. See <see cref="T:SharpDX.D3DCompiler.ShaderParameterDescription"/>. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetPatchConstantParameterDesc([In] int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetVariable(System.String)">
            <summary>	
            Gets a variable by name.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="name">A reference to a string containing the variable name. </param>
            <returns>Returns a <see cref="T:SharpDX.D3DCompiler.ShaderReflectionVariable"/> interface. </returns>
            <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflection::GetVariableByName([In] const char* Name)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.String)">
            <summary>	
            Get a description of how a resource is bound to a shader. 	
            </summary>	
            <remarks>	
            A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. GetResourceBindingDescByName gets information about how one resource in the set is bound as an input to the shader. The  Name parameter specifies the name of the resource. This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="name">The constant-buffer name of the resource. </param>
            <returns>A reference to an input-binding description. See <see cref="T:SharpDX.D3DCompiler.InputBindingDescription"/>. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetMoveInstructionCount">
            <summary>	
            Gets the number of Mov instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns the number of Mov instructions. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetMovInstructionCount()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetConditionalMoveInstructionCount">
            <summary>	
            Gets the number of Movc instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns the number of Movc instructions. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetMovcInstructionCount()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetConversionInstructionCount">
            <summary>	
            Gets the number of conversion instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns the number of conversion instructions. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetConversionInstructionCount()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetBitwiseInstructionCount">
            <summary>	
            Gets the number of bitwise instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>The number of bitwise instructions. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetBitwiseInstructionCount()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetGeometryShaderSInputPrimitive">
            <summary>	
            Gets the geometry-shader input-primitive description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>The input-primitive description, see D3D10_PRIMITIVE_TOPOLOGY. </returns>
            <unmanaged>D3D_PRIMITIVE ID3D11ShaderReflection::GetGSInputPrimitive()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.IsSampleFrequencyShader_">
            <summary>	
            Indicates whether a shader is a sample frequency shader.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>Returns true if the shader is a sample frequency shader; otherwise returns false. </returns>
            <unmanaged>BOOL ID3D11ShaderReflection::IsSampleFrequencyShader()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetInterfaceSlotCount">
            <summary>	
            Gets the number of interface slots in a shader.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <returns>The number of interface slots in the shader. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetNumInterfaceSlots()</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetMinFeatureLevel(SharpDX.Direct3D.FeatureLevel@)">
            <summary>	
            Gets the minimum feature level.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="levelRef">enum D3D_FEATURE_LEVEL A reference to one of the enumerated values in <see cref="T:SharpDX.Direct3D.FeatureLevel"/>, which represents the minimum feature level. </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11ShaderReflection::GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.GetThreadGroupSize(System.Int32@,System.Int32@,System.Int32@)">
            <summary>	
            Retrieves the sizes, in thread groups, of the X, Y, and Z dimensions of the shader's thread-group grid.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <param name="sizeXRef">A reference to the size, in thread groups, of the x-dimension of the thread-group grid. The maximum size is 65535. </param>
            <param name="sizeYRef">A reference to the size, in thread groups, of the y-dimension of the thread-group grid. The maximum size is 65535. </param>
            <param name="sizeZRef">A reference to the size, in thread groups, of the z-dimension of the thread-group grid. The maximum size is 65535. </param>
            <returns>Returns one of the following {{Direct3D 11 Return Codes}}. </returns>
            <unmanaged>int ID3D11ShaderReflection::GetThreadGroupSize([Out, Optional] int* pSizeX,[Out, Optional] int* pSizeY,[Out, Optional] int* pSizeZ)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderReflection.#ctor(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.D3DCompiler.ShaderReflection" /> class from a <see cref = "T:SharpDX.D3DCompiler.ShaderBytecode" />.
            </summary>
            <param name = "shaderBytecode"></param>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.Description">
            <summary>	
            Get a shader description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11ShaderReflection::GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.MoveInstructionCount">
            <summary>	
            Gets the number of Mov instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflection::GetMovInstructionCount()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.ConditionalMoveInstructionCount">
            <summary>	
            Gets the number of Movc instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflection::GetMovcInstructionCount()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.ConversionInstructionCount">
            <summary>	
            Gets the number of conversion instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflection::GetConversionInstructionCount()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.BitwiseInstructionCount">
            <summary>	
            Gets the number of bitwise instructions.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflection::GetBitwiseInstructionCount()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.GeometryShaderSInputPrimitive">
            <summary>	
            Gets the geometry-shader input-primitive description.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>D3D_PRIMITIVE ID3D11ShaderReflection::GetGSInputPrimitive()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.IsSampleFrequencyShader">
            <summary>	
            Indicates whether a shader is a sample frequency shader.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>BOOL ID3D11ShaderReflection::IsSampleFrequencyShader()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.InterfaceSlotCount">
            <summary>	
            Gets the number of interface slots in a shader.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>int ID3D11ShaderReflection::GetNumInterfaceSlots()</unmanaged>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderReflection.MinFeatureLevel">
            <summary>	
            Gets the minimum feature level.	
            </summary>	
            <remarks>	
            This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. 	
            </remarks>	
            <unmanaged>HRESULT ID3D11ShaderReflection::GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.RegisterComponentMaskFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_FLAG</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.All">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_ALL</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.ComponentW">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_COMPONENT_W</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.ComponentX">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_COMPONENT_X</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.ComponentY">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_COMPONENT_Y</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.ComponentZ">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_COMPONENT_Z</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.RegisterComponentMaskFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderParameterDescription">
            <summary>	
            Describes a shader signature.	
            </summary>	
            <remarks>	
            A shader can take n inputs and can produce m outputs. The order of the input (or output) parameters, their associated types, and any attached semantics make up the shader signature. Each shader has an input and an output signature. When compiling a shader or an effect, some API calls validate shader signatures  That is, they compare the output signature of one shader (like a vertex shader) with the input signature of another shader (like a pixel shader). This ensures that a shader outputs data that is compatible with a downstream shader that is consuming that data. Compatible means that a shader signature is a exact-match subset of the preceding shader stage. Exact match means parameter types and semantics must exactly match. Subset means that a parameter that is not required by a downstream stage, does not need to include that parameter in its shader signature. Get a shader-signature from a shader or an effect by calling APIs such as <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetInputParameterDescription(System.Int32)"/>.  	
            </remarks>	
            <unmanaged>D3D11_SIGNATURE_PARAMETER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.SemanticName">
            <summary>	
            A per-parameter string that identifies how the data will be used.  	
            </summary>	
            <unmanaged>const char* SemanticName</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.SemanticIndex">
            <summary>	
            Semantic index that modifies the semantic. Used to differentiate different parameters that use the same semantic. 	
            </summary>	
            <unmanaged>int SemanticIndex</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.Register">
            <summary>	
            The register that will contain this variable's data. 	
            </summary>	
            <unmanaged>int Register</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.SystemValueType">
            <summary>	
            A predefined string that determines the functionality of certain pipeline stages. See <see cref="T:SharpDX.D3DCompiler.SystemValueType"/>. 	
            </summary>	
            <unmanaged>D3D_NAME SystemValueType</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.ComponentType">
            <summary>	
            The per-component-data type that is stored in a register.  See <see cref="T:SharpDX.D3DCompiler.RegisterComponentType"/>. Each register can store up to four-components of data. 	
            </summary>	
            <unmanaged>D3D_REGISTER_COMPONENT_TYPE ComponentType</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.UsageMask">
            <summary>	
            Mask which indicates which components of a register are used. 	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_FLAG Mask</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.ReadWriteMask">
            <summary>	
            Mask which indicates whether a given component is never written (if the signature is an output signature) or always read (if the signature is an input signature).  	
            </summary>	
            <unmanaged>D3D11_REGISTER_COMPONENT_MASK_FLAG ReadWriteMask</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderParameterDescription.Stream">
            <summary>	
            Indicates which stream the geometry shader is using for the signature parameter. 	
            </summary>	
            <unmanaged>int Stream</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ConstantBufferDescription">
            <summary>	
            Describes a shader constant-buffer.	
            </summary>	
            <remarks>	
            Constants are supplied to shaders in a shader-constant buffer. Get the description of a shader-constant-buffer by calling <see cref="M:SharpDX.D3DCompiler.ConstantBuffer.GetDescription(SharpDX.D3DCompiler.ConstantBufferDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_SHADER_BUFFER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferDescription.Name">
            <summary>	
            The name of the buffer. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferDescription.Type">
            <summary>	
            The intended use of the constant data. 	
            </summary>	
            <unmanaged>D3D_CBUFFER_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferDescription.VariableCount">
            <summary>	
            The number of unique variables. 	
            </summary>	
            <unmanaged>int Variables</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferDescription.Size">
            <summary>	
            Buffer size (in bytes). 	
            </summary>	
            <unmanaged>int Size</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ConstantBufferDescription.Flags">
            <summary>	
            Shader buffer properties. 	
            </summary>	
            <unmanaged>D3D_SHADER_CBUFFER_FLAGS uFlags</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderVariableDescription">
            <summary>	
            Describes a shader variable.	
            </summary>	
            <remarks>	
            Get a shader-variable description using reflection, by calling <see cref="M:SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription(SharpDX.D3DCompiler.ShaderVariableDescription@)"/>. As of the June 2010 update, DefaultValue emits default values for reflection.  	
            </remarks>	
            <unmanaged>D3D11_SHADER_VARIABLE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.Name">
            <summary>	
            The variable name. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.StartOffset">
            <summary>	
            Offset from the start of the parent structure, to the beginning of the variable. 	
            </summary>	
            <unmanaged>int StartOffset</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.Size">
            <summary>	
            Size of the variable (in bytes). 	
            </summary>	
            <unmanaged>int Size</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.Flags">
            <summary>	
            Flags, which identify shader-variable properties.  	
            </summary>	
            <unmanaged>D3D_SHADER_VARIABLE_FLAGS uFlags</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.DefaultValue">
            <summary>	
            The default value for initializing the variable. 	
            </summary>	
            <unmanaged>void* DefaultValue</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.StartTexture">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int StartTexture</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.TextureSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int TextureSize</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.StartSampler">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int StartSampler</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderVariableDescription.SamplerSize">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int SamplerSize</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderTypeDescription">
            <summary>	
            Describes a shader-variable type.	
            </summary>	
            <remarks>	
            Get a shader-variable-type description by calling <see cref="M:SharpDX.D3DCompiler.ShaderReflectionType.GetDescription(SharpDX.D3DCompiler.ShaderTypeDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_SHADER_TYPE_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.Class">
            <summary>	
            Identifies the variable class as one of scalar, vector, matrix or object.  See <see cref="T:SharpDX.D3DCompiler.ShaderVariableClass"/>. 	
            </summary>	
            <unmanaged>D3D_SHADER_VARIABLE_CLASS Class</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.Type">
            <summary>	
            The variable type. See <see cref="T:SharpDX.D3DCompiler.ShaderVariableType"/>. 	
            </summary>	
            <unmanaged>D3D_SHADER_VARIABLE_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.RowCount">
            <summary>	
            Number of rows in a matrix. Otherwise a numeric type returns 1, any other type returns 0. 	
            </summary>	
            <unmanaged>int Rows</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.ColumnCount">
            <summary>	
            Number of columns in a matrix. Otherwise a numeric type returns 1, any other type returns 0. 	
            </summary>	
            <unmanaged>int Columns</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.ElementCount">
            <summary>	
            Number of elements in an array; otherwise 0. 	
            </summary>	
            <unmanaged>int Elements</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.MemberCount">
            <summary>	
            Number of members in the structure; otherwise 0. 	
            </summary>	
            <unmanaged>int Members</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.Offset">
            <summary>	
            Offset, in bytes, between the start of the parent structure and this variable. 	
            </summary>	
            <unmanaged>int Offset</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderTypeDescription.Name">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderDescription">
            <summary>	
            Describes a shader.	
            </summary>	
            <remarks>	
            A shader is written in HLSL and compiled into an intermediate language by the HLSL compiler. The shader description returns information about the compiled shader. Get a shader description by calling <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetDescription(SharpDX.D3DCompiler.ShaderDescription@)"/>. 	
            </remarks>	
            <unmanaged>D3D11_SHADER_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.Version">
            <summary>	
            Shader version. 	
            </summary>	
            <unmanaged>int Version</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.Creator">
            <summary>	
            The name of the originator of the shader. 	
            </summary>	
            <unmanaged>const char* Creator</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.Flags">
            <summary>	
            Shader compilation/parse flags. 	
            </summary>	
            <unmanaged>D3DCOMPILE_SHADER_FLAGS Flags</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.ConstantBuffers">
            <summary>	
            The number of shader-constant buffers. 	
            </summary>	
            <unmanaged>int ConstantBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.BoundResources">
            <summary>	
            The number of resource (textures and buffers) bound to a shader. 	
            </summary>	
            <unmanaged>int BoundResources</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.InputParameters">
            <summary>	
            The number of parameters in the input signature. 	
            </summary>	
            <unmanaged>int InputParameters</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.OutputParameters">
            <summary>	
            The number of parameters in the output signature. 	
            </summary>	
            <unmanaged>int OutputParameters</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.InstructionCount">
            <summary>	
            The number of intermediate-language instructions in the compiled shader. 	
            </summary>	
            <unmanaged>int InstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TempRegisterCount">
            <summary>	
            The number of temporary registers in the compiled shader. 	
            </summary>	
            <unmanaged>int TempRegisterCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TempArrayCount">
            <summary>	
            Number of temporary arrays used. 	
            </summary>	
            <unmanaged>int TempArrayCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.DefineCount">
            <summary>	
            Number of constant defines. 	
            </summary>	
            <unmanaged>int DefCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.DeclarationCount">
            <summary>	
            Number of declarations (input + output). 	
            </summary>	
            <unmanaged>int DclCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureNormalInstructions">
            <summary>	
            Number of non-categorized texture instructions. 	
            </summary>	
            <unmanaged>int TextureNormalInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureLoadInstructions">
            <summary>	
            Number of texture load instructions 	
            </summary>	
            <unmanaged>int TextureLoadInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureCompInstructions">
            <summary>	
            Number of texture comparison instructions 	
            </summary>	
            <unmanaged>int TextureCompInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureBiasInstructions">
            <summary>	
            Number of texture bias instructions 	
            </summary>	
            <unmanaged>int TextureBiasInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureGradientInstructions">
            <summary>	
            Number of texture gradient instructions. 	
            </summary>	
            <unmanaged>int TextureGradientInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.FloatInstructionCount">
            <summary>	
            Number of floating point arithmetic instructions used. 	
            </summary>	
            <unmanaged>int FloatInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.IntInstructionCount">
            <summary>	
            Number of signed integer arithmetic instructions used. 	
            </summary>	
            <unmanaged>int IntInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.UintInstructionCount">
            <summary>	
            Number of unsigned integer arithmetic instructions used. 	
            </summary>	
            <unmanaged>int UintInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.StaticFlowControlCount">
            <summary>	
            Number of static flow control instructions used. 	
            </summary>	
            <unmanaged>int StaticFlowControlCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.DynamicFlowControlCount">
            <summary>	
            Number of dynamic flow control instructions used. 	
            </summary>	
            <unmanaged>int DynamicFlowControlCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.MacroInstructionCount">
            <summary>	
            Number of macro instructions used. 	
            </summary>	
            <unmanaged>int MacroInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.ArrayInstructionCount">
            <summary>	
            Number of array instructions used. 	
            </summary>	
            <unmanaged>int ArrayInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.CutInstructionCount">
            <summary>	
            Number of cut instructions used. 	
            </summary>	
            <unmanaged>int CutInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.EmitInstructionCount">
            <summary>	
            Number of emit instructions used. 	
            </summary>	
            <unmanaged>int EmitInstructionCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.GeometryShaderOutputTopology">
            <summary>	
            The <see cref="T:SharpDX.Direct3D.PrimitiveTopology"/>, which represents the shader output topology. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE_TOPOLOGY GSOutputTopology</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.GeometryShaderMaxOutputVertexCount">
            <summary>	
            Geometry shader maximum output vertex count. 	
            </summary>	
            <unmanaged>int GSMaxOutputVertexCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.InputPrimitive">
            <summary>	
            The <see cref="T:SharpDX.D3DCompiler.InputPrimitive"/>-typed value that represents the input primitive for a  geometry shader or hull shader. 	
            </summary>	
            <unmanaged>D3D_PRIMITIVE InputPrimitive</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.PatchConstantParameters">
            <summary>	
            Number of parameters in the patch-constant signature. 	
            </summary>	
            <unmanaged>int PatchConstantParameters</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.GeometryShaderInstanceCount">
            <summary>	
            Number of geometry shader instances. 	
            </summary>	
            <unmanaged>int cGSInstanceCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.ControlPoints">
            <summary>	
            Number of control points in the hull shader and domain shader. 	
            </summary>	
            <unmanaged>int cControlPoints</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.HullShaderOutputPrimitive">
            <summary>	
            The <see cref="T:SharpDX.D3DCompiler.TessellatorOutputPrimitive"/>, which represents the tessellator output-primitive type. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.HullShaderPartitioning">
            <summary>	
            The <see cref="T:SharpDX.D3DCompiler.TessellatorPartitioning"/>, which represents the tessellator partitioning mode. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_PARTITIONING HSPartitioning</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TessellatorDomain">
            <summary>	
            The <see cref="T:SharpDX.D3DCompiler.TessellatorDomain"/>, which represents the tessellator domain. 	
            </summary>	
            <unmanaged>D3D_TESSELLATOR_DOMAIN TessellatorDomain</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.BarrierInstructions">
            <summary>	
            Number of barrier instructions in a compute shader. 	
            </summary>	
            <unmanaged>int cBarrierInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.InterlockedInstructions">
            <summary>	
            Number of interlocked instructions in a compute shader. 	
            </summary>	
            <unmanaged>int cInterlockedInstructions</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderDescription.TextureStoreInstructions">
            <summary>	
            Number of texture writes in a compute shader. 	
            </summary>	
            <unmanaged>int cTextureStoreInstructions</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.InputBindingDescription">
            <summary>	
            Describes how a shader resource is bound to a shader input.	
            </summary>	
            <remarks>	
            Get a shader-input-signature description by calling <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.Int32)"/> or <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.Int32)"/>. 	
            </remarks>	
            <unmanaged>D3D11_SHADER_INPUT_BIND_DESC</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.Name">
            <summary>	
            Name of the shader resource. 	
            </summary>	
            <unmanaged>const char* Name</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.Type">
            <summary>	
            Identifies the type of data in the resource. See <see cref="T:SharpDX.D3DCompiler.ShaderInputType"/>. 	
            </summary>	
            <unmanaged>D3D_SHADER_INPUT_TYPE Type</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.BindPoint">
            <summary>	
            Starting bind point. 	
            </summary>	
            <unmanaged>int BindPoint</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.BindCount">
            <summary>	
            Number of contiguous bind points for arrays. 	
            </summary>	
            <unmanaged>int BindCount</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.Flags">
            <summary>	
            Shader input-parameter options.  See <see cref="T:SharpDX.D3DCompiler.ShaderInputFlags"/>. 	
            </summary>	
            <unmanaged>D3D_SHADER_INPUT_FLAGS uFlags</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.ReturnType">
            <summary>	
            If the input is a texture, the return type. See <see cref="T:SharpDX.D3DCompiler.ResourceReturnType"/>. 	
            </summary>	
            <unmanaged>D3D_RESOURCE_RETURN_TYPE ReturnType</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.Dimension">
            <summary>	
            Identifies the dimensions of the bound resource. For a list of values that <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.Int32)"/> or <see cref="M:SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription(System.Int32)"/> can return, see <see cref="T:SharpDX.Direct3D.ShaderResourceViewDimension"/>. 	
            </summary>	
            <unmanaged>D3D_SRV_DIMENSION Dimension</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.InputBindingDescription.NumSamples">
            <summary>	
            The number of samples for a multisampled texture; otherwise 0. 	
            </summary>	
            <unmanaged>int NumSamples</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderData">
            <summary>	
            Describes shader data.	
            </summary>	
            <remarks>	
            An array of D3D_SHADER_DATA structures is passed to <see cref="M:SharpDX.D3DCompiler.D3D.CompressShaders(System.Int32,SharpDX.D3DCompiler.ShaderData[],System.Int32,SharpDX.Direct3D.Blob@)"/> to compress the shader data into a more compact form. 	
            </remarks>	
            <unmanaged>D3D_SHADER_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderData.BytecodePtr">
            <summary>	
            A reference to shader data. 	
            </summary>	
            <unmanaged>const void* pBytecode</unmanaged>
        </member>
        <member name="F:SharpDX.D3DCompiler.ShaderData.BytecodeLength">
            <summary>	
            Length of shader data that pBytecode points to. 	
            </summary>	
            <unmanaged>SIZE_T BytecodeLength</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.IncludeCallback">
            <summary>
            Internal Include Callback
            </summary>
        </member>
        <member name="T:SharpDX.D3DCompiler.IncludeCallback.OpenDelegate">
            <summary>	
            A user-implemented method for opening and reading the contents of a shader #include file.	
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="includeType">A <see cref="T:SharpDX.D3DCompiler.IncludeType"/>-typed value that indicates the location of the #include file. </param>
            <param name="fileNameRef">Name of the #include file.</param>
            <param name="pParentData">Pointer to the container that includes the #include file.</param>
            <param name="dataRef">Pointer to the buffer that Open returns that contains the include directives. This pointer remains valid until <see cref="M:SharpDX.D3DCompiler.Include.Close(System.IO.Stream)"/> is called.</param>
            <param name="bytesRef">Pointer to the number of bytes that Open returns in ppData.</param>
            <returns>The user-implemented method should return S_OK. If Open fails when reading the #include file, the application programming interface (API) that caused Open to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
            <unmanaged>HRESULT Open([None] D3D_INCLUDE_TYPE IncludeType,[None] const char* pFileName,[None] LPCVOID pParentData,[None] LPCVOID* ppData,[None] UINT* pBytes)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.IncludeCallback.CloseDelegate">
            <summary>	
            A user-implemented method for closing a shader #include file.	
            </summary>	
            <remarks>	
            If <see cref="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)"/> was successful, Close is guaranteed to be called before the API using the <see cref="T:SharpDX.D3DCompiler.Include"/> interface returns.	
            </remarks>
            <param name="thisPtr">This pointer</param>
            <param name="pData">Pointer to the buffer that contains the include directives. This is the pointer that was returned by the corresponding <see cref="M:SharpDX.D3DCompiler.Include.Open(SharpDX.D3DCompiler.IncludeType,System.String,System.IO.Stream,System.IO.Stream@)"/> call.</param>
            <returns>The user-implemented Close method should return S_OK. If Close fails when it closes the #include file, the application programming interface (API) that caused Close to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
            <unmanaged>HRESULT Close([None] LPCVOID pData)</unmanaged>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderBytecode">
            <summary>
              Represents the compiled bytecode of a shader or effect.
            </summary>
            <unmanaged>Blob</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.#ctor(SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.D3DCompiler.ShaderBytecode" /> class.
            </summary>
            <param name = "data">A <see cref = "T:SharpDX.DataStream" /> containing the compiled bytecode.</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.#ctor(System.IO.Stream)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.D3DCompiler.ShaderBytecode" /> class.
            </summary>
            <param name = "data">A <see cref = "T:System.IO.Stream" /> containing the compiled bytecode.</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ShaderBytecode"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.#ctor(System.IntPtr,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.D3DCompiler.ShaderBytecode" /> class.
            </summary>
            <param name = "buffer">a pointer to a compiler bytecode</param>
            <param name = "sizeInBytes">size of the bytecode</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.#ctor(SharpDX.Direct3D.Blob)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.D3DCompiler.ShaderBytecode"/> class.
            </summary>
            <param name="blob">The BLOB.</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.Byte[],System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.CompileFromFile(System.String,System.String,System.String,SharpDX.D3DCompiler.ShaderFlags,SharpDX.D3DCompiler.EffectFlags,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Compiles a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name = "profile">The shader target or set of shader features to compile against.</param>
            <param name = "shaderFlags">Shader compilation options.</param>
            <param name = "effectFlags">Effect compilation options.</param>
            <param name = "defines">A set of macros to define during compilation.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if compilation succeeded.</param>
            <returns>The compiled shader bytecode, or <c>null</c> if the method fails.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Compress(SharpDX.D3DCompiler.ShaderBytecode[])">
            <summary>	
            Compresses a set of shaders into a more compact form. 	
            </summary>	
            <param name="shaderBytecodes">An array of <see cref="T:SharpDX.D3DCompiler.ShaderBytecode"/> structures that describe the set of shaders to compress. </param>
            <returns>A compressed <see cref="T:SharpDX.D3DCompiler.ShaderBytecode"/>. </returns>
            <unmanaged>HRESULT D3DCompressShaders([In] int uNumShaders,[In, Buffer] D3D_SHADER_DATA* pShaderData,[In] int uFlags,[Out] ID3DBlob** ppCompressedData)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Disassemble">
            <summary>
              Disassembles compiled HLSL code back into textual source.
            </summary>
            <returns>The textual source of the shader or effect.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Disassemble(SharpDX.D3DCompiler.DisassemblyFlags)">
            <summary>
              Disassembles compiled HLSL code back into textual source.
            </summary>
            <param name = "flags">Flags affecting the output of the disassembly.</param>
            <returns>The textual source of the shader or effect.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Disassemble(SharpDX.D3DCompiler.DisassemblyFlags,System.String)">
            <summary>
              Disassembles compiled HLSL code back into textual source.
            </summary>
            <param name = "flags">Flags affecting the output of the disassembly.</param>
            <param name = "comments">Commenting information to embed in the disassembly.</param>
            <returns>The textual source of the shader or effect.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.GetPart(SharpDX.D3DCompiler.ShaderBytecodePart)">
            <summary>	
            Retrieves a specific part from a compilation result.	
            </summary>	
            <remarks>	
            D3DGetBlobPart retrieves the part of a blob (arbitrary length data buffer) that contains the type of data that the  Part parameter specifies. 	
            </remarks>	
            <param name="part">A <see cref="T:SharpDX.D3DCompiler.ShaderBytecodePart"/>-typed value that specifies the part of the buffer to retrieve. </param>
            <returns>Returns the extracted part. </returns>
            <unmanaged>HRESULT D3DGetBlobPart([In, Buffer] const void* pSrcData,[In] SIZE_T SrcDataSize,[In] D3D_BLOB_PART Part,[In] int Flags,[Out] ID3DBlob** ppPart)</unmanaged>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.FromPointer(System.IntPtr)">
            <summary>
            Froms the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.String)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to preprocess.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.Byte[])">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.String,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.Byte[],SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.Byte[],SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Preprocess(System.String,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.PreprocessFromFile(System.String)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.PreprocessFromFile(System.String,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.PreprocessFromFile(System.String,SharpDX.Direct3D.ShaderMacro[],SharpDX.D3DCompiler.Include,System.String@)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.Strip(SharpDX.D3DCompiler.StripFlags)">
            <summary>
              Strips extraneous information from a compiled shader or effect.
            </summary>
            <param name = "flags">Options specifying what to remove from the shader.</param>
            <returns>A string containing any errors that may have occurred.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.FromStream(System.IO.Stream)">
            <summary>
              Read a compiled shader bytecode from a Stream and return a ShaderBytecode
            </summary>
            <param name = "stream"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderBytecode.FromFile(System.String)">
            <summary>
              Read a compiled shader bytecode from a Stream and return a ShaderBytecode
            </summary>
            <param name = "fileName"></param>
            <returns></returns>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderBytecode.IsCompressed">
            <summary>
            Gets this instance is composed of compressed shaders.
            </summary>
            <value>
            	<c>true</c> if this instance is compressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderBytecode.Data">
            <summary>
              Gets the raw data of the compiled bytecode.
            </summary>
        </member>
        <member name="T:SharpDX.D3DCompiler.ShaderSignature">
            <summary>
              Represents a shader signature.
            </summary>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderSignature.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.D3DCompiler.ShaderSignature" /> class.
            </summary>
            <param name = "ptr">A pointer to a Blob object.</param>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderSignature.GetInputOutputSignature(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Extracts the input and output signatures from a compiled shader or effect.
            </summary>
            <param name = "shaderBytecode">The bytecode of the compiled shader or effect.</param>
            <returns>The input and output signatures of the shader or effect.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderSignature.GetInputSignature(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Extracts the input signature from a compiled shader or effect.
            </summary>
            <param name = "shaderBytecode">The bytecode of the compiled shader or effect.</param>
            <returns>The input signature of the shader or effect.</returns>
        </member>
        <member name="M:SharpDX.D3DCompiler.ShaderSignature.GetOutputSignature(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
              Extracts the output signature from a compiled shader or effect.
            </summary>
            <param name = "shaderBytecode">The bytecode of the compiled shader or effect.</param>
            <returns>The output signature of the shader or effect.</returns>
        </member>
        <member name="P:SharpDX.D3DCompiler.ShaderSignature.Data">
            <summary>
              Gets the raw data of the shader signature.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct2D1</name>
    </assembly>
    <members>
        <member name="T:SharpDX.DirectWrite.BitmapRenderTarget">
            <summary>	
            Encapsulates a 32-bit device independent bitmap and device context, which can be used for rendering glyphs.	
            </summary>	
            <unmanaged>IDWriteBitmapRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)">
            <summary>	
            Draws a run of glyphs to a bitmap target at the specified position.	
            </summary>	
            <remarks>	
            You can use the IDWriteBitmapRenderTarget::DrawGlyphRun to render to a bitmap from a custom text renderer that you implement.  The custom text renderer should call this method from within the <see cref="M:SharpDX.DirectWrite.TextRenderer.DrawGlyphRun(System.IntPtr,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)" /> callback method as shown in the following code. 	
            <code> STDMETHODIMP GdiTextRenderer::DrawGlyphRun( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect )	
            { HRESULT hr = S_OK; // Pass on the drawing call to the render target to do the real work. RECT dirtyRect = {0}; hr = pRenderTarget_-&gt;DrawGlyphRun( baselineOriginX, baselineOriginY, measuringMode, glyphRun, pRenderingParams_, RGB(0,200,255), &amp;dirtyRect ); return hr;	
            } </code>	
            
            The baselineOriginX, baslineOriginY, measuringMethod, and glyphRun parameters are provided (as arguments) when the callback method is invoked.  The renderingParams, textColor and blackBoxRect are not. Default rendering params can be retrieved by using the <see cref="M:SharpDX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr,SharpDX.DirectWrite.RenderingParams@)" /> method.  	
            </remarks>	
            <param name="baselineOriginX">The horizontal position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="baselineOriginY">The vertical position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode. </param>
            <param name="glyphRun">The structure containing the properties of the glyph run. </param>
            <param name="renderingParams">The object that controls rendering behavior. </param>
            <param name="textColor">The foreground color of the text. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([None] float baselineOriginX,[None] float baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[None] IDWriteRenderingParams* renderingParams,[None] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun@,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4,SharpDX.Rectangle@)">
            <summary>	
            Draws a run of glyphs to a bitmap target at the specified position.	
            </summary>	
            <remarks>	
            You can use the IDWriteBitmapRenderTarget::DrawGlyphRun to render to a bitmap from a custom text renderer that you implement.  The custom text renderer should call this method from within the <see cref="M:SharpDX.DirectWrite.TextRenderer.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)"/> callback method as shown in the following code. 	
            <code> STDMETHODIMP GdiTextRenderer::DrawGlyphRun( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect )	
            { HRESULT hr = S_OK; // Pass on the drawing call to the render target to do the real work. RECT dirtyRect = {0}; hr = pRenderTarget_-&gt;DrawGlyphRun( baselineOriginX, baselineOriginY, measuringMode, glyphRun, pRenderingParams_, RGB(0,200,255), &amp;dirtyRect ); return hr;	
            } </code>	
            	
            The baselineOriginX, baslineOriginY, measuringMethod, and glyphRun parameters are provided (as arguments) when the callback method is invoked.  The renderingParams, textColor and blackBoxRect are not. Default rendering params can be retrieved by using the <see cref="M:SharpDX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr,SharpDX.DirectWrite.RenderingParams@)"/> method.  	
            </remarks>	
            <param name="baselineOriginX">The horizontal position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="baselineOriginY">The vertical position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB. </param>
            <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode. </param>
            <param name="glyphRun">The structure containing the properties of the glyph run. </param>
            <param name="renderingParams">The object that controls rendering behavior. </param>
            <param name="textColor">The foreground color of the text. </param>
            <param name="blackBoxRect">The optional rectangle that receives the bounding box (in pixels not DIPs) of all the pixels affected by  drawing the glyph run. The black box rectangle may extend beyond the dimensions of the bitmap. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([None] float baselineOriginX,[None] float baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[None] IDWriteRenderingParams* renderingParams,[None] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetMemoryDC">
            <summary>	
            Gets a handle to the memory device context. 	
            </summary>	
            <remarks>	
            An application can use the device context to draw using GDI functions. An application can obtain the bitmap handle (HBITMAP) by calling {{GetCurrentObject}}. An application that wants information about the underlying bitmap, including a reference to the pixel data, can call {{GetObject}} to fill in a {{DIBSECTION}} structure. The bitmap is always a 32-bit  top-down DIB.  Note that this method takes no parameters and returns an HDC variable, not an HRESULT. 	
            <code> memoryHdc = g_pBitmapRenderTarget-&gt;GetMemoryDC(); </code>	
            	
            The HDC returned here is still owned by the bitmap render targer object and should not be released or deleted by the client. 	
            </remarks>	
            <returns>Returns a device context handle to the memory device context. </returns>
            <unmanaged>void* IDWriteBitmapRenderTarget::GetMemoryDC()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetPixelsPerDip">
            <summary>	
            Gets the number of bitmap pixels per DIP.  	
            </summary>	
            <remarks>	
            A DIP (device-independent pixel) is 1/96 inch. Therefore, this value is the number if pixels per inch divided by 96. 	
            </remarks>	
            <returns>The number of bitmap pixels per DIP. </returns>
            <unmanaged>float IDWriteBitmapRenderTarget::GetPixelsPerDip()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.SetPixelsPerDip(System.Single)">
            <summary>	
            Sets the number of bitmap pixels per DIP (device-independent pixel). A DIP is 1/96 inch, so this value is the number if pixels per inch divided by 96. 	
            </summary>	
            <param name="pixelsPerDip">A value that specifies the number of pixels per DIP. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetPixelsPerDip([None] float pixelsPerDip)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetCurrentTransform(SharpDX.DirectWrite.Matrix@)">
            <summary>	
            Gets the transform that maps abstract coordinates to DIPs. By default this is the identity  transform. Note that this is unrelated to the world transform of the underlying device context. 	
            </summary>	
            <param name="transform">When this method returns, contains a transform matrix. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.SetCurrentTransform(System.Nullable{SharpDX.DirectWrite.Matrix})">
            <summary>	
            Sets the transform that maps abstract coordinate to DIPs (device-independent pixel). This does not affect the world transform of the underlying device context. 	
            </summary>	
            <param name="transform">Specifies the new transform. This parameter can be NULL, in which case the identity transform is implied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetCurrentTransform([In, Optional] const DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.GetSize(System.Drawing.Size@)">
            <summary>	
            Gets the dimensions of the target bitmap. 	
            </summary>	
            <param name="size">Returns  the width and height of the bitmap in pixels. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.BitmapRenderTarget.Resize(System.Int32,System.Int32)">
            <summary>	
            Resizes the bitmap. 	
            </summary>	
            <param name="width">The new bitmap width, in pixels. </param>
            <param name="height">The new bitmap height, in pixels. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::Resize([None] int width,[None] int height)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.MemoryDC">
            <summary>	
            Gets a handle to the memory device context. 	
            </summary>	
            <remarks>	
            An application can use the device context to draw using GDI functions. An application can obtain the bitmap handle (HBITMAP) by calling {{GetCurrentObject}}. An application that wants information about the underlying bitmap, including a reference to the pixel data, can call {{GetObject}} to fill in a {{DIBSECTION}} structure. The bitmap is always a 32-bit  top-down DIB.  Note that this method takes no parameters and returns an HDC variable, not an HRESULT. 	
            <code> memoryHdc = g_pBitmapRenderTarget-&gt;GetMemoryDC(); </code>	
            	
            The HDC returned here is still owned by the bitmap render targer object and should not be released or deleted by the client. 	
            </remarks>	
            <unmanaged>void* IDWriteBitmapRenderTarget::GetMemoryDC()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.PixelsPerDip">
            <summary>	
            Gets the number of bitmap pixels per DIP.  	
            </summary>	
            <remarks>	
            A DIP (device-independent pixel) is 1/96 inch. Therefore, this value is the number if pixels per inch divided by 96. 	
            </remarks>	
            <unmanaged>float IDWriteBitmapRenderTarget::GetPixelsPerDip()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.CurrentTransform">
            <summary>	
            Gets the transform that maps abstract coordinates to DIPs. By default this is the identity  transform. Note that this is unrelated to the world transform of the underlying device context. 	
            </summary>	
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.BitmapRenderTarget.Size">
            <summary>	
            Gets the dimensions of the target bitmap. 	
            </summary>	
            <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.EllipsisTrimming">
            <summary>
            An inline object for trimming, using an ellipsis as the omission sign.
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectNative">
            <summary>	
            Wraps an application-defined inline graphic, allowing DWrite to query metrics as if the graphic were a glyph inline with the text.	
            </summary>	
            <unmanaged>IDWriteInlineObject</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObject">
            <summary>	
            Wraps an application-defined inline graphic, allowing DWrite to query metrics as if the graphic were a glyph inline with the text.	
            </summary>	
            <unmanaged>IDWriteInlineObject</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObject.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
            The application implemented rendering callback (<see cref="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffect">The drawing effect set in <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)"/>.  Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObject.GetBreakConditions(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObject.Metrics">
            <summary>	
            <see cref="T:SharpDX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObject.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
            The application implemented rendering callback (<see cref="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffect">The drawing effect set in <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)"/>.  Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetBreakConditions(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.InlineObjectNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.Draw__(System.IntPtr,System.IntPtr,System.Single,System.Single,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            The application implemented rendering callback (<see cref="!:SharpDX.DirectWrite.TextRenderer.DrawInlineObject_"/>) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.  This parameter may be NULL. </param>
            <param name="renderer">The same renderer passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> as the object's containing parent.  This is useful if the inline object is recursive such as a nested layout. </param>
            <param name="originX">The x-coordinate at the upper-left corner of the inline object. </param>
            <param name="originY">The y-coordinate at the upper-left corner of the inline object. </param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line. </param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context and should be drawn flipped. </param>
            <param name="clientDrawingEffect">The drawing effect set in <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect_(System.IntPtr,SharpDX.DirectWrite.TextRange)"/>.  Usually this effect is a foreground brush that  is used in glyph drawing. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] void* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetMetrics_(SharpDX.DirectWrite.InlineObjectMetrics@)">
            <summary>	
            <see cref="T:SharpDX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <param name="metrics">When this method returns, contains a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetOverhangMetrics_(SharpDX.DirectWrite.OverhangMetrics@)">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <param name="overhangs">Overshoot of visible extents (in DIPs) outside the object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectNative.GetBreakConditions_(SharpDX.DirectWrite.BreakCondition@,SharpDX.DirectWrite.BreakCondition@)">
            <summary>	
            Layout uses this to determine the line-breaking behavior of the inline object among the text. 	
            </summary>	
            <param name="breakConditionBefore">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately preceding it. </param>
            <param name="breakConditionAfter">When this method returns, contains a value which indicates the line-breaking condition between the object and the content immediately following it. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectNative.Metrics">
            <summary>	
            <see cref="T:SharpDX.DirectWrite.TextLayout"/> calls this callback function to get the measurement of the inline object. 	
            </summary>	
            <returns>a structure describing the geometric measurement of anapplication-defined inline object.  These metrics are in relation to the baseline of the adjacent text. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectNative.OverhangMetrics">
            <summary>	
            TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object. In the case of a simple bitmap, with no padding and no overhang, all the overhangs will simply be zeroes.	
            </summary>	
            <returns>Overshoot of visible extents (in DIPs) outside the object. </returns>
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.EllipsisTrimming.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.EllipsisTrimming"/> class.
            </summary>
            <param name="nativePtr">The native PTR.</param>
        </member>
        <member name="M:SharpDX.DirectWrite.EllipsisTrimming.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.TextFormat)">
            <summary>	
            Creates an inline object for trimming, using an ellipsis as the omission sign. 	
            </summary>	
            <remarks>	
            The ellipsis will be created using the current settings of the format, including base font, style, and any effects. Alternate omission signs can be created by the application by implementing <see cref="T:SharpDX.DirectWrite.InlineObject"/>.  	
            </remarks>
            <param name="factory">a <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="textFormat">A text format object, created with {{CreateTextFormat}}, used for text layout. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([None] IDWriteTextFormat* textFormat,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Factory">
            <summary>	
            Used to create all subsequent DirectWrite objects. This interface is the root factory interface for all DirectWrite objects.	
            </summary>	
            <unmanaged>IDWriteFactory</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor(SharpDX.DirectWrite.FactoryType)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader(SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Registers a custom font collection loader with the factory object. 	
            </summary>	
            <remarks>	
            This function registers a font collection loader with DirectWrite. The font collection loader interface, which should be implemented by a singleton object, handles enumerating font files in a font collection given a particular type of key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation. 	
            </remarks>	
            <param name="fontCollectionLoader">Reference to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be registered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontCollectionLoader(SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>	
            Unregisters a custom font collection loader that was previously registered using {{RegisterFontCollectionLoader}}. 	
            </summary>	
            <param name="fontCollectionLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be unregistered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontFileLoader(SharpDX.DirectWrite.FontFileLoader)">
            <summary>	
            Registers a font file loader with DirectWrite. 	
            </summary>	
            <remarks>	
            This function registers a font file loader with DirectWrite. The font file loader interface, which should be implemented   by a singleton object, handles loading font file resources of a particular type from a key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontFileLoader"/> object for a particular file resource type. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontFileLoader(SharpDX.DirectWrite.FontFileLoader)">
            <summary>	
            Unregisters a font file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. 	
            </summary>	
            <remarks>	
            This function unregisters font file loader callbacks with the DirectWrite font system. You should implement the font file loader interface by a singleton object. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors and must not unregister themselves in their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration of font file loaders with DirectWrite should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to the file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.GetSystemFontCollection(System.Boolean)">
            <summary>	
            Gets an object which represents the set of installed fonts. 	
            </summary>	
            <param name="checkForUpdates">If this parameter is nonzero, the function performs an immediate check for changes to the set of installed fonts. If this parameter is FALSE, the function will still detect changes if the font cache service is running, but there may be some latency. For example, an application might specify TRUE if it has itself just installed a font and wants to  be sure the font collection contains that font. </param>
            <returns>When this method returns, contains the address of a reference to the system font collection object, or NULL in case of failure. </returns>
            <unmanaged>HRESULT IDWriteFactory::GetSystemFontCollection([Out] IDWriteFontCollection** fontCollection,[None] BOOL checkForUpdates)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomFontCollection_(System.IntPtr,System.IntPtr,System.Int32,SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            Creates a font collection using a custom font collection loader. 	
            </summary>	
            <param name="collectionLoader">An application-defined font collection loader, which must have been previously registered using {{RegisterFontCollectionLoader}}. </param>
            <param name="collectionKey">The key used by the loader to identify a collection of font files.  The buffer allocated for this key should at least be the size of collectionKeySize. </param>
            <param name="collectionKeySize">The size, in bytes, of the collection key. </param>
            <param name="fontCollection">Contains  an address of a reference to the system font collection object if the method succeeds, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontCollection([None] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            Registers a custom font collection loader with the factory object. 	
            </summary>	
            <remarks>	
            This function registers a font collection loader with DirectWrite. The font collection loader interface, which should be implemented by a singleton object, handles enumerating font files in a font collection given a particular type of key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation. 	
            </remarks>	
            <param name="fontCollectionLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be registered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontCollectionLoader_(System.IntPtr)">
            <summary>	
            Unregisters a custom font collection loader that was previously registered using {{RegisterFontCollectionLoader}}. 	
            </summary>	
            <param name="fontCollectionLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontCollectionLoader"/> object to be unregistered. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontCollectionLoader([None] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateFontFileReference(System.String,System.Nullable{System.Int64},SharpDX.DirectWrite.FontFile@)">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <param name="lastWriteTime">The last modified time of the input file path. If the parameter is omitted, the function will access the font file to obtain its last write time. You should specify this value to avoid extra disk access. Subsequent operations on the constructed object may fail if the user provided lastWriteTime doesn't match the file on the disk. </param>
            <param name="fontFile">When this method returns, contains an address of a reference to the newly created font file reference object, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomFontFileReference_(System.IntPtr,System.Int32,System.IntPtr,SharpDX.DirectWrite.FontFile@)">
            <summary>	
            Creates a reference to an application-specific font file resource. 	
            </summary>	
            <remarks>	
            This function is provided for cases when an application or a document needs to use a private font without having to install it on the system. fontFileReferenceKey has to be unique only in the scope of the fontFileLoader used in this call.  	
            </remarks>	
            <param name="fontFileReferenceKey">A font file reference key that uniquely identifies the font file resource during the lifetime of fontFileLoader. </param>
            <param name="fontFileReferenceKeySize">The size of the font file reference key in bytes. </param>
            <param name="fontFileLoader">The font file loader that will be used by the font system to load data from the file identified by fontFileReferenceKey. </param>
            <param name="fontFile">Contains an address of a reference to the newly created font file object when this method succeeds, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[None] IDWriteFontFileLoader* fontFileLoader,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateFontFace(SharpDX.DirectWrite.FontFaceType,System.Int32,SharpDX.DirectWrite.FontFile[],System.Int32,SharpDX.DirectWrite.FontSimulations,SharpDX.DirectWrite.FontFace@)">
            <summary>	
            Creates an object that represents a font face. 	
            </summary>	
            <param name="fontFaceType">A value that indicates the type of file format of the font face. </param>
            <param name="numberOfFiles">The number of font files, in element count, required to represent the font face. </param>
            <param name="fontFiles">A font file object representing the font face. Because<see cref="T:SharpDX.DirectWrite.FontFace"/> maintains its own references to the input font file objects, you may release them after this call. </param>
            <param name="faceIndex">The zero-based index of a font face, in cases when the font files contain a collection of font faces. If the font files contain a single face, this value should be zero. </param>
            <param name="fontFaceSimulationFlags">A value that indicates which, if any, font face simulation flags for algorithmic means of making text bold or italic are applied to the current font face. </param>
            <param name="fontFace">When this method returns, contains an address of a reference to the newly created font face object, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFace([None] DWRITE_FONT_FACE_TYPE fontFaceType,[None] int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[None] int faceIndex,[None] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            Creates a rendering parameters object with default settings for the primary monitor. Different monitors may have different rendering parameters, for more information see the {{How to Add Support for Multiple Monitors}} topic.	
            </summary>	
            <param name="renderingParams">When this method returns, contains an address of a reference to the newly created  rendering parameters object. </param>
            <returns>Standard HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateRenderingParams([Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateMonitorRenderingParams(System.IntPtr,SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            Creates a rendering parameters object with default settings for the specified monitor. In most cases, this is the preferred way to create a rendering parameters object.	
            </summary>	
            <param name="monitor">A handle for the specified monitor. </param>
            <param name="renderingParams">When this method returns, contains an address of a reference to the rendering parameters object created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateMonitorRenderingParams([None] void* monitor,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateCustomRenderingParams(System.Single,System.Single,System.Single,SharpDX.DirectWrite.PixelGeometry,SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            Creates a rendering parameters object with the specified properties. 	
            </summary>	
            <param name="gamma">The gamma level to be set for the new rendering parameters object. </param>
            <param name="enhancedContrast">The enhanced contrast level to be set for the new rendering parameters object. </param>
            <param name="clearTypeLevel">The ClearType level to be set for the new rendering parameters object. </param>
            <param name="pixelGeometry">Represents the internal structure of a device pixel (that is, the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. </param>
            <param name="renderingMode">A value that represents the method (for example, ClearType natural quality) for rendering glyphs. </param>
            <param name="renderingParams">When this method returns, contains an address of a reference to the newly created rendering parameters object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomRenderingParams([None] float gamma,[None] float enhancedContrast,[None] float clearTypeLevel,[None] DWRITE_PIXEL_GEOMETRY pixelGeometry,[None] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.RegisterFontFileLoader_(System.IntPtr)">
            <summary>	
            Registers a font file loader with DirectWrite. 	
            </summary>	
            <remarks>	
            This function registers a font file loader with DirectWrite. The font file loader interface, which should be implemented   by a singleton object, handles loading font file resources of a particular type from a key. A given instance can only be registered once. Succeeding attempts will return an error, indicating that it has already been registered. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors, and must not unregister themselves inside their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration with DirectWrite of font file loaders should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to a <see cref="T:SharpDX.DirectWrite.FontFileLoader"/> object for a particular file resource type. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::RegisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.UnregisterFontFileLoader_(System.IntPtr)">
            <summary>	
            Unregisters a font file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. 	
            </summary>	
            <remarks>	
            This function unregisters font file loader callbacks with the DirectWrite font system. You should implement the font file loader interface by a singleton object. Note that font file loader implementations must not register themselves with DirectWrite inside their constructors and must not unregister themselves in their destructors, because registration and unregistraton operations increment and decrement the object reference count respectively. Instead, registration and unregistration of font file loaders with DirectWrite should be performed outside of the font file loader implementation.  	
            </remarks>	
            <param name="fontFileLoader">Pointer to the file loader that was previously registered with the DirectWrite font system using {{RegisterFontFileLoader}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::UnregisterFontFileLoader([None] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextFormat(System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single,System.String,SharpDX.DirectWrite.TextFormat@)">
            <summary>	
            Creates a text format object used for text layout. 	
            </summary>	
            <param name="fontFamilyName">An array of characters that contains the name of the font family </param>
            <param name="fontCollection">A reference to a font collection object. When this is NULL, indicates the system font collection. </param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method. </param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method. </param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method. </param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch. </param>
            <param name="localeName">An array of characters that contains the locale name. </param>
            <param name="textFormat">When this method returns, contains an address of a reference to a  newly created text format object, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextFormat([In] const wchar_t* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] float fontSize,[In] const wchar_t* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTypography(SharpDX.DirectWrite.Typography@)">
            <summary>	
            Creates a typography object for use in a text layout. 	
            </summary>	
            <param name="typography">When this method returns, contains the address of  a reference to a newly created typography object, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTypography([Out] IDWriteTypography** typography)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.GetGdiInterop(SharpDX.DirectWrite.GdiInterop@)">
            <summary>	
            Creates an object that is used for interoperability with GDI. 	
            </summary>	
            <param name="gdiInterop">When this method returns, contains an address of a reference to a GDI interop object if successful, or NULL in case of failure. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)">
            <summary>	
            Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result. 	
            </summary>	
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="stringLength">The number of characters in  the string. </param>
            <param name="textFormat">A reference to an object that indicates the format to apply to the string. </param>
            <param name="maxWidth">The width of the layout box. </param>
            <param name="maxHeight">The height of the layout box. </param>
            <param name="textLayout">When this method returns, contains an address of a reference to the resultant text layout object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float maxWidth,[None] float maxHeight,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateGdiCompatibleTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,SharpDX.DirectWrite.TextLayout@)">
            <summary>	
            Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="stringLength">The length of the string, in character count. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specifies the font size and pixels per DIP. </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
            <param name="textLayout">When this method returns, contains an address to the reference of the resultant text layout object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateEllipsisTrimmingSign(SharpDX.DirectWrite.TextFormat,SharpDX.DirectWrite.InlineObject@)">
            <summary>	
            Creates an inline object for trimming, using an ellipsis as the omission sign. 	
            </summary>	
            <remarks>	
            The ellipsis will be created using the current settings of the format, including base font, style, and any effects. Alternate omission signs can be created by the application by implementing <see cref="T:SharpDX.DirectWrite.InlineObject"/>.  	
            </remarks>	
            <param name="textFormat">A text format object, created with {{CreateTextFormat}}, used for text layout. </param>
            <param name="trimmingSign">When this method returns, contains an address of a reference to the omission (that is, ellipsis trimming) sign created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([None] IDWriteTextFormat* textFormat,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateTextAnalyzer(SharpDX.DirectWrite.TextAnalyzer@)">
            <summary>	
            Returns an interface for performing text analysis. 	
            </summary>	
            <param name="textAnalyzer">When this method returns, contains an address of  a reference to the newly created text analyzer object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateTextAnalyzer([Out] IDWriteTextAnalyzer** textAnalyzer)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateNumberSubstitution(SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean,SharpDX.DirectWrite.NumberSubstitution@)">
            <summary>	
            Creates a number substitution object using a locale name, substitution method, and an indicator  whether to ignore user overrides (use NLS defaults for the given culture instead). 	
            </summary>	
            <param name="substitutionMethod">A value that specifies how to apply number substitution on digits and related punctuation. </param>
            <param name="localeName">The name of the locale to be used in the numberSubstitution object. </param>
            <param name="ignoreUserOverride">A Boolean flag that indicates whether to ignore user overrides. </param>
            <param name="numberSubstitution">When this method returns, contains an address to  a reference to the number substitution object created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Factory.CreateGlyphRunAnalysis(SharpDX.DirectWrite.GlyphRun@,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single,SharpDX.DirectWrite.GlyphRunAnalysis@)">
            <summary>	
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run. 	
            </summary>	
            <remarks>	
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.  	
            </remarks>	
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on). </param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25. </param>
            <param name="transform">Optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified the emSize and pixelsPerDip. </param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline). </param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs. </param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs. </param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs. </param>
            <param name="glyphRunAnalysis">When this method returns, contains an address of a reference to the newly created glyph run analysis object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Factory.GdiInterop">
            <summary>	
            Creates an object that is used for interoperability with GDI. 	
            </summary>	
            <unmanaged>HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Font">
            <summary>	
            Represents a physical font in a font collection. This interface is used to create font faces from  physical fonts, or  to retrieve information such as  font face metrics or face names from existing font faces.	
            </summary>	
            <unmanaged>IDWriteFont</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetInformationalStrings(SharpDX.DirectWrite.InformationalStringId,SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            Gets a localized strings collection containing the specified informational strings, indexed by locale name. 	
            </summary>	
            <remarks>	
            If the font does not contain the string specified by informationalStringID, the return value is S_OK but  informationalStrings receives a NULL reference and exists receives the value FALSE. 	
            </remarks>	
            <param name="informationalStringID">A value that identifies the  informational string to get. For example, <see cref="F:SharpDX.DirectWrite.InformationalStringId.Description"/> specifies a string that contains a description of the font.  </param>
            <param name="informationalStrings">When this method returns, contains an address of a reference to the newly created localized strings object. </param>
            <returns>TRUE if the font contains the specified string ID; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFont::GetInformationalStrings([None] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.HasCharacter(System.Int32)">
            <summary>	
            Determines whether the font supports a specified character. 	
            </summary>	
            <param name="unicodeValue">A Unicode (UCS-4) character value for the method to inspect. </param>
            <returns>TRUE if the font supports the specified character; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFont::HasCharacter([None] int unicodeValue,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Font"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetFontFamily(SharpDX.DirectWrite.FontFamily@)">
            <summary>	
            Gets the font family to which the specified font belongs. 	
            </summary>	
            <param name="fontFamily">When this method returns, contains an address of a reference to the font family object to which the specified font belongs. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetWeight">
            <summary>	
            Gets the weight, or stroke thickness, of the specified font. 	
            </summary>	
            <returns>A value that indicates the weight for the specified font. </returns>
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetStretch">
            <summary>	
            Gets the stretch, or width, of the specified font. 	
            </summary>	
            <returns>A value that indicates the type of stretch, or width, applied to the specified font. </returns>
            <unmanaged>DWRITE_FONT_STRETCH IDWriteFont::GetStretch()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetStyle">
            <summary>	
            Gets the style, or slope, of the specified font. 	
            </summary>	
            <returns>A value that indicates the type of style, or slope, of the specified font. </returns>
            <unmanaged>DWRITE_FONT_STYLE IDWriteFont::GetStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.IsSymbolFont_">
            <summary>	
            Determines whether the font is a symbol font. 	
            </summary>	
            <returns>TRUE if the font is a symbol font; otherwise, FALSE. </returns>
            <unmanaged>BOOL IDWriteFont::IsSymbolFont()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetFaceNames(SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            Gets a localized strings collection containing the face names for the font (such as Regular or Bold), indexed by locale name. 	
            </summary>	
            <param name="names">When this method returns, contains an address to a  reference to the newly created localized strings object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetInformationalStrings(SharpDX.DirectWrite.InformationalStringId,SharpDX.DirectWrite.LocalizedStrings@,System.Int32@)">
            <summary>	
            Gets a localized strings collection containing the specified informational strings, indexed by locale name. 	
            </summary>	
            <remarks>	
            If the font does not contain the string specified by informationalStringID, the return value is S_OK but  informationalStrings receives a NULL reference and exists receives the value FALSE. 	
            </remarks>	
            <param name="informationalStringID">A value that identifies the  informational string to get. For example, <see cref="F:SharpDX.DirectWrite.InformationalStringId.Description"/> specifies a string that contains a description of the font.  </param>
            <param name="informationalStrings">When this method returns, contains an address of a reference to the newly created localized strings object. </param>
            <param name="exists">When this method returns, TRUE if the font contains the specified string ID; otherwise, FALSE. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFont::GetInformationalStrings([None] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetSimulations">
            <summary>	
            Gets a value that indicates what simulations are applied to the specified font. 	
            </summary>	
            <returns>A value that indicates one or more of the  types of simulations (none, bold, or oblique)  applied to the specified font. </returns>
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.GetMetrics(SharpDX.DirectWrite.FontMetrics@)">
            <summary>	
            Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations. 	
            </summary>	
            <param name="fontMetrics">When this method returns, contains a structure that has font metrics for the current font face. The metrics returned by this function are in font design units. </param>
            <unmanaged>void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.HasCharacter(System.Int32,System.Int32@)">
            <summary>	
            Determines whether the font supports a specified character. 	
            </summary>	
            <param name="unicodeValue">A Unicode (UCS-4) character value for the method to inspect. </param>
            <param name="exists">When this method returns, TRUE if the font supports the specified character; otherwise, FALSE. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFont::HasCharacter([None] int unicodeValue,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Font.CreateFontFace(SharpDX.DirectWrite.FontFace@)">
            <summary>	
            Creates a font face object for the font. 	
            </summary>	
            <param name="fontFace">When this method returns, contains an address of a reference to the newly created font face object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFont::CreateFontFace([Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.FontFamily">
            <summary>	
            Gets the font family to which the specified font belongs. 	
            </summary>	
            <unmanaged>HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Weight">
            <summary>	
            Gets the weight, or stroke thickness, of the specified font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Stretch">
            <summary>	
            Gets the stretch, or width, of the specified font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH IDWriteFont::GetStretch()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Style">
            <summary>	
            Gets the style, or slope, of the specified font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE IDWriteFont::GetStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.IsSymbolFont">
            <summary>	
            Determines whether the font is a symbol font. 	
            </summary>	
            <unmanaged>BOOL IDWriteFont::IsSymbolFont()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.FaceNames">
            <summary>	
            Gets a localized strings collection containing the face names for the font (such as Regular or Bold), indexed by locale name. 	
            </summary>	
            <unmanaged>HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Simulations">
            <summary>	
            Gets a value that indicates what simulations are applied to the specified font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Font.Metrics">
            <summary>	
            Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations. 	
            </summary>	
            <unmanaged>void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollection">
            <summary>	
            An object that encapsulates a set of fonts, such as the set of fonts installed on the system, or the set of fonts in a particular directory. The font collection API can be used to discover what font families and fonts are available, and to obtain some metadata about the fonts.	
            </summary>	
            <unmanaged>IDWriteFontCollection</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontCollectionLoader,SharpDX.DataStream)">
            <summary>	
            Creates a font collection using a custom font collection loader. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="collectionLoader">An application-defined font collection loader, which must have been previously registered using <see cref="M:SharpDX.DirectWrite.Factory.RegisterFontCollectionLoader_(System.IntPtr)"/>. </param>
            <param name="collectionKey">The key used by the loader to identify a collection of font files.  The buffer allocated for this key should at least be the size of collectionKeySize. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontCollection([None] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.FindFamilyName(System.String,System.Int32@)">
            <summary>	
            Finds the font family with the specified family name. 	
            </summary>	
            <param name="familyName">An array of characters, which is null-terminated, containing the name of the font family. The name is not case-sensitive but must otherwise exactly match a family name in the collection. </param>
            <param name="index">When this method returns, contains the zero-based index of the matching font family if the family name was found; otherwise, UINT_MAX. </param>
            <returns>TRUE if the family name exists; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFamilyCount">
            <summary>	
            Gets the number of font families in the collection. 	
            </summary>	
            <returns>The number of font families in the collection. </returns>
            <unmanaged>int IDWriteFontCollection::GetFontFamilyCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFamily(System.Int32)">
            <summary>	
            Creates a font family object given a zero-based font family index. 	
            </summary>	
            <param name="index">Zero-based index of the font family. </param>
            <returns>When this method returns, contains the address of   a reference to the newly created font family object. </returns>
            <unmanaged>HRESULT IDWriteFontCollection::GetFontFamily([None] int index,[Out] IDWriteFontFamily** fontFamily)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.FindFamilyName(System.String,System.Int32@,System.Int32@)">
            <summary>	
            Finds the font family with the specified family name. 	
            </summary>	
            <param name="familyName">An array of characters, which is null-terminated, containing the name of the font family. The name is not case-sensitive but must otherwise exactly match a family name in the collection. </param>
            <param name="index">When this method returns, contains the zero-based index of the matching font family if the family name was found; otherwise, UINT_MAX. </param>
            <param name="exists">When this method returns, TRUE if the family name exists; otherwise, FALSE. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollection.GetFontFromFontFace(SharpDX.DirectWrite.FontFace)">
            <summary>	
            Gets the font object that corresponds to the same physical font as the specified font face object. The specified physical font must belong  to the font collection. 	
            </summary>	
            <param name="fontFace">A font face object that specifies the physical font. </param>
            <returns>When this method returns, contains the address of a reference to the newly created font object if successful; otherwise, NULL. </returns>
            <unmanaged>HRESULT IDWriteFontCollection::GetFontFromFontFace([None] IDWriteFontFace* fontFace,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontCollection.FontFamilyCount">
            <summary>	
            Gets the number of font families in the collection. 	
            </summary>	
            <unmanaged>int IDWriteFontCollection::GetFontFamilyCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoader">
            <summary>	
            Used to construct a collection of fonts given a particular type of key. 	
            </summary>	
            <unmanaged>IDWriteFontCollectionLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollectionLoader.CreateEnumeratorFromKey(SharpDX.DirectWrite.Factory,SharpDX.DataStream)">
            <summary>	
            Creates a font file enumerator object that encapsulates a collection of font files. The font system calls back to this interface to create a font collection. 	
            </summary>	
            <param name="factory">Pointer to the <see cref="T:SharpDX.DirectWrite.Factory"/> object that was used to create the current font collection. </param>
            <param name="collectionKey">A font collection key that uniquely identifies the collection of font files within the scope of the font collection loader being used. The buffer allocated for this key must be at least  the size, in bytes, specified by collectionKeySize. </param>
            <returns>a reference to the newly created font file enumerator.</returns>
            <unmanaged>HRESULT IDWriteFontCollectionLoader::CreateEnumeratorFromKey([None] IDWriteFactory* factory,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontFileEnumerator** fontFileEnumerator)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoaderCallback">
            <summary>
            Internal FontCollectionLoader Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontCollectionLoaderCallback.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontCollectionLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontCollectionLoaderCallback"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontCollectionLoaderCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontCollectionLoaderCallback.CreateEnumeratorFromKeyDelegate">
            <unmanaged>HRESULT IDWriteFontCollectionLoader::CreateEnumeratorFromKey([None] IDWriteFactory* factory,[In, Buffer] const void* collectionKey,[None] int collectionKeySize,[Out] IDWriteFontFileEnumerator** fontFileEnumerator)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFace">
            <summary>	
            Represents an absolute reference to a font face which contains font face type, appropriate file references,  face identification data and various font data such as metrics, names and glyph outlines. 	
            </summary>	
            <unmanaged>IDWriteFontFace</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.FontFaceType,SharpDX.DirectWrite.FontFile[],System.Int32,SharpDX.DirectWrite.FontSimulations)">
            <summary>	
            Creates an object that represents a font face. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFaceType">A value that indicates the type of file format of the font face. </param>
            <param name="fontFiles">A font file object representing the font face. Because<see cref="T:SharpDX.DirectWrite.FontFace"/> maintains its own references to the input font file objects, you may release them after this call. </param>
            <param name="faceIndex">The zero-based index of a font face, in cases when the font files contain a collection of font faces. If the font files contain a single face, this value should be zero. </param>
            <param name="fontFaceSimulationFlags">A value that indicates which, if any, font face simulation flags for algorithmic means of making text bold or italic are applied to the current font face. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFace([None] DWRITE_FONT_FACE_TYPE fontFaceType,[None] int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[None] int faceIndex,[None] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(SharpDX.DirectWrite.Font)">
            <summary>	
            Creates a font face object for the font. 	
            </summary>	
            <param name="font">the <see cref="T:SharpDX.DirectWrite.Font"/> to create the FontFace from.</param>
            <unmanaged>HRESULT IDWriteFont::CreateFontFace([Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Boolean)">
            <summary>	
            Obtains ideal (resolution-independent) glyph metrics in font design units.  	
            </summary>	
            <remarks>	
            Design glyph metrics are used for glyph positioning. 	
            </remarks>	
            <param name="glyphIndices">An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by glyphCount. </param>
            <param name="isSideways">Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation </param>
            <returns>an array of <see cref="T:SharpDX.DirectWrite.GlyphMetrics"/> structures. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Int16[],System.Boolean)">
            <summary>	
            Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.	
            </summary>	
            <param name="fontSize">The ogical size of the font in DIP units. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <param name="useGdiNatural">When set to FALSE, the metrics are the same as the metrics of GDI aliased text.  When set to TRUE, the metrics are the same as the metrics of text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. </param>
            <param name="glyphIndices">An array of glyph indices for which to compute the metrics. </param>
            <param name="isSideways">A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation. </param>
            <returns>An array of <see cref="T:SharpDX.DirectWrite.GlyphMetrics" /> structures filled by this function. The metrics are in font design units. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[])">
            <summary>	
            Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table. 	
            </summary>	
            <remarks>	
            Note that this mapping is primarily provided for line layout engines built on top of the physical font API. Because of OpenType glyph substitution and line layout character substitution, the nominal conversion does not always correspond to how a Unicode string will map to glyph indices when rendering using a particular font face. Also, note that Unicode variant selectors provide for alternate mappings for character to glyph. This call will always return the default variant.  	
            </remarks>	
            <param name="codePoints">An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by codePointCount. </param>
            <returns>a reference to an array of nominal glyph indices filled by this function.</returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphIndices([In, Buffer] const int* codePoints,[None] int codePointCount,[Out, Buffer] short* glyphIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFiles">
            <summary>	
            Obtains the font files representing a font face. 	
            </summary>	
            <remarks>	
            The IDWriteFontFace::GetFiles method should be called twice.  The first time you call GetFilesfontFiles should be NULL. When the method returns, numberOfFiles receives the number of font files that represent the font face. Then, call the method a second time, passing the numberOfFiles value that was output the first call, and a non-null buffer of the correct size to store the <see cref="T:SharpDX.DirectWrite.FontFile"/> references. 	
            </remarks>	
            <returns>An array that stores references to font files representing the font face. This parameter can be NULL if the user wants only the number of files representing the font face. This API increments reference count of the font file references returned according to COM conventions, and the client should release them when finished. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetFiles([InOut] int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.TryGetFontTable(System.Int32,SharpDX.DataStream@,System.IntPtr@)">
            <summary>	
            Finds the specified OpenType font table if it exists and returns a reference to it. The function accesses the underlying font data through the <see cref="T:SharpDX.DirectWrite.FontFileStream" /> interface implemented by the font file loader. 	
            </summary>	
            <remarks>	
            The context for the same tag may be different for each call, so each one must be held and released separately.  	
            </remarks>	
            <param name="openTypeTableTag">The four-character tag of a OpenType font table to find. Use the DWRITE_MAKE_OPENTYPE_TAG macro to create it as an UINT32. Unlike GDI, it does not support the special TTCF and null tags to access the whole font. </param>
            <param name="tableData">When this method returns, contains the address of  a reference to the base of the table in memory. The reference is valid only as long as the font face used to get the font table still exists; (not any other font face, even if it actually refers to the same physical font).</param>
            <param name="tableContext">When this method returns, the address of a reference to  the opaque context, which must be freed by calling {{ReleaseFontTable}}. The context actually comes from the lower-level <see cref="T:SharpDX.DirectWrite.FontFileStream" />, which may be implemented by the application or DWrite itself. It is possible for a NULL tableContext to be returned, especially if the implementation performs direct memory mapping on the whole file. Nevertheless, always release it later, and do not use it as a test for function success. The same table can be queried multiple times, but because each returned context can be different, you must release each context separately.  </param>
            <returns>TRUE if the font table exists; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteFontFace::TryGetFontTable([In] int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphRunOutline(System.Single,System.Int16[],System.Single[],SharpDX.DirectWrite.GlyphOffset[],System.Boolean,System.Boolean,SharpDX.Direct2D1.SimplifiedGeometrySink)">
            <summary>	
            Computes the outline of a run of glyphs by calling back to the outline sink interface. 	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch. </param>
            <param name="glyphIndices">An array of glyph indices. The glyphs are in logical order and the advance direction depends on the isRightToLeft parameter. The array must be allocated and be able to contain the number of elements specified by glyphCount. </param>
            <param name="glyphAdvances">An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. glyphAdvances contains the number of elements specified by glyphIndices.Length. </param>
            <param name="glyphOffsets">An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   glyphOffsets contains the number of elements specified by glyphIndices.Length. </param>
            <param name="isSideways">If TRUE, the ascender of the glyph runs alongside the baseline. If FALSE, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have isSideways set to FALSE. A client can render a vertical run by setting isSideways to TRUE and rotating the resulting geometry 90 degrees to the right using a transform. The isSideways and isRightToLeft parameters cannot both be true. </param>
            <param name="isRightToLeft">The visual order of the glyphs. If this parameter is FALSE, then glyph advances are from left to right. If TRUE, the advance direction is right to left. By default, the advance direction is left to right. </param>
            <param name="geometrySink">A reference to the interface that is called back to perform outline drawing operations. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphRunOutline([None] float emSize,[In, Buffer] const short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[None] int glyphCount,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IDWriteGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFace"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFaceType">
            <summary>	
            Obtains the file format type of a font face. 	
            </summary>	
            <returns>A value that indicates the type of format for the font face (such as Type 1, TrueType, vector, or bitmap). </returns>
            <unmanaged>DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetFiles(System.Int32@,SharpDX.DirectWrite.FontFile[])">
            <summary>	
            Obtains the font files representing a font face. 	
            </summary>	
            <remarks>	
            The IDWriteFontFace::GetFiles method should be called twice.  The first time you call GetFilesfontFiles should be NULL. When the method returns, numberOfFiles receives the number of font files that represent the font face. Then, call the method a second time, passing the numberOfFiles value that was output the first call, and a non-null buffer of the correct size to store the <see cref="T:SharpDX.DirectWrite.FontFile"/> references. 	
            </remarks>	
            <param name="numberOfFiles">If fontFiles is NULL, receives the number of files representing the font face.  Otherwise, the number of font files being requested should be passed.  See the Remarks section below for more information. </param>
            <param name="fontFiles">When this method returns, contains a reference to a user-provided array that stores references to font files representing the font face. This parameter can be NULL if the user wants only the number of files representing the font face. This API increments reference count of the font file references returned according to COM conventions, and the client should release them when finished. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetFiles([InOut] int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetIndex">
            <summary>	
            Obtains the index of a font face in the context of its font files. 	
            </summary>	
            <returns>The zero-based index of a font face in cases when the font files contain a collection of font faces. If the font files contain a single face, this value is zero. </returns>
            <unmanaged>int IDWriteFontFace::GetIndex()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetSimulations">
            <summary>	
            Obtains the algorithmic style simulation flags of a font face. 	
            </summary>	
            <returns>Font face simulation flags for algorithmic means of making text bold or italic. </returns>
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.IsSymbolFont_">
            <summary>	
            Determines whether the font is a symbol font. 	
            </summary>	
            <returns>Returns TRUE if the font is a symbol font, otherwise FALSE. </returns>
            <unmanaged>BOOL IDWriteFontFace::IsSymbolFont()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetMetrics(SharpDX.DirectWrite.FontMetrics@)">
            <summary>	
            Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations. 	
            </summary>	
            <param name="fontFaceMetrics">When this method returns, a?<see cref="T:SharpDX.DirectWrite.FontMetrics"/> structure that holds metrics (such as ascent, descent, or cap height) for the current font face element. The metrics returned by this function are in font design units. </param>
            <unmanaged>void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphCount">
            <summary>	
            Obtains the number of glyphs in the font face. 	
            </summary>	
            <returns>The number of glyphs in the font face. </returns>
            <unmanaged>short IDWriteFontFace::GetGlyphCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetDesignGlyphMetrics(System.Int16[],System.Int32,SharpDX.DirectWrite.GlyphMetrics[],System.Boolean)">
            <summary>	
            Obtains ideal (resolution-independent) glyph metrics in font design units.  	
            </summary>	
            <remarks>	
            Design glyph metrics are used for glyph positioning. 	
            </remarks>	
            <param name="glyphIndices">An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by glyphCount. </param>
            <param name="glyphCount">The number of elements in the glyphIndices array. </param>
            <param name="glyphMetrics">When this method returns, contains an array of DWRITE_GLYPH_METRICS structures.  glyphMetrics must be initialized with an empty buffer that contains at least as many elements as glyphCount. The metrics returned by this function are in font design units. </param>
            <param name="isSideways">Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphIndices(System.Int32[],System.Int32,System.Int16[])">
            <summary>	
            Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table. 	
            </summary>	
            <remarks>	
            Note that this mapping is primarily provided for line layout engines built on top of the physical font API. Because of OpenType glyph substitution and line layout character substitution, the nominal conversion does not always correspond to how a Unicode string will map to glyph indices when rendering using a particular font face. Also, note that Unicode variant selectors provide for alternate mappings for character to glyph. This call will always return the default variant.  	
            </remarks>	
            <param name="codePoints">An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by codePointCount. </param>
            <param name="codePointCount">The number of elements in the codePoints array. </param>
            <param name="glyphIndices">When this method returns, contains a reference to an array of nominal glyph indices filled by this function. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphIndices([In, Buffer] const int* codePoints,[None] int codePointCount,[Out, Buffer] short* glyphIndices)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.TryGetFontTable(System.Int32,System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@)">
            <summary>	
            Finds the specified OpenType font table if it exists and returns a reference to it. The function accesses the underlying font data through the <see cref="T:SharpDX.DirectWrite.FontFileStream"/> interface implemented by the font file loader. 	
            </summary>	
            <remarks>	
            The context for the same tag may be different for each call, so each one must be held and released separately.  	
            </remarks>	
            <param name="openTypeTableTag">The four-character tag of a OpenType font table to find. Use the DWRITE_MAKE_OPENTYPE_TAG macro to create it as an UINT32. Unlike GDI, it does not support the special TTCF and null tags to access the whole font. </param>
            <param name="tableData">When this method returns, contains the address of  a reference to the base of the table in memory. The reference is valid only as long as the font face used to get the font table still exists; (not any other font face, even if it actually refers to the same physical font). This parameter is passed uninitialized. </param>
            <param name="tableSize">When this method returns, contains a reference to the size, in bytes, of the font table. </param>
            <param name="tableContext">When this method returns, the address of a reference to  the opaque context, which must be freed by calling {{ReleaseFontTable}}. The context actually comes from the lower-level <see cref="T:SharpDX.DirectWrite.FontFileStream"/>, which may be implemented by the application or DWrite itself. It is possible for a NULL tableContext to be returned, especially if the implementation performs direct memory mapping on the whole file. Nevertheless, always release it later, and do not use it as a test for function success. The same table can be queried multiple times, but because each returned context can be different, you must release each context separately.  </param>
            <param name="exists">When this method returns, TRUE if the font table exists; otherwise, FALSE. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::TryGetFontTable([In] int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.ReleaseFontTable(System.IntPtr)">
            <summary>	
            Releases the table obtained earlier from {{TryGetFontTable}}. 	
            </summary>	
            <param name="tableContext">A reference to the opaque context from {{TryGetFontTable}}. </param>
            <unmanaged>void IDWriteFontFace::ReleaseFontTable([In] void* tableContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGlyphRunOutline_(System.Single,System.Int16[],System.Single[],SharpDX.DirectWrite.GlyphOffset[],System.Int32,System.Boolean,System.Boolean,System.IntPtr)">
            <summary>	
            Computes the outline of a run of glyphs by calling back to the outline sink interface. 	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch. </param>
            <param name="glyphIndices">An array of glyph indices. The glyphs are in logical order and the advance direction depends on the isRightToLeft parameter. The array must be allocated and be able to contain the number of elements specified by glyphCount. </param>
            <param name="glyphAdvances">An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. glyphAdvances contains the number of elements specified by glyphCount. </param>
            <param name="glyphOffsets">An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   glyphOffsets contains the number of elements specified by glyphCount. </param>
            <param name="glyphCount">The number of glyphs in the run. </param>
            <param name="isSideways">If TRUE, the ascender of the glyph runs alongside the baseline. If FALSE, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have isSideways set to FALSE. A client can render a vertical run by setting isSideways to TRUE and rotating the resulting geometry 90 degrees to the right using a transform. The isSideways and isRightToLeft parameters cannot both be true. </param>
            <param name="isRightToLeft">The visual order of the glyphs. If this parameter is FALSE, then glyph advances are from left to right. If TRUE, the advance direction is right to left. By default, the advance direction is left to right. </param>
            <param name="geometrySink">A reference to the interface that is called back to perform outline drawing operations. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGlyphRunOutline([None] float emSize,[In, Buffer] const short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[None] int glyphCount,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IDWriteGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetRecommendedRenderingMode(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Determines the recommended rendering mode for the font, using the specified size and rendering parameters. 	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. For example, if the DPI of the rendering surface is 96, this  value is 1.0f. If the DPI is 120, this value is 120.0f/96. </param>
            <param name="measuringMode">The measuring method that will be used for glyphs in the font. Renderer implementations may choose different rendering modes for different measuring methods, for example:   DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL for DWRITE_MEASURING_MODE_NATURAL  DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC for DWRITE_MEASURING_MODE_GDI_CLASSIC  DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL for DWRITE_MEASURING_MODE_GDI_NATURAL  </param>
            <param name="renderingParams">A reference to an object that contains rendering settings such as gamma level, enhanced contrast, and ClearType level. This parameter is necessary in case the rendering parameters  object overrides the rendering mode. </param>
            <returns>When this method returns, contains a value that indicates the recommended rendering mode to use. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetRecommendedRenderingMode([None] float emSize,[None] float pixelsPerDip,[None] DWRITE_MEASURING_MODE measuringMode,[None] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE* renderingMode)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix})">
            <summary>	
            Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a fontface and are used by applications for layout calculations.	
            </summary>	
            <param name="emSize">The logical size of the font in DIP units. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <returns>A reference to a {{DWRITE_FONT_METRIC}}S structure to fill in. The metrics returned by this function are in font design units. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFace.GetGdiCompatibleGlyphMetrics(System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Int16[],System.Int32,SharpDX.DirectWrite.GlyphMetrics[],System.Boolean)">
            <summary>	
            Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.	
            </summary>	
            <param name="emSize">The ogical size of the font in DIP units. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <param name="useGdiNatural">When set to FALSE, the metrics are the same as the metrics of GDI aliased text.  When set to TRUE, the metrics are the same as the metrics of text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. </param>
            <param name="glyphIndices">An array of glyph indices for which to compute the metrics. </param>
            <param name="glyphCount">The number of elements in the glyphIndices array. </param>
            <param name="glyphMetrics">An array of <see cref="T:SharpDX.DirectWrite.GlyphMetrics"/> structures filled by this function. The metrics are in font design units. </param>
            <param name="isSideways">A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation. </param>
            <returns>Standard HRESULT error code. If any of the input glyph indices are outside of the valid glyph index range for the current font face, E_INVALIDARG will be returned. </returns>
            <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([None] float emSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[In, Buffer] const short* glyphIndices,[None] int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[None] BOOL isSideways)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.FaceType">
            <summary>	
            Obtains the file format type of a font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Index">
            <summary>	
            Obtains the index of a font face in the context of its font files. 	
            </summary>	
            <unmanaged>int IDWriteFontFace::GetIndex()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Simulations">
            <summary>	
            Obtains the algorithmic style simulation flags of a font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.IsSymbolFont">
            <summary>	
            Determines whether the font is a symbol font. 	
            </summary>	
            <unmanaged>BOOL IDWriteFontFace::IsSymbolFont()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.Metrics">
            <summary>	
            Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations. 	
            </summary>	
            <unmanaged>void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFace.GlyphCount">
            <summary>	
            Obtains the number of glyphs in the font face. 	
            </summary>	
            <unmanaged>short IDWriteFontFace::GetGlyphCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFeature">
            <summary>	
            Specifies properties used to identify and execute typographic features in the current font face.	
            </summary>	
            <remarks>	
            A non-zero value generally enables the feature execution, while the zero value disables it. A feature requiring a selector uses this value to indicate the selector index. The OpenType standard provides access to typographic features available in the font by means of a feature tag with the associated parameters. The OpenType feature tag is a 4-byte identifier of the registered name of a feature. For example, the 'kern' feature name tag is used to identify the 'Kerning' feature in OpenType font. Similarly, the OpenType feature tag for 'Standard Ligatures' and 'Fractions' is 'liga' and 'frac' respectively. Since a single run can be associated with more than one typographic features, the Text String API accepts typographic settings for a run as a list of features and are executed in the order they are specified. The value of the tag member represents the OpenType name tag of the feature, while the param value represents additional parameter for the execution of the feature referred by the tag member. Both nameTag and parameter are stored as little endian, the same convention followed by GDI.  Most features treat the Param value as a binary value that indicates whether to turn the execution of the feature on or off, with it being off by default in the majority of cases. Some features, however, treat this value as an integral value representing the integer index to the list of alternate results it may produce during the execution; for instance, the feature 'Stylistic Alternates' or 'salt' uses the parameter value as an index to the list of alternate substituting glyphs it could produce for a specified glyph.  	
            </remarks>	
            <unmanaged>DWRITE_FONT_FEATURE</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFeature.#ctor(SharpDX.DirectWrite.FontFeatureTag,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFeature"/> struct.
            </summary>
            <param name="nameTag">The name tag.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeature.NameTag">
            <summary>	
            The feature OpenType name identifier. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG nameTag</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeature.Parameter">
            <summary>	
            The execution parameter of the feature. 	
            </summary>	
            <unmanaged>int parameter</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFile">
            <summary>	
            Represents a font file. Applications  such as font managers or font viewers can call <see cref="M:SharpDX.DirectWrite.FontFile.Analyze(System.Int32@,SharpDX.DirectWrite.FontFileType@,SharpDX.DirectWrite.FontFaceType@,System.Int32@)"/> to find out if a particular file is a font file, and whether it is a font type that is supported by the font system.	
            </summary>	
            <unmanaged>IDWriteFontFile</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.String)">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.String,System.Nullable{System.Int64})">
            <summary>	
            Creates a font file reference object from a local font file. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="filePath">An array of characters that contains the absolute file path for the font file. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. </param>
            <param name="lastWriteTime">The last modified time of the input file path. If the parameter is omitted, the function will access the font file to obtain its last write time. You should specify this value to avoid extra disk access. Subsequent operations on the constructed object may fail if the user provided lastWriteTime doesn't match the file on the disk. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const __int64* lastWriteTime,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(SharpDX.DirectWrite.Factory,System.IntPtr,System.Int32,SharpDX.DirectWrite.FontFileLoader)">
            <summary>
            Creates a reference to an application-specific font file resource.
            </summary>
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFileReferenceKey">A font file reference key that uniquely identifies the font file resource during the lifetime of fontFileLoader.</param>
            <param name="fontFileReferenceKeySize">The size of the font file reference key in bytes.</param>
            <param name="fontFileLoader">The font file loader that will be used by the font system to load data from the file identified by fontFileReferenceKey.</param>
            <remarks>
            This function is provided for cases when an application or a document needs to use a private font without having to install it on the system. fontFileReferenceKey has to be unique only in the scope of the fontFileLoader used in this call.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[None] IDWriteFontFileLoader* fontFileLoader,[Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetReferenceKey">
            <summary>	
            Obtains the reference to the reference key of a font file. The returned reference is valid until the font file object is released.  	
            </summary>	
            <returns>the reference to the reference key of a font file. </returns>
            <unmanaged>HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] int* fontFileReferenceKeySize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetReferenceKey(System.IntPtr,System.Int32@)">
            <summary>	
            Obtains the reference to the reference key of a font file. The returned reference is valid until the font file object is released.  	
            </summary>	
            <param name="fontFileReferenceKey">When this method returns, contains an address of  a reference to the font file reference key. Note that the reference value is only valid until the font file object it is obtained from is released. This parameter is passed uninitialized. </param>
            <param name="fontFileReferenceKeySize">When this method returns, contains the size of the font file reference key in bytes. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] int* fontFileReferenceKeySize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.GetLoader(SharpDX.DirectWrite.FontFileLoader@)">
            <summary>	
            Obtains the file loader associated with a font file object. 	
            </summary>	
            <param name="fontFileLoader">When this method returns, contains the address of  a reference to the font file loader associated with the font file object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFile.Analyze(System.Int32@,SharpDX.DirectWrite.FontFileType@,SharpDX.DirectWrite.FontFaceType@,System.Int32@)">
            <summary>	
            Analyzes a file and returns whether it represents a font, and whether the font type is supported by the font system. 	
            </summary>	
            <remarks>	
            IMPORTANT: Certain font file types are recognized, but not supported by the font system. For example, the font system will recognize a file as a Type 1 font file but will not be able to construct a font face object from it. In such situations, Analyze will set isSupportedFontType output parameter to FALSE.  	
            </remarks>	
            <param name="isSupportedFontType">TRUE if the font type is supported by the font system; otherwise, FALSE. </param>
            <param name="fontFileType">When this method returns, contains a value that indicates the type of the font file. Note that even if  isSupportedFontType is FALSE, the fontFileType value may be different from DWRITE_FONT_FILE_TYPE_UNKNOWN. </param>
            <param name="fontFaceType">When this method returns, contains a value that indicates the type of the font face. If fontFileType is not equal to DWRITE_FONT_FILE_TYPE_UNKNOWN, then that can be constructed from the font file.  </param>
            <param name="numberOfFaces">When this method returns, contains the number of font faces contained in the font file. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFile::Analyze([Out] BOOL* isSupportedFontType,[Out] DWRITE_FONT_FILE_TYPE* fontFileType,[Out, Optional] DWRITE_FONT_FACE_TYPE* fontFaceType,[Out] int* numberOfFaces)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFile.Loader">
            <summary>	
            Obtains the file loader associated with a font file object. 	
            </summary>	
            <unmanaged>HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumerator">
            <summary>	
            Encapsulates a collection of font files. The font system uses this interface to enumerate font files when building a font collection.	
            </summary>	
            <unmanaged>IDWriteFontFileEnumerator</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileEnumerator.MoveNext">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::MoveNext([Out] BOOL* hasCurrentFile)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileEnumerator.CurrentFontFile">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFile"/> object.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::GetCurrentFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback">
            <summary>
            Internal FontFileEnumerator Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileEnumeratorCallback.#ctor(SharpDX.DirectWrite.FontFileEnumerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileEnumeratorCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileEnumeratorCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback.MoveNextDelegate">
            <summary>	
            Advances to the next font file in the collection. When it is first created, the enumerator is positioned before the first element of the collection and the first call to MoveNext advances to the first file. 	
            </summary>	
            <returns>the value TRUE if the enumerator advances to a file; otherwise, FALSE if the enumerator advances past the last file in the collection.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::MoveNext([Out] BOOL* hasCurrentFile)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileEnumeratorCallback.GetCurrentFontFileDelegate">
            <summary>	
            Gets a reference to the current font file. 	
            </summary>	
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFile"/> object.</returns>
            <unmanaged>HRESULT IDWriteFontFileEnumerator::GetCurrentFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoader">
            <summary>	
            Handles loading font file resources of a particular type from a font file reference key into a font file stream object. 	
            </summary>	
            <unmanaged>IDWriteFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoader.CreateStreamFromKey(SharpDX.DataStream)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderCallback">
            <summary>
            Internal FontFileLoader Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderCallback.#ctor(SharpDX.DirectWrite.FontFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileLoaderCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileLoaderCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderCallback.CreateStreamFromKeyDelegate">
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileLoaderNative">
            <summary>	
            Handles loading font file resources of a particular type from a font file reference key into a font file stream object. 	
            </summary>	
            <unmanaged>IDWriteFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey(SharpDX.DataStream)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <returns>a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileLoaderNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileLoaderNative.CreateStreamFromKey_(System.IntPtr,System.Int32,SharpDX.DirectWrite.FontFileStream@)">
            <summary>	
            Creates a font file stream object that encapsulates an open file resource. 	
            </summary>	
            <remarks>	
            The resource is closed when the last reference to fontFileStream is released.  	
            </remarks>	
            <param name="fontFileReferenceKey">A reference to a font file reference key that uniquely identifies the font file resource within the scope of the font loader being used. The buffer allocated for this key must at least be the size, in bytes, specified by  fontFileReferenceKeySize. </param>
            <param name="fontFileReferenceKeySize">The size of font file reference key, in bytes. </param>
            <param name="fontFileStream">When this method returns, contains the address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontFileStream"/> object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStream">
            <summary>	
            Loads font file data from a custom font file loader. 	
            </summary>	
            <unmanaged>IDWriteFontFileStream</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.GetFileSize">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <returns>the total size of the file. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStream.GetLastWriteTime">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <returns>the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback">
            <summary>
            Internal FontFileStream Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamCallback.#ctor(SharpDX.DirectWrite.FontFileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileStreamCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFileStreamCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.ReadFileFragmentDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.ReleaseFileFragmentDelegate">
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.GetFileSizeDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamCallback.GetLastWriteTimeDelegate">
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileStreamNative">
            <summary>	
            Loads font file data from a custom font file loader. 	
            </summary>	
            <unmanaged>IDWriteFontFileStream</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReadFileFragment(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of  </param>
            <returns>a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out, Buffer] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReleaseFileFragment(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetFileSize">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <returns>the total size of the file. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetLastWriteTime">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <returns>the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFileStreamNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReadFileFragment_(System.IntPtr@,System.Int64,System.Int64,System.IntPtr@)">
            <summary>	
            Reads a fragment from a font file. 	
            </summary>	
            <remarks>	
            Note that ReadFileFragment implementations must check whether the requested font file fragment is within the file bounds. Otherwise, an error should be returned from ReadFileFragment.   {{DirectWrite}} may invoke <see cref="T:SharpDX.DirectWrite.FontFileStream"/> methods on the same object from multiple threads simultaneously. Therefore, ReadFileFragment implementations that rely on internal mutable state must serialize access to such state across multiple threads. For example, an implementation that uses separate Seek and Read operations to read a file fragment must place the code block containing Seek and Read calls under a lock or a critical section. 	
            </remarks>	
            <param name="fragmentStart">When this method returns, contains an address of a  reference to the start of the font file fragment.  This parameter is passed uninitialized. </param>
            <param name="fileOffset">The offset of the fragment, in bytes, from the beginning of the font file. </param>
            <param name="fragmentSize">The size of the file fragment, in bytes. </param>
            <param name="fragmentContext">When this method returns, contains the address of a reference to a reference to the client-defined context to be passed to {{ReleaseFileFragment}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out] const void** fragmentStart,[None] __int64 fileOffset,[None] __int64 fragmentSize,[Out] void** fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.ReleaseFileFragment_(System.IntPtr)">
            <summary>	
            Releases a fragment from a file. 	
            </summary>	
            <param name="fragmentContext">A reference to the client-defined context of a font fragment returned from {{ReadFileFragment}}. </param>
            <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([None] void* fragmentContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetFileSize_(System.Int64@)">
            <summary>	
            Obtains the total size of a file. 	
            </summary>	
            <remarks>	
            Implementing GetFileSize() for asynchronously loaded font files may require downloading the complete file contents. Therefore, this method should be used only for operations that either require a complete font file to be loaded (for example, copying a font file) or that need to make decisions based on the value of the file size (for example, validation against a persisted file size).  	
            </remarks>	
            <param name="fileSize">When this method returns, contains the total size of the file. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] __int64* fileSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFileStreamNative.GetLastWriteTime_(System.Int64@)">
            <summary>	
            Obtains the last modified time of the file.  	
            </summary>	
            <remarks>	
            The "last modified time" is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one. 	
            </remarks>	
            <param name="lastWriteTime">When this method returns, contains  the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GdiInterop">
            <summary>	
            Provides interoperability with GDI, such as methods to convert a font face to a LOGFONT structure, or to convert a GDI font description into a font face. It is also used to create bitmap render target objects.	
            </summary>	
            <unmanaged>IDWriteGdiInterop</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.FromLogFont(System.Object)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="logFont">A structure containing a GDI-compatible font description. </param>
            <returns>a  reference to a newly created <see cref="T:SharpDX.DirectWrite.Font"/>. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const LOGFONTW* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ToLogFont(SharpDX.DirectWrite.Font,System.Object)">
            <summary>	
            Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font. 	
            </summary>	
            <remarks>	
            The conversion to a  LOGFONT by using ConvertFontToLOGFONT operates at the logical font level and does not guarantee that it will map to a specific physical font. It is not guaranteed that GDI will select the same physical font for displaying  text formatted by a LOGFONT as the <see cref="T:SharpDX.DirectWrite.Font"/> object that was converted. 	
            </remarks>	
            <param name="font">An <see cref="T:SharpDX.DirectWrite.Font"/> object to be converted into a GDI-compatible LOGFONT structure. </param>
            <param name="logFont">When this method returns, contains a structure that receives a GDI-compatible font description. </param>
            <returns> TRUE if the specified font object is part of the system font collection; otherwise, FALSE. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([None] IDWriteFont* font,[In] LOGFONTW* logFont,[Out] BOOL* isSystemFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.FromSystemDrawingFont(System.Drawing.Font)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="font">A <see cref="T:System.Drawing.Font"/> description. </param>
            <returns>a reference to a newly created <see cref="T:SharpDX.DirectWrite.Font"/>. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const LOGFONTW* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ToSystemDrawingFont(SharpDX.DirectWrite.Font,System.Drawing.Font@)">
            <summary>
            Convert a Direct2D <see cref="T:SharpDX.DirectWrite.Font"/> to a <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="d2dFont">a Direct2D Font</param>
            <param name="font">a <see cref="T:System.Drawing.Font"/></param>
            <returns>true if the specified font object is part of the system font collection; otherwise, false.</returns>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.GdiInterop"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateFontFromLOGFONT(System.IntPtr,SharpDX.DirectWrite.Font@)">
            <summary>	
            Creates a font object that matches the properties specified by the LOGFONT structure. 	
            </summary>	
            <param name="logFont">A structure containing a GDI-compatible font description. </param>
            <param name="font">When this method returns, contains an address of a  reference to a newly created <see cref="T:SharpDX.DirectWrite.Font"/> object if successful; otherwise, NULL. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const void* logFont,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ConvertFontToLOGFONT(SharpDX.DirectWrite.Font,System.IntPtr,System.Int32@)">
            <summary>	
            Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font. 	
            </summary>	
            <remarks>	
            The conversion to a  LOGFONT by using ConvertFontToLOGFONT operates at the logical font level and does not guarantee that it will map to a specific physical font. It is not guaranteed that GDI will select the same physical font for displaying  text formatted by a LOGFONT as the <see cref="T:SharpDX.DirectWrite.Font"/> object that was converted. 	
            </remarks>	
            <param name="font">An <see cref="T:SharpDX.DirectWrite.Font"/> object to be converted into a GDI-compatible LOGFONT structure. </param>
            <param name="logFont">When this method returns, contains a structure that receives a GDI-compatible font description. </param>
            <param name="isSystemFont">When this method returns, contains TRUE if the specified font object is part of the system font collection; otherwise, FALSE. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([None] IDWriteFont* font,[In] void* logFont,[Out] BOOL* isSystemFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.ConvertFontFaceToLOGFONT(SharpDX.DirectWrite.FontFace,System.IntPtr)">
            <summary>	
            Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font. 	
            </summary>	
            <remarks>	
            The conversion to a  LOGFONT by using ConvertFontFaceToLOGFONT operates at the logical font level and does not guarantee that it will map to a specific physical font. It is not guaranteed that GDI will select the same physical font for displaying  text formatted by a LOGFONT as the <see cref="T:SharpDX.DirectWrite.Font"/> object that was converted. 	
            </remarks>	
            <param name="font">An <see cref="T:SharpDX.DirectWrite.FontFace"/> object to be converted into a GDI-compatible LOGFONT structure. </param>
            <param name="logFont">When this method returns, contains a reference to a structure that receives a GDI-compatible font description. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontFaceToLOGFONT([None] IDWriteFontFace* font,[In] void* logFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateFontFaceFromHdc(System.IntPtr)">
            <summary>	
            Creates an IDWriteFontFace object that corresponds to the currently selected HFONT of the specified HDC. 	
            </summary>	
            <remarks>	
            This function is intended for scenarios in which an application wants to use GDI and Uniscribe 1.x for text layout and shaping, but  DirectWrite for final rendering. This function assumes the client is performing text output using glyph indexes. 	
            </remarks>	
            <param name="hdc">A handle to a device context into which a font has been selected. It is assumed that the client has already performed font mapping and that the font selected into the device context is the actual font to be used  for rendering glyphs. </param>
            <returns>Contains an address of a reference to  the newly created font face object, or NULL in case of failure. The font face returned is guaranteed to reference the same physical typeface that would be used for drawing glyphs (but not necessarily characters) using ExtTextOut. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFaceFromHdc([None] void* hdc,[Out] IDWriteFontFace** fontFace)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GdiInterop.CreateBitmapRenderTarget(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Creates an object that encapsulates a bitmap and memory DC (device context) which can be used for rendering glyphs. 	
            </summary>	
            <param name="hdc">A handle to the optional device context used to create a compatible memory DC (device context). </param>
            <param name="width">The width of the bitmap render target. </param>
            <param name="height">The height of the bitmap render target. </param>
            <returns>When this method returns, contains an address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.BitmapRenderTarget"/> object. </returns>
            <unmanaged>HRESULT IDWriteGdiInterop::CreateBitmapRenderTarget([In, Optional] void* hdc,[None] int width,[None] int height,[Out] IDWriteBitmapRenderTarget** renderTarget)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRun">
            <summary>	
            Contains the information needed by renderers to draw glyph runs.  All coordinates are in device independent pixels (DIPs). 	
            </summary>	
            <unmanaged>DWRITE_GLYPH_RUN</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRun.ToArrays(System.Single[]@,SharpDX.DirectWrite.GlyphOffset[]@)">
            <summary>
            Trannsform this GlyphRun to individual indices, advances and offsets arrays.
            </summary>
            <param name="advances">The advances array.</param>
            <param name="offsets">The offsets array.</param>
            <returns>the indices array.</returns>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.FontFacePointer">
            <summary>	
            The physical font face object to draw with. 	
            </summary>	
            <unmanaged>IDWriteFontFace* fontFace</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.FontSize">
            <summary>	
            The logical size of the font in DIPs (equals 1/96 inch), not points. 	
            </summary>	
            <unmanaged>float fontEmSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphCount">
            <summary>	
            The number of glyphs in the glyph run. 	
            </summary>	
            <unmanaged>int glyphCount</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphIndicesPointer">
            <summary>	
            A reference to an array of indices to render for the glyph run. 	
            </summary>	
            <unmanaged>const short* glyphIndices</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphAdvancesPointer">
            <summary>	
            A reference to an array containing glyph advance widths for the glyph run. 	
            </summary>	
            <unmanaged>const float* glyphAdvances</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.GlyphOffsetsPointer">
            <summary>	
            A reference to an array containing glyph offsets for the glyph run. 	
            </summary>	
            <unmanaged>const DWRITE_GLYPH_OFFSET* glyphOffsets</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRun.BidiLevel">
            <summary>	
            The implicit resolved bidi level of the run. Odd levels indicate right-to-left languages like Hebrew and Arabic, while even levels indicate left-to-right languages like English and Japanese (when written horizontally). For right-to-left languages, the text origin is on the right, and text should be drawn to the left. 	
            </summary>	
            <unmanaged>int bidiLevel</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.FontFace">
            <summary>
            Gets or sets the <see cref="P:SharpDX.DirectWrite.GlyphRun.FontFace"/> associated with this GlypRun.
            </summary>
            <value>The font face.</value>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.Items">
            <summary>
            Gets or sets an array containing glyph advance widths for the glyph run. 
            </summary>
            <value>The glyph advances.</value>
        </member>
        <member name="P:SharpDX.DirectWrite.GlyphRun.IsSideways">
            <summary>	
            If true, specifies that glyphs are rotated 90 degrees to the left and vertical metrics are used. Vertical writing is achieved by specifying isSideways = true and rotating the entire run 90 degrees to the right via a rotate transform. 	
            </summary>	
            <unmanaged>BOOL isSideways</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunAnalysis">
            <summary>	
            Contains low-level information used to render a glyph run.	
            </summary>	
            <unmanaged>IDWriteGlyphRunAnalysis</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.GlyphRun,System.Single,SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.GlyphRun,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},SharpDX.DirectWrite.RenderingMode,SharpDX.DirectWrite.MeasuringMode,System.Single,System.Single)">
            <summary>
            Creates a glyph run analysis object, which encapsulates information used to render a glyph run.
            </summary>
            <param name="factory">The factory.</param>
            <param name="glyphRun">A structure that contains the properties of the glyph run (font face, advances, and so on).</param>
            <param name="pixelsPerDip">Number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI bitmap then pixelsPerDip is 1. If rendering onto a 120 DPI bitmap then pixelsPerDip is 1.25.</param>
            <param name="transform">Optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified the emSize and pixelsPerDip.</param>
            <param name="renderingMode">A value that specifies the rendering mode, which must be one of the raster rendering modes (that is, not default and not outline).</param>
            <param name="measuringMode">Specifies the measuring mode to use with glyphs.</param>
            <param name="baselineOriginX">The horizontal position (X-coordinate) of the baseline origin, in DIPs.</param>
            <param name="baselineOriginY">Vertical position (Y-coordinate) of the baseline origin, in DIPs.</param>
            <remarks>
            The glyph run analysis object contains the results of analyzing the glyph run, including the positions of all the glyphs and references to all of the rasterized glyphs in the font cache.
            </remarks>
            <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] DWRITE_RENDERING_MODE renderingMode,[None] DWRITE_MEASURING_MODE measuringMode,[None] float baselineOriginX,[None] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.GlyphRunAnalysis"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.GetAlphaTextureBounds(SharpDX.DirectWrite.TextureType)">
            <summary>	
            Gets the bounding rectangle of the physical pixels affected by the glyph run. 	
            </summary>	
            <param name="textureType">Specifies the type of texture requested. If a bi-level texture is requested, the bounding rectangle includes only bi-level glyphs. Otherwise, the bounding rectangle includes only antialiased glyphs. </param>
            <returns>When this method returns, contains the bounding rectangle of the physical pixels affected by the glyph run, or an empty rectangle if there are no glyphs of the specified texture type. </returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaTextureBounds([None] DWRITE_TEXTURE_TYPE textureType,[Out] RECT* textureBounds)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.CreateAlphaTexture(SharpDX.DirectWrite.TextureType,SharpDX.Rectangle,System.Byte[],System.Int32)">
            <summary>	
            Creates an alpha texture of the specified type for glyphs within a specified bounding rectangle. 	
            </summary>	
            <param name="textureType">A value that specifies the type of texture requested. This can be {{DWRITE_TEXTURE_BILEVEL_1x1}} or DWRITE_TEXTURE_CLEARTYPE_3x1. If a bi-level texture is requested, the texture contains only bi-level glyphs. Otherwise, the texture contains only antialiased glyphs. </param>
            <param name="textureBounds">The bounding rectangle of the texture, which can be different than the bounding rectangle returned by {{GetAlphaTextureBounds}}. </param>
            <param name="alphaValues">When this method returns, contains  the array of alpha values from the texture. The buffer allocated for this array must be at least the size of bufferSize. </param>
            <param name="bufferSize">The size of the alphaValues array, in bytes. The minimum size depends on the dimensions of the rectangle and the type of texture requested. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::CreateAlphaTexture([None] DWRITE_TEXTURE_TYPE textureType,[In] const RECT* textureBounds,[Out, Buffer] byte* alphaValues,[None] int bufferSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.GlyphRunAnalysis.GetAlphaBlendParams(SharpDX.DirectWrite.RenderingParams,System.Single@,System.Single@,System.Single@)">
            <summary>	
            Gets alpha blending properties required for ClearType blending. 	
            </summary>	
            <param name="renderingParams">An object that specifies the ClearType level and enhanced contrast, gamma, pixel geometry, and rendering mode. In most cases, the values returned by the output parameters of this method are based on the properties of this object, unless a GDI-compatible rendering mode was specified. </param>
            <param name="blendGamma">When this method returns, contains  the gamma value to use for gamma correction. </param>
            <param name="blendEnhancedContrast">When this method returns, contains the enhanced contrast value to be used for blending. </param>
            <param name="blendClearTypeLevel">When this method returns, contains  the ClearType level used in the alpha blending. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaBlendParams([None] IDWriteRenderingParams* renderingParams,[Out] float* blendGamma,[Out] float* blendEnhancedContrast,[Out] float* blendClearTypeLevel)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunDescription">
            <summary>	
            Contains additional properties related to those in DWRITE_GLYPH_RUN.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_RUN_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.LocaleName">
            <summary>	
            An array of characters containing the locale name associated with this run. 	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.Text">
            <summary>	
            An array of characters containing the text associated with the glyphs. 	
            </summary>	
            <unmanaged>const wchar_t* string</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.TextLength">
            <summary>	
            The number of characters in UTF16 code-units. Note that this may be different than the number of glyphs. 	
            </summary>	
            <unmanaged>int stringLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.ClusterMap">
            <summary>	
            An array of indices to the glyph indices array, of the first glyphs of all the glyph clusters of the glyphs to render. 	
            </summary>	
            <unmanaged>const short* clusterMap</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunDescription.TextPosition">
            <summary>	
            Corresponding text position in the string this glyph run came from.  This is relative to the beginning of the string represented by the IDWriteTextLayout object. 	
            </summary>	
            <unmanaged>int textPosition</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphRunItem">
            <summary>
            A <see cref="T:SharpDX.DirectWrite.GlyphRunItem"/> Item.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Index">
            <summary>
            A glyph index
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Advance">
            <summary>
            A glyph advance
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphRunItem.Offset">
            <summary>
            A glyph offset
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback">
            <summary>
            Internal InlineObject Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.InlineObjectCallback.#ctor(SharpDX.DirectWrite.InlineObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.InlineObjectCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.DrawDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetMetricsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetOverhangMetricsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectCallback.GetBreakConditionsDelegate">
            <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineBreakpoint">
            <summary>	
            Line breakpoint characteristics of a character.	
            </summary>	
            <unmanaged>DWRITE_LINE_BREAKPOINT</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionBefore">
            <summary>	
            Indicates a breaking condition before the character. 	
            </summary>	
            <unmanaged>byte breakConditionBefore</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionAfter">
            <summary>	
            Indicates a breaking condition after the character. 	
            </summary>	
            <unmanaged>byte breakConditionAfter</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionBefore_">
            <summary>	
            Indicates a breaking condition before the character. 	
            </summary>	
            <unmanaged>byte breakConditionBefore</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.BreakConditionAfter_">
            <summary>	
            Indicates a breaking condition after the character. 	
            </summary>	
            <unmanaged>byte breakConditionAfter</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.IsWhitespace">
            <summary>	
            Indicates that the character is some form of whitespace, which may be meaningful for justification. 	
            </summary>	
            <unmanaged>byte isWhitespace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.IsSoftHyphen">
            <summary>	
            Indicates that the character is a soft hyphen, often used to indicate hyphenation points inside words. 	
            </summary>	
            <unmanaged>byte isSoftHyphen</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineBreakpoint.Padding">
            <summary>	
            Reserved for future use. 	
            </summary>	
            <unmanaged>byte padding</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LocalizedStrings">
            <summary>	
            Represents a collection of strings indexed by locale name.	
            </summary>	
            <unmanaged>IDWriteLocalizedStrings</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32)">
            <summary>	
            Get the locale name from the language.	
            </summary>	
            <param name="index">Zero-based index of the locale name to be retrieved. </param>
            <returns>The locale name from the language </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetString(System.Int32)">
            <summary>	
            Get the string from the language/string pair.
            </summary>	
            <param name="index">Zero-based index of the string from the language/string pair to be retrieved. </param>
            <returns>The locale name from the language </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.LocalizedStrings"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetCount">
            <summary>	
            Gets the number of language/string pairs. 	
            </summary>	
            <returns>The number of language/string pairs. </returns>
            <unmanaged>int IDWriteLocalizedStrings::GetCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.FindLocaleName(System.String,System.Int32@)">
            <summary>	
            Gets the zero-based index of the locale name/string pair with the specified locale name. 	
            </summary>	
            <remarks>	
            Note that if the locale name does not exist, the return value is a success and the exists parameter is FALSE. If you are getting the font family name for a font and the specified locale name does not exist, one option is to set the index to 0 as shown below.  There is always at least one locale for a font family. 	
            <code> UINT32 index = 0;	
            BOOL exists = false; wchar_t localeName[LOCALE_NAME_MAX_LENGTH]; if (SUCCEEDED(hr))	
            { // Get the default locale for this user. int defaultLocaleSuccess = GetUserDefaultLocaleName(localeName, LOCALE_NAME_MAX_LENGTH); // If the default locale is returned, find that locale name, otherwise use "en-us". if (defaultLocaleSuccess) { hr = pFamilyNames-&gt;FindLocaleName(localeName, &amp;index, &amp;exists); } if (SUCCEEDED(hr) &amp;&amp; !exists) // if the above find did not find a match, retry with US English { hr = pFamilyNames-&gt;FindLocaleName(L"en-us", &amp;index, &amp;exists); }	
            } // If the specified locale doesn't exist, select the first on the list.	
            if (!exists) index = 0; </code>	
            	
            </remarks>	
            <param name="localeName">A null-terminated array of characters containing the locale name to look for. </param>
            <param name="index">The zero-based index of the locale name/string pair. This method initializes index to UINT_MAX. </param>
            <returns>When this method returns, contains TRUE if the locale name exists; otherwise, FALSE. This method initializes exists to FALSE. </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::FindLocaleName([In] const wchar_t* localeName,[Out] int* index,[Out] BOOL* exists)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleNameLength(System.Int32,System.Int32@)">
            <summary>	
            Gets the length in characters (not including the null terminator) of the locale name with the specified index. 	
            </summary>	
            <param name="index">Zero-based index of the locale name to be retrieved. </param>
            <param name="length">When this method returns, contains the length in characters of the locale name, not including the null terminator. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleNameLength([None] int index,[Out] int* length)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetLocaleName(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Copies the locale name with the specified index to the specified array. 	
            </summary>	
            <param name="index">Zero-based index of the locale name to be retrieved. </param>
            <param name="localeName">When this method returns, contains a character array, which is null-terminated, that receives the locale name from the language/string pair.  The buffer allocated for this array must be at least the size of size, in element count. </param>
            <param name="size">The size of the array in characters. The size must include space for the terminating null character. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([None] int index,[Out, Buffer] wchar_t* localeName,[None] int size)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetStringLength(System.Int32,System.Int32@)">
            <summary>	
            Gets the length in characters (not including the null terminator) of the string with the specified index. 	
            </summary>	
            <remarks>	
            Use GetStringLength to get the string length before calling the <see cref="M:SharpDX.DirectWrite.LocalizedStrings.GetString(System.Int32)"/> method, as shown in the following code. 	
            <code> UINT32 length = 0; // Get the string length.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetStringLength(index, &amp;length);	
            } // Allocate a string big enough to hold the name.	
            wchar_t* name = new (std::nothrow) wchar_t[length+1];	
            if (name == NULL)	
            { hr = E_OUTOFMEMORY;	
            } // Get the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetString(index, name, length+1);	
            } </code>	
            	
            </remarks>	
            <param name="index">A zero-based index of the language/string pair. </param>
            <param name="length">The length in characters of the string, not including the null terminator, from the language/string pair. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetStringLength([None] int index,[Out] int* length)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalizedStrings.GetString(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Copies the string with the specified index to the specified array. 	
            </summary>	
            <remarks>	
            The string returned must be allocated by the caller.  You can get the size of the string by using the {{GetStringLength}} method prior to calling GetString, as shown in the following example. 	
            <code> UINT32 length = 0; // Get the string length.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetStringLength(index, &amp;length);	
            } // Allocate a string big enough to hold the name.	
            wchar_t* name = new (std::nothrow) wchar_t[length+1];	
            if (name == NULL)	
            { hr = E_OUTOFMEMORY;	
            } // Get the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetString(index, name, length+1);	
            } </code>	
            	
            </remarks>	
            <param name="index">The zero-based index of the language/string pair to be examined. </param>
            <param name="stringBuffer">The null terminated array of characters that receives the string from the language/string pair.  The buffer allocated for this array should be at least the size of size. {{GetStringLength}} can be used to get the size of the array before using this method. </param>
            <param name="size">The size of the array in characters. The size must include space for the terminating null character. {{GetStringLength}} can be used to get the size of the array before using this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteLocalizedStrings::GetString([None] int index,[Out, Buffer] wchar_t* stringBuffer,[None] int size)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LocalizedStrings.Count">
            <summary>	
            Gets the number of language/string pairs. 	
            </summary>	
            <unmanaged>int IDWriteLocalizedStrings::GetCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.NumberSubstitution">
            <summary>	
            Holds the appropriate digits and numeric punctuation for a specified locale.	
            </summary>	
            <unmanaged>IDWriteNumberSubstitution</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.NumberSubstitution.#ctor(SharpDX.DirectWrite.Factory,SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean)">
            <summary>	
            Creates a number substitution object using a locale name, substitution method, and an indicator  whether to ignore user overrides (use NLS defaults for the given culture instead). 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="substitutionMethod">A value that specifies how to apply number substitution on digits and related punctuation. </param>
            <param name="localeName">The name of the locale to be used in the numberSubstitution object. </param>
            <param name="ignoreUserOverride">A Boolean flag that indicates whether to ignore user overrides. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.NumberSubstitution.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.NumberSubstitution"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnapping">
            <summary>	
            Defines the pixel snapping properties such as pixels per DIP(device-independent pixel) and the current transform matrix of a text renderer.	
            </summary>	
            <unmanaged>IDWritePixelSnapping</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.PixelSnapping.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="P:SharpDX.DirectWrite.PixelSnappingCallback.CallbackPixelSnapping">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.IsPixelSnappingDisabledDelegate">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <param name="isDisabled">Output disabled</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.GetCurrentTransformDelegate">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="transform">Matrix transform</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelSnappingCallback.GetPixelsPerDipDelegate">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>
            <param name="thisPtr">This pointer</param>
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="pixelPerDip">Dip</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.RenderingParams">
            <summary>	
            Represents text rendering settings such as ClearType level, enhanced contrast, and gamma correction for glyph rasterization and filtering.	
            </summary>	
            <unmanaged>IDWriteRenderingParams</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Creates a rendering parameters object with default settings for the primary monitor. Different monitors may have different rendering parameters, for more information see the {{How to Add Support for Multiple Monitors}} topic.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateRenderingParams([Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory,System.IntPtr)">
            <summary>	
            Creates a rendering parameters object with default settings for the specified monitor. In most cases, this is the preferred way to create a rendering parameters object.	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="monitorHandle">A handle for the specified monitor. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateMonitorRenderingParams([None] void* monitor,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(SharpDX.DirectWrite.Factory,System.Single,System.Single,System.Single,SharpDX.DirectWrite.PixelGeometry,SharpDX.DirectWrite.RenderingMode)">
            <summary>	
            Creates a rendering parameters object with the specified properties. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="gamma">The gamma level to be set for the new rendering parameters object. </param>
            <param name="enhancedContrast">The enhanced contrast level to be set for the new rendering parameters object. </param>
            <param name="clearTypeLevel">The ClearType level to be set for the new rendering parameters object. </param>
            <param name="pixelGeometry">Represents the internal structure of a device pixel (that is, the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. </param>
            <param name="renderingMode">A value that represents the method (for example, ClearType natural quality) for rendering glyphs. </param>
            <unmanaged>HRESULT IDWriteFactory::CreateCustomRenderingParams([None] float gamma,[None] float enhancedContrast,[None] float clearTypeLevel,[None] DWRITE_PIXEL_GEOMETRY pixelGeometry,[None] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams** renderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.RenderingParams"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetGamma">
            <summary>	
            Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.	
            </summary>	
            <remarks>	
            The gamma value is used for gamma correction, which compensates for the non-linear luminosity response of most monitors. 	
            </remarks>	
            <returns>Returns the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256. </returns>
            <unmanaged>float IDWriteRenderingParams::GetGamma()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetEnhancedContrast">
            <summary>	
            Gets the enhanced contrast property of the rendering parameters object. Valid values are greater than or equal to zero.	
            </summary>	
            <remarks>	
            Enhanced contrast is the amount to increase the darkness of text, and typically ranges from 0 to 1. Zero means no contrast enhancement. 	
            </remarks>	
            <returns>Returns the amount of contrast enhancement. Valid values are greater than or equal to zero. </returns>
            <unmanaged>float IDWriteRenderingParams::GetEnhancedContrast()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetClearTypeLevel">
            <summary>	
            Gets the ClearType level of the rendering parameters object. 	
            </summary>	
            <remarks>	
            The ClearType level represents the amount of ClearType ? that is, the degree to which the red, green, and blue subpixels of each pixel are treated differently. Valid values range from zero (meaning no ClearType, which is equivalent to grayscale anti-aliasing) to one (meaning full ClearType) 	
            </remarks>	
            <returns>The ClearType level of the rendering parameters object. </returns>
            <unmanaged>float IDWriteRenderingParams::GetClearTypeLevel()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetPixelGeometry">
            <summary>	
            Gets the pixel geometry of the rendering parameters object.	
            </summary>	
            <returns>A value that indicates the type of  pixel geometry used in the rendering parameters object. </returns>
            <unmanaged>DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.RenderingParams.GetRenderingMode">
            <summary>	
            Gets the rendering mode of the rendering parameters object.	
            </summary>	
            <remarks>	
            By default, the rendering mode is initialized to DWRITE_RENDERING_MODE_DEFAULT, which means the rendering mode is determined automatically based on the font and size. To determine the recommended rendering mode to use for a given font and size and rendering parameters object, use the <see cref="M:SharpDX.DirectWrite.FontFace.GetRecommendedRenderingMode(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.RenderingParams)"/> method. 	
            </remarks>	
            <returns>A value that indicates the rendering mode of the rendering parameters object. </returns>
            <unmanaged>DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.Gamma">
            <summary>	
            Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.	
            </summary>	
            <remarks>	
            The gamma value is used for gamma correction, which compensates for the non-linear luminosity response of most monitors. 	
            </remarks>	
            <unmanaged>float IDWriteRenderingParams::GetGamma()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.EnhancedContrast">
            <summary>	
            Gets the enhanced contrast property of the rendering parameters object. Valid values are greater than or equal to zero.	
            </summary>	
            <remarks>	
            Enhanced contrast is the amount to increase the darkness of text, and typically ranges from 0 to 1. Zero means no contrast enhancement. 	
            </remarks>	
            <unmanaged>float IDWriteRenderingParams::GetEnhancedContrast()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.ClearTypeLevel">
            <summary>	
            Gets the ClearType level of the rendering parameters object. 	
            </summary>	
            <remarks>	
            The ClearType level represents the amount of ClearType ? that is, the degree to which the red, green, and blue subpixels of each pixel are treated differently. Valid values range from zero (meaning no ClearType, which is equivalent to grayscale anti-aliasing) to one (meaning full ClearType) 	
            </remarks>	
            <unmanaged>float IDWriteRenderingParams::GetClearTypeLevel()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.PixelGeometry">
            <summary>	
            Gets the pixel geometry of the rendering parameters object.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.RenderingParams.RenderingMode">
            <summary>	
            Gets the rendering mode of the rendering parameters object.	
            </summary>	
            <remarks>	
            By default, the rendering mode is initialized to DWRITE_RENDERING_MODE_DEFAULT, which means the rendering mode is determined automatically based on the font and size. To determine the recommended rendering mode to use for a given font and size and rendering parameters object, use the <see cref="M:SharpDX.DirectWrite.FontFace.GetRecommendedRenderingMode(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.RenderingParams)"/> method. 	
            </remarks>	
            <unmanaged>DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptJustify">
            <summary>
            Defines glyph characteristic information that an application needs to implement justification.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.None">
            <summary>
            Justification cannot be applied at the glyph.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBlank">
            <summary>
            The glyph represents a blank in an Arabic run.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.Character">
            <summary>
            An inter-character justification point follows the glyph.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.Blank">
            <summary>
            The glyph represents a blank outside an Arabic run.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicNormal">
            <summary>
            Normal middle-of-word glyph that connects to the right (begin).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicKashida">
            <summary>
            Kashida (U+0640) in the middle of the word.
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicAlef">
            <summary>
            Final form of an alef-like (U+0627, U+0625, U+0623, U+0622).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicHa">
            <summary>
            Final form of Ha (U+0647).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicRa">
            <summary>
            Final form of Ra (U+0631).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBa">
            <summary>
            Final form of Ba (U+0628).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicBaRa">
            <summary>
            Ligature of alike (U+0628,U+0631).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicSeen">
            <summary>
            Highest priority: initial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptJustify.ArabicSeenMedial">
            <summary>
            Highest priority: medial shape of Seen class (U+0633).
            </summary>
        </member>
        <member name="T:SharpDX.DirectWrite.ShapingGlyphProperties">
            <summary>	
            Contains shaping output properties for an output glyph.	
            </summary>	
            <unmanaged>DWRITE_SHAPING_GLYPH_PROPERTIES</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Justification">
            <summary>	
            Indicates that the glyph has justification applied. 	
            </summary>	
            <unmanaged>short justification</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Justification_">
            <summary>	
            Indicates that the glyph has justification applied. 	
            </summary>	
            <unmanaged>short justification</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsClusterStart">
            <summary>	
            Indicates that the glyph is the start of a cluster. 	
            </summary>	
            <unmanaged>short isClusterStart</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsDiacritic">
            <summary>	
            Indicates that the glyph is a diacritic mark. 	
            </summary>	
            <unmanaged>short isDiacritic</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.IsZeroWidthSpace">
            <summary>	
            Indicates that the glyph is a word boundary with no visible space. 	
            </summary>	
            <unmanaged>short isZeroWidthSpace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingGlyphProperties.Reserved">
            <summary>	
            Reserved for future use. 	
            </summary>	
            <unmanaged>short reserved</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSink">
            <summary>	
            This interface is implemented by the text analyzer's client to receive the output of a given text analysis. 	
            </summary>	
            <unmanaged>IDWriteTextAnalysisSink</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetScriptAnalysis(System.Int32,System.Int32,SharpDX.DirectWrite.ScriptAnalysis)">
            <summary>	
            Reports script analysis for the specified text range.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="scriptAnalysis">A reference to a structure that contains a zero-based index representation of a writing system script and a value indicating whether additional shaping of text is required. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetScriptAnalysis([None] int textPosition,[None] int textLength,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetLineBreakpoints(System.Int32,System.Int32,SharpDX.DirectWrite.LineBreakpoint[])">
            <summary>	
            Sets line-break opportunities for each character, starting from the specified position.	
            </summary>	
            <param name="textPosition">The starting text position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="lineBreakpoints">A reference to a structure that contains breaking conditions set for each character from the starting position to the end of the specified range. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetLineBreakpoints([None] int textPosition,[None] int textLength,[In, Buffer] const DWRITE_LINE_BREAKPOINT* lineBreakpoints)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetBidiLevel(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>	
            Sets a bidirectional level on the range, which is  called once per  run change (either explicit or resolved implicit).	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="explicitLevel">The explicit level from the paragraph reading direction and any embedded control codes RLE/RLO/LRE/LRO/PDF, which is determined before any additional rules. </param>
            <param name="resolvedLevel">The final implicit level considering the explicit level and characters' natural directionality, after all Bidi rules have been applied. </param>
            <returns>A successful code or error code to stop analysis. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetBidiLevel([None] int textPosition,[None] int textLength,[None] int explicitLevel,[None] int resolvedLevel)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSink.SetNumberSubstitution(System.Int32,System.Int32,SharpDX.DirectWrite.NumberSubstitution)">
            <summary>	
            Sets the number substitution on the text range affected by the text analysis.	
            </summary>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">The number of UTF16 units of the reported range. </param>
            <param name="numberSubstitution">An object that holds the appropriate digits and numeric punctuation for a given locale. Use <see cref="M:SharpDX.DirectWrite.Factory.CreateNumberSubstitution(SharpDX.DirectWrite.NumberSubstitutionMethod,System.String,System.Boolean,SharpDX.DirectWrite.NumberSubstitution@)"/> to create this object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetNumberSubstitution([None] int textPosition,[None] int textLength,[None] IDWriteNumberSubstitution* numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback">
            <summary>
            Internal TextAnalysisSink Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSinkCallback.#ctor(SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalysisSinkCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSinkCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetScriptAnalysisDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetScriptAnalysis([None] int textPosition,[None] int textLength,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetLineBreakpointsDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetLineBreakpoints([None] int textPosition,[None] int textLength,[In, Buffer] const DWRITE_LINE_BREAKPOINT* lineBreakpoints)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetBidiLevelDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetBidiLevel([None] int textPosition,[None] int textLength,[None] int explicitLevel,[None] int resolvedLevel)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSinkCallback.SetNumberSubstitutionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSink::SetNumberSubstitution([None] int textPosition,[None] int textLength,[None] IDWriteNumberSubstitution* numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSource">
            <summary>	
            Implemented by the text analyzer's client to provide text to the analyzer. It allows the separation between the logical view of text as a continuous stream of characters identifiable by unique text positions, and the actual memory layout of potentially discrete blocks of text in the client's backing store. 	
            </summary>	
            <unmanaged>IDWriteTextAnalysisSource</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetTextAtPosition(System.Int32)">
            <summary>	
            Gets a block of text starting at the specified text position. 	
            </summary>	
            <remarks>	
            Returning NULL indicates the end of text, which is the position after the last character. This function is called iteratively for each consecutive block, tying together several fragmented blocks in the backing store into a virtual contiguous string. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The first position of the piece to obtain. All positions are in UTF16 code units, not whole characters, which matters when supplementary characters are used. </param>      
            <returns>a block of text </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextAtPosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetTextBeforePosition(System.Int32)">
            <summary>	
            Gets a block of text immediately preceding the specified position.	
            </summary>	
            <remarks>	
            NULL indicates no chunk available at the specified position, either because textPosition equals 0,  textPosition is greater than the entire text content length, or the queried position is not mapped into the application's backing store. Although applications can implement sparse textual content that  maps only part of the backing store, the application must map any text that is in the range passed to any analysis functions. 	
            </remarks>	
            <param name="textPosition">The position immediately after the last position of the block of text to obtain. </param>
            <returns>text immediately preceding the specified position </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextBeforePosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetLocaleName(System.Int32)">
            <summary>	
            Gets the locale name on the range affected by the text analysis.	
            </summary>	
            <remarks>	
            The localeName reference must remain valid until the next call or until the analysis returns. 	
            </remarks>	
            <param name="textPosition">The text position to examine. </param>
            <returns>the locale name on the range affected by the text analysis </returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetLocaleName([None] int textPosition,[Out] int* textLength,[Out] const wchar_t** localeName)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSource.GetNumberSubstitution(System.Int32,System.Int32@)">
            <summary>	
            Gets the number substitution from the text range affected by the text analysis.	
            </summary>	
            <remarks>	
            Any implementation should return the number substitution with an incremented reference count, and the analysis will release when finished with it (either before the next call or before it returns). However, the sink callback may hold onto it after that. 	
            </remarks>	
            <param name="textPosition">The starting position from which to report. </param>
            <param name="textLength">Contains  the length of the text, in characters, remaining in the text range up to the next differing number substitution. </param>
            <returns>the number substitution from the text range affected by the text analysis.</returns>
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetNumberSubstitution([None] int textPosition,[Out] int* textLength,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSource.ReadingDirection">
            <summary>	
            Gets the paragraph reading direction.	
            </summary>	
            <returns>The reading direction of the current paragraph. </returns>
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextAnalysisSource::GetParagraphReadingDirection()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback">
            <summary>
            Internal TextAnalysisSource Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSourceCallback.#ctor(SharpDX.DirectWrite.TextAnalysisSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalysisSourceCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalysisSourceCallback.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SharpDX.DirectWrite.TextAnalysisSourceCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetTextAtPositionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextAtPosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetTextBeforePositionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetTextBeforePosition([None] int textPosition,[Out] const wchar_t** textString,[Out] int* textLength)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetParagraphReadingDirectionDelegate">
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextAnalysisSource::GetParagraphReadingDirection()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetLocaleNameDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetLocaleName([None] int textPosition,[Out] int* textLength,[Out] const wchar_t** localeName)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalysisSourceCallback.GetNumberSubstitutionDelegate">
            <unmanaged>HRESULT IDWriteTextAnalysisSource::GetNumberSubstitution([None] int textPosition,[Out] int* textLength,[Out] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAnalyzer">
            <summary>	
            Analyzes various text properties for complex script processing such as bidirectional (bidi) support for languages like Arabic, determination of line break opportunities, glyph placement, and number substitution.	
            </summary>	
            <unmanaged>IDWriteTextAnalyzer</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Returns an interface for performing text analysis. 	
            </summary>	
            <param name="factory">A reference to a DirectWrite factory <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateTextAnalyzer([Out] IDWriteTextAnalyzer** textAnalyzer)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeScript(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink  callback {{SetScript}}. 	
            </summary>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeScript([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeBidi(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback {{SetBidiLevel}}. 	
            </summary>	
            <remarks>	
            While the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs. Otherwise, the returned levels may be wrong, because the Bidi algorithm is meant to apply to the paragraph as a whole.  	
            </remarks>	
            <param name="analysisSource">A reference to a source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeBidi([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback {{SetNumberSubstitution}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple ranges of differing number substitutions, the text ranges should not arbitrarily split the middle of numbers. Otherwise, it will treat the numbers separately and will not translate any intervening punctuation.  	
            </remarks>	
            <param name="analysisSource">The source object to analyze. </param>
            <param name="textPosition">The starting position within the source object. </param>
            <param name="textLength">The length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints(SharpDX.DirectWrite.TextAnalysisSource,System.Int32,System.Int32,SharpDX.DirectWrite.TextAnalysisSink)">
            <summary>	
            Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback {{SetLineBreakpoints}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs, unless the specified text span is considered a whole unit. Otherwise, the returned properties for the first and last characters will inappropriately allow breaks.  	
            </remarks>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the  sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextAnalyzer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeScript__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink  callback {{SetScript}}. 	
            </summary>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeScript([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeBidi__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback {{SetBidiLevel}}. 	
            </summary>	
            <remarks>	
            While the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs. Otherwise, the returned levels may be wrong, because the Bidi algorithm is meant to apply to the paragraph as a whole.  	
            </remarks>	
            <param name="analysisSource">A reference to a source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeBidi([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeNumberSubstitution__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback {{SetNumberSubstitution}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple ranges of differing number substitutions, the text ranges should not arbitrarily split the middle of numbers. Otherwise, it will treat the numbers separately and will not translate any intervening punctuation.  	
            </remarks>	
            <param name="analysisSource">The source object to analyze. </param>
            <param name="textPosition">The starting position within the source object. </param>
            <param name="textLength">The length to analyze. </param>
            <param name="analysisSink">A reference to the sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.AnalyzeLineBreakpoints__(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>	
            Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback {{SetLineBreakpoints}}. 	
            </summary>	
            <remarks>	
            Although the function can handle multiple paragraphs, the text range should not arbitrarily split the middle of paragraphs, unless the specified text span is considered a whole unit. Otherwise, the returned properties for the first and last characters will inappropriately allow breaks.  	
            </remarks>	
            <param name="analysisSource">A reference to the source object to analyze. </param>
            <param name="textPosition">The starting text position within the source object. </param>
            <param name="textLength">The text length to analyze. </param>
            <param name="analysisSink">A reference to the  sink callback object that receives the text analysis. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([None] IDWriteTextAnalysisSource* analysisSource,[None] int textPosition,[None] int textLength,[None] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGlyphs(System.String,System.Int32,SharpDX.DirectWrite.FontFace,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.NumberSubstitution,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32@)">
            <summary>	
            Parses the input text string and maps it to the set of glyphs and associated glyph data according to the font and the writing system's rendering rules. 	
            </summary>	
            <remarks>	
            Note that the mapping from characters to glyphs is, in general, many-to-many.  The recommended estimate for the per-glyph output buffers is (3 * textLength / 2 + 16).  This is not guaranteed to be sufficient. The value of the actualGlyphCount parameter is only valid if the call succeeds.  In the event that maxGlyphCount is not big enough, HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER) will be returned.  The application should  allocate a larger buffer and try again.  	
            </remarks>	
            <param name="textString">An array of characters to convert to glyphs. </param>
            <param name="textLength">The length of textString. </param>
            <param name="fontFace">The font face that is the source of the output glyphs. </param>
            <param name="isSideways">A Boolean flag set to true if the text is intended to be drawn vertically. </param>
            <param name="isRightToLeft">A Boolean flag set to TRUE for right-to-left text. </param>
            <param name="scriptAnalysis">A reference to a Script analysis result from an {{AnalyzeScript}} call. </param>
            <param name="localeName">The locale to use when selecting glyphs. For example the same character may map to different glyphs for ja-jp versus zh-chs. If this is NULL, then the default mapping based on the script is used. </param>
            <param name="numberSubstitution">A reference to an optional number substitution which selects the appropriate glyphs for digits and related numeric characters, depending on the results obtained from AnalyzeNumberSubstitution. Passing NULL indicates that no substitution is needed and that the digits should receive nominal glyphs. </param>
            <param name="features">An array of references to the sets of typographic  features to use in each feature range. </param>
            <param name="featureRangeLengths">The length of each feature range, in characters.   The sum of all lengths should be equal to textLength. </param>
            <param name="featureRanges">The number of feature ranges. </param>
            <param name="maxGlyphCount">The maximum number of glyphs that can be returned. </param>
            <param name="clusterMap">When this method returns, contains the mapping from character ranges to glyph  ranges. </param>
            <param name="textProps">When this method returns, contains a reference to an array of structures that contains  shaping properties for each character. </param>
            <param name="glyphIndices">The output glyph indices. </param>
            <param name="glyphProps">When this method returns, contains a reference to an array of structures that contain  shaping properties for each output glyph. </param>
            <param name="actualGlyphCount">When this method returns, contains the actual number of glyphs returned if the call succeeds. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphs([In, Buffer] const wchar_t* textString,[None] int textLength,[None] IDWriteFontFace* fontFace,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[None] IDWriteNumberSubstitution* numberSubstitution,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[None] int maxGlyphCount,[Out, Buffer] short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[Out, Buffer] short* glyphIndices,[Out, Buffer] DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[Out] int* actualGlyphCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGlyphPlacements(System.String,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32,SharpDX.DirectWrite.FontFace,System.Single,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Single[],SharpDX.DirectWrite.GlyphOffset[])">
            <summary>	
            Places glyphs output from the {{GetGlyphs}} method according to the font  and the writing system's rendering rules. 	
            </summary>	
            <param name="textString">An array of characters containing the original string from which the glyphs came. </param>
            <param name="clusterMap">A reference to the mapping from character ranges to glyph  ranges. This is returned by {{GetGlyphs}}. </param>
            <param name="textProps">A reference to an array of structures that contains  shaping properties for each character. This structure is returned by  {{GetGlyphs}}. </param>
            <param name="textLength">The text length of textString. </param>
            <param name="glyphIndices">An array of glyph indices returned by {{GetGlyphs}}. </param>
            <param name="glyphProps">A reference to an array of structures that contain  shaping properties for each glyph returned by {{GetGlyphs}}. </param>
            <param name="glyphCount">The number of glyphs returned from {{GetGlyphs}}. </param>
            <param name="fontFace">A reference to the font face that is the source for the output glyphs. </param>
            <param name="fontEmSize">The logical font size in DIPs. </param>
            <param name="isSideways">A Boolean flag set to TRUE if the text is intended to be drawn vertically. </param>
            <param name="isRightToLeft">A Boolean flag set to TRUE for right-to-left text. </param>
            <param name="scriptAnalysis">A reference to a Script analysis result from an{{AnalyzeScript}} call. </param>
            <param name="localeName">An array of characters containing the locale to use when selecting glyphs. For example, the same character may map to different glyphs for ja-jp versus zh-chs. If this is NULL, then the default mapping based on the script is used. </param>
            <param name="features">An array of references to the sets of typographic  features to use in each feature range. </param>
            <param name="featureRangeLengths">The length of each feature range, in characters.   The sum of all lengths should be equal to textLength. </param>
            <param name="featureRanges">The number of feature ranges. </param>
            <param name="glyphAdvances">When this method returns, contains the advance width of each glyph. </param>
            <param name="glyphOffsets">When this method returns, contains the offset of the origin of each glyph. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[None] int textLength,[In, Buffer] const short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[None] int glyphCount,[None] IDWriteFontFace* fontFace,[None] float fontEmSize,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextAnalyzer.GetGdiCompatibleGlyphPlacements(System.String,System.Int16[],SharpDX.DirectWrite.ShapingTextProperties[],System.Int32,System.Int16[],SharpDX.DirectWrite.ShapingGlyphProperties[],System.Int32,SharpDX.DirectWrite.FontFace,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean,System.Boolean,System.Boolean,SharpDX.DirectWrite.ScriptAnalysis,System.String,SharpDX.DirectWrite.TypographicFeatures[],System.Int32[],System.Int32,System.Single[],SharpDX.DirectWrite.GlyphOffset[])">
            <summary>	
            Place glyphs output from the GetGlyphs method according to the font  and the writing system's rendering rules.	
            </summary>	
            <param name="textString">An array of characters containing the original string from which the glyphs came. </param>
            <param name="clusterMap">A reference to the mapping from character ranges to glyph  ranges. This is returned by {{GetGlyphs}}. </param>
            <param name="textProps">A reference to an array of structures that contains  shaping properties for each character. This structure is returned by  {{GetGlyphs}}. </param>
            <param name="textLength">The text length of textString. </param>
            <param name="glyphIndices">An array of glyph indices returned by {{GetGlyphs}}. </param>
            <param name="glyphProps">A reference to an array of structures that contain  shaping properties for each glyph returned by {{GetGlyphs}}. </param>
            <param name="glyphCount">The number of glyphs returned from {{GetGlyphs}}. </param>
            <param name="fontFace">A reference to the font face that is the source for the output glyphs. </param>
            <param name="fontEmSize">The logical font size in DIPs. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP. </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and pixelsPerDip. </param>
            <param name="useGdiNatural">When set to FALSE, the metrics are the same as the metrics of GDI aliased text.  When set to TRUE, the metrics are the same as the metrics of text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. </param>
            <param name="isSideways">A Boolean flag set to TRUE if the text is intended to be drawn vertically. </param>
            <param name="isRightToLeft">A Boolean flag set to TRUE for right-to-left text. </param>
            <param name="scriptAnalysis">A reference to a Script analysis result from an{{AnalyzeScript}} call. </param>
            <param name="localeName">An array of characters containing the locale to use when selecting glyphs. For example, the same character may map to different glyphs for ja-jp versus zh-chs. If this is NULL, then the default mapping based on the script is used. </param>
            <param name="features">An array of references to the sets of typographic  features to use in each feature range. </param>
            <param name="featureRangeLengths">The length of each feature range, in characters.   The sum of all lengths should be equal to textLength. </param>
            <param name="featureRanges">The number of feature ranges. </param>
            <param name="glyphAdvances">When this method returns, contains the advance width of each glyph. </param>
            <param name="glyphOffsets">When this method returns, contains the offset of the origin of each glyph. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[None] int textLength,[In, Buffer] const short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[None] int glyphCount,[None] IDWriteFontFace* fontFace,[None] float fontEmSize,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[None] BOOL isSideways,[None] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Buffer, Optional] const DWRITE_TYPOGRAPHIC_FEATURES** features,[In, Buffer, Optional] const int* featureRangeLengths,[None] int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextFormat">
            <summary>	
            The IDWriteTextFormat interface describes the font and paragraph properties used to format text, and it describes locale information. 	
            </summary>	
            <unmanaged>IDWriteTextFormat</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal weight, style and stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,System.Single)">
            <summary>	
             Creates a text format object used for text layout with normal stretch.
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.FontStretch,System.Single,System.String)">
            <summary>	
             Creates a text format object used for text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="fontFamilyName">An array of characters that contains the name of the font family</param>
            <param name="fontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object created by this method.</param>
            <param name="fontStyle">A value that indicates the font style for the text object created by this method.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object created by this method.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIP equals 1/96 inch.</param>
            <param name="localeName">An array of characters that contains the locale name.</param>
            <unmanaged>HRESULT CreateTextFormat([In] const wchar* fontFamilyName,[None] IDWriteFontCollection* fontCollection,[None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_FONT_STRETCH fontStretch,[None] FLOAT fontSize,[In] const wchar* localeName,[Out] IDWriteTextFormat** textFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextFormat"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetTextAlignment(SharpDX.DirectWrite.TextAlignment)">
            <summary>	
            Sets the alignment of text in a paragraph, relative to the leading and trailing edge of a layout box for a IDWriteTextFormat interface.	
            </summary>	
            <remarks>	
            The text can be aligned to the leading or trailing edge of the layout box, or it can be centered.  The following illustration shows text with the alignment set to DWRITE_TEXT_ALIGNMENT_LEADING, DWRITE_TEXT_ALIGNMENT_CENTER, and DWRITE_TEXT_ALIGNMENT_TRAILING, respectively.    ?  Illustration of text paragraphs with leading, centered, and trailing alignment ? Note??The alignment is dependent on reading direction, the above is for left-to-right reading direction.  For right-to-left reading direction it would be the opposite. See <see cref="T:SharpDX.DirectWrite.TextAlignment"/> for more information.  	
            </remarks>	
            <param name="textAlignment">The text alignment option being set for the paragraph of type DWRITE_TEXT_ALIGNMENT.  For more information, see Remarks.  </param>
            <returns>The method can return one of the following values.  Return codeDescription  S_OK The method succeeded.   E_INVALIDARG The textAlignment argument is invalid.   ? </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetTextAlignment([None] DWRITE_TEXT_ALIGNMENT textAlignment)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetParagraphAlignment(SharpDX.DirectWrite.ParagraphAlignment)">
            <summary>	
            Sets the alignment option of a paragraph relative to the layout box's top and bottom edge. 	
            </summary>	
            <param name="paragraphAlignment">The paragraph alignment option being set for a paragraph; see DWRITE_PARAGRAPH_ALIGNMENT for more information. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetParagraphAlignment([None] DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetWordWrapping(SharpDX.DirectWrite.WordWrapping)">
            <summary>	
            Sets the word wrapping option. 	
            </summary>	
            <param name="wordWrapping">The word wrapping option being set for a paragraph; see <see cref="T:SharpDX.DirectWrite.WordWrapping"/> for more information. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetWordWrapping([None] DWRITE_WORD_WRAPPING wordWrapping)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetReadingDirection(SharpDX.DirectWrite.ReadingDirection)">
            <summary>	
            Sets the paragraph reading direction. 	
            </summary>	
            <param name="readingDirection">The text reading direction (for example, <see cref="F:SharpDX.DirectWrite.ReadingDirection.RightToLeft"/> for languages, such as  Arabic, that read from right to left) for a paragraph. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetReadingDirection([None] DWRITE_READING_DIRECTION readingDirection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetFlowDirection(SharpDX.DirectWrite.FlowDirection)">
            <summary>	
            Sets the  paragraph flow direction. 	
            </summary>	
            <param name="flowDirection">The paragraph flow direction; see <see cref="T:SharpDX.DirectWrite.FlowDirection"/> for more information. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetFlowDirection([None] DWRITE_FLOW_DIRECTION flowDirection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetIncrementalTabStop(System.Single)">
            <summary>	
            Sets a fixed distance between two adjacent tab stops. 	
            </summary>	
            <param name="incrementalTabStop">The fixed distance between two adjacent tab stops. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetIncrementalTabStop([None] float incrementalTabStop)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetTrimming_(SharpDX.DirectWrite.Trimming,System.IntPtr)">
            <summary>	
            Sets trimming options for text overflowing the layout width. 	
            </summary>	
            <param name="trimmingOptions">Text trimming options. </param>
            <param name="trimmingSign">Application-defined omission sign. This parameter may be NULL. See <see cref="T:SharpDX.DirectWrite.InlineObject"/> for more information. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetTrimming([In] const DWRITE_TRIMMING* trimmingOptions,[None] IDWriteInlineObject* trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.SetLineSpacing(SharpDX.DirectWrite.LineSpacingMethod,System.Single,System.Single)">
            <summary>	
            Sets the  line spacing. 	
            </summary>	
            <remarks>	
            For the default method, spacing depends solely on the content. For uniform spacing, the specified line height overrides the content.  	
            </remarks>	
            <param name="lineSpacingMethod">Specifies how line height is being determined; see <see cref="T:SharpDX.DirectWrite.LineSpacingMethod"/> for more information. </param>
            <param name="lineSpacing">The line height, or distance between one baseline to another. </param>
            <param name="baseline">The distance from top of line to baseline. A reasonable ratio to lineSpacing is 80 percent. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::SetLineSpacing([None] DWRITE_LINE_SPACING_METHOD lineSpacingMethod,[None] float lineSpacing,[None] float baseline)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetTextAlignment">
            <summary>	
            Gets the alignment option of text relative to the layout box's leading and trailing edge. 	
            </summary>	
            <returns>Returns the text alignment option of the current paragraph. </returns>
            <unmanaged>DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetParagraphAlignment">
            <summary>	
            Gets the alignment option of a paragraph which is  relative to the top and bottom edges of a layout box. 	
            </summary>	
            <returns>A value that indicates the current paragraph alignment option. </returns>
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetWordWrapping">
            <summary>	
            Gets the word wrapping option. 	
            </summary>	
            <returns>Returns the word wrapping option; see <see cref="T:SharpDX.DirectWrite.WordWrapping"/> for more information. </returns>
            <unmanaged>DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetReadingDirection">
            <summary>	
            Gets the  current reading direction for text in a paragraph. 	
            </summary>	
            <returns>A value that indicates the current reading direction for text in a  paragraph. </returns>
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFlowDirection">
            <summary>	
            Gets the direction that text lines flow. 	
            </summary>	
            <returns>The direction that text lines flow within their parent container.  For example, DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM indicates that text lines are placed from top to bottom. </returns>
            <unmanaged>DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetIncrementalTabStop">
            <summary>	
            Gets the  incremental tab stop position. 	
            </summary>	
            <returns>The incremental tab stop value. </returns>
            <unmanaged>float IDWriteTextFormat::GetIncrementalTabStop()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetTrimming(SharpDX.DirectWrite.Trimming@,SharpDX.DirectWrite.InlineObject@)">
            <summary>	
            Gets the trimming options for text that overflows the layout box. 	
            </summary>	
            <param name="trimmingOptions">When this method returns, it contains a reference to a <see cref="T:SharpDX.DirectWrite.Trimming"/> structure that holds the text trimming options for the overflowing text. </param>
            <param name="trimmingSign">When this method returns, contains an address of a reference to a trimming omission sign. This parameter may be NULL. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetTrimming([Out] DWRITE_TRIMMING* trimmingOptions,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLineSpacing(SharpDX.DirectWrite.LineSpacingMethod@,System.Single@,System.Single@)">
            <summary>	
            Gets the line spacing adjustment set for a multiline text paragraph. 	
            </summary>	
            <param name="lineSpacingMethod">A value that indicates how line height is determined. </param>
            <param name="lineSpacing">When this method returns, contains the line height, or  distance between one baseline to another. </param>
            <param name="baseline">When this method returns, contains the distance from top of line to baseline. A reasonable ratio to lineSpacing is 80 percent. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLineSpacing([Out] DWRITE_LINE_SPACING_METHOD* lineSpacingMethod,[Out] float* lineSpacing,[Out] float* baseline)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontCollection(SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            Gets the current font collection. 	
            </summary>	
            <param name="fontCollection">When this method returns, contains an address of a reference to the font collection being used for the current text. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontFamilyNameLength">
            <summary>	
            Gets the length of the font family name. 	
            </summary>	
            <returns>The size of the character array, in character count, not including the terminated NULL character. </returns>
            <unmanaged>int IDWriteTextFormat::GetFontFamilyNameLength()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontFamilyName(System.IntPtr,System.Int32)">
            <summary>	
            Gets a copy of the font family name. 	
            </summary>	
            <param name="fontFamilyName">When this method returns, contains a reference to a character array, which is null-terminated, that receives the current font family name. The buffer allocated for this array should be at least the size, in elements, of nameSize. </param>
            <param name="nameSize">The size of the fontFamilyName character array, in character count, including the terminated NULL character.  To find the size of fontFamilyName, use {{GetFontFamilyNameLength}}. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontWeight">
            <summary>	
            Gets the font weight of the text. 	
            </summary>	
            <returns>A value that indicates the type of weight (such as normal, bold, or black).  </returns>
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontStyle">
            <summary>	
            Gets the font style of the text.	
            </summary>	
            <returns>A value which indicates the type of font style (such as  slope or incline). </returns>
            <unmanaged>DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontStretch">
            <summary>	
            Gets the font stretch of the text. 	
            </summary>	
            <returns>A value which indicates the type of font stretch (such as  normal or condensed). </returns>
            <unmanaged>DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetFontSize">
            <summary>	
            Gets the font  size in DIP unites. 	
            </summary>	
            <returns>The current font size in DIP units. </returns>
            <unmanaged>float IDWriteTextFormat::GetFontSize()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLocaleNameLength">
            <summary>	
            Gets the length of the locale name. 	
            </summary>	
            <returns>The size of the character array in character count, not including the terminated NULL character. </returns>
            <unmanaged>int IDWriteTextFormat::GetLocaleNameLength()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextFormat.GetLocaleName(System.IntPtr,System.Int32)">
            <summary>	
            Gets a copy of the locale name. 	
            </summary>	
            <param name="localeName">Contains a character array that receives the current locale name. </param>
            <param name="nameSize">The size of the character array, in character count, including the terminated NULL character. Use {{GetLocaleNameLength}} to get the size of the locale name character array. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontFamilyName">
            <summary>	
            Gets a copy of the font family name. 	
            </summary>	
            <returns>the current font family name. </returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.LocaleName">
            <summary>	
            Gets a copy of the locale name. 	
            </summary>	
            <returns>the current locale name.</returns>
            <unmanaged>HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[None] int nameSize)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.TextAlignment">
            <summary>	
            Gets the alignment option of text relative to the layout box's leading and trailing edge. 	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.ParagraphAlignment">
            <summary>	
            Gets the alignment option of a paragraph which is  relative to the top and bottom edges of a layout box. 	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.WordWrapping">
            <summary>	
            Gets the word wrapping option. 	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.ReadingDirection">
            <summary>	
            Gets the  current reading direction for text in a paragraph. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FlowDirection">
            <summary>	
            Gets the direction that text lines flow. 	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.IncrementalTabStop">
            <summary>	
            Gets the  incremental tab stop position. 	
            </summary>	
            <unmanaged>float IDWriteTextFormat::GetIncrementalTabStop()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontCollection">
            <summary>	
            Gets the current font collection. 	
            </summary>	
            <unmanaged>HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontWeight">
            <summary>	
            Gets the font weight of the text. 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontStyle">
            <summary>	
            Gets the font style of the text.	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontStretch">
            <summary>	
            Gets the font stretch of the text. 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextFormat.FontSize">
            <summary>	
            Gets the font  size in DIP unites. 	
            </summary>	
            <unmanaged>float IDWriteTextFormat::GetFontSize()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextLayout">
            <summary>	
            The IDWriteTextLayout interface represents a block of text after it has been fully analyzed and formatted.	
            </summary>	
            <unmanaged>IDWriteTextLayout</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single)">
            <summary>	
             Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters.</param>
            <param name="textFormat">A pointer to an object that indicates the format to apply to the string.</param>
            <param name="maxWidth">The width of the layout box.</param>
            <param name="maxHeight">The height of the layout box.</param>
            <unmanaged>HRESULT CreateTextLayout([In, Buffer] const wchar* string,[None] UINT32 stringLength,[None] IDWriteTextFormat* textFormat,[None] FLOAT maxWidth,[None] FLOAT maxHeight,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(SharpDX.DirectWrite.Factory,System.String,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,System.Single,System.Nullable{SharpDX.DirectWrite.Matrix},System.Boolean)">
            <summary>	
            Create a Gdi Compatible TextLayout. Takes a string, format, and associated constraints, and produces an object representing the result, formatted for a particular display resolution and measuring mode.  	
            </summary>	
            <remarks>	
            The resulting text layout should only be used for the intended resolution, and for cases where text scalability is desired {{CreateTextLayout}} should be used instead. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <param name="text">An array of characters that contains the string to create a new <see cref="T:SharpDX.DirectWrite.TextLayout"/> object from. This array must be of length stringLength and can contain embedded NULL characters. </param>
            <param name="textFormat">The text formatting object to apply to the string. </param>
            <param name="layoutWidth">The width of the layout box. </param>
            <param name="layoutHeight">The height of the layout box. </param>
            <param name="pixelsPerDip">The number of physical pixels per DIP (device independent pixel). For example, if rendering onto a 96 DPI device pixelsPerDip is 1. If rendering onto a 120 DPI device pixelsPerDip is 1.25 (120/96). </param>
            <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specifies the font size and pixels per DIP. </param>
            <param name="useGdiNatural">Instructs the text layout to use the same metrics as GDI bi-level text when set to FALSE. When set to TRUE, instructs the text layout to use the same metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.  </param>
            <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[None] int stringLength,[None] IDWriteTextFormat* textFormat,[None] float layoutWidth,[None] float layoutHeight,[None] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[None] BOOL useGdiNatural,[Out] IDWriteTextLayout** textLayout)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw(SharpDX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] FLOAT originX,[None] FLOAT originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw(System.Object,SharpDX.DirectWrite.TextRenderer,System.Single,System.Single)">
            <summary>	
             Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)"/>. After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called. 	
            </remarks>	
            <param name="clientDrawingContext">An application-defined drawing context. </param>
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string.</param>
            <param name="originX">The x-coordinate of the layout's left side.</param>
            <param name="originY">The y-coordinate of the layout's top side.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] FLOAT originX,[None] FLOAT originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetClusterMetrics">
            <summary>	
            Retrieves logical properties and measurements of each glyph cluster. 	
            </summary>	
            <remarks>	
            If maxClusterCount is not large enough, then E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and actualClusterCount is set to the number of clusters needed.  	
            </remarks>	
            <returns>Returns metrics, such as line-break or total advance width, for a glyph cluster. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[None] int maxClusterCount,[Out] int* actualClusterCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the application-defined drawing effect. 	
            </summary>	
            <remarks>	
            An <see cref="T:SharpDX.Direct2D1.Brush"/>, such as a color or gradient brush, can be set as a drawing effect if you are using the <see cref="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)"/> to draw text and that brush will be used to draw the specified range of text.  This drawing effect is associated with the specified range and will be passed back to the application by way of the callback when the range is drawn at drawing time.  	
            </remarks>	
            <param name="drawingEffect">Application-defined drawing effects that apply to the range. This data object will be passed back to the application's drawing callbacks for final rendering. </param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetDrawingEffect([None] IUnknown* drawingEffect,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] IUnknown** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <param name="textRange">Contains the range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the drawing effect. </param>
            <returns>a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] IUnknown** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontCollection(System.Int32)">
            <summary>	
            Gets the font collection associated with the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current font collection.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontCollection([None] int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <returns>the font family name </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font family name. </param>
            <returns>the font family name </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontSize(System.Int32)">
            <summary>	
            Gets the font em height of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the size of the font in ems  of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontSize([None] int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStretch(System.Int32)">
            <summary>	
            Gets the font stretch of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font stretch (also known as width) being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStretch([None] int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStyle(System.Int32)">
            <summary>	
            Gets the font style (also known as slope) of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font style (also known as slope or incline) being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStyle([None] int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontWeight(System.Int32)">
            <summary>	
            Gets the font weight of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a value which indicates the type of font weight being applied at the specified position.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontWeight([None] int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetInlineObject(System.Int32)">
            <summary>	
            Gets the inline object at the specified position. 	
            </summary>	
            <param name="currentPosition">The specified text position. </param>
            <returns>an application-defined inline object. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetInlineObject([None] int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLineMetrics">
            <summary>	
            Retrieves the information about each individual text line of the  text string. 	
            </summary>	
            <remarks>	
            If maxLineCount is not large enough E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and *actualLineCount is set to the number of lines needed.  	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[None] int maxLineCount,[Out] int* actualLineCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>the locale name of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name. </param>
            <returns>the locale name of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasStrikethrough(System.Int32)">
            <summary>	
            Get the strikethrough presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>A Boolean  flag that indicates whether strikethrough is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetStrikethrough([None] int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetTypography(System.Int32)">
            <summary>	
            Gets the typography setting of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <returns>a  reference to the current typography setting. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetTypography([None] int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasUnderline(System.Int32)">
            <summary>	
            Gets the underline presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The current text position. </param>
            <returns>A Boolean  flag that indicates whether underline is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetUnderline([None] int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestPoint(System.Single,System.Single,System.Boolean@,System.Boolean@)">
            <summary>	
            The application calls this function passing in a specific pixel location relative to the top-left location of the layout box and obtains the information about the correspondent hit-test metrics of the text string where the hit-test has occurred. When the specified pixel location is outside the text string, the function sets the output value *isInside to FALSE. 	
            </summary>	
            <param name="pointX">The pixel location X to hit-test, relative to the top-left location of the layout box. </param>
            <param name="pointY">The pixel location Y to hit-test, relative to the top-left location of the layout box. </param>
            <param name="isTrailingHit">An output flag that indicates whether the hit-test location is at the leading or the trailing side of the character. When the output *isInside value is set to FALSE, this value is set according to the output hitTestMetrics-&gt;textPosition value to represent the edge closest to the hit-test location. </param>
            <param name="isInside">An output flag that indicates whether the hit-test location is inside the text string. When FALSE, the position nearest the text's edge is returned. </param>
            <returns>The output geometry fully enclosing the hit-test location. When the output *isInside value is set to FALSE, this structure represents the geometry enclosing the edge closest to the hit-test location.</returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestPoint([None] float pointX,[None] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>	
            The application calls this function to get a set of hit-test metrics corresponding to a range of text positions. One of the main usages is to implement highlight selection of the text string. The function returns E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), when the buffer size of hitTestMetrics is too small to hold all the regions calculated by the function. In this situation, the function sets the output value *actualHitTestMetricsCount to the number of geometries calculated. The application is responsible for allocating a new buffer of greater size and calling the function again. A good value to use as an initial value for maxHitTestMetricsCount may be calculated from the following equation: maxHitTestMetricsCount = lineCount * maxBidiReorderingDepth where lineCount is obtained from the value of the output argument *actualLineCount (from the function IDWriteTextLayout::GetLineLengths), and the maxBidiReorderingDepth value from the DWRITE_TEXT_METRICS structure of the output argument *textMetrics (from the function IDWriteFactory::CreateTextLayout). 	
            </summary>	
            <param name="textPosition">The first text position of the specified range. </param>
            <param name="textLength">The number of positions of the specified range. </param>
            <param name="originX">The origin pixel location X at the left of the layout box. This offset is added to the hit-test metrics returned. </param>
            <param name="originY">The origin pixel location Y at the top of the layout box. This offset is added to the hit-test metrics returned. </param>
            <returns>a reference to a buffer of the output geometry fully enclosing the specified position range.  The buffer must be at least as large as maxHitTestMetricsCount. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextRange([None] int textPosition,[None] int textLength,[None] float originX,[None] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[None] int maxHitTestMetricsCount,[Out] int* actualHitTestMetricsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextLayout"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetMaxWidth(System.Single)">
            <summary>	
            Sets the layout maximum width.	
            </summary>	
            <param name="maxWidth">A value that indicates the maximum width of the layout box. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetMaxWidth([None] float maxWidth)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetMaxHeight(System.Single)">
            <summary>	
            Sets the layout maximum height. 	
            </summary>	
            <param name="maxHeight">A value that indicates the maximum height of the layout box.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetMaxHeight([None] float maxHeight)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontCollection(SharpDX.DirectWrite.FontCollection,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the font collection. 	
            </summary>	
            <param name="fontCollection">The font collection to set. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontCollection([None] IDWriteFontCollection* fontCollection,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontFamilyName(System.String,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets null-terminated font family name for text within a specified  text range. 	
            </summary>	
            <param name="fontFamilyName">The font family name that applies to the entire text string within the range specified by textRange. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontFamilyName([In] const wchar_t* fontFamilyName,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontWeight(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the font weight for text within a text range specified by a <see cref="T:SharpDX.DirectWrite.TextRange"/> structure. 	
            </summary>	
            <remarks>	
            The font weight can be set to one of the predefined font weight values provided in the <see cref="T:SharpDX.DirectWrite.FontWeight"/> enumeration or an integer from 1 to 999.  Values outside this range will cause the method to fail with an E_INVALIDARG return value. The following illustration shows an example of Normal and UltraBold weights for the Palatino Linotype typeface. ?  Illustration of the letter "W" in Normal and UltraBold weights ? 	
            </remarks>	
            <param name="fontWeight">The font weight to be set for text within the range specified by textRange. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontWeight([None] DWRITE_FONT_WEIGHT fontWeight,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontStyle(SharpDX.DirectWrite.FontStyle,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the font style for  text within a text range specified by a <see cref="T:SharpDX.DirectWrite.TextRange"/> structure.	
            </summary>	
            <remarks>	
            The font style can be set to Normal, Italic or Oblique. The following illustration shows  three styles for the Palatino font.  For more information, see <see cref="T:SharpDX.DirectWrite.FontStyle"/>.  ?  Illustration of normal, italic, and oblique font styles for the Palatino font ? 	
            </remarks>	
            <param name="fontStyle">The  font style to be set   for text within a range specified by textRange. </param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontStyle([None] DWRITE_FONT_STYLE fontStyle,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontStretch(SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the  font stretch for text within a specified text range. 	
            </summary>	
            <param name="fontStretch">A value which indicates the type of font stretch for text within the range specified by textRange. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontStretch([None] DWRITE_FONT_STRETCH fontStretch,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetFontSize(System.Single,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the font size in DIP units for text within a specified text range. 	
            </summary>	
            <param name="fontSize">The  font size in DIP units to be set for   text in the range specified by textRange.  </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetFontSize([None] float fontSize,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetUnderline(System.Boolean,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets underlining for text within a specified text range. 	
            </summary>	
            <param name="hasUnderline">A Boolean flag that indicates whether underline takes place within a specified text range. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetUnderline([None] BOOL hasUnderline,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetStrikethrough(System.Boolean,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets strikethrough for text within a specified text range. 	
            </summary>	
            <param name="hasStrikethrough">A Boolean flag that indicates whether strikethrough takes place in the range specified by textRange. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetStrikethrough([None] BOOL hasStrikethrough,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect_(System.IntPtr,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the application-defined drawing effect. 	
            </summary>	
            <remarks>	
            An <see cref="T:SharpDX.Direct2D1.Brush"/>, such as a color or gradient brush, can be set as a drawing effect if you are using the <see cref="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)"/> to draw text and that brush will be used to draw the specified range of text.  This drawing effect is associated with the specified range and will be passed back to the application by way of the callback when the range is drawn at drawing time.  	
            </remarks>	
            <param name="drawingEffect">Application-defined drawing effects that apply to the range. This data object will be passed back to the application's drawing callbacks for final rendering. </param>
            <param name="textRange">The text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetDrawingEffect([None] void* drawingEffect,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetInlineObject_(System.IntPtr,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the inline object. 	
            </summary>	
            <remarks>	
            The application may call this function to specify the set of properties describing an application-defined inline object for specific range.  This inline object applies to the specified range and will be passed back to the application by way of the DrawInlineObject callback when the range is drawn. Any text in that range will be suppressed.  	
            </remarks>	
            <param name="inlineObject">An application-defined inline object.  </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetInlineObject([None] IDWriteInlineObject* inlineObject,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetTypography(SharpDX.DirectWrite.Typography,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets  font typography features for text within a specified text range. 	
            </summary>	
            <param name="typography">Pointer to font typography settings.  </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetTypography([None] IDWriteTypography* typography,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.SetLocaleName(System.String,SharpDX.DirectWrite.TextRange)">
            <summary>	
            Sets the locale name for text within a specified text range.	
            </summary>	
            <param name="localeName">A null-terminated locale name string. </param>
            <param name="textRange">Text range to which this change applies. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::SetLocaleName([In] const wchar_t* localeName,[None] DWRITE_TEXT_RANGE textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMaxWidth">
            <summary>	
            Gets the layout maximum width. 	
            </summary>	
            <returns>Returns the layout maximum width. </returns>
            <unmanaged>float IDWriteTextLayout::GetMaxWidth()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMaxHeight">
            <summary>	
            Gets the layout maximum height. 	
            </summary>	
            <returns>The layout maximum height. </returns>
            <unmanaged>float IDWriteTextLayout::GetMaxHeight()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontCollection(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font collection associated with the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the underline. </param>
            <returns>Contains an address of a  reference to the current font collection. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontCollection([None] int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyNameLength(System.Int32,System.Int32@,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Get the length of the font family name at the current position. 	
            </summary>	
            <param name="currentPosition">The current text position. </param>
            <param name="nameLength">When this method returns, contains the size of the character array containing the font family name, in character count, not including the terminated NULL character. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font family. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyNameLength([None] int currentPosition,[Out] int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontFamilyName(System.Int32,System.IntPtr,System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Copies the font family name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to examine. </param>
            <param name="fontFamilyName">When this method returns, contains an array of characters that receives the current font family name. You must allocate storage for this parameter. </param>
            <param name="nameSize">The size of the character array in character count including the terminated NULL character. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font family name. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([None] int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontWeight(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font weight of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font weight. </param>
            <returns>When this method returns, contains a value which indicates the type of font weight being applied at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontWeight([None] int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStyle(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font style (also known as slope) of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font style. </param>
            <returns>When this method returns, contains a value which indicates the type of font style (also known as slope or incline) being applied at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStyle([None] int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontStretch(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font stretch of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font stretch. </param>
            <returns>When this method returns, contains a value which indicates the type of font stretch (also known as width) being applied at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontStretch([None] int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetFontSize(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the font em height of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the font size. </param>
            <returns>When this method returns, contains the size of the font in ems  of the text at the specified position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetFontSize([None] int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasUnderline(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the underline presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The current text position. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the underline. </param>
            <returns>A Boolean  flag that indicates whether underline is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetUnderline([None] int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HasStrikethrough(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Get the strikethrough presence of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">Contains the range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to strikethrough. </param>
            <returns>A Boolean  flag that indicates whether strikethrough is present at the position indicated by currentPosition. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetStrikethrough([None] int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetDrawingEffect_(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the application-defined drawing effect at the specified text position. 	
            </summary>	
            <param name="currentPosition">The position of the text whose drawing effect is to be retrieved. </param>
            <param name="textRange">Contains the range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the drawing effect. </param>
            <returns>When this method returns, contains an address of a reference to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([None] int currentPosition,[Out] void** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetInlineObject(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the inline object at the specified position. 	
            </summary>	
            <param name="currentPosition">The specified text position. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the inline object. </param>
            <returns>Contains the application-defined inline object. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetInlineObject([None] int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetTypography(System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the typography setting of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the typography. </param>
            <returns>When this method returns, contains an address of a  reference to the current typography setting. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetTypography([None] int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleNameLength(System.Int32,System.Int32@,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the length of the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="nameLength">Size of the character array, in character count, not including the terminated NULL character. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleNameLength([None] int currentPosition,[Out] int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLocaleName(System.Int32,System.IntPtr,System.Int32,SharpDX.DirectWrite.TextRange@)">
            <summary>	
            Gets the locale name of the text at the specified position. 	
            </summary>	
            <param name="currentPosition">The position of the text to inspect. </param>
            <param name="localeName">When this method returns, contains the character array receiving the current locale name. </param>
            <param name="nameSize">Size of the character array, in character count, including the terminated NULL character. </param>
            <param name="textRange">The range of text that has the same  formatting as the text at the position specified by currentPosition.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([None] int currentPosition,[Out, Buffer] wchar_t* localeName,[None] int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>	
            Draws text using the specified client drawing context.	
            </summary>	
            <remarks>	
            To draw text with this method, a textLayout object needs to be created by the application using <see cref="M:SharpDX.DirectWrite.Factory.CreateTextLayout(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,System.Single,System.Single,SharpDX.DirectWrite.TextLayout@)"/>.  After the textLayout object is obtained, the application calls the  IDWriteTextLayout::Draw method  to draw the text, decorations, and inline objects. The actual drawing is done through the callback interface passed in as the textRenderer argument; there, the corresponding DrawGlyphRun API is called.  	
            </remarks>	
            <param name="clientDrawingContext">An application-defined drawing context.  </param>
            <param name="renderer">Pointer to the set of callback functions used to draw parts of a text string. </param>
            <param name="originX">The x-coordinate of the layout's left side. </param>
            <param name="originY">The y-coordinate of the layout's top side. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::Draw([None] void* clientDrawingContext,[None] IDWriteTextRenderer* renderer,[None] float originX,[None] float originY)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetLineMetrics(SharpDX.DirectWrite.LineMetrics[],System.Int32,System.Int32@)">
            <summary>	
            Retrieves the information about each individual text line of the  text string. 	
            </summary>	
            <remarks>	
            If maxLineCount is not large enough E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and *actualLineCount is set to the number of lines needed.  	
            </remarks>	
            <param name="lineMetrics">When this method returns, contains a reference to an array of structures containing various calculated length values of individual text lines. </param>
            <param name="maxLineCount">The maximum size of the lineMetrics array. </param>
            <param name="actualLineCount">When this method returns, contains the actual size of the lineMetrics array that is needed. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[None] int maxLineCount,[Out] int* actualLineCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetMetrics(SharpDX.DirectWrite.TextMetrics@)">
            <summary>	
            Retrieves overall metrics for the formatted string. 	
            </summary>	
            <param name="textMetrics">When this method returns, contains the measured distances of text and associated content after being formatted. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetOverhangMetrics(SharpDX.DirectWrite.OverhangMetrics@)">
            <summary>	
            Returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects.	
            </summary>	
            <remarks>	
            Underlines and strikethroughs do not contribute to the black box determination, since these are actually drawn by the renderer, which is allowed to draw them in any variety of styles. 	
            </remarks>	
            <param name="overhangs">Overshoots of visible extents (in DIPs) outside the layout. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.GetClusterMetrics(SharpDX.DirectWrite.ClusterMetrics[],System.Int32,System.Int32@)">
            <summary>	
            Retrieves logical properties and measurements of each glyph cluster. 	
            </summary>	
            <remarks>	
            If maxClusterCount is not large enough, then E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), is returned and actualClusterCount is set to the number of clusters needed.  	
            </remarks>	
            <param name="clusterMetrics">When this method returns, contains metrics, such as line-break or total advance width, for a glyph cluster. </param>
            <param name="maxClusterCount">The maximum size of the clusterMetrics array. </param>
            <param name="actualClusterCount">When this method returns, contains the actual size of the clusterMetrics array that is needed. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[None] int maxClusterCount,[Out] int* actualClusterCount)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.DetermineMinWidth">
            <summary>	
            Determines the minimum possible width the layout can be set to without emergency breaking between the characters of whole words occurring.	
            </summary>	
            <returns>Minimum width. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::DetermineMinWidth([Out] float* minWidth)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestPoint(System.Single,System.Single,System.Int32@,System.Int32@,SharpDX.DirectWrite.HitTestMetrics@)">
            <summary>	
            The application calls this function passing in a specific pixel location relative to the top-left location of the layout box and obtains the information about the correspondent hit-test metrics of the text string where the hit-test has occurred. When the specified pixel location is outside the text string, the function sets the output value *isInside to FALSE. 	
            </summary>	
            <param name="pointX">The pixel location X to hit-test, relative to the top-left location of the layout box. </param>
            <param name="pointY">The pixel location Y to hit-test, relative to the top-left location of the layout box. </param>
            <param name="isTrailingHit">An output flag that indicates whether the hit-test location is at the leading or the trailing side of the character. When the output *isInside value is set to FALSE, this value is set according to the output hitTestMetrics-&gt;textPosition value to represent the edge closest to the hit-test location. </param>
            <param name="isInside">An output flag that indicates whether the hit-test location is inside the text string. When FALSE, the position nearest the text's edge is returned. </param>
            <param name="hitTestMetrics">The output geometry fully enclosing the hit-test location. When the output *isInside value is set to FALSE, this structure represents the geometry enclosing the edge closest to the hit-test location. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestPoint([None] float pointX,[None] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextPosition(System.Int32,System.Boolean,System.Single@,System.Single@)">
            <summary>	
            The application calls this function to get the pixel location relative to the top-left of the layout box given the text position and the logical side of the position. This function is normally used as part of caret positioning of text where the caret is drawn at the location corresponding to the current text editing position. It may also be used as a way to programmatically obtain the geometry of a particular text position in UI automation. 	
            </summary>	
            <param name="textPosition">The text position used to get the pixel location. </param>
            <param name="isTrailingHit">A Boolean flag that indicates whether the pixel location is of the leading or the trailing side of the specified text position. </param>
            <param name="ointXRef">When this method returns, contains the output pixel location X, relative to the top-left location of the layout box. </param>
            <param name="ointYRef">When this method returns, contains the output pixel location Y, relative to the top-left location of the layout box. </param>
            <returns>When this method returns, contains the output geometry fully enclosing the specified text position. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextPosition([None] int textPosition,[None] BOOL isTrailingHit,[Out] float* pointX,[Out] float* pointY,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextLayout.HitTestTextRange(System.Int32,System.Int32,System.Single,System.Single,SharpDX.DirectWrite.HitTestMetrics[],System.Int32,System.Int32@)">
            <summary>	
            The application calls this function to get a set of hit-test metrics corresponding to a range of text positions. One of the main usages is to implement highlight selection of the text string. The function returns E_NOT_SUFFICIENT_BUFFER, which is equivalent to HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER), when the buffer size of hitTestMetrics is too small to hold all the regions calculated by the function. In this situation, the function sets the output value *actualHitTestMetricsCount to the number of geometries calculated. The application is responsible for allocating a new buffer of greater size and calling the function again. A good value to use as an initial value for maxHitTestMetricsCount may be calculated from the following equation: maxHitTestMetricsCount = lineCount * maxBidiReorderingDepth where lineCount is obtained from the value of the output argument *actualLineCount (from the function IDWriteTextLayout::GetLineLengths), and the maxBidiReorderingDepth value from the DWRITE_TEXT_METRICS structure of the output argument *textMetrics (from the function IDWriteFactory::CreateTextLayout). 	
            </summary>	
            <param name="textPosition">The first text position of the specified range. </param>
            <param name="textLength">The number of positions of the specified range. </param>
            <param name="originX">The origin pixel location X at the left of the layout box. This offset is added to the hit-test metrics returned. </param>
            <param name="originY">The origin pixel location Y at the top of the layout box. This offset is added to the hit-test metrics returned. </param>
            <param name="hitTestMetrics">When this method returns, contains a reference to a buffer of the output geometry fully enclosing the specified position range.  The buffer must be at least as large as maxHitTestMetricsCount. </param>
            <param name="maxHitTestMetricsCount">Maximum number of boxes hitTestMetrics could hold in its buffer memory. </param>
            <param name="actualHitTestMetricsCount">Actual number of geometries hitTestMetrics holds in its buffer memory. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTextLayout::HitTestTextRange([None] int textPosition,[None] int textLength,[None] float originX,[None] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[None] int maxHitTestMetricsCount,[Out] int* actualHitTestMetricsCount)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.MaxWidth">
            <summary>	
            Gets the layout maximum width. 	
            </summary>	
            <unmanaged>float IDWriteTextLayout::GetMaxWidth()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.MaxHeight">
            <summary>	
            Gets the layout maximum height. 	
            </summary>	
            <unmanaged>float IDWriteTextLayout::GetMaxHeight()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.Metrics">
            <summary>	
            Retrieves overall metrics for the formatted string. 	
            </summary>	
            <unmanaged>HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.TextLayout.OverhangMetrics">
            <summary>	
            Returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects.	
            </summary>	
            <remarks>	
            Underlines and strikethroughs do not contribute to the black box determination, since these are actually drawn by the renderer, which is allowed to draw them in any variety of styles. 	
            </remarks>	
            <unmanaged>HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRange">
            <summary>	
            Specifies a range of text positions where format is applied in the text represented by an <see cref="T:SharpDX.DirectWrite.TextLayout"/> object.	
            </summary>	
            <unmanaged>DWRITE_TEXT_RANGE</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextRange"/> struct.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="length">The length.</param>
        </member>
        <member name="F:SharpDX.DirectWrite.TextRange.StartPosition">
            <summary>	
            The start position of the text range. 	
            </summary>	
            <unmanaged>int startPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextRange.Length">
            <summary>	
            The number positions in the text range. 	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRenderer">
            <summary>	
            Represents a set of application-defined callbacks that perform rendering of text, inline objects, and decorations such as underlines.	
            </summary>	
            <unmanaged>IDWriteTextRenderer</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> function calls this callback function with all the information about glyphs to render. The application implements this callback by mostly delegating the call to the underlying platform's graphics API such as {{Direct2D}} to draw glyphs on the drawing context. An application that uses GDI can implement this callback in terms of the <see cref="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)"/> method.	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawUnderline(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Underline@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffect"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawStrikethrough(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Strikethrough@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Bitmap">
            <summary>	
            Represents a bitmap that has been bound to an <see cref="T:SharpDX.Direct2D1.RenderTarget"/>.	
            </summary>	
            <unmanaged>ID2D1Bitmap</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Resource">
            <summary>	
            Represents a Direct2D drawing resource.	
            </summary>	
            <unmanaged>ID2D1Resource</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Resource.GetFactory(SharpDX.Direct2D1.Factory@)">
            <summary>	
            Retrieves the factory associated with this resource.	
            </summary>	
            <param name="factory">When this method returns, contains a reference to a reference to the factory that created this resource. This parameter is passed uninitialized. </param>
            <unmanaged>void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Resource.Factory">
            <summary>	
            Retrieves the factory associated with this resource.	
            </summary>	
            <unmanaged>void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.Direct2D1.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.DataStream,System.Int32)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,System.Drawing.Size,SharpDX.DataStream,System.Int32,SharpDX.Direct2D1.BitmapProperties)">
            <summary>	
            Creates a Direct2D bitmap from a pointer to in-memory source data.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">The dimension of the bitmap to create in pixels.</param>
            <param name="dataStream">A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap.</param>
            <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels * the number of bytes per pixel) + memory padding. If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.)</param>
            <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
            <unmanaged>HRESULT CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] UINT32 pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:SharpDX.Direct2D1.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">An <see cref="T:SharpDX.Direct2D1.Bitmap"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:SharpDX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:SharpDX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.DXGI.Surface)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="surface">An <see cref="T:SharpDX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.DXGI.Surface,System.Nullable{SharpDX.Direct2D1.BitmapProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="surface">An <see cref="T:SharpDX.DXGI.Surface"/> that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section.</param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:SharpDX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:SharpDX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used.</param>
            <unmanaged>HRESULT CreateSharedBitmap([In] REFIID riid,[InOut] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap,System.Drawing.Point)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromBitmap(SharpDX.Direct2D1.Bitmap,System.Drawing.Point,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="sourceBitmap">The bitmap to copy from. </param>
            <param name="sourceArea">The area of bitmap to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.IntPtr,System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.Byte[],System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.IntPtr,System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="pointer">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromMemory(System.Byte[],System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="memory">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget,System.Drawing.Point)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromRenderTarget(SharpDX.Direct2D1.RenderTarget,System.Drawing.Point,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="destinationPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="sourceArea">The area of renderTarget to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.FromStream(System.IO.Stream,System.Int32,System.Int32,SharpDX.Rectangle)">
            <summary>	
            Copies the specified region from a stream into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="stream">The stream to copy the data from. </param>
            <param name="length">Length in bytes of the data to copy from the stream.</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <param name="destinationArea">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Bitmap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetSize">
            <summary>	
            Returns the size, in device-independent pixels (DIPs), of the bitmap.	
            </summary>	
            <remarks>	
            A DIP is 1/96?of an inch. To retrieve the size in device pixels, use the <see cref="M:SharpDX.Direct2D1.Bitmap.GetPixelSize"/> method. 	
            </remarks>	
            <returns>The size, in DIPs, of the bitmap. </returns>
            <unmanaged>D2D1_SIZE_F ID2D1Bitmap::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetPixelSize">
            <summary>	
            Returns the size, in device-dependent units (pixels), of the bitmap.	
            </summary>	
            <returns>The size, in pixels, of the bitmap. </returns>
            <unmanaged>D2D1_SIZE_U ID2D1Bitmap::GetPixelSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetPixelFormat">
            <summary>	
            Retrieves the pixel format and alpha mode of the bitmap.	
            </summary>	
            <returns>The pixel format and alpha mode of the bitmap. </returns>
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.GetDpi(System.Single@,System.Single@)">
            <summary>	
            Return the dots per inch (DPI) of the bitmap.	
            </summary>	
            <param name="dpiX">The horizontal DPI of the image. You must allocate storage for this parameter. </param>
            <param name="dpiY">The vertical DPI of the image.  You must allocate storage for this parameter. </param>
            <unmanaged>void ID2D1Bitmap::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromBitmap(System.Nullable{System.Drawing.Point},SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Rectangle})">
            <summary>	
            Copies the specified region from the specified bitmap into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the  current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="bitmap">The bitmap to copy from. </param>
            <param name="srcRect">The area of bitmap to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromRenderTarget(System.Nullable{System.Drawing.Point},SharpDX.Direct2D1.RenderTarget,System.Nullable{SharpDX.Rectangle})">
            <summary>	
            Copies the specified region from the specified render target into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion, and will fail if the bitmap formats do not match. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  All clips and layers must be popped off of the render target before calling this method.  The method returns {{D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT}} if any clips or layers are currently applied to the render target. 	
            </remarks>	
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="renderTarget">The render target that contains the region to copy. </param>
            <param name="srcRect">The area of renderTarget to copy. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D1_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D1_RECT_U* srcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Bitmap.CopyFromMemory(System.Nullable{SharpDX.Rectangle},System.IntPtr,System.Int32)">
            <summary>	
            Copies the specified region from memory into the current bitmap. 	
            </summary>	
            <remarks>	
            This method does not update the size of the current bitmap. If the contents of the source bitmap do not fit in the current bitmap, this method fails. Also, note that this method does not perform format conversion; the two bitmap formats should match.  Passing this method invalid input, such as an invalid destination rectangle, can produce unpredictable results, such as a distorted image or device failure. Calling this method may cause the current batch to flush if the bitmap is active in the batch. If the batch that was flushed does not complete successfully, this method fails. However, this method does not clear the error state of the render target on which the batch was flushed. The failing <see cref="T:System.Int32"/> and tag state will be returned at the next call to {{EndDraw}} or {{Flush}}.  	
            </remarks>	
            <param name="dstRect">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. </param>
            <param name="srcData">The data to copy. </param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D1_RECT_U* dstRect,[In] const void* srcData,[None] int pitch)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.DotsPerInch">
            <summary>	
            Return the dots per inch (DPI) of the bitmap.	
            </summary>	
            <value>The dots per inch (DPI) of the bitma.</value>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.Size">
            <summary>	
            Returns the size, in device-independent pixels (DIPs), of the bitmap.	
            </summary>	
            <remarks>	
            A DIP is 1/96?of an inch. To retrieve the size in device pixels, use the <see cref="M:SharpDX.Direct2D1.Bitmap.GetPixelSize"/> method. 	
            </remarks>	
            <unmanaged>D2D1_SIZE_F ID2D1Bitmap::GetSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.PixelSize">
            <summary>	
            Returns the size, in device-dependent units (pixels), of the bitmap.	
            </summary>	
            <unmanaged>D2D1_SIZE_U ID2D1Bitmap::GetPixelSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Bitmap.PixelFormat">
            <summary>	
            Retrieves the pixel format and alpha mode of the bitmap.	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapBrush">
            <summary>	
            Paints an area with a bitmap.	
            </summary>	
            <unmanaged>ID2D1BitmapBrush</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Brush">
            <summary>	
            Defines an object that paints an area. Interfaces that derive from ID2D1Brush describe how the area is painted. 	
            </summary>	
            <unmanaged>ID2D1Brush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Brush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.SetOpacity(System.Single)">
            <summary>	
            Sets the degree of opacity of this brush.	
            </summary>	
            <param name="opacity">A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0?1 before they are multipled together.  </param>
            <unmanaged>void ID2D1Brush::SetOpacity([None] float opacity)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.SetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Sets the transformation applied to the brush.	
            </summary>	
            <param name="transform">The transformation to apply to this brush.  </param>
            <unmanaged>void ID2D1Brush::SetTransform([In] const D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.GetOpacity">
            <summary>	
            Gets the degree of opacity of this brush.   	
            </summary>	
            <returns>FLOATA value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0?1 before they are multipled together.  </returns>
            <unmanaged>float ID2D1Brush::GetOpacity()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Brush.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Gets the transform applied to this brush. 	
            </summary>	
            <remarks>	
            When the brush transform is the identity matrix, the brush appears in the same coordinate space as the render target in which it is drawn. 	
            </remarks>	
            <param name="transform">The transform applied to this brush. </param>
            <unmanaged>void ID2D1Brush::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Brush.Opacity">
            <summary>	
            Gets the degree of opacity of this brush.   	
            </summary>	
            <unmanaged>float ID2D1Brush::GetOpacity()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Brush.Transform">
            <summary>	
            Gets the transform applied to this brush. 	
            </summary>	
            <remarks>	
            When the brush transform is the identity matrix, the brush appears in the same coordinate space as the render target in which it is drawn. 	
            </remarks>	
            <unmanaged>void ID2D1Brush::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.BitmapBrushProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.BrushProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapBrushProperties},System.Nullable{SharpDX.Direct2D1.BrushProperties})">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="bitmap">The bitmap contents of the new brush.</param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/> interpolation mode. </param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix.</param>
            <unmanaged>HRESULT CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetExtendModeX(SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Specifies how the brush horizontally tiles those areas that extend past its bitmap. 	
            </summary>	
            <remarks>	
            Sometimes, the  bitmap for a bitmap brush doesn't completely fill the area being painted. When this happens, Direct2D uses the brush's horizontal (SetExtendModeX) and vertical ({{SetExtendModeY}}) extend mode settings to determine how to fill the remaining area. The following illustration shows the results from  every  possible combination of the extend modes for an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/>: <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> (CLAMP), D2D1_EXTEND_MODE_WRAP (WRAP), and D2D1_EXTEND_MIRROR (MIRROR).  ?  Illustration of a bitmap and the resulting images from various extend modes ? 	
            </remarks>	
            <param name="extendModeX">A value that specifies how the brush horizontally tiles those areas that extend past its bitmap.  </param>
            <unmanaged>void ID2D1BitmapBrush::SetExtendModeX([None] D2D1_EXTEND_MODE extendModeX)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetExtendModeY(SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Specifies how the brush vertically tiles those areas that extend past its bitmap.	
            </summary>	
            <remarks>	
            Sometimes, the  bitmap for a bitmap brush doesn't completely fill the area being painted. When this happens, Direct2D uses the brush's horizontal ({{SetExtendModeX}}) and vertical (SetExtendModeY) extend mode settings to determine how to fill the remaining area. The following illustration shows the results from  every  possible combination of the extend modes for an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/>: <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> (CLAMP), D2D1_EXTEND_MODE_WRAP (WRAP), and D2D1_EXTEND_MIRROR (MIRROR).  ?  Illustration of a bitmap and the resulting images from various extend modes ? 	
            </remarks>	
            <param name="extendModeY">A value that specifies how the brush vertically tiles those areas that extend past its bitmap. </param>
            <unmanaged>void ID2D1BitmapBrush::SetExtendModeY([None] D2D1_EXTEND_MODE extendModeY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetInterpolationMode(SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            Specifies the interpolation mode used when the brush bitmap is scaled or rotated.	
            </summary>	
            <remarks>	
            This method sets the interpolation mode for a bitmap, which is an enum value that is specified in the <see cref="T:SharpDX.Direct2D1.BitmapInterpolationMode"/> enumeration type.   D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR represents nearest neighbor filtering. It looks up the nearest bitmap pixel to the current rendering pixel and chooses its exact color. D2D1_BITMAP_INTERPOLATION_MODE_LINEAR represents linear filtering, and  interpolates a color from the four nearest bitmap pixels. The interpolation mode of a bitmap also affects subpixel translations. In a subpixel translation, bilinear interpolation positions the bitmap more precisely to the application requests, but blurs the bitmap in the process.  	
            </remarks>	
            <param name="interpolationMode">The interpolation mode used when the brush bitmap is scaled or rotated. </param>
            <unmanaged>void ID2D1BitmapBrush::SetInterpolationMode([None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.SetBitmap(SharpDX.Direct2D1.Bitmap)">
            <summary>	
            Specifies the bitmap source that this brush uses to paint. 	
            </summary>	
            <remarks>	
            This method specifies the bitmap source that this brush uses to paint. The bitmap is not resized or rescaled automatically to fit the geometry that it fills. The bitmap stays at its native size. To resize or translate the bitmap, use the {{SetTransform}} method to apply  a transform to the brush.  The native size of a bitmap is the width and height in bitmap pixels, divided by the bitmap DPI. This native size forms the base tile of the brush. To tile a subregion of the bitmap, you must generate a new bitmap containing this subregion and use SetBitmap to apply it to the brush. 	
             	
            </remarks>	
            <param name="bitmap">The bitmap source used by the brush. </param>
            <unmanaged>void ID2D1BitmapBrush::SetBitmap([In] ID2D1Bitmap* bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetExtendModeX">
            <summary>	
            Gets the method by which the brush horizontally tiles those areas that extend past its bitmap. 	
            </summary>	
            <remarks>	
            Like all brushes, <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> defines an infinite plane of content. Because bitmaps are finite, it relies on an extend mode to determine how the plane is filled horizontally and vertically. 	
            </remarks>	
            <returns>A value that specifies how the brush horizontally tiles those areas that extend past its bitmap. </returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetExtendModeY">
            <summary>	
            Gets the method by which the brush vertically tiles those areas that extend past its bitmap. 	
            </summary>	
            <remarks>	
            Like all brushes, <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> defines an infinite plane of content.  Because bitmaps are finite, it relies on an extend mode to determine how the plane is filled horizontally and vertically. 	
            </remarks>	
            <returns>A value that specifies how the brush vertically tiles those areas that extend past its bitmap. </returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetInterpolationMode">
            <summary>	
            Gets the interpolation method used when the brush bitmap is scaled or rotated. 	
            </summary>	
            <remarks>	
            This method gets the interpolation mode of a bitmap, which is specified by the <see cref="T:SharpDX.Direct2D1.BitmapInterpolationMode"/> enumeration type.   D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR represents nearest neighbor filtering. It looks up the bitmap pixel nearest to the current rendering pixel and chooses its exact color. D2D1_BITMAP_INTERPOLATION_MODE_LINEAR represents linear filtering, and  interpolates a color from the four nearest bitmap pixels. The interpolation mode of a bitmap also affects subpixel translations. In a subpixel translation, linear interpolation positions the bitmap more precisely to the application request, but blurs the bitmap in the process.  	
            </remarks>	
            <returns>The interpolation method used when the brush bitmap is scaled or rotated. </returns>
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapBrush.GetBitmap(SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            Gets the bitmap source that this brush uses to paint.	
            </summary>	
            <param name="bitmap">When this method returns, contains the address to a reference to the bitmap with which this brush paints. </param>
            <unmanaged>void ID2D1BitmapBrush::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.ExtendModeX">
            <summary>	
            Gets the method by which the brush horizontally tiles those areas that extend past its bitmap. 	
            </summary>	
            <remarks>	
            Like all brushes, <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> defines an infinite plane of content. Because bitmaps are finite, it relies on an extend mode to determine how the plane is filled horizontally and vertically. 	
            </remarks>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.ExtendModeY">
            <summary>	
            Gets the method by which the brush vertically tiles those areas that extend past its bitmap. 	
            </summary>	
            <remarks>	
            Like all brushes, <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> defines an infinite plane of content.  Because bitmaps are finite, it relies on an extend mode to determine how the plane is filled horizontally and vertically. 	
            </remarks>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.InterpolationMode">
            <summary>	
            Gets the interpolation method used when the brush bitmap is scaled or rotated. 	
            </summary>	
            <remarks>	
            This method gets the interpolation mode of a bitmap, which is specified by the <see cref="T:SharpDX.Direct2D1.BitmapInterpolationMode"/> enumeration type.   D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR represents nearest neighbor filtering. It looks up the bitmap pixel nearest to the current rendering pixel and chooses its exact color. D2D1_BITMAP_INTERPOLATION_MODE_LINEAR represents linear filtering, and  interpolates a color from the four nearest bitmap pixels. The interpolation mode of a bitmap also affects subpixel translations. In a subpixel translation, linear interpolation positions the bitmap more precisely to the application request, but blurs the bitmap in the process.  	
            </remarks>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapBrush.Bitmap">
            <summary>	
            Gets the bitmap source that this brush uses to paint.	
            </summary>	
            <unmanaged>void ID2D1BitmapBrush::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapProperties">
            <summary>	
            Describes the pixel format and dpi  of a bitmap.	
            </summary>	
            <unmanaged>D2D1_BITMAP_PROPERTIES</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapProperties.#ctor(SharpDX.Direct2D1.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapProperties.#ctor(SharpDX.Direct2D1.PixelFormat,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <param name="dpiX">The dpi X.</param>
            <param name="dpiY">The dpi Y.</param>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.PixelFormat">
            <summary>	
            The bitmap's pixel format and alpha mode. 	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.DpiX">
            <summary>	
            The horizontal dpi of the bitmap. 	
            </summary>	
            <unmanaged>float dpiX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapProperties.DpiY">
            <summary>	
            The vertical dpi of the bitmap. 	
            </summary>	
            <unmanaged>float dpiY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapRenderTarget">
            <summary>	
            Renders to an intermediate texture created by the {{CreateCompatibleRenderTarget}} method.  	
            </summary>	
            <unmanaged>ID2D1BitmapRenderTarget</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTarget">
            <summary>	
            Represents an object that can receive drawing commands. Interfaces that inherit from ID2D1RenderTarget render the drawing commands they receive in different ways. 	
            </summary>	
            <unmanaged>ID2D1RenderTarget</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTarget.DefaultStrokeWidth">
            <summary>
            Default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateBitmap(System.Drawing.Size,System.IntPtr,System.Int32,SharpDX.Direct2D1.BitmapProperties,SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            Creates an uninitialized Direct2D bitmap. 	
            </summary>	
            <param name="size">The dimension of the bitmap to create in pixels. </param>
            <param name="srcData">The pixel format and dots per inch (DPI) of the bitmap to create. </param>
            <param name="pitch">When this method returns, contains a reference to a reference to the new bitmap. This parameter is passed uninitialized. </param>
            <param name="bitmapProperties">No documentation.</param>
            <param name="bitmap">No documentation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmap([None] D2D1_SIZE_U size,[In, Optional] const void* srcData,[None] int pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateSharedBitmap(System.Guid,System.IntPtr,System.Nullable{SharpDX.Direct2D1.BitmapProperties},SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.Bitmap"/> whose data is shared with another resource.	
            </summary>	
            <remarks>	
            The CreateSharedBitmap method is useful for efficiently reusing bitmap data and can also be used to provide interoperability with Direct3D.  Sharing an ID2D1Bitmap By passing an <see cref="T:SharpDX.Direct2D1.Bitmap"/> created by a render target that is resource-compatible, you can share a bitmap with that render target; both the original ID2D1Bitmap and the new ID2D1Bitmap created by this method will point to the same bitmap data. For more information about when render target resources can be shared, see the Sharing Render Target Resources section of the {{Resources Overview}}. You may also use this method to reinterpret the data of an existing bitmap and specify a new DPI or alpha mode. For example, in the case of a bitmap atlas, an <see cref="T:SharpDX.Direct2D1.Bitmap"/> may contain multiple sub-images, each of which should be rendered with a different <see cref="T:SharpDX.Direct2D1.AlphaMode"/> (D2D1_ALPHA_MODE_PREMULTIPLIED or D2D1_ALPHA_MODE_IGNORE). You could use the CreateSharedBitmap method to reinterpret the bitmap using the desired alpha mode  without having to load a separate copy of the bitmap into memory. Sharing an IDXGISurface When using a DXGI surface render target (an <see cref="T:SharpDX.Direct2D1.RenderTarget"/> object created by the {{CreateDxgiSurfaceRenderTarget}} method), you can pass an  <see cref="T:SharpDX.DXGI.Surface"/> surface to the CreateSharedBitmap method to share video memory with Direct3D and manipulate Direct3D content as an <see cref="T:SharpDX.Direct2D1.Bitmap"/>. As described in  the {{Resources Overview}}, the render target and the <see cref="T:SharpDX.DXGI.Surface"/> must be using the same Direct3D device.  Note also that the <see cref="T:SharpDX.DXGI.Surface"/> must use one of the supported pixel formats and alpha modes described in {{Supported Pixel Formats and Alpha Modes}}. For more information about interoperability with Direct3D, see the {{Direct2D and Direct3D Interoperability Overview}}. Sharing an IWICBitmapLock An {{IWICBitmapLock}} stores the content of a WIC bitmap and shields it from simultaneous accesses. By passing an IWICBitmapLock to the CreateSharedBitmap method, you can create an <see cref="T:SharpDX.Direct2D1.Bitmap"/> that points to the bitmap data already stored in the  IWICBitmapLock.  To use an {{IWICBitmapLock}} with the CreateSharedBitmap method, the render target must use software rendering. To force a render target to use software rendering, set to <see cref="F:SharpDX.Direct2D1.RenderTargetType.Software"/> the type field of the  <see cref="T:SharpDX.Direct2D1.RenderTargetProperties"/> structure that you use to create the render target. To check whether an existing render target uses software rendering, use the {{IsSupported}} method. 	
            </remarks>	
            <param name="riid">The interface ID of the object supplying the source data. </param>
            <param name="data">An <see cref="T:SharpDX.Direct2D1.Bitmap"/>, <see cref="T:SharpDX.DXGI.Surface"/>, or an {{IWICBitmapLock}} that contains the data to share with the new ID2D1Bitmap. For more information, see the Remarks section. </param>
            <param name="bitmapProperties">The pixel format  and DPI of the bitmap to create . The <see cref="T:SharpDX.DXGI.Format"/> portion of the pixel format  must match the <see cref="T:SharpDX.DXGI.Format"/> of data or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass NULL or the value obtained from the {{D2D1::PixelFormat}} helper function. The DPI settings do not have to match those of data. If both dpiX and dpiY are  0.0f, the default DPI, 96, is used. </param>
            <param name="bitmap">When this method returns, contains the address of a reference to the new bitmap. This parameter is passed uninitialized.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateSharedBitmap([In] GUID* riid,[In] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateBitmapBrush(SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.Direct2D1.BitmapBrushProperties},System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.BitmapBrush@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> from the specified bitmap.	
            </summary>	
            <param name="bitmap">The bitmap contents of the new brush. </param>
            <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or NULL. If this parameter is NULL, the brush defaults to the <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/> horizontal and vertical extend modes and the <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/> interpolation mode.  </param>
            <param name="brushProperties">The opacity and transform of the new brush, or NULL. If this parameter is NULL, the brush defaults to an opacity of 1.0f and its transform is the identity matrix. </param>
            <param name="bitmapBrush">When this method returns, contains a reference to a reference to the new brush. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmapBrush([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateSolidColorBrush(SharpDX.Color4,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.SolidColorBrush@)">
            <summary>	
            Creates a new <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="color">The red, green, blue, and alpha values of the brush's color. </param>
            <param name="brushProperties">The base opacity of the brush. </param>
            <param name="solidColorBrush">When this method returns, contains the address of a reference to the new brush. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateSolidColorBrush([In] const D2D1_COLOR_F* color,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out] ID2D1SolidColorBrush** solidColorBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateGradientStopCollection(SharpDX.Direct2D1.GradientStop[],System.Int32,SharpDX.Direct2D1.Gamma,SharpDX.Direct2D1.ExtendMode,SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and extend mode.  	
            </summary>	
            <param name="gradientStops">A reference to an array of D2D1_GRADIENT_STOP structures. </param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array. </param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed. </param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range. </param>
            <param name="gradientStopCollection">When this method returns, contains a reference to a reference to the new gradient stop collection. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] int gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateLinearGradientBrush(SharpDX.Direct2D1.LinearGradientBrushProperties,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection,SharpDX.Direct2D1.LinearGradientBrush@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="linearGradientBrushProperties">The start and end points of the gradient. </param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation. </param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line. </param>
            <param name="linearGradientBrush">When this method returns, contains the address of a reference to the new brush. This paramater is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateRadialGradientBrush(SharpDX.Direct2D1.RadialGradientBrushProperties@,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection,SharpDX.Direct2D1.RadialGradientBrush@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient. </param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation. </param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient. </param>
            <param name="radialGradientBrush">When this method returns, contains a reference to a reference to the new brush. This paramater is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateCompatibleRenderTarget(System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.Nullable{SharpDX.Direct2D1.PixelFormat},SharpDX.Direct2D1.CompatibleRenderTargetOptions,SharpDX.Direct2D1.BitmapRenderTarget@)">
            <summary>	
            Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.	
            </summary>	
            <remarks>	
            The pixel size and DPI of the new render target can be altered by specifying values for desiredSize or desiredPixelSize:    If desiredSize is specified but desiredPixelSize is not, the pixel size is computed from the desired size using the parent target DPI. If the desiredSize maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target.  If desiredSize maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (desiredSize.width, desiredSize.height) maps to the lower-right corner of the compatible render target. If the desiredPixelSize is specified and desiredSize is not, the DPI of the new render target is the same as the original render target. If both desiredSize and desiredPixelSize are specified, the DPI of the new render target is computed to account for the difference in scale. If neither desiredSize nor desiredPixelSize is specified, the new render target size and DPI match the original render target.   	
            </remarks>	
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section. </param>
            <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section. </param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}. </param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI. </param>
            <param name="bitmapRenderTarget">When this method returns, contains a reference to a reference to a new bitmap render target. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateLayer(System.Nullable{System.Drawing.SizeF},SharpDX.Direct2D1.Layer@)">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.  	
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed. 	
            </remarks>	
            <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when {{PushLayer}} is called. </param>
            <param name="layer">When the method returns, contains a reference to a reference to the new layer. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.CreateMesh(SharpDX.Direct2D1.Mesh@)">
            <summary>	
            Create a mesh that uses triangles to describe a shape.	
            </summary>	
            <remarks>	
            To populate a mesh, use its {{Open}} method to obtain an <see cref="T:SharpDX.Direct2D1.TessellationSink"/>. To draw the mesh, use the render target's {{FillMesh}} method. 	
            </remarks>	
            <param name="mesh">When this method returns, contains a reference to a reference to the new mesh. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws a line between the specified points using the specified stroke style. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawLine) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f.  The stroke is centered on the line. </param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid line. </param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of a rectangle that has the specified dimensions and stroke style. 	
            </summary>	
            <remarks>	
            When this method fails, it does not return an error code. To determine whether a drawing method (such as {{DrawRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> method.  	
            </remarks>	
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline. </param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="rect">The dimension of the rectangle to paint, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's interior. </param>
            <unmanaged>void ID2D1RenderTarget::FillRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of the specified rounded rectangle using the specified stroke style.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <param name="strokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  </param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRoundedRectangle(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to paint, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the interior of the rounded rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of the specified ellipse using the specified stroke style. 	
            </summary>	
            <remarks>	
            The {{DrawEllipse}} method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawEllipse) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the ellipse's outline. </param>
            <param name="strokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline. </param>
            <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified ellipse. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillEllipse}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint. </param>
            <param name="brush">The brush used to paint the interior of the ellipse. </param>
            <unmanaged>void ID2D1RenderTarget::FillEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of the specified geometry using the specified stroke style. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
            <param name="strokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline. </param>
            <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified geometry. 	
            </summary>	
            <remarks>	
            If the opacityBrush parameter is not NULL, the alpha value of each pixel of the mapped opacityBrush is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored.  The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by brush.  	
             When this method fails, it does not return an error code. To determine whether a drawing operation (such as FillGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> method.  	
            </remarks>	
            <param name="geometry">The geometry to paint. </param>
            <param name="brush">The brush used to paint the geometry's interior. </param>
            <param name="opacityBrush">The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/> that has   its x- and y-extend modes set to <see cref="F:SharpDX.Direct2D1.ExtendMode.Clamp"/>. For more information, see the Remarks section.  </param>
            <unmanaged>void ID2D1RenderTarget::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillMesh(SharpDX.Direct2D1.Mesh,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified mesh.	
            </summary>	
            <remarks>	
            The current antialias mode of the render target must be <see cref="F:SharpDX.Direct2D1.AntialiasMode.Aliased"/> when FillMesh is called. To change the render target's antialias mode, use the {{SetAntialiasMode}} method. FillMesh does not expect a particular winding order for the triangles in the <see cref="T:SharpDX.Direct2D1.Mesh"/>; both clockwise and counter-clockwise will work.  This method doesn't return an error code if it fails. To determine whether a drawing operation (such as FillMesh) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="mesh">The mesh to paint. </param>
            <param name="brush">The brush used to paint the mesh. </param>
            <unmanaged>void ID2D1RenderTarget::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillOpacityMask(SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.OpacityMaskContent,System.Nullable{SharpDX.RectangleF},System.Nullable{SharpDX.RectangleF})">
            <summary>	
            Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.    	
            </summary>	
            <remarks>	
            For this method to work properly, the render target must be using the <see cref="F:SharpDX.Direct2D1.AntialiasMode.Aliased"/> antialiasing mode. You can set the antialiasing mode by calling the <see cref="M:SharpDX.Direct2D1.RenderTarget.SetAntialiasMode(SharpDX.Direct2D1.AntialiasMode)"/> method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillOpacityMask}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. </param>
            <param name="brush">The brush used to paint the region of the render target specified by destinationRectangle. </param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. </param>
            <param name="destinationRectangle">The region of the render target to paint, in device-independent pixels, or NULL. If NULL is specified, the brush paints a rectangle the same size as sourceRectangle, but positioned on the origin. If sourceRectangle isn't specified, the brush paints a rectangle the same size as the opacityMask bitmap and positioned on the origin. </param>
            <param name="sourceRectangle">The region of the bitmap to use as the opacity mask, in device-independent pixels, or NULL. If NULL is specified, the entire bitmap is used.  </param>
            <unmanaged>void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[None] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D1_RECT_F* destinationRectangle,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Nullable{SharpDX.RectangleF},System.Single,SharpDX.Direct2D1.BitmapInterpolationMode,System.Nullable{SharpDX.RectangleF})">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; NULL to draw the selected portion of the bitmap at the origin of the render target.  If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/>.  </param>
            <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; NULL to draw the entire bitmap.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,System.Int32,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat"/> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat"/> object, create an <see cref="T:SharpDX.DirectWrite.Factory"/> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="stringLength">The number of characters in string. </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None"/>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is DWRITE_MEASURING_MODE_NATURAL.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)">
            <summary>	
            Draws the formatted text described by the specified <see cref="T:SharpDX.DirectWrite.TextLayout"/> object.	
            </summary>	
            <remarks>	
            When drawing the same text repeatedly, using the DrawTextLayout method is more efficient than using the {{DrawText}} method because the text doesn't need to be formatted and the layout processed with each call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawTextLayout) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="origin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. </param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from <see cref="T:SharpDX.Direct2D1.Resource"/> are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.  </param>
            <param name="defaultForegroundBrush">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect_(System.IntPtr,SharpDX.DirectWrite.TextRange)"/> method).  </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None"/>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextLayout([None] D2D1_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGlyphRun(System.Drawing.PointF,SharpDX.DirectWrite.GlyphRun@,SharpDX.Direct2D1.Brush,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            Draws the specified glyphs. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGlyphRun) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="baselineOrigin">The origin, in device-independent pixels, of the glyphs' baseline. </param>
            <param name="glyphRun">The glyphs to render. </param>
            <param name="foregroundBrush">The brush used to paint the specified glyphs. </param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is DWRITE_MEASURING_MODE_NATURAL.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawGlyphRun([None] D2D1_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] ID2D1Brush* foregroundBrush,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.	
            </summary>	
            <param name="transform">The transform to apply to the render target. </param>
            <unmanaged>void ID2D1RenderTarget::SetTransform([In] const D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Gets the current transform of the render target. 	
            </summary>	
            <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized. </param>
            <unmanaged>void ID2D1RenderTarget::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetAntialiasMode(SharpDX.Direct2D1.AntialiasMode)">
            <summary>	
            Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations. 	
            </summary>	
            <remarks>	
            To specify the antialiasing mode for text and glyph operations, use the {{SetTextAntialiasMode}} method.  	
            </remarks>	
            <param name="antialiasMode">The antialiasing mode for future drawing operations.  </param>
            <unmanaged>void ID2D1RenderTarget::SetAntialiasMode([None] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetAntialiasMode">
            <summary>	
            Retrieves the current antialiasing mode for nontext drawing operations.	
            </summary>	
            <returns>The current antialiasing mode for nontext drawing operations.  </returns>
            <unmanaged>D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTextAntialiasMode(SharpDX.Direct2D1.TextAntialiasMode)">
            <summary>	
            Specifies the antialiasing mode to use for subsequent text and glyph drawing operations. 	
            </summary>	
            <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations. </param>
            <unmanaged>void ID2D1RenderTarget::SetTextAntialiasMode([None] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTextAntialiasMode">
            <summary>	
            Gets the current antialiasing mode for text and glyph drawing operations. 	
            </summary>	
            <returns>The current antialiasing mode for text and glyph drawing operations.  </returns>
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Specifies text rendering options to be applied to all subsequent text and glyph drawing operations. 	
            </summary>	
            <remarks>	
            If the settings specified by  textRenderingParams are incompatible with the render target's text antialiasing mode (specified by {{SetTextAntialiasMode}}), subsequent text and glyph drawing operations will fail and put the render target into an error state. 	
            </remarks>	
            <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.  </param>
            <unmanaged>void ID2D1RenderTarget::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTextRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            Retrieves the render target's current text rendering options. 	
            </summary>	
            <remarks>	
            If the settings specified by  textRenderingParams are incompatible with the render target's text antialiasing mode (specified by {{SetTextAntialiasMode}}), subsequent text and glyph drawing operations will fail and put the render target into an error state. 	
            </remarks>	
            <param name="textRenderingParams">When this method returns, textRenderingParamscontains the address  of a reference to the render target's current text rendering options.  </param>
            <unmanaged>void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetTags(System.Int64,System.Int64)">
            <summary>	
            Specifies a label for subsequent drawing operations.   	
            </summary>	
            <remarks>	
            The labels specified by this method are printed by debug error messages. If no tag is set, the default value for each tag is 0. 	
            </remarks>	
            <param name="tag1">A label to apply to subsequent drawing operations. </param>
            <param name="tag2">A label to apply to subsequent drawing operations. </param>
            <unmanaged>void ID2D1RenderTarget::SetTags([None] D2D1_TAG tag1,[None] D2D1_TAG tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetTags(System.Int64@,System.Int64@)">
            <summary>	
            Gets the label for subsequent drawing operations. 	
            </summary>	
            <remarks>	
            If the same address is passed for both parameters, both parameters receive the value of the second tag.  	
            </remarks>	
            <param name="tag1">When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.  </param>
            <param name="tag2">When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter. </param>
            <unmanaged>void ID2D1RenderTarget::GetTags([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PushLayer(SharpDX.Direct2D1.LayerParameters@,SharpDX.Direct2D1.Layer)">
            <summary>	
            Adds the specified layer to the render target so that it receives all subsequent drawing operations until {{PopLayer}} is called. 	
            </summary>	
            <remarks>	
            The PushLayer method allows a caller to begin redirecting rendering to a layer. All rendering operations are valid in a layer. The location of the layer is affected by the world transform set on the render target.  Each {{PushLayer}} must have a matching {{PopLayer}} call. If there are more PopLayer calls than PushLayer calls, the render target is placed into an error state. If {{Flush}} is called before all outstanding layers are popped, the render target is placed into an error state, and an error is returned. The error state can be cleared by a call to {{EndDraw}}. A particular <see cref="T:SharpDX.Direct2D1.Layer"/> resource can be active only at one time. In other words, you cannot call a PushLayer method, and then immediately follow  with another PushLayer method with the same layer resource. Instead, you must call the second PushLayer method with different layer resources. 	
             This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{PushLayer}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer. </param>
            <param name="layer">The layer that receives subsequent drawing operations. </param>
            <unmanaged>void ID2D1RenderTarget::PushLayer([In] const D2D1_LAYER_PARAMETERS* layerParameters,[In] ID2D1Layer* layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PopLayer">
            <summary>	
            Stops redirecting drawing operations to the layer that is specified by the last {{PushLayer}} call. 	
            </summary>	
            <remarks>	
            A PopLayer must match a previous {{PushLayer}} call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as PopLayer) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::PopLayer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)">
            <summary>	
            Executes all pending drawing commands. 	
            </summary>	
            <remarks>	
            This command does not flush the device that is associated with the render target.   Calling this method resets the error state of the render target. 	
            </remarks>	
            <param name="tag1">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized. </param>
            <param name="tag2">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0). </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::Flush([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SaveDrawingState(SharpDX.Direct2D1.DrawingStateBlock)">
            <summary>	
            Saves the current drawing state to the specified <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/>.	
            </summary>	
            <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method. </param>
            <unmanaged>void ID2D1RenderTarget::SaveDrawingState([InOut] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.RestoreDrawingState(SharpDX.Direct2D1.DrawingStateBlock)">
            <summary>	
            Sets the render target's drawing state to that of the specified <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/>.	
            </summary>	
            <param name="drawingStateBlock">The new drawing state of the render target. </param>
            <unmanaged>void ID2D1RenderTarget::RestoreDrawingState([In] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PushAxisAlignedClip(SharpDX.RectangleF,SharpDX.Direct2D1.AntialiasMode)">
            <summary>	
            Specifies a rectangle to which all subsequent drawing operations are clipped. 	
            </summary>	
            <remarks>	
            The clipRect is transformed by the current world transform set on the render target. After the transform is applied to the clipRect that is passed in, the axis-aligned bounding box for the clipRect is computed.  For efficiency, the contents are clipped to this axis-aligned bounding box and not to the original clipRect that is passed in.  The following diagrams show how a rotation transform is applied to the render target, the resulting clipRect, and  a calculated axis-aligned bounding box.   Assume the rectangle in the following illustration is a render target that is aligned to the screen pixels. Illustration of a rectangle (render target)   Apply a rotation transform to the render target. In the following illustration, the black rectangle represents the original render target and the red dashed rectangle represents the transformed render target. Illustration of a rotated rectangle (transformed render target)   After calling {{PushAxisAlignedClip}}, the rotation transform is applied to the clipRect. In the following illustration, the blue rectangle represents the transformed clipRect. Illustration of a small blue rectangle (transformed clipRect) inside a rotated rectangle   The axis-aligned bounding box is calculated. The green dashed rectangle represents the bounding box in the following illustration. All contents are clipped to this axis-aligned bounding box. Illustration of a green bounding box around a small blue rectangle inside a rotated rectangle   Note??If rendering operations fail or if {{PopAxisAlignedClip}} is not called, clip rects may cause some artifacts on the render target. PopAxisAlignedClip can be considered a drawing operation that is designed to fix the borders of a clipping region. Without this call, the borders of a clipped area may be not antialiased or otherwise corrected. The {{PushAxisAlignedClip}} and {{PopAxisAlignedClip}} must match. Otherwise, the error state is set. For the render target to continue receiving new commands, you can call {{Flush}} to clear the error.  A           {{PushAxisAlignedClip}} and {{PopAxisAlignedClip}} pair can occur around or within a PushLayer and PopLayer, but cannot overlap. For example, the sequence of PushAxisAlignedClip, {{PushLayer}}, {{PopLayer}}, PopAxisAlignedClip is valid, but the sequence of PushAxisAlignedClip, PushLayer, PopAxisAlignedClip, PopLayer is invalid. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{PushAxisAlignedClip}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="clipRect">The size and position of the clipping area, in device-independent pixels. </param>
            <param name="antialiasMode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the {{PopAxisAlignedClip}} method is called, and does not apply to each primitive within the layer.  </param>
            <unmanaged>void ID2D1RenderTarget::PushAxisAlignedClip([In] const D2D1_RECT_F* clipRect,[None] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.PopAxisAlignedClip">
            <summary>	
            Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations. 	
            </summary>	
            <remarks>	
            A {{PushAxisAlignedClip}}/PopAxisAlignedClip pair can occur around or within a {{PushLayer}}/{{PopLayer}} pair, but may not overlap. For example, a PushAxisAlignedClip, PushLayer, PopLayer, PopAxisAlignedClip sequence is valid, but a PushAxisAlignedClip, PushLayer, PopAxisAlignedClip, PopLayer sequence is not.  PopAxisAlignedClip must be called once for every call to {{PushAxisAlignedClip}}. For an example, see {{How to Clip with an Axis-Aligned Clip Rectangle}}. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as PopAxisAlignedClip) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::PopAxisAlignedClip()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Clear(System.Nullable{SharpDX.Color4})">
            <summary>	
            Clears the drawing area to the specified color. 	
            </summary>	
            <remarks>	
            Direct2D interprets the clearColor as straight alpha (not premultiplied).  If the render target's alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Ignore"/>, the alpha channel of clearColor is ignored and replaced with 1.0f (fully opaque). If the render target has an active clip (specified by {{PushAxisAlignedClip}}), the clear command is applied only to the area within the clip region. 	
            </remarks>	
            <param name="clearColor">The color to which the drawing area is cleared. </param>
            <unmanaged>void ID2D1RenderTarget::Clear([In, Optional] const D2D1_COLOR_F* clearColor)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.BeginDraw">
            <summary>	
            Initiates drawing on this render target. 	
            </summary>	
            <remarks>	
            Drawing operations can only be issued between a BeginDraw and {{EndDraw}} call. BeginDraw and EndDraw are used to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="T:SharpDX.Direct2D1.RenderTarget"/> might behave differently when BeginDraw is called. An <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> may be locked between BeginDraw/{{EndDraw}} calls, a DXGI surface render target might be acquired on BeginDraw and released on EndDraw, while an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> may begin batching at BeginDraw and may present on EndDraw, for example.  The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of BeginDraw/{{EndDraw}}.  After BeginDraw is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the {{Flush}} method is called, or until {{EndDraw}} is called. The EndDraw method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The EndDraw method always succeeds: it should not be called twice even if a previous EndDraw resulted in a failing HRESULT.  If {{EndDraw}} is called without a matched call to BeginDraw, it returns an error indicating that BeginDraw must be called before EndDraw. Calling BeginDraw twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when EndDraw is called.	
             	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::BeginDraw()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)">
            <summary>	
            Ends drawing operations  on the render target and indicates the current error state and associated tags. 	
            </summary>	
            <remarks>	
            Drawing operations can only be issued between a {{BeginDraw}} and EndDraw call. BeginDraw and EndDraw are use to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="T:SharpDX.Direct2D1.RenderTarget"/> might behave differently when {{BeginDraw}} is called. An <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> may be locked between BeginDraw/EndDraw calls, a DXGI surface render target might be acquired on BeginDraw and released on EndDraw, while an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> may begin batching at BeginDraw and may present on EndDraw, for example.  The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of {{BeginDraw}}/EndDraw.  After {{BeginDraw}} is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the {{Flush}} method is called, or until EndDraw is called. The EndDraw method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The EndDraw method always succeeds: it should not be called twice even if a previous EndDraw resulted in a failing HRESULT.  If EndDraw is called without a matched call to {{BeginDraw}}, it returns an error indicating that BeginDraw must be called before EndDraw. Calling BeginDraw twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when EndDraw is called.	
             	
            </remarks>	
            <param name="tag1">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized. </param>
            <param name="tag2">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred.  </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetPixelFormat">
            <summary>	
            Retrieves the pixel format and alpha mode of the render target. 	
            </summary>	
            <returns>The pixel format and alpha mode of the render target. </returns>
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.SetDpi(System.Single,System.Single)">
            <summary>	
            Sets the dots per inch (DPI) of the render target. 	
            </summary>	
            <remarks>	
            This method specifies the mapping from pixel space to device-independent space  for the render target.  If both dpiX and dpiY are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed. For <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.   	
            </remarks>	
            <param name="dpiX">A value greater than or equal to zero that specifies the horizontal DPI of the render target. </param>
            <param name="dpiY">A value greater than or equal to zero that specifies the vertical DPI of the render target. </param>
            <unmanaged>void ID2D1RenderTarget::SetDpi([None] float dpiX,[None] float dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetDpi(System.Single@,System.Single@)">
            <summary>	
            Return the render target's dots per inch (DPI).	
            </summary>	
            <remarks>	
            This method indicates the mapping from pixel space to device-independent space  for the render target.   For <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.   	
            </remarks>	
            <param name="dpiX">When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized. </param>
            <param name="dpiY">When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized. </param>
            <unmanaged>void ID2D1RenderTarget::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetSize">
            <summary>	
            Returns the size of the render target in device-independent pixels.	
            </summary>	
            <returns>The current size of the render target in device-independent pixels. </returns>
            <unmanaged>D2D1_SIZE_F ID2D1RenderTarget::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetPixelSize">
            <summary>	
            Returns the size of the render target in device pixels.	
            </summary>	
            <returns>The size of the render target in device pixels. </returns>
            <unmanaged>D2D1_SIZE_U ID2D1RenderTarget::GetPixelSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.GetMaximumBitmapSize">
            <summary>	
            Gets the maximum size, in device-dependent units (pixels), of  any one bitmap dimension supported by the render target.	
            </summary>	
            <returns>UINT32 The maximum size, in pixels, of  any one bitmap dimension supported by the render target. </returns>
            <unmanaged>int ID2D1RenderTarget::GetMaximumBitmapSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.IsSupported(SharpDX.Direct2D1.RenderTargetProperties@)">
            <summary>	
            Indicates whether the render target supports the specified properties.	
            </summary>	
            <remarks>	
            This method does not evaluate the DPI settings specified by the renderTargetProperties parameter. 	
            </remarks>	
            <param name="renderTargetProperties">The render target properties to test. </param>
            <returns>BOOLTRUE if the specified render target properties are supported by this render target; otherwise, FALSE. </returns>
            <unmanaged>BOOL ID2D1RenderTarget::IsSupported([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.DXGI.Surface,SharpDX.Direct2D1.RenderTargetProperties)">
            <summary>	
            Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. 	
            </summary>	
            <remarks>	
            To write to a Direct3D surface, you obtain an <see cref="T:SharpDX.DXGI.Surface"/> and pass it to the {{CreateDxgiSurfaceRenderTarget}} method to create a DXGI surface render target; you can then use the DXGI surface render target to draw 2-D content to the DXGI surface.  A DXGI surface render target is a type of <see cref="T:SharpDX.Direct2D1.RenderTarget"/>. Like other Direct2D render targets, you can use it to create resources and issue drawing commands. The DXGI surface render target and the DXGI surface must use the same DXGI format. If you specify the {{DXGI_FORMAT_UNKOWN}} format when you create the render target, it will automatically use the surface's format.The DXGI surface render target does not perform DXGI surface synchronization. To work with Direct2D, the Direct3D device that provides the <see cref="T:SharpDX.DXGI.Surface"/> must be created with the D3D10_CREATE_DEVICE_BGRA_SUPPORT flag.For more information about creating and using DXGI surface render targets, see the {{Direct2D and Direct3D Interoperability Overview}}.When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the render target's {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, you need to recreate the render target (and any resources it created). 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="dxgiSurface">The dxgi surface to bind this render target to</param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear" />.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,SharpDX.RectangleF,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush"/> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; NULL to draw the selected portion of the bitmap at the origin of the render target.  If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/>.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawBitmap(SharpDX.Direct2D1.Bitmap,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode,SharpDX.RectangleF)">
            <summary>	
            Draws the specified bitmap after scaling it to the size of the specified rectangle. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawBitmap}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)"/> methods.  	
            </remarks>	
            <param name="bitmap">The bitmap to render. </param>
            <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f. </param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/>.  </param>
            <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; NULL to draw the entire bitmap.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_RECT_F* destinationRectangle,[None] float opacity,[None] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified ellipse using the specified stroke style. 	
            </summary>	
            <remarks>	
            The {{DrawEllipse}} method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawEllipse) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the ellipse's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawEllipse(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified ellipse using the specified stroke style. 	
            </summary>	
            <remarks>	
            The {{DrawEllipse}} method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawEllipse) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the ellipse's outline. </param>
            <param name="strokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified geometry. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified geometry. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="geometry">The geometry to draw. </param>
            <param name="brush">The brush used to paint the geometry's stroke. </param>
            <param name="strokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws a line between the specified points. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawLine) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawLine(System.Drawing.PointF,System.Drawing.PointF,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws a line between the specified points. 	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawLine) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="point0">The start point of the line, in device-independent pixels. </param>
            <param name="point1">The end point of the line, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the line's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f.  The stroke is centered on the line. </param>
            <unmanaged>void ID2D1RenderTarget::DrawLine([None] D2D1_POINT_2F point0,[None] D2D1_POINT_2F point1,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of a rectangle that has the specified dimensions. 	
            </summary>	
            <remarks>	
            When this method fails, it does not return an error code. To determine whether a drawing method (such as {{DrawRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> method.  	
            </remarks>	
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's stroke. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRectangle(SharpDX.RectangleF,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of a rectangle that has the specified dimensions and stroke style. 	
            </summary>	
            <remarks>	
            When this method fails, it does not return an error code. To determine whether a drawing method (such as {{DrawRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> method.  	
            </remarks>	
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rectangle's stroke. </param>
            <param name="strokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D1_RECT_F* rect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the outline of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>	
            Draws the outline of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <param name="strokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Draws the outline of the specified rounded rectangle using the specified stroke style.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the rounded rectangle's outline.  </param>
            <param name="strokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  </param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL. </param>
            <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawText(System.String,SharpDX.DirectWrite.TextFormat,SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.DrawTextOptions,SharpDX.DirectWrite.MeasuringMode)">
            <summary>	
            Draws the specified text using the format information provided by an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object. 	
            </summary>	
            <remarks>	
            To create an <see cref="T:SharpDX.DirectWrite.TextFormat" /> object, create an <see cref="T:SharpDX.DirectWrite.Factory" /> and call its {{CreateTextFormat}} method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{DrawText}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="text">A reference to an array of Unicode characters to draw.  </param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.   </param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.  </param>
            <param name="defaultForegroundBrush">The brush used to paint the text. </param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="F:SharpDX.Direct2D1.DrawTextOptions.None" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle. </param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is DWRITE_MEASURING_MODE_NATURAL.  </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextA([In, Buffer] const wchar_t* string,[None] int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D1_RECT_F* layoutRect,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options,[None] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.DrawTextLayout(System.Drawing.PointF,SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush)">
            <summary>	
            Draws the formatted text described by the specified <see cref="T:SharpDX.DirectWrite.TextLayout" /> object.	
            </summary>	
            <remarks>	
            When drawing the same text repeatedly, using the DrawTextLayout method is more efficient than using the {{DrawText}} method because the text doesn't need to be formatted and the layout processed with each call. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as DrawTextLayout) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="origin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. </param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from <see cref="T:SharpDX.Direct2D1.Resource" /> are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.  </param>
            <param name="defaultForegroundBrush">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the <see cref="M:SharpDX.DirectWrite.TextLayout.SetDrawingEffect(SharpDX.ComObject,SharpDX.DirectWrite.TextRange)" /> method).  </param>
            <unmanaged>void ID2D1RenderTarget::DrawTextLayout([None] D2D1_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultForegroundBrush,[None] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.EndDraw">
            <summary>	
            Ends drawing operations  on the render target and indicates the current error state and associated tags. 	
            </summary>	
            <remarks>	
            Drawing operations can only be issued between a {{BeginDraw}} and EndDraw call.BeginDraw and EndDraw are use to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="T:SharpDX.Direct2D1.RenderTarget"/> might behave differently when {{BeginDraw}} is called. An <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> may be locked between BeginDraw/EndDraw calls, a DXGI surface render target might be acquired on BeginDraw and released on EndDraw, while an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> may begin batching at BeginDraw and may present on EndDraw, for example. The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of {{BeginDraw}}/EndDraw. After {{BeginDraw}} is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the {{Flush}} method is called, or until EndDraw is called. The EndDraw method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The EndDraw method always succeeds: it should not be called twice even if a previous EndDraw resulted in a failing HRESULT. If EndDraw is called without a matched call to {{BeginDraw}}, it returns an error indicating that BeginDraw must be called before EndDraw. Calling BeginDraw twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when EndDraw is called.	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred. </returns>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified geometry. 	
            </summary>	
            <remarks>	
            If the opacityBrush parameter is not NULL, the alpha value of each pixel of the mapped opacityBrush is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored.  The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by brush.  	
            When this method fails, it does not return an error code. To determine whether a drawing operation (such as FillGeometry) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw"/> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush"/> method. 	
            </remarks>	
            <param name="geometry">The geometry to paint.</param>
            <param name="brush">The brush used to paint the geometry's interior.</param>
            <unmanaged>void FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillOpacityMask(SharpDX.Direct2D1.Bitmap,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.OpacityMaskContent)">
            <summary>	
            Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.    	
            </summary>	
            <remarks>	
            For this method to work properly, the render target must be using the <see cref="F:SharpDX.Direct2D1.AntialiasMode.Aliased" /> antialiasing mode. You can set the antialiasing mode by calling the <see cref="M:SharpDX.Direct2D1.RenderTarget.SetAntialiasMode(SharpDX.Direct2D1.AntialiasMode)" /> method. This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillOpacityMask}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. </param>
            <param name="brush">The brush used to paint the region of the render target specified by destinationRectangle. </param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. </param>
            <unmanaged>void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[None] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D1_RECT_F* destinationRectangle,[In, Optional] const D2D1_RECT_F* sourceRectangle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.FillRoundedRectangle(SharpDX.Direct2D1.RoundedRect,SharpDX.Direct2D1.Brush)">
            <summary>	
            Paints the interior of the specified rounded rectangle.	
            </summary>	
            <remarks>	
            This method doesn't return an error code if it fails. To determine whether a drawing operation (such as {{FillRoundedRectangle}}) failed, check the result returned by the <see cref="M:SharpDX.Direct2D1.RenderTarget.EndDraw(System.Int64@,System.Int64@)" /> or <see cref="M:SharpDX.Direct2D1.RenderTarget.Flush(System.Int64@,System.Int64@)" /> methods.  	
            </remarks>	
            <param name="roundedRect">The dimensions of the rounded rectangle to paint, in device-independent pixels. </param>
            <param name="brush">The brush used to paint the interior of the rounded rectangle. </param>
            <unmanaged>void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTarget.Flush">
            <summary>	
            Executes all pending drawing commands. 	
            </summary>	
            <remarks>	
            This command does not flush the device that is associated with the render target.   Calling this method resets the error state of the render target. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code and sets tag1 and tag2 to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0). </returns>
            <unmanaged>HRESULT ID2D1RenderTarget::Flush([Out, Optional] D2D1_TAG* tag1,[Out, Optional] D2D1_TAG* tag2)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.Transform">
            <summary>	
            Gets the current transform of the render target. 	
            </summary>	
            <unmanaged>void ID2D1RenderTarget::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.AntialiasMode">
            <summary>	
            Retrieves the current antialiasing mode for nontext drawing operations.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.TextAntialiasMode">
            <summary>	
            Gets the current antialiasing mode for text and glyph drawing operations. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.TextRenderingParams">
            <summary>	
            Retrieves the render target's current text rendering options. 	
            </summary>	
            <remarks>	
            If the settings specified by  textRenderingParams are incompatible with the render target's text antialiasing mode (specified by {{SetTextAntialiasMode}}), subsequent text and glyph drawing operations will fail and put the render target into an error state. 	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.PixelFormat">
            <summary>	
            Retrieves the pixel format and alpha mode of the render target. 	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.Size">
            <summary>	
            Returns the size of the render target in device-independent pixels.	
            </summary>	
            <unmanaged>D2D1_SIZE_F ID2D1RenderTarget::GetSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.PixelSize">
            <summary>	
            Returns the size of the render target in device pixels.	
            </summary>	
            <unmanaged>D2D1_SIZE_U ID2D1RenderTarget::GetPixelSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.MaximumBitmapSize">
            <summary>	
            Gets the maximum size, in device-dependent units (pixels), of  any one bitmap dimension supported by the render target.	
            </summary>	
            <unmanaged>int ID2D1RenderTarget::GetMaximumBitmapSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.StrokeWidth">
            <summary>
            Get or set the default stroke width used for all methods that are not explicitly using it. Default is set to 1.0f.
            </summary>
        </member>
        <member name="P:SharpDX.Direct2D1.RenderTarget.DotsPerInch">
            <summary>	
            Get or sets the dots per inch (DPI) of the render target. 	
            </summary>	
            <remarks>	
            This method specifies the mapping from pixel space to device-independent space  for the render target.  If both dpiX and dpiY are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed. For <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.   	
            </remarks>	
            <unmanaged>void ID2D1RenderTarget::SetDpi([None] float dpiX,[None] float dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render targe with same size, pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Drawing.SizeF)">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same pixel size and pixel format.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Nullable{SharpDX.Direct2D1.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target with same size and pixel size.	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.CompatibleRenderTargetOptions,System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.Nullable{SharpDX.Direct2D1.PixelFormat})">
            <summary>	
             Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.	
            </summary>	
            <remarks>	
            The pixel size and DPI of the new render target can be altered by specifying values for desiredSize or desiredPixelSize:  If desiredSize is specified but desiredPixelSize is not, the pixel size is computed from the desired size using the parent target DPI. If the desiredSize maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target.  If desiredSize maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (desiredSize.width, desiredSize.height) maps to the lower-right corner of the compatible render target.If the desiredPixelSize is specified and desiredSize is not, the DPI of the new render target is the same as the original render target.If both desiredSize and desiredPixelSize are specified, the DPI of the new render target is computed to account for the difference in scale.If neither desiredSize nor desiredPixelSize is specified, the new render target size and DPI match the original render target. 	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="desiredSize">The desired size of the new render target in device-independent pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="F:SharpDX.Direct2D1.AlphaMode.Unknown"/>, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
            <unmanaged>HRESULT CreateCompatibleRenderTarget([In, Optional] const D2D1_SIZE_F* desiredSize,[In, Optional] const D2D1_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[None] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.BitmapRenderTarget.GetBitmap(SharpDX.Direct2D1.Bitmap@)">
            <summary>	
            Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. 	
            </summary>	
            <remarks>	
            The DPI for the <see cref="T:SharpDX.Direct2D1.Bitmap"/> obtained from GetBitmap will be the DPI of the <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> when the render target was created. Changing the DPI of the ID2D1BitmapRenderTarget by calling  {{SetDpi}} doesn't affect the DPI of the bitmap, even if SetDpi is called before GetBitmap. Using SetDpi to change the DPI of the ID2D1BitmapRenderTarget does affect how contents are rendered into the bitmap: it just doesn't affect the DPI of the bitmap retrieved by GetBitmap. 	
            </remarks>	
            <param name="bitmap">When this method returns, contains the address of a reference to the bitmap for this render target. This bitmap can be used for drawing operations.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.BitmapRenderTarget.Bitmap">
            <summary>	
            Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. 	
            </summary>	
            <remarks>	
            The DPI for the <see cref="T:SharpDX.Direct2D1.Bitmap"/> obtained from GetBitmap will be the DPI of the <see cref="T:SharpDX.Direct2D1.BitmapRenderTarget"/> when the render target was created. Changing the DPI of the ID2D1BitmapRenderTarget by calling  {{SetDpi}} doesn't affect the DPI of the bitmap, even if SetDpi is called before GetBitmap. Using SetDpi to change the DPI of the ID2D1BitmapRenderTarget does affect how contents are rendered into the bitmap: it just doesn't affect the DPI of the bitmap retrieved by GetBitmap. 	
            </remarks>	
            <unmanaged>HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererBase">
            <summary>
            Default abstract implementation of TextRenderer. Need to implement a least a DrawXXX method to use it.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.IsPixelSnappingDisabled(System.Object)">
            <summary>
            Determines whether pixel snapping is disabled. The recommended default is FALSE,
            unless doing animation that requires subpixel vertical placement.
            </summary>
            <param name="clientDrawingContext">The context passed to IDWriteTextLayout::Draw.</param>
            <returns>Receives TRUE if pixel snapping is disabled or FALSE if it not. </returns>
            <unmanaged>HRESULT IsPixelSnappingDisabled([None] void* clientDrawingContext,[Out] BOOL* isDisabled)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.GetCurrentTransform(System.Object)">
            <summary>	
             Gets a transform that maps abstract coordinates to DIPs. 	
            </summary>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>a structure which has transform information for  pixel snapping.</returns>
            <unmanaged>HRESULT GetCurrentTransform([None] void* clientDrawingContext,[Out] DWRITE_MATRIX* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.GetPixelsPerDip(System.Object)">
            <summary>	
             Gets the number of physical pixels per DIP. 	
            </summary>	
            <remarks>	
             Because a DIP (device-independent pixel) is 1/96 inch,  the pixelsPerDip value is the number of logical pixels per inch divided by 96.	
            </remarks>	
            <param name="clientDrawingContext">The drawing context passed to <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <returns>the number of physical pixels per DIP</returns>
            <unmanaged>HRESULT GetPixelsPerDip([None] void* clientDrawingContext,[Out] FLOAT* pixelsPerDip)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs. 	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/> function calls this callback function with all the information about glyphs to render. The application implements this callback by mostly delegating the call to the underlying platform's graphics API such as {{Direct2D}} to draw glyphs on the drawing context. An application that uses GDI can implement this callback in terms of the <see cref="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.DirectWrite.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)"/> method.	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)"/>.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode"> The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render. </param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawUnderline(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Underline@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline. 	
            </summary>	
            <remarks>	
             A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffect"> Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawStrikethrough(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Strikethrough@,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough. 	
            </summary>	
            <remarks>	
             A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality. 	
            </remarks>	
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererBase.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>	
             IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object. 	
            </summary>	
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback">
            <summary>
            Internal TextRenderer Callback
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.TextRendererCallback.#ctor(SharpDX.DirectWrite.TextRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.TextRendererCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SharpDX.DirectWrite.TextRendererCallback.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawGlyphRunDelegate">
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawUnderlineDelegate">
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawStrikethroughDelegate">
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextRendererCallback.DrawInlineObjectDelegate">
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Typography">
            <summary>	
            Represents a font typography setting.	
            </summary>	
            <unmanaged>IDWriteTypography</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.#ctor(SharpDX.DirectWrite.Factory)">
            <summary>	
            Creates a typography object for use in a text layout. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.DirectWrite.Factory"/></param>
            <unmanaged>HRESULT IDWriteFactory::CreateTypography([Out] IDWriteTypography** typography)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.Typography"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.AddFontFeature(SharpDX.DirectWrite.FontFeature)">
            <summary>	
            Adds an OpenType font feature. 	
            </summary>	
            <param name="fontFeature">A structure that contains the OpenType name identifier and the execution parameter for the font feature being added. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteTypography::AddFontFeature([None] DWRITE_FONT_FEATURE fontFeature)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.GetFontFeatureCount">
            <summary>	
            Gets the number of OpenType font features for the current font. 	
            </summary>	
            <remarks>	
            A single run of text can be associated with more than one typographic feature. The <see cref="T:SharpDX.DirectWrite.Typography"/> object holds a list of these font features. 	
            </remarks>	
            <returns>The number of font features for the current text format. </returns>
            <unmanaged>int IDWriteTypography::GetFontFeatureCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.Typography.GetFontFeature(System.Int32)">
            <summary>	
            Gets the font feature at the specified index. 	
            </summary>	
            <remarks>	
            A single run of text can be associated with more than one typographic feature. The <see cref="T:SharpDX.DirectWrite.Typography"/> object holds a list of these font features. 	
            </remarks>	
            <param name="fontFeatureIndex">The zero-based index of the font feature to retrieve. </param>
            <returns>When this method returns, contains the font feature which is at the specified index. </returns>
            <unmanaged>HRESULT IDWriteTypography::GetFontFeature([None] int fontFeatureIndex,[Out] DWRITE_FONT_FEATURE* fontFeature)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.Typography.FontFeatureCount">
            <summary>	
            Gets the number of OpenType font features for the current font. 	
            </summary>	
            <remarks>	
            A single run of text can be associated with more than one typographic feature. The <see cref="T:SharpDX.DirectWrite.Typography"/> object holds a list of these font features. 	
            </remarks>	
            <unmanaged>int IDWriteTypography::GetFontFeatureCount()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Ellipse">
            <summary>	
            Contains the center point, x-radius, and y-radius of an ellipse.	
            </summary>	
            <unmanaged>D2D1_ELLIPSE</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Ellipse.#ctor(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Ellipse"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radiusX">The radius X.</param>
            <param name="radiusY">The radius Y.</param>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.Point">
            <summary>	
            The center point of the ellipse. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.RadiusX">
            <summary>	
            The X-radius of the ellipse. 	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Ellipse.RadiusY">
            <summary>	
            The Y-radius of the ellipse. 	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GdiInteropRenderTarget">
            <summary>	
            Provides access to an device context that can accept GDI drawing commands. 	
            </summary>	
            <unmanaged>ID2D1GdiInteropRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.ReleaseDC">
            <summary>	
            Indicates that drawing with the device context retrieved using the {{GetDC}} method is finished.  	
            </summary>	
            <remarks>	
            ReleaseDC must be called once for each call to {{GetDC}}. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GdiInteropRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.GetDC(SharpDX.Direct2D1.DeviceContextInitializeMode)">
            <summary>	
            Retrieves the device context associated with this render target. 	
            </summary>	
            <remarks>	
            Calling this method flushes the render target. This command can be called only after {{BeginDraw}} and before {{EndDraw}}. It should not be called between {{PushAxisAlignedClip}}/{{PopAxisAlignedClip}} commands or between {{PushLayer}}/{{PopLayer}}.  {{ReleaseDC}} must be called once for each call to GetDC. 	
            </remarks>	
            <param name="mode">A value that specifies whether the device context should be cleared. </param>
            <returns>When this method returns, contains the device context associated with this render target. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::GetDC([None] D2D1_DC_INITIALIZE_MODE mode,[Out] void** hdc)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GdiInteropRenderTarget.ReleaseDC(System.Nullable{SharpDX.Rectangle})">
            <summary>	
            Indicates that drawing with the device context retrieved using the {{GetDC}} method is finished.  	
            </summary>	
            <remarks>	
            ReleaseDC must be called once for each call to {{GetDC}}. 	
            </remarks>	
            <param name="update">The modified region of the device context, or NULL to specify the entire render target.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.MeasuringMode">
            <summary>	
            Indicates the measuring method used for text layout.	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.Natural">
            <summary>	
            Specifies that text is measured using glyph ideal metrics whose values are independent to the current display resolution. 	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.GdiClassic">
            <summary>	
            Specifies that text is measured using glyph display-compatible metrics whose values tuned for the current display resolution. 	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.MeasuringMode.GdiNatural">
            <summary>	
            Specifies that text is measured using the same glyph display metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. 	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFileType">
            <summary>	
            The type of a font represented by a single font file. Font formats that consist of multiple files, for example Type 1 .PFM and .PFB, have separate enum values for each of the file types.	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Unknown">
            <summary>	
            Font type is not recognized by the DirectWrite font system. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Cff">
            <summary>	
            OpenType font with CFF outlines. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_CFF</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Truetype">
            <summary>	
            OpenType font with TrueType outlines. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.TruetypeCollection">
            <summary>	
            OpenType font that contains a TrueType collection. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Type1Pfm">
            <summary>	
            Type 1 PFM font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Type1Pfb">
            <summary>	
            Type 1 PFB font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFB</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Vector">
            <summary>	
            Vector .FON font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_VECTOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFileType.Bitmap">
            <summary>	
            Bitmap .FON font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FILE_TYPE_BITMAP</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFaceType">
            <summary>	
            Indicates the file format of a complete font face.	
            </summary>	
            <remarks>	
            Font formats that consist of multiple files, such as Type 1 .PFM and .PFB, have a single enum entry. 	
            </remarks>	
            <unmanaged>DWRITE_FONT_FACE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Cff">
            <summary>	
            OpenType font face with CFF outlines. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_CFF</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Truetype">
            <summary>	
            OpenType font face with TrueType outlines. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.TruetypeCollection">
            <summary>	
            OpenType font face that is a part of a TrueType collection. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Type1">
            <summary>	
            A Type 1 font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_TYPE1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Vector">
            <summary>	
            A vector .FON format font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_VECTOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Bitmap">
            <summary>	
            A bitmap .FON format font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_BITMAP</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFaceType.Unknown">
            <summary>	
            Font face type is not recognized by the DirectWrite font system. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FACE_TYPE_UNKNOWN</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontSimulations">
            <summary>	
            Specifies algorithmic style simulations to be applied to the font face. Bold and oblique simulations can be combined via bitwise OR operation.	
            </summary>	
            <remarks>	
            Style simulations are not recommended for good typographic quality. 	
            </remarks>	
            <unmanaged>DWRITE_FONT_SIMULATIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.None">
            <summary>	
            Indicates that no simulations are applied to the font face. 	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.Bold">
            <summary>	
            Indicates that algorithmic emboldening is applied to the font face.  DWRITE_FONT_SIMULATIONS_BOLD increases weight by applying a widening algorithm to the glyph outline. This may  be used to simulate a bold weight where no designed bold weight is available. 	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontSimulations.Oblique">
            <summary>	
            Indicates that algorithmic italicization is applied to the font face. DWRITE_FONT_SIMULATIONS_OBLIQUE applies obliquing (shear) to the glyph outline. This may be used to simulate an oblique/italic style where no designed oblique/italic style is available. 	
            </summary>	
            <unmanaged>DWRITE_FONT_SIMULATIONS_OBLIQUE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontWeight">
            <summary>	
            Represents the density of a typeface, in terms of the lightness or heaviness of the strokes. The enumerated values correspond to the usWeightClass definition in the OpenType specification. The usWeightClass represents an integer value between 1 and 999. Lower values indicate lighter weights; higher values indicate heavier weights.	
            </summary>	
            <remarks>	
            Weight differences are generally differentiated by an increased stroke or thickness that is associated with a given character in a typeface, as compared to a "normal" character from that same typeface. 	
            The following illustration shows an example of Normal and UltraBold weights for the Palatino Linotype typeface.  ?  Illustration of the letter "W" in Normal and UltraBold weights ? Note??Not all weights are available for all typefaces. When a weight is not available for a typeface, the closest matching weight is returned. Font weight values less than 1 or greater than 999 are considered invalid, and they are rejected by font API functions. 	
            </remarks>	
            <unmanaged>DWRITE_FONT_WEIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Thin">
            <summary>	
            Predefined font weight : Thin (100). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_THIN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraLight">
            <summary>	
            Predefined font weight : Extra-light (200). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraLight">
            <summary>	
            Predefined font weight : Ultra-light (200). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Light">
            <summary>	
            Predefined font weight : Light (300). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_LIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Normal">
            <summary>	
            Predefined font weight : Normal (400). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Regular">
            <summary>	
            Predefined font weight : Regular (400). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_REGULAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Medium">
            <summary>	
            Predefined font weight : Medium (500). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_MEDIUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.DemiBold">
            <summary>	
            Predefined font weight : Demi-bold (600). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_DEMI_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.SemiBold">
            <summary>	
            Predefined font weight : Semi-bold (600). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_SEMI_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Bold">
            <summary>	
            Predefined font weight : Bold (700). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraBold">
            <summary>	
            Predefined font weight : Extra-bold (800). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraBold">
            <summary>	
            Predefined font weight : Ultra-bold (800). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BOLD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Black">
            <summary>	
            Predefined font weight : Black (900). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_BLACK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.Heavy">
            <summary>	
            Predefined font weight : Heavy (900). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_HEAVY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.ExtraBlack">
            <summary>	
            Predefined font weight : Extra-black (950). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BLACK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontWeight.UltraBlack">
            <summary>	
            Predefined font weight : Ultra-black (950). 	
            </summary>	
            <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BLACK</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontStretch">
            <summary>	
            Represents the degree to which a font has been stretched compared to a font's normal aspect ratio. The enumerated values correspond to the usWidthClass definition in the OpenType specification. The usWidthClass represents an integer value between 1 and 9?lower values indicate narrower widths; higher values indicate wider widths.	
            </summary>	
            <remarks>	
            A font stretch describes the degree to which a font form is stretched from its normal aspect ratio, which is the original width to height ratio specified for the glyphs in the font. 	
            The following illustration shows an example of Normal and Condensed stretches for the Rockwell Bold typeface.  ?  Illustration of ?D2D? text in Normal and Condensed font stretch ? Note??Values other than the ones defined in the enumeration are considered to be invalid, and are rejected by font API functions. 	
            </remarks>	
            <unmanaged>DWRITE_FONT_STRETCH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Undefined">
            <summary>	
            Predefined font stretch : Not known (0). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_UNDEFINED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.UltraCondensed">
            <summary>	
            Predefined font stretch : Ultra-condensed (1). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_ULTRA_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.ExtraCondensed">
            <summary>	
            Predefined font stretch : Extra-condensed (2). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXTRA_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Condensed">
            <summary>	
            Predefined font stretch : Condensed (3). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.SemiCondensed">
            <summary>	
            Predefined font stretch : Semi-condensed (4). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_SEMI_CONDENSED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Normal">
            <summary>	
            Predefined font stretch : Normal (5). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Medium">
            <summary>	
            Predefined font stretch : Medium (5). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_MEDIUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.SemiExpanded">
            <summary>	
            Predefined font stretch : Semi-expanded (6). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_SEMI_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.Expanded">
            <summary>	
            Predefined font stretch : Expanded (7). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.ExtraExpanded">
            <summary>	
            Predefined font stretch : Extra-expanded (8). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_EXTRA_EXPANDED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStretch.UltraExpanded">
            <summary>	
            Predefined font stretch : Ultra-expanded (9). 	
            </summary>	
            <unmanaged>DWRITE_FONT_STRETCH_ULTRA_EXPANDED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontStyle">
            <summary>	
            Represents the style of a font face as normal, italic, or oblique.	
            </summary>	
            <remarks>	
            Three terms categorize the slant of a font: normal, italic, and oblique.   Font styleDescription NormalThe characters in a normal, or roman, font are upright. 	
             Italic 	
            The characters in an italic font are truly slanted and appear as they were designed. 	
             ObliqueThe characters in an oblique font are artificially slanted.  ? For Oblique, the slant is achieved by performing a shear transformation on the characters from a normal font. When a true italic font is not available on a computer or printer, an oblique style can be generated from the normal font and used to simulate an italic font.  The following illustration shows the normal, italic, and oblique font styles for the Palatino Linotype font. Notice how the italic font style has a more flowing and visually appealing appearance than the oblique font style, which is simply created by skewing the normal font style version of the text.  ?  Illustration of normal, italic, and oblique font styles ? Note?? Values other than the ones defined in the enumeration are considered to be invalid, and they are rejected by font API functions. 	
            </remarks>	
            <unmanaged>DWRITE_FONT_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Normal">
            <summary>	
            Font style : Normal. 	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Oblique">
            <summary>	
            Font style : Oblique.  	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_OBLIQUE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontStyle.Italic">
            <summary>	
            Font style : Italic. 	
            </summary>	
            <unmanaged>DWRITE_FONT_STYLE_ITALIC</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InformationalStringId">
            <summary>	
            The informational string enumeration which identifies a string embedded in a font file.	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_ID</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.None">
            <summary>	
            Indicates the string containing the unspecified name ID. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.CopyrightNotice">
            <summary>	
            Indicates the string containing the copyright notice provided by the font. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.VersionStrings">
            <summary>	
            Indicates the string containing a version number. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Trademark">
            <summary>	
            Indicates the string containing the trademark information provided by the font. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_TRADEMARK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Manufacturer">
            <summary>	
            Indicates the string containing the name of the font manufacturer. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_MANUFACTURER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Designer">
            <summary>	
            Indicates the string containing the name of the font designer. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.DesignerUrl">
            <summary>	
            Indicates the string containing the URL of the font designer (with protocol, e.g., http://, ftp://). 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Description">
            <summary>	
            Indicates the string containing the description of the font. This may also contain revision information, usage recommendations, history, features, etc. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.FontVendorUrl">
            <summary>	
            Indicates the string containing the URL of the font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.LicenseDescription">
            <summary>	
            Indicates the string containing the description of how the font may be legally used, or different example scenarios for licensed use.  	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.LicenseInformationUrl">
            <summary>	
            Indicates the string containing the URL where additional licensing information can be found. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Win32FamilyNames">
            <summary>	
            Indicates the string containing the GDI-compatible family name. Since GDI allows a maximum of four fonts per family, fonts in the same family may have different GDI-compatible family names (e.g., "Arial", "Arial Narrow", "Arial Black"). 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.Win32SubfamilyNames">
            <summary>	
            Indicates the string containing a GDI-compatible subfamily name. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.PreferredFamilyNames">
            <summary>	
            Indicates the string containing the family name preferred by the designer. This enables font designers to group more than four fonts in a single family without losing compatibility with GDI. This name is typically only present if it differs from the GDI-compatible family name. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.PreferredSubfamilyNames">
            <summary>	
            Indicates the string containing the subfamily name preferred by the designer. This name is typically only present if it differs from the GDI-compatible subfamily name. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InformationalStringId.SampleText">
            <summary>	
            Contains sample text for display in font lists. This can be the font name or any other text that the designer thinks is the best  example to display the font in. 	
            </summary>	
            <unmanaged>DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FactoryType">
            <summary>	
            Specifies the type of DirectWrite factory object.	
            </summary>	
            <remarks>	
            A DirectWrite factory object contains information about its internal state, such as font loader registration and cached font data. In most cases you should use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state information, thereby reducing memory usage. However, there are cases when it is desirable to reduce the impact of a component on the rest of the process, such as a plug-in from an untrusted source,  by sandboxing and isolating it from the rest of the process components. In such cases, you should use an isolated factory for the sandboxed component. 	
            </remarks>	
            <unmanaged>DWRITE_FACTORY_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FactoryType.Shared">
            <summary>	
            Indicates that the DirectWrite factory is a shared factory and that it allows for the reuse of cached font data across multiple in-process components. Such factories also take advantage of cross process font caching components for better performance. 	
            </summary>	
            <unmanaged>DWRITE_FACTORY_TYPE_SHARED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FactoryType.Isolated">
            <summary>	
            Indicates that the DirectWrite factory object is isolated. Objects created from the isolated factory do not interact with internal DirectWrite state from other components. 	
            </summary>	
            <unmanaged>DWRITE_FACTORY_TYPE_ISOLATED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.PixelGeometry">
            <summary>	
            Represents the internal structure of a device pixel (that is the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text.	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Flat">
            <summary>	
            The red, green, and blue color components of each pixel are assumed to occupy the same point. 	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_FLAT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Rgb">
            <summary>	
            Each pixel is composed of three vertical stripes, with red on the left, green in the center, and  blue on the right. This is the most common pixel geometry for LCD monitors.	    	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_RGB</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.PixelGeometry.Bgr">
            <summary>	
            Each pixel is composed of three vertical stripes, with blue on the left, green in the center, and  red on the right. 	
            </summary>	
            <unmanaged>DWRITE_PIXEL_GEOMETRY_BGR</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.RenderingMode">
            <summary>	
            Represents a method of rendering glyphs. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Default">
            <summary>	
            Specifies that the rendering mode is determined automatically, based on the font and size. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Aliased">
            <summary>	
            Specifies that no anti-aliasing is performed. Each pixel is either set to the foreground color of the text or retains the color of the background. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_ALIASED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeGdiClassic">
            <summary>	
            Specifies ClearType rendering with the same metrics as bi-level text. Glyphs can only be positioned on whole-pixel boundaries. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeGdiNatural">
            <summary>	
            Specifies ClearType rendering with the same metrics as text rendering using GDI using a font created with CLEARTYPE_NATURAL_QUALITY. Glyph metrics are closer to their ideal values than with bi-level text, but glyphs are still positioned on whole-pixel boundaries. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeNatural">
            <summary>	
            Specifies ClearType rendering with anti-aliasing in the horizontal dimension only. This is typically used with small to medium font sizes (up to 16 ppem). 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.CleartypeNaturalSymmetric">
            <summary>	
            Specifies ClearType rendering with anti-aliasing in both horizontal and vertical dimensions. This is typically used at larger sizes to makes curves and diagonal lines look smoother, at the expense of some softness. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.RenderingMode.Outline">
            <summary>	
            Specifies that rendering should bypass the rasterizer and use the outlines directly. This is typically used at very large sizes. 	
            </summary>	
            <unmanaged>DWRITE_RENDERING_MODE_OUTLINE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ReadingDirection">
            <summary>	
            Specifies the direction in which reading progresses. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ReadingDirection.LeftToRight">
            <summary>	
            Indicates that reading progresses from left to right. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION_LEFT_TO_RIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ReadingDirection.RightToLeft">
            <summary>	
            Indicates that reading progresses from right to left. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION_RIGHT_TO_LEFT</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FlowDirection">
            <summary>	
            Indicates the direction of flow for placing lines of text in a paragraph. 	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FlowDirection.TopToBottom">
            <summary>	
            Specifies that text lines are placed from top to bottom. 	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextAlignment">
            <summary>	
            Specifies the alignment of paragraph text along the reading direction axis, relative to the leading and trailing edge of the layout box.	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Leading">
            <summary>	
            The leading edge of the paragraph text is aligned to the leading edge of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_LEADING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Trailing">
            <summary>	
            The trailing edge of the paragraph text is aligned to the  trailing edge of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_TRAILING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextAlignment.Center">
            <summary>	
            The center of the paragraph text is aligned to the center of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_TEXT_ALIGNMENT_CENTER</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ParagraphAlignment">
            <summary>	
            Specifies the alignment of paragraph text along the flow direction axis, relative to the top and bottom of the flow's layout box. 	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Near">
            <summary>	
            The top of the text flow is aligned to the top edge of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_NEAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Far">
            <summary>	
            The bottom of the text flow is aligned to the bottom edge of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_FAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ParagraphAlignment.Center">
            <summary>	
            The center of the flow is aligned to the center of the layout box. 	
            </summary>	
            <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_CENTER</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.WordWrapping">
            <summary>	
            Specifies the word wrapping to be used in a particular multiline paragraph.  	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.WordWrapping.Wrap">
            <summary>	
            Indicates that words are broken across lines to avoid text overflowing the layout box. 	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.WordWrapping.NoWrap">
            <summary>	
            Indicates that words are kept within the same line even when it overflows the layout box. This option is often used with scrolling to reveal overflow text. 	
            </summary>	
            <unmanaged>DWRITE_WORD_WRAPPING_NO_WRAP</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineSpacingMethod">
            <summary>	
            The method used for line spacing in a text layout.	
            </summary>	
            <remarks>	
            The line spacing method is set by using the {{SetLineSpacing}} method of the <see cref="T:SharpDX.DirectWrite.TextFormat"/> or <see cref="T:SharpDX.DirectWrite.TextLayout"/> interfaces.  To get  the current line spacing method of a text format or text layou use the {{GetLineSpacing}}. 	
            </remarks>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineSpacingMethod.Default">
            <summary>	
            Line spacing depends solely on the content, adjusting to accommodate the size of fonts and inline objects. 	
            </summary>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineSpacingMethod.Uniform">
            <summary>	
            Lines are explicitly set to uniform spacing, regardless of the size of fonts and inline objects. This can be useful to avoid the uneven appearance that can occur from font fallback. 	
            </summary>	
            <unmanaged>DWRITE_LINE_SPACING_METHOD_UNIFORM</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TrimmingGranularity">
            <summary>	
            Specifies  the text granularity used to trim text overflowing the layout box.	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.None">
            <summary>	
            No trimming occurs. Text flows beyond the layout width. 	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.Character">
            <summary>	
            Trimming occurs at a character cluster boundary. 	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_CHARACTER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TrimmingGranularity.Word">
            <summary>	
            Trimming occurs at a word boundary. 	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY_WORD</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFeatureTag">
            <summary>	
            A value that indicates the typographic feature of text supplied by the font.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternativeFractions">
            <summary>	
            Replaces figures separated by a slash with an alternative form.  Equivalent OpenType tag: 'afrc'  	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.PetiteCapitalsFromCapitals">
            <summary>	
            Turns capital characters into petite capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in petite-cap form to avoid disrupting the flow of text. See the pcap feature description for notes on the relationship of caps, smallcaps and petite caps.  Equivalent OpenType tag: 'c2pc' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SmallCapitalsFromCapitals">
            <summary>	
            Turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text.   Equivalent OpenType tag: 'c2sc' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualAlternates">
            <summary>	
            In specified situations, replaces default glyphs with alternate forms which provide better joining behavior. Used in script typefaces which are designed to have some or all of their glyphs join.  Equivalent OpenType tag: 'calt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CaseSensitiveForms">
            <summary>	
            Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures; also changes oldstyle figures to lining figures. By default, glyphs in a text face are designed to work with lowercase characters. Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text. Also, lining figures are the same height (or close to it) as capitals, and fit much better with all-capital text.  Equivalent OpenType tag: 'case' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.GlyphCompositionDecomposition">
            <summary>	
            To minimize the number of glyph alternates, it is sometimes desired to decompose a character into two glyphs. Additionally, it may be preferable to compose two characters into a single glyph for better glyph processing. This feature permits such composition/decomposition. The feature should be processed as the first feature processed, and should be processed only when it is called.  Equivalent OpenType tag: 'ccmp' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualLigatures">
            <summary>	
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. Unlike other ligature features, clig specifies the context in which the ligature is recommended. This capability is important in some script designs and for swash ligatures.  Equivalent OpenType tag: 'clig' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CapitalSpacing">
            <summary>	
            Globally adjusts inter-glyph spacing for all-capital text. Most typefaces contain capitals and lowercase characters, and the capitals are positioned to work with the lowercase. When capitals are used for words, they need more space between them for legibility and esthetics. This feature would not apply to monospaced designs. Of course the user may want to override this behavior in order to do more pronounced letterspacing for esthetic reasons.   Equivalent OpenType tag: 'cpsp' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ContextualSwash">
            <summary>	
            Replaces default character glyphs with corresponding swash glyphs in a specified context. Note that there may be more than one swash alternate for a given character.   Equivalent OpenType tag: 'cswh' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.CursivePositioning">
            <summary>	
            In cursive scripts like Arabic, this feature cursively positions adjacent glyphs.  Equivalent OpenType tag: 'curs' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Default">
            <summary>	
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures which may be used for special effect, at the user's preference.  Equivalent OpenType tag: 'dlig' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.DiscretionaryLigatures">
            <summary>	
            Replaces standard forms in Japanese fonts with corresponding forms preferred by typographers.  For example, a user would invoke this feature to replace kanji character U+5516 with U+555E.	
              Equivalent OpenType tag: 'expt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ExpertForms">
            <summary>	
            Replaces figures separated by a slash with 'common' (diagonal) fractions.  Equivalent OpenType tag: 'frac' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Fractions">
            <summary>	
            Replaces glyphs set on other widths with glyphs set on full (usually em) widths. In a CJKV font, this may include "lower ASCII" Latin characters and various symbols. In a European font, this feature replaces proportionally-spaced glyphs with monospaced glyphs, which are generally set on widths of 0.6 em. For example, a user may invoke this feature in a Japanese font to get full monospaced Latin glyphs instead of the corresponding proportionally-spaced versions.  Equivalent OpenType tag: 'fwid' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_FRACTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.FullWidth">
            <summary>	
            Produces the half forms of consonants in Indic scripts. For example, in Hindi (Devanagari script), the conjunct KKa, obtained by doubling the Ka, is denoted with a half form of Ka followed by the full form.   Equivalent OpenType tag: 'half' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_FULL_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalfForms">
            <summary>	
            Produces the halant forms of consonants in Indic scripts. For example, in Sanskrit (Devanagari script), syllable final consonants are frequently required in their halant form.  Equivalent OpenType tag: 'haln' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalantForms">
            <summary>	
            Respaces glyphs designed to be set on full-em widths, fitting them onto half-em widths. This differs from hwid in that it does not substitute new glyphs.  Equivalent OpenType tag: 'halt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALANT_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternateHalfWidth">
            <summary>	
            Replaces the default (current) forms with the historical alternates. While some ligatures are also used for historical effect, this feature deals only with single characters. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect.    Equivalent OpenType tag: 'hist' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HistoricalForms">
            <summary>	
            Replaces standard kana with forms that have been specially designed for only horizontal writing. This is a typographic optimization for improved fit and more even color.  Equivalent OpenType tag: 'hkna' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HorizontalKanaAlternates">
            <summary>	
            Replaces the default (current) forms with the historical alternates. Some ligatures were in common use in the past, but appear anachronistic today. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect.  Equivalent OpenType tag: 'hlig' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HistoricalLigatures">
            <summary>	
            Replaces glyphs on proportional widths, or fixed widths other than half an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are set on multiple widths; this feature selects the half-em version. There are various contexts in which this is the preferred behavior, including compatibility with older desktop documents.  Equivalent OpenType tag: 'hwid' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HalfWidth">
            <summary>	
            Used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded. The JIS X 0212-1990 (aka, "Hojo Kanji") and JIS X 0213:2004 character sets overlap significantly. In some cases their prototypical glyphs differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 (such as those supporting the Adobe-Japan 1-6 character collection), it is recommended that JIS X 0213:2004 forms be the preferred encoded form.  Equivalent OpenType tag: 'hojo' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.HojoKanjiForms">
            <summary>	
            The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters, which were incorporated into JIS X 0213:2004 as new prototypical forms. The 'jp04' feature is A subset of the 'nlck' feature, and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004.  Equivalent OpenType tag: 'jp04' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis04Forms">
            <summary>	
            Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS C 6226-1978 (JIS78) specification.  Equivalent OpenType tag: 'jp78' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS04_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis78Forms">
            <summary>	
            Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS X 0208-1983 (JIS83) specification.  Equivalent OpenType tag: 'jp83' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS78_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis83Forms">
            <summary>	
            Replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 (JIS90) specification.  Equivalent OpenType tag: 'jp90' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS83_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Jis90Forms">
            <summary>	
            Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs. Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility. Besides standard adjustment in the horizontal direction, this feature can supply size-dependent kerning data via device tables, "cross-stream" kerning in the Y text direction, and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature does not apply to text set vertically.  Equivalent OpenType tag: 'kern' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS90_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Kerning">
            <summary>	
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions.  Equivalent OpenType tag: 'liga' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_KERNING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StandardLigatures">
            <summary>	
            Changes selected figures from oldstyle to the default lining form. For example, a user may invoke this feature in order to get lining figures, which fit better with all-capital text. This feature overrides results of the Oldstyle Figures feature (onum).  Equivalent OpenType tag: 'lnum' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.LiningFigures">
            <summary>	
            Enables localized forms of glyphs to be substituted for default forms. Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters, which are used by individual literary communities. For example, a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other. In some cases the localized form differs only subtly from the script 'norm', in others the forms are radically distinct.   Equivalent OpenType tag: 'locl' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_LINING_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.LocalizedForms">
            <summary>	
            Positions mark glyphs with respect to base glyphs. For example, in Arabic script positioning the Hamza above the Yeh.  Equivalent OpenType tag: 'mark' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MarkPositioning">
            <summary>	
            Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet).  Equivalent OpenType tag: 'mgrk' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MathematicalGreek">
            <summary>	
            Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic. For example, in Arabic, the ligaturised mark Ha with Hamza above it can also be obtained by positioning these marks relative to one another.  Equivalent OpenType tag: 'mkmk' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.MarkToMarkPositioning">
            <summary>	
            Replaces default glyphs with various notational forms (such as glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes). In some cases an annotation form may already be present, but the user may want a different one.  Equivalent OpenType tag: 'nalt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.AlternateAnnotationForms">
            <summary>	
            Used to access  glyphs made from glyph shapes defined by the National Language Council (NLC) of Japan for a number of JIS characters in 2000.   Equivalent OpenType tag: 'nlck' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.NlcKanjiForms">
            <summary>	
            Changes selected figures from the default lining style to oldstyle form. For example, a user may invoke this feature to get oldstyle figures, which fit better into the flow of normal upper- and lowercase text. This feature overrides results of the Lining Figures feature (lnum).  Equivalent OpenType tag: 'onum' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.OldStyleFigures">
            <summary>	
            Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116), which is actually a ligature substitution, but is best accessed through this feature.  Equivalent OpenType tag: 'ordn' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Ordinals">
            <summary>	
            Respaces glyphs designed to be set on full-em widths, fitting them onto individual (more or less proportional) horizontal widths. This differs from pwid in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may prefer the monospaced form, or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting (Latin forms designed for proportional spacing would be rotated).  Equivalent OpenType tag: 'palt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_ORDINALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalAlternateWidth">
            <summary>	
            Turns lowercase characters into petite capitals. Forms related to petite capitals, such as specially designed figures, may be included. Some fonts contain an additional size of capital letters, shorter than the regular smallcaps and it is referred to as petite caps. Such forms are most likely to be found in designs with a small lowercase x-height, where they better harmonise with lowercase text than the taller smallcaps (for examples of petite caps, see the Emigre type families Mrs Eaves and Filosofia).   Equivalent OpenType tag: 'pcap' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.PetiteCapitals">
            <summary>	
            Replaces figure glyphs set on uniform (tabular) widths with corresponding glyphs set on glyph-specific (proportional) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.  Equivalent OpenType tag: 'pnum' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalFigures">
            <summary>	
            Replaces glyphs set on uniform widths (typically full or half-em) with proportionally spaced glyphs. The proportional variants are often used for the Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts.  Equivalent OpenType tag: 'pwid' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ProportionalWidths">
            <summary>	
            Replaces glyphs on other widths with glyphs set on widths of one quarter of an em (half an en). The characters involved are normally figures and some forms of punctuation.  Equivalent OpenType tag: 'qwid' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.QuarterWidths">
            <summary>	
            Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures, which the script determines as required to be used in normal conditions. This feature is important for some scripts to ensure correct glyph formation.   Equivalent OpenType tag: 'rlig' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.RequiredLigatures">
            <summary>	
            Identifies glyphs in the font which have been designed for "ruby", from the old typesetting term for four-point-sized type. Japanese typesetting often uses smaller kana glyphs, generally in superscripted form, to clarify the meaning of kanji which may be unfamiliar to the reader.   Equivalent OpenType tag: 'ruby' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.RubyNotationForms">
            <summary>	
            Replaces the default forms with the stylistic alternates. Many fonts contain alternate glyph designs for a purely esthetic effect; these don't always fit into a clear category like swash or historical. As in the case of swash glyphs, there may be more than one alternate form.    Equivalent OpenType tag: 'salt' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticAlternates">
            <summary>	
            Replaces lining or oldstyle figures with inferior figures (smaller glyphs which sit lower than the standard baseline, primarily for chemical or mathematical notation). May also replace lowercase characters with alphabetic inferiors.  Equivalent OpenType tag: 'sinf' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ScientificInferiors">
            <summary>	
            Turns lowercase characters into small capitals. This corresponds to the common SC font layout. It is generally used for display lines set in Large &amp; small caps, such as titles. Forms related to small capitals, such as oldstyle figures, may be included.  Equivalent OpenType tag: 'smcp' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SmallCapitals">
            <summary>	
            Replaces 'traditional' Chinese or Japanese forms with the corresponding 'simplified' forms.  Equivalent OpenType tag: 'smpl' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SimplifiedForms">
            <summary>	
            In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Examples of fonts including stylistic sets are Zapfino Linotype and Adobe's Poetica. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets  Equivalent OpenType tag: 'ss01' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet1">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss02' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet2">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss03' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet3">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss04' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet4">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss05' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet5">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss06' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet6">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss07' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet7">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss08' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet8">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss09' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet9">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss10' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet10">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss11' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet11">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss12' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet12">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss13' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet13">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss14' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet14">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss15' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet15">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss16' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet16">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss17' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet17">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss18' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet18">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss19' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet19">
            <summary>	
            See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.  Equivalent OpenType tag: 'ss20' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.StylisticSet20">
            <summary>	
            May replace a default glyph with a subscript glyph, or it may combine a glyph substitution with positioning adjustments for proper placement.  Equivalent OpenType tag: 'subs' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Subscript">
            <summary>	
            Replaces lining or oldstyle figures with superior figures (primarily for footnote indication), and replaces lowercase letters with superior letters (primarily for abbreviated French titles).  Equivalent OpenType tag: 'sups' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SUBSCRIPT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Superscript">
            <summary>	
            Replaces default character glyphs with corresponding swash glyphs. Note that there may be more than one swash alternate for a given character.  Equivalent OpenType tag: 'swsh' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Swash">
            <summary>	
            Replaces the default glyphs with corresponding forms designed specifically for titling. These may be all-capital and/or larger on the body, and adjusted for viewing at larger sizes.  Equivalent OpenType tag: 'titl' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SWASH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Titling">
            <summary>	
            Replaces 'simplified' Japanese kanji forms with the corresponding 'traditional' forms. This is equivalent to the Traditional Forms feature, but explicitly limited to the traditional forms considered proper for use in personal names (as many as 205 glyphs in some fonts).  Equivalent OpenType tag: 'tnam' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TITLING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TraditionalNameForms">
            <summary>	
            Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform (tabular) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.  Equivalent OpenType tag: 'tnum' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TabularFigures">
            <summary>	
            Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding 'traditional' forms.  Equivalent OpenType tag: 'trad' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.TraditionalForms">
            <summary>	
            Replaces glyphs on other widths with glyphs set on widths of one third of an em. The characters involved are normally figures and some forms of punctuation.  Equivalent OpenType tag: 'twid' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.ThirdWidths">
            <summary>	
            Maps upper- and lowercase letters to a mixed set of lowercase and small capital forms, resulting in a single case alphabet (for an example of unicase, see the Emigre type family Filosofia). The letters substituted may vary from font to font, as appropriate to the design. If aligning to the x-height, smallcap glyphs may be substituted, or specially designed unicase forms might be used. Substitutions might also include specially designed figures.	
              Equivalent OpenType tag: 'unic' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.Unicase">
            <summary>	
            Allows the user to change from the default 0 to a slashed form. Some fonts contain both a default form of zero, and an alternative form which uses a diagonal slash through the counter. Especially in condensed designs, it can be difficult to distinguish between 0 and O (zero and capital O) in any situation where capitals and lining figures may be arbitrarily mixed.   Equivalent OpenType tag: 'zero' 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_UNICASE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontFeatureTag.SlashedZero">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptShapes">
            <summary>	
            Indicates additional shaping requirements for text.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptShapes.Default">
            <summary>	
            Indicates that there is no additional shaping requirements for text. Text is shaped with the writing system default behavior. 	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptShapes.NoVisual">
            <summary>	
            Indicates that text should leave no visible control or format control characters. 	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES_NO_VISUAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.BreakCondition">
            <summary>	
            Indicates the condition at the edges of inline object or text used to determine line-breaking behavior.	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.Neutral">
            <summary>	
            Indicates whether a break is allowed by determining  the condition of the neighboring text span or inline object. 	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_NEUTRAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.CanBreak">
            <summary>	
            Indicates that a line break is allowed, unless overruled by the condition of the neighboring text span or inline object, either prohibited by a "may not break" condition or forced by a "must break" condition.				  	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_CAN_BREAK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.MayNotBreak">
            <summary>	
            Indicates that there should be no line  break, unless overruled by a "must break" condition from the neighboring text span or inline object.		  	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_MAY_NOT_BREAK</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.BreakCondition.MustBreak">
            <summary>	
            Indicates that the line break must happen, regardless of the condition of the adjacent text span or inline object.			  	
            </summary>	
            <unmanaged>DWRITE_BREAK_CONDITION_MUST_BREAK</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.NumberSubstitutionMethod">
            <summary>	
            Specifies how to apply number substitution on digits and related punctuation.	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.FromCulture">
            <summary>	
            Specifies that the substitution method should be determined based on the LOCALE_IDIGITSUBSTITUTION value of the specified text culture. 	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.Contextual">
            <summary>	
            If the culture is Arabic or Persian, specifies that the number shapes depend on the context. Either traditional or nominal number shapes are used, depending on the nearest preceding strong character or (if there is none) the reading direction of the paragraph. 	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.None">
            <summary>	
            Specifies that code points 0x30-0x39 are always rendered as nominal numeral shapes (ones of the European number), that is, no substitution is performed. 	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.National">
            <summary>	
            Specifies that numbers are rendered using the national number shapes as specified by the LOCALE_SNATIVEDIGITS value of the specified text culture. 	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.NumberSubstitutionMethod.Traditional">
            <summary>	
            Specifies that numbers are rendered using the traditional shapes for the specified culture. For most cultures, this is the same as NativeNational. However, NativeNational results in Latin numbers for some Arabic cultures, whereasDWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL results in arabic numbers for all Arabic cultures. 	
            </summary>	
            <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextureType">
            <summary>	
            Identifies a type of alpha texture.	
            </summary>	
            <remarks>	
            An alpha texture is a bitmap of alpha values, each representing opacity of a pixel or subpixel. 	
            </remarks>	
            <unmanaged>DWRITE_TEXTURE_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextureType.Aliased1x1">
            <summary>	
            Specifies an alpha texture for aliased text rendering (that is,  each pixel is either fully opaque or fully transparent), with one byte per pixel. 	
            </summary>	
            <unmanaged>DWRITE_TEXTURE_ALIASED_1x1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextureType.Cleartype3x1">
            <summary>	
            Specifies an alpha texture for ClearType text rendering, with three bytes per pixel in the horizontal dimension and one byte per pixel in the vertical dimension. 	
            </summary>	
            <unmanaged>DWRITE_TEXTURE_CLEARTYPE_3x1</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.DWrite">
            <summary>
            DWrite Functions.
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.DWrite.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.DirectWrite.DWrite.CreateFactory(SharpDX.DirectWrite.FactoryType,System.Guid,SharpDX.ComObject@)">
            <summary>	
            Creates a DirectWrite factory object that is used for subsequent creation of individual DirectWrite objects.	
            </summary>	
            <remarks>	
            This function creates a {{DirectWrite}} factory object that is used for subsequent creation of individual DirectWrite objects. DirectWrite factory contains internal state data such as font loader registration and cached font data. In most cases it is recommended you use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state data, and thereby reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process, by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended you use an isolated factory for the sandboxed component. The following example shows how to create a shared {{DirectWrite}} factory. 	
            <code> if (SUCCEEDED(hr))	
            { hr = DWriteCreateFactory( DWRITE_FACTORY_TYPE_SHARED, __uuidof(IDWriteFactory), reinterpret_cast&lt;IUnknown**&gt;(&amp;pDWriteFactory_) );	
            } </code>	
            	
            </remarks>	
            <param name="factoryType">A value that specifies whether the factory object will be shared or isolated. </param>
            <param name="iid">A GUID value that identifies the DirectWrite factory interface, such as __uuidof(IDWriteFactory). </param>
            <param name="factory">An address of a reference to the newly created DirectWrite factory object. </param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] GUID* iid,[Out] IUnknown** factory)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LocalFontFileLoader">
            <summary>	
            A built-in implementation of the <see cref="T:SharpDX.DirectWrite.FontFileLoader"/> interface, that operates on local font files	
            and exposes local font file information from the font file reference key. Font file references created using {{CreateFontFileReference}} use this font file loader.	
            </summary>	
            <unmanaged>IDWriteLocalFontFileLoader</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.LocalFontFileLoader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetFilePathLengthFromKey(System.IntPtr,System.Int32)">
            <summary>	
            Obtains the length of the absolute file path from the font file reference key.	
            </summary>	
            <param name="fontFileReferenceKey">Font file reference key that uniquely identifies the local font file within the scope of the font loader being used. </param>
            <param name="fontFileReferenceKeySize">Size of font file reference key in bytes. </param>
            <returns>Length of the file path string, not including the terminated NULL character. </returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathLengthFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] int* filePathLength)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetFilePathFromKey(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Obtains the absolute font file path from the font file reference key.	
            </summary>	
            <param name="fontFileReferenceKey">The font file reference key that uniquely identifies the local font file within the scope of the font loader being used. </param>
            <param name="fontFileReferenceKeySize">The size of font file reference key in bytes. </param>
            <param name="filePath">The character array that receives the local file path. </param>
            <param name="filePathSize">The length of the file path character array. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out, Buffer] wchar_t* filePath,[None] int filePathSize)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.LocalFontFileLoader.GetLastWriteTimeFromKey(System.IntPtr,System.Int32)">
            <summary>	
            Obtains the last write time of the file from the font file reference key.	
            </summary>	
            <param name="fontFileReferenceKey">The font file reference key that uniquely identifies the local font file within the scope of the font loader being used. </param>
            <param name="fontFileReferenceKeySize">The size of font file reference key in bytes. </param>
            <returns>The time of the last font file modification. </returns>
            <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey([In, Buffer] const void* fontFileReferenceKey,[None] int fontFileReferenceKeySize,[Out] __int64* lastWriteTime)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontList">
            <summary>	
            Represents a list of fonts.	
            </summary>	
            <unmanaged>IDWriteFontList</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontList"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFontCollection(SharpDX.DirectWrite.FontCollection@)">
            <summary>	
            Gets the font collection that contains the fonts in the font list.	
            </summary>	
            <param name="fontCollection">When this method returns, contains the address of a reference to the current <see cref="T:SharpDX.DirectWrite.FontCollection"/> object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFontCount">
            <summary>	
            Gets the number of fonts in the font list. 	
            </summary>	
            <returns>The number of fonts in the font list. </returns>
            <unmanaged>int IDWriteFontList::GetFontCount()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontList.GetFont(System.Int32)">
            <summary>	
            Gets a font given its zero-based index. 	
            </summary>	
            <param name="index">Zero-based index of the font in the font list. </param>
            <returns>When this method returns, contains the address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.Font"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontList::GetFont([None] int index,[Out] IDWriteFont** font)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontList.FontCollection">
            <summary>	
            Gets the font collection that contains the fonts in the font list.	
            </summary>	
            <unmanaged>HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontList.FontCount">
            <summary>	
            Gets the number of fonts in the font list. 	
            </summary>	
            <unmanaged>int IDWriteFontList::GetFontCount()</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontFamily">
            <summary>	
            Represents a family of related fonts.	
            </summary>	
            <unmanaged>IDWriteFontFamily</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectWrite.FontFamily"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetFamilyNames(SharpDX.DirectWrite.LocalizedStrings@)">
            <summary>	
            Creates a localized strings object that contains the family names for the font family, indexed by locale name. 	
            </summary>	
            <remarks>	
            The following example shows how to get the font family name from a <see cref="T:SharpDX.DirectWrite.FontFamily"/> object. 	
            <code> IDWriteLocalizedStrings* pFamilyNames = NULL; // Get a list of localized strings for the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFontFamily-&gt;GetFamilyNames(&amp;pFamilyNames);	
            } UINT32 index = 0;	
            BOOL exists = false; wchar_t localeName[LOCALE_NAME_MAX_LENGTH]; if (SUCCEEDED(hr))	
            { // Get the default locale for this user. int defaultLocaleSuccess = GetUserDefaultLocaleName(localeName, LOCALE_NAME_MAX_LENGTH); // If the default locale is returned, find that locale name, otherwise use "en-us". if (defaultLocaleSuccess) { hr = pFamilyNames-&gt;FindLocaleName(localeName, &amp;index, &amp;exists); } if (SUCCEEDED(hr) &amp;&amp; !exists) // if the above find did not find a match, retry with US English { hr = pFamilyNames-&gt;FindLocaleName(L"en-us", &amp;index, &amp;exists); }	
            } // If the specified locale doesn't exist, select the first on the list.	
            if (!exists) index = 0; UINT32 length = 0; // Get the string length.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetStringLength(index, &amp;length);	
            } // Allocate a string big enough to hold the name.	
            wchar_t* name = new (std::nothrow) wchar_t[length+1];	
            if (name == NULL)	
            { hr = E_OUTOFMEMORY;	
            } // Get the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetString(index, name, length+1);	
            } </code>	
            	
            </remarks>	
            <param name="names">The address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.LocalizedStrings"/> object. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetFirstMatchingFont(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.FontStyle)">
            <summary>	
            Gets the font that best matches the specified properties. 	
            </summary>	
            <param name="weight">A value that is used to match a requested font weight. </param>
            <param name="stretch">A value that is used to match a requested font stretch. </param>
            <param name="style">A value that is used to match a requested font style. </param>
            <returns>When this method returns, contains the address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.Font"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetFirstMatchingFont([None] DWRITE_FONT_WEIGHT weight,[None] DWRITE_FONT_STRETCH stretch,[None] DWRITE_FONT_STYLE style,[Out] IDWriteFont** matchingFont)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectWrite.FontFamily.GetMatchingFonts(SharpDX.DirectWrite.FontWeight,SharpDX.DirectWrite.FontStretch,SharpDX.DirectWrite.FontStyle)">
            <summary>	
            Gets a list of fonts in the font family ranked in order of how well they match the specified properties. 	
            </summary>	
            <param name="weight">A value that is used to match a requested font weight. </param>
            <param name="stretch">A value that is used to match a requested font stretch. </param>
            <param name="style">A value that is used to match a requested font style. </param>
            <returns>An address of a reference to the newly created <see cref="T:SharpDX.DirectWrite.FontList"/> object. </returns>
            <unmanaged>HRESULT IDWriteFontFamily::GetMatchingFonts([None] DWRITE_FONT_WEIGHT weight,[None] DWRITE_FONT_STRETCH stretch,[None] DWRITE_FONT_STYLE style,[Out] IDWriteFontList** matchingFonts)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.FontFamily.FamilyNames">
            <summary>	
            Creates a localized strings object that contains the family names for the font family, indexed by locale name. 	
            </summary>	
            <remarks>	
            The following example shows how to get the font family name from a <see cref="T:SharpDX.DirectWrite.FontFamily"/> object. 	
            <code> IDWriteLocalizedStrings* pFamilyNames = NULL; // Get a list of localized strings for the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFontFamily-&gt;GetFamilyNames(&amp;pFamilyNames);	
            } UINT32 index = 0;	
            BOOL exists = false; wchar_t localeName[LOCALE_NAME_MAX_LENGTH]; if (SUCCEEDED(hr))	
            { // Get the default locale for this user. int defaultLocaleSuccess = GetUserDefaultLocaleName(localeName, LOCALE_NAME_MAX_LENGTH); // If the default locale is returned, find that locale name, otherwise use "en-us". if (defaultLocaleSuccess) { hr = pFamilyNames-&gt;FindLocaleName(localeName, &amp;index, &amp;exists); } if (SUCCEEDED(hr) &amp;&amp; !exists) // if the above find did not find a match, retry with US English { hr = pFamilyNames-&gt;FindLocaleName(L"en-us", &amp;index, &amp;exists); }	
            } // If the specified locale doesn't exist, select the first on the list.	
            if (!exists) index = 0; UINT32 length = 0; // Get the string length.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetStringLength(index, &amp;length);	
            } // Allocate a string big enough to hold the name.	
            wchar_t* name = new (std::nothrow) wchar_t[length+1];	
            if (name == NULL)	
            { hr = E_OUTOFMEMORY;	
            } // Get the family name.	
            if (SUCCEEDED(hr))	
            { hr = pFamilyNames-&gt;GetString(index, name, length+1);	
            } </code>	
            	
            </remarks>	
            <unmanaged>HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.FontMetrics">
            <summary>	
            The DWRITE_FONT_METRICS structure specifies the metrics that are applicable to all glyphs within the font face.	
            </summary>	
            <unmanaged>DWRITE_FONT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.DesignUnitsPerEm">
            <summary>	
            The number of font design units per em unit. Font files use their own coordinate system of font design units. A font design unit is the smallest measurable unit in the em square, an imaginary square that is used to size and align glyphs. The concept of em square is used as a reference scale factor when defining font size and device transformation semantics. The size of one em square is also commonly used to compute the paragraph identation value. 	
            </summary>	
            <unmanaged>short designUnitsPerEm</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.Ascent">
            <summary>	
            The ascent value of the font face in font design units. Ascent is the distance from the top of font character alignment box to the English baseline. 	
            </summary>	
            <unmanaged>short ascent</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.Descent">
            <summary>	
            The descent value of the font face in font design units. Descent is the distance from the bottom of font character alignment box to the English baseline. 	
            </summary>	
            <unmanaged>short descent</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.LineGap">
            <summary>	
            The line gap in font design units. Recommended additional white space to add between lines to improve legibility. The recommended line spacing (baseline-to-baseline distance) is  the sum of ascent, descent, and lineGap. The line gap is usually positive or zero but can be negative, in which case the recommended line spacing is less than the height of the character alignment box. 	
            </summary>	
            <unmanaged>short lineGap</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.CapHeight">
            <summary>	
            The cap height value of the font face in font design units. Cap height is the distance from the English baseline to the top of a typical English capital. Capital "H" is often used as a reference character for the purpose of calculating the cap height value. 	
            </summary>	
            <unmanaged>short capHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.XHeight">
            <summary>	
            The x-height value of the font face in font design units. x-height is the distance from the English baseline to the top of lowercase letter "x", or a similar lowercase character. 	
            </summary>	
            <unmanaged>short xHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.UnderlinePosition">
            <summary>	
            The underline position value of the font face in font design units. Underline position is the position of underline relative to the English baseline. The value is usually made negative in order to place the underline below the baseline. 	
            </summary>	
            <unmanaged>short underlinePosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.UnderlineThickness">
            <summary>	
            The suggested underline thickness value of the font face in font design units. 	
            </summary>	
            <unmanaged>short underlineThickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.StrikethroughPosition">
            <summary>	
            The strikethrough position value of the font face in font design units. Strikethrough position is the position of strikethrough relative to the English baseline. The value is usually made positive in order to place the strikethrough above the baseline. 	
            </summary>	
            <unmanaged>short strikethroughPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.FontMetrics.StrikethroughThickness">
            <summary>	
            The suggested strikethrough thickness value of the font face in font design units. 	
            </summary>	
            <unmanaged>short strikethroughThickness</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphMetrics">
            <summary>	
            Specifies the metrics of an individual glyph. The units depend on how the metrics are obtained.	
            </summary>	
            <unmanaged>DWRITE_GLYPH_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.LeftSideBearing">
            <summary>	
            Specifies the X offset from the glyph origin to the left edge of the black box. The glyph origin is the current horizontal writing position. A negative value means the black box extends to the left of the origin (often true for lowercase italic 'f'). 	
            </summary>	
            <unmanaged>int leftSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.AdvanceWidth">
            <summary>	
            Specifies the X offset from the origin of the current glyph to the origin of the next glyph when writing horizontally. 	
            </summary>	
            <unmanaged>int advanceWidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.RightSideBearing">
            <summary>	
            Specifies the X offset from the right edge of the black box to the origin of the next glyph when writing horizontally. The value is negative when the right edge of the black box overhangs the layout box. 	
            </summary>	
            <unmanaged>int rightSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.TopSideBearing">
            <summary>	
            Specifies the vertical offset from the vertical origin to the top of the black box. Thus, a positive value adds whitespace whereas a negative value means the glyph overhangs the top of the layout box. 	
            </summary>	
            <unmanaged>int topSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.AdvanceHeight">
            <summary>	
            Specifies the Y offset from the vertical origin of the current glyph to the vertical origin of the next glyph when writing vertically. Note that the term "origin" by itself denotes the horizontal origin. The vertical origin is different. Its Y coordinate is specified by verticalOriginY value, and its X coordinate is half the advanceWidth to the right of the horizontal origin. 	
            </summary>	
            <unmanaged>int advanceHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.BottomSideBearing">
            <summary>	
            Specifies the vertical distance from the bottom edge of the black box to the advance height. This is positive when the bottom edge of the black box is within the layout box, or negative when the bottom edge of black box overhangs the layout box. 	
            </summary>	
            <unmanaged>int bottomSideBearing</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphMetrics.VerticalOriginY">
            <summary>	
            Specifies the Y coordinate of a glyph's vertical origin, in the font's design coordinate system. The y coordinate of a glyph's vertical origin is the sum of the glyph's top side bearing and the top (that is, yMax) of the glyph's bounding box. 	
            </summary>	
            <unmanaged>int verticalOriginY</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.GlyphOffset">
            <summary>	
            The optional adjustment to a glyph's position.	
            </summary>	
            <remarks>	
            An glyph offset changes the position of a glyph without affecting the pen position. Offsets are in logical, pre-transform units. 	
            </remarks>	
            <unmanaged>DWRITE_GLYPH_OFFSET</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphOffset.AdvanceOffset">
            <summary>	
            The offset in the advance direction of the run. A positive advance offset moves the glyph to the right (in pre-transform coordinates) if the run is left-to-right or to the left if the run is right-to-left. 	
            </summary>	
            <unmanaged>float advanceOffset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.GlyphOffset.AscenderOffset">
            <summary>	
            The offset in the ascent direction, that is, the direction ascenders point. A positive ascender offset moves the glyph up (in pre-transform coordinates).  A negative ascender offset moves the glyph down. 	
            </summary>	
            <unmanaged>float ascenderOffset</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Matrix">
            <summary>	
            The DWRITE_MATRIX structure specifies the graphics transform to be applied to rendered glyphs.	
            </summary>	
            <unmanaged>DWRITE_MATRIX</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M11">
            <summary>	
            A value indicating the horizontal scaling / cosine of rotation. 	
            </summary>	
            <unmanaged>float m11</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M12">
            <summary>	
            A value indicating the vertical shear / sine of rotation. 	
            </summary>	
            <unmanaged>float m12</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M21">
            <summary>	
            A value indicating the horizontal shear / negative sine of rotation. 	
            </summary>	
            <unmanaged>float m21</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.M22">
            <summary>	
            A value indicating the vertical scaling / cosine of rotation. 	
            </summary>	
            <unmanaged>float m22</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.Dx">
            <summary>	
            A value indicating the horizontal shift (always orthogonal regardless of rotation). 	
            </summary>	
            <unmanaged>float dx</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Matrix.Dy">
            <summary>	
            A value indicating the vertical shift (always orthogonal regardless of rotation.) 	
            </summary>	
            <unmanaged>float dy</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TypographicFeatures">
            <summary>	
            Contains a set of typographic features to be applied during text shaping.	
            </summary>	
            <unmanaged>DWRITE_TYPOGRAPHIC_FEATURES</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TypographicFeatures.Features">
            <summary>	
            A reference to a structure that specifies properties used to identify and execute typographic features in the font. 	
            </summary>	
            <unmanaged>DWRITE_FONT_FEATURE* features</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TypographicFeatures.FeatureCount">
            <summary>	
            A value that indicates the number of features being applied to a font face. 	
            </summary>	
            <unmanaged>int featureCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Trimming">
            <summary>	
            Specifies the trimming option for text overflowing the layout box. 	
            </summary>	
            <unmanaged>DWRITE_TRIMMING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.Granularity">
            <summary>	
            A value that specifies  the text granularity used to trim text overflowing the layout box. 	
            </summary>	
            <unmanaged>DWRITE_TRIMMING_GRANULARITY granularity</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.Delimiter">
            <summary>	
            A character code used as the delimiter that signals the beginning of the portion of text to be preserved. Most useful for path ellipsis, where the delimiter would be a slash. 	
            </summary>	
            <unmanaged>int delimiter</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Trimming.DelimiterCount">
            <summary>	
            A value that indicates how many occurrences of the delimiter to step back. 	
            </summary>	
            <unmanaged>int delimiterCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ScriptAnalysis">
            <summary>	
            Stores the association of text and its writing system script, as well as some display attributes.	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_ANALYSIS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptAnalysis.Script">
            <summary>	
            The zero-based index representation of writing system script. 	
            </summary>	
            <unmanaged>short script</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ScriptAnalysis.Shapes">
            <summary>	
            A value that indicates additional shaping requirement of text. 	
            </summary>	
            <unmanaged>DWRITE_SCRIPT_SHAPES shapes</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ShapingTextProperties">
            <summary>	
            Shaping output properties for an output glyph.	
            </summary>	
            <unmanaged>DWRITE_SHAPING_TEXT_PROPERTIES</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingTextProperties.IsShapedAlone">
            <summary>	
            Indicates that the glyph is shaped alone. 	
            </summary>	
            <unmanaged>short isShapedAlone</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ShapingTextProperties.Reserved">
            <summary>	
            Reserved for future use. 	
            </summary>	
            <unmanaged>short reserved</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Underline">
            <summary>	
            Contains information about the width, thickness, offset, run height, reading direction, and flow direction of an underline. 	
            </summary>	
            <remarks>	
            All coordinates are in device independent pixels (DIPs). 	
            </remarks>	
            <unmanaged>DWRITE_UNDERLINE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Width">
            <summary>	
            A value that indicates the width of the underline, measured parallel to the baseline. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Thickness">
            <summary>	
            A value that indicates the thickness of the underline, measured perpendicular to the baseline. 	
            </summary>	
            <unmanaged>float thickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.Offset">
            <summary>	
            A value that indicates the offset of the underline from the baseline. A positive offset represents a position below the baseline (away from the text) and a negative offset is above (toward the text). 	
            </summary>	
            <unmanaged>float offset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.RunHeight">
            <summary>	
            A value that indicates the height of the tallest run where the underline is applied. 	
            </summary>	
            <unmanaged>float runHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.ReadingDirection">
            <summary>	
            A value that indicates the reading direction of the text associated with the underline. This value is used to interpret whether the width value runs horizontally or vertically. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION readingDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.FlowDirection">
            <summary>	
            A value that indicates the flow direction of the text associated with the underline. This value is used to interpret whether the thickness value advances top to bottom, left to right, or right to left. 	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION flowDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.LocaleName">
            <summary>	
            An array of characters which contains the locale of the text that the underline is being drawn under.  For example, in vertical text, the underline belongs on the left for Chinese but on the right for Japanese.  	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Underline.MeasuringMode">
            <summary>	
            The measuring mode can be useful to the renderer to determine how underlines are rendered, such as rounding the thickness to a whole pixel in GDI-compatible modes. 	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE measuringMode</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.Strikethrough">
            <summary>	
            Contains information regarding the size and placement of strikethroughs. All coordinates are in device independent pixels (DIPs).	
            </summary>	
            <unmanaged>DWRITE_STRIKETHROUGH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Width">
            <summary>	
            A value that indicates the width of the strikethrough, measured parallel to the baseline. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Thickness">
            <summary>	
            A value that indicates the thickness of the strikethrough, measured perpendicular to the baseline. 	
            </summary>	
            <unmanaged>float thickness</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.Offset">
            <summary>	
            A value that indicates the offset of the strikethrough from the baseline.  A positive offset represents a position below the baseline and  a negative offset is above.  Typically, the offset will be negative. 	
            </summary>	
            <unmanaged>float offset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.ReadingDirection">
            <summary>	
            Reading direction of the text associated with the strikethrough.  This value is used to interpret whether the width value runs horizontally  or vertically. 	
            </summary>	
            <unmanaged>DWRITE_READING_DIRECTION readingDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.FlowDirection">
            <summary>	
            Flow direction of the text associated with the strikethrough.  This value is used to interpret whether the thickness value advances top to  bottom, left to right, or right to left. 	
            </summary>	
            <unmanaged>DWRITE_FLOW_DIRECTION flowDirection</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.LocaleName">
            <summary>	
            An array of characters containing the locale of the  text that is the strikethrough is being drawn over.  	
            </summary>	
            <unmanaged>const wchar_t* localeName</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.Strikethrough.MeasuringMode">
            <summary>	
            The measuring mode can be useful to the renderer to determine how underlines are rendered, such as rounding the thickness to a whole pixel in GDI-compatible modes. 	
            </summary>	
            <unmanaged>DWRITE_MEASURING_MODE measuringMode</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.LineMetrics">
            <summary>	
            Contains information about a formatted line of text.	
            </summary>	
            <unmanaged>DWRITE_LINE_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Length">
            <summary>	
            The number of text positions in the text line.  This includes any trailing whitespace and newline characters. 	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.TrailingWhitespaceLength">
            <summary>	
            The number of whitespace positions at the end of the text line.  Newline sequences are considered whitespace. 	
            </summary>	
            <unmanaged>int trailingWhitespaceLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.NewlineLength">
            <summary>	
            The number of characters in the newline sequence at the end of the text line.  If the count is zero, then the text line was either wrapped or it is the end of the text. 	
            </summary>	
            <unmanaged>int newlineLength</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Height">
            <summary>	
            The height of the text line. 	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.LineMetrics.Baseline">
            <summary>	
            The distance from the top of the text line to its baseline. 	
            </summary>	
            <unmanaged>float baseline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.LineMetrics.IsTrimmed">
            <summary>	
            The line is trimmed. 	
            </summary>	
            <unmanaged>BOOL isTrimmed</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.ClusterMetrics">
            <summary>	
            Contains information about a glyph cluster.	
            </summary>	
            <unmanaged>DWRITE_CLUSTER_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ClusterMetrics.Width">
            <summary>	
            The total advance width of all glyphs in the cluster. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.ClusterMetrics.Length">
            <summary>	
            The number of text positions in the cluster. 	
            </summary>	
            <unmanaged>short length</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.CanWrapLineAfter">
            <summary>	
            Indicates whether a line can be broken right after the cluster. 	
            </summary>	
            <unmanaged>short canWrapLineAfter</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsWhitespace">
            <summary>	
            Indicates whether the cluster corresponds to a whitespace character. 	
            </summary>	
            <unmanaged>short isWhitespace</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsNewline">
            <summary>	
            Indicates whether the cluster corresponds to a newline character. 	
            </summary>	
            <unmanaged>short isNewline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsSoftHyphen">
            <summary>	
            Indicates whether the cluster corresponds to a soft hyphen character. 	
            </summary>	
            <unmanaged>short isSoftHyphen</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.IsRightToLeft">
            <summary>	
            Indicates whether the cluster is read from right to left. 	
            </summary>	
            <unmanaged>short isRightToLeft</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.ClusterMetrics.Padding">
            <summary>	
            Reserved for future use. 	
            </summary>	
            <unmanaged>short padding</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.TextMetrics">
            <summary>	
            Contains the metrics associated with text after layout.  All coordinates are in device independent pixels (DIPs).	
            </summary>	
            <unmanaged>DWRITE_TEXT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Left">
            <summary>	
            A value that indicates the left-most point of formatted text relative to the layout box,  while excluding any glyph overhang. 	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Top">
            <summary>	
            A value that indicates the top-most point of formatted text relative to the layout box, while excluding any glyph overhang. 	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Width">
            <summary>	
            A value that indicates the width of the formatted text, while ignoring trailing whitespace  at the end of each line. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.WidthIncludingTrailingWhitespace">
            <summary>	
            The width of the formatted text, taking into account the  trailing whitespace at the end of each line. 	
            </summary>	
            <unmanaged>float widthIncludingTrailingWhitespace</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.Height">
            <summary>	
            The height of the formatted text. The height of an empty string  is set to the same value as that of the default font. 	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LayoutWidth">
            <summary>	
            The initial width given to the layout. It can be either larger or smaller than the  text content width, depending on whether the text  was wrapped. 	
            </summary>	
            <unmanaged>float layoutWidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LayoutHeight">
            <summary>	
            Initial height given to the layout. Depending on the length of the text, it may be larger or smaller than the text content height. 	
            </summary>	
            <unmanaged>float layoutHeight</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.MaxBidiReorderingDepth">
            <summary>	
            The maximum reordering count of any line of text, used  to calculate the most number of hit-testing boxes needed.  If the layout has no bidirectional text, or no text at all,  the minimum level is 1. 	
            </summary>	
            <unmanaged>int maxBidiReorderingDepth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.TextMetrics.LineCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lineCount</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.InlineObjectMetrics">
            <summary>	
            Contains properties describing the geometric measurement of an	
            application-defined inline object.	
            </summary>	
            <unmanaged>DWRITE_INLINE_OBJECT_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Width">
            <summary>	
            The width of the inline object. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Height">
            <summary>	
            The height of the inline object. 	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.InlineObjectMetrics.Baseline">
            <summary>	
            The distance from the top of the object to the point where it is lined up with the adjacent text.  If the baseline is at the bottom, then baseline simply equals height. 	
            </summary>	
            <unmanaged>float baseline</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.InlineObjectMetrics.SupportsSideways">
            <summary>	
            A Boolean flag that indicates whether the object is to be placed upright or alongside the text baseline for vertical text. 	
            </summary>	
            <unmanaged>BOOL supportsSideways</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.OverhangMetrics">
            <summary>	
            Indicates how much any visible DIPs (device independent pixels) overshoot each side of the layout or inline objects.	
            </summary>	
            <unmanaged>DWRITE_OVERHANG_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Left">
            <summary>	
            The distance from the left-most visible DIP to its  left alignment edge. 	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Top">
            <summary>	
            The distance from the top-most visible DIP to its  top alignment edge. 	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Right">
            <summary>	
            The distance from the right-most visible DIP to its  right alignment edge. 	
            </summary>	
            <unmanaged>float right</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.OverhangMetrics.Bottom">
            <summary>	
            The distance from the bottom-most visible DIP to its lower  alignment edge. 	
            </summary>	
            <unmanaged>float bottom</unmanaged>
        </member>
        <member name="T:SharpDX.DirectWrite.HitTestMetrics">
            <summary>	
            Describes the region obtained by a hit test.	
            </summary>	
            <unmanaged>DWRITE_HIT_TEST_METRICS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.TextPosition">
            <summary>	
            The first text position within the hit region.  	
            </summary>	
            <unmanaged>int textPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Length">
            <summary>	
            The number of text positions within the hit region.  	
            </summary>	
            <unmanaged>int length</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Left">
            <summary>	
            The x-coordinate of the upper-left corner of the hit region. 	
            </summary>	
            <unmanaged>float left</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Top">
            <summary>	
            The y-coordinate of the upper-left corner of the hit region. 	
            </summary>	
            <unmanaged>float top</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Width">
            <summary>	
            The width of the hit region. 	
            </summary>	
            <unmanaged>float width</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.Height">
            <summary>	
            The height of the hit region. 	
            </summary>	
            <unmanaged>float height</unmanaged>
        </member>
        <member name="F:SharpDX.DirectWrite.HitTestMetrics.BidiLevel">
            <summary>	
            The {{BIDI level}} of the text positions within the hit region. 	
            </summary>	
            <unmanaged>int bidiLevel</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.HitTestMetrics.IsText">
            <summary>	
            true if the hit region contains text; otherwise, false. 	
            </summary>	
            <unmanaged>BOOL isText</unmanaged>
        </member>
        <member name="P:SharpDX.DirectWrite.HitTestMetrics.IsTrimmed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL isTrimmed</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.AlphaMode">
            <summary>	
            Specifies how the alpha value of a bitmap or render target should be treated.	
            </summary>	
            <remarks>	
            The D2D1_ALPHA_MODE enumeration is used with the <see cref="T:SharpDX.Direct2D1.PixelFormat"/> enumeration to specify the alpha mode of a render target or bitmap. Different render targets and bitmaps support different alpha modes. For a list, see {{Supported Pixel Formats and Alpha Modes}}. The Differences Between Straight and Premultiplied Alpha When describing an RGBA color using straight alpha, the alpha value of the color is stored in the alpha channel. For example, to describe a red color that is 60% opaque, you'd use the following values: (255, 0, 0, 255 * 0.6) = (255, 0, 0, 153). The 255 value indicates full red, and 153 (which is 60 percent of 255) indicates that the color should have an opacity of 60 percent. When describing an RGBA color using premultiplied alpha, each color is multiplied by the alpha value: (255 * 0.6, 0 * 0.6, 0 * 0.6, 255 * 0.6) = (153, 0, 0, 153).   Regardless of the alpha mode of the render target, <see cref="T:SharpDX.Color4"/> values are always interpreted as straight alpha.  For example, when specifying the color of an <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> for use with a bitmap that uses the premultiplied alpha mode, you'd specify the color just as you would if the bitmap used straight alpha. When you paint with the brush, Direct2D translates the color to the destination format for you. Alpha Mode for Render Targets Regardless of the alpha mode setting, a render target's contents support transparency. For example, if you draw a partially transparent red rectangle with a render target with an alpha mode of D2D1_ALPHA_MODE_IGNORE, the rectangle will appear pink (if the background is white), as you might expect. If you draw a partially transparent red rectangle when the alpha mode is D2D1_ALPHA_MODE_PREMULTIPLIED, the rectangle will appear pink (assuming the background is white) and you can see through it to whatever is behind the render target. This is useful when using a <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> to render to a transparent window or when using an compatible render target (a render targeted created by the {{CreateCompatibleRenderTarget}} method) to create a bitmap that supports transparency.  ClearType and Alpha Modes If you specify an alpha mode other than D2D1_ALPHA_MODE_IGNORE for a render target, the text antialiasing mode automatically changes from {{D2D1_TEXT_ANTIALIAS_MODE CLEARTYPE}} to D2D1_TEXT_ANTIALIAS_MODE GRAYSCALE. (When you specify an alpha mode of D2D1_ALPHA_MODE_UNKNOWN, Direct2D sets the alpha for you depending on the type of render target. For a list of what the D2D1_ALPHA_MODE_UNKNOWN setting resolves to for each render target, see the {{Supported Pixel Formats and Alpha Modes}} overview.)  You can use the {{SetTextAntialiasMode}} method to change the text antialias mode  back to {{D2D1_TEXT_ANTIALIAS_MODE CLEARTYPE}}, but rendering ClearType text to a transparent surface can create unpredictable results. If you want to render ClearType text to an transparent render target, we recommend that you use one of the following two techniques.   Use the {{PushAxisAlignedClip}} method to clip the render target to the area where the text will be rendered,    then call the {{Clear}} method and specify an opaque color, then render your text. Use {{DrawRectangle}} to draw an opaque rectangle behind the area where the text will be rendered.  	
            </remarks>	
            <unmanaged>D2D1_ALPHA_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Unknown">
            <summary>	
            The alpha value might not be meaningful. 	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Premultiplied">
            <summary>	
            The alpha value has been premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value.  If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend. 	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Straight">
            <summary>	
            The alpha value has not been premultiplied. The alpha channel indicates the transparency of the color.  	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AlphaMode.Ignore">
            <summary>	
            The alpha value is ignored. 	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Gamma">
            <summary>	
            Specifies which gamma is used for interpolation.	
            </summary>	
            <remarks>	
            Interpolating in a linear gamma space (D2D1_GAMMA_1_0) can avoid changes in perceived brightness caused by the effect of gamma correction in spaces where the gamma is not 1.0, such as the default sRGB color space, where the gamma is 2.2. For an example of the differences between these two blending modes, consider the following illustration, which shows two gradients, each of which blends from red to blue to green:  ?  Illustration of two gradients from red to blue to green, blended by using sRGB gamma and linear-gamma ? The first gradient is interpolated linearly in the space of the render target (sRGB in this case), and one can see the dark bands between each color. The second gradient uses a gamma-correct linear interpolation, and thus does not exhibit the same variations in brightness. 	
            </remarks>	
            <unmanaged>D2D1_GAMMA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Gamma.StandardRgb">
            <summary>	
            Interpolation is performed in the standard RGB (sRGB) gamma. 	
            </summary>	
            <unmanaged>D2D1_GAMMA_2_2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Gamma.Linear">
            <summary>	
            Interpolation is performed in the linear-gamma color space. 	
            </summary>	
            <unmanaged>D2D1_GAMMA_1_0</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.OpacityMaskContent">
            <summary>	
            Describes whether an opacity mask contains graphics or text. Direct2D uses this information to determine which gamma space to use when blending the opacity mask.	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.Graphics">
            <summary>	
            The opacity mask contains graphics. The opacity mask is blended in the gamma 2.2 color space. 	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.TextNatural">
            <summary>	
            The opacity mask contains non-GDI text. The gamma space used for blending is obtained from the render target's text rendering parameters. (<see cref="M:SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)"/>). 	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.OpacityMaskContent.TextGdiCompatible">
            <summary>	
            The opacity mask contains text rendered using the GDI-compatible rendering mode. The opacity mask is blended using the gamma for GDI rendering. 	
            </summary>	
            <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ExtendMode">
            <summary>	
            Specifies how a brush paints areas outside of its normal content area.	
            </summary>	
            <remarks>	
            For an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/>, the brush's content is the brush's bitmap. For an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/>, the brush's content area is the gradient axis. For an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/>, the brush's content is the area within the gradient ellipse.   For an example, see the {{Draw Extend Mode Example}}. 	
            </remarks>	
            <unmanaged>D2D1_EXTEND_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Clamp">
            <summary>	
            Repeat the edge pixels of the brush's content for all regions outside the normal content area. 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Wrap">
            <summary>	
            Repeat the brush's content. 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ExtendMode.Mirror">
            <summary>	
            The same as D2D1_EXTEND_MODE_WRAP, except that alternate tiles of the brush's content are flipped. (The brush's normal content is drawn untransformed.) 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.AntialiasMode">
            <summary>	
            Specifies how the edges of nontext primitives are rendered.	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AntialiasMode.PerPrimitive">
            <summary>	
            Edges are antialiased using the Direct2D per-primitive method of high-quality antialiasing. 	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.AntialiasMode.Aliased">
            <summary>	
            Objects are aliased in most cases. Objects are antialiased only when they are drawn to a render target created by the {{CreateDxgiSurfaceRenderTarget}} method and  Direct3D multisampling has been enabled on the backing DirectX Graphics Infrastructure (DXGI) surface.  	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TextAntialiasMode">
            <summary>	
            Describes the antialiasing mode used for drawing text. 	
            </summary>	
            <remarks>	
            This enumeration is used with the {{SetTextAntialiasMode}} of an <see cref="T:SharpDX.Direct2D1.RenderTarget"/> to specify how text and glyphs are antialiased.  By default, Direct2D renders text in ClearType mode. Factors that  can downgrade the default quality to grayscale or aliased:  If the <see cref="T:SharpDX.DirectWrite.RenderingMode"/> value  is DWRITE_RENDERING_MODE_ALIASED , then the  default text antialiasing mode is aliased.  To change the DirectWrite rendering mode of an <see cref="T:SharpDX.Direct2D1.RenderTarget"/>, use the  <see cref="M:SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)"/> method.  If the <see cref="T:SharpDX.DirectWrite.RenderingMode"/> value is DWRITE_RENDERING_MODE_OUTLINE, then the default text  antialiasing mode is grayscale. If the render target has an alpha channel and is not set to <see cref="F:SharpDX.Direct2D1.AlphaMode.Ignore"/>, then  the default text antialiasing mode is grayscale. If <see cref="M:SharpDX.Direct2D1.RenderTarget.PushLayer(SharpDX.Direct2D1.LayerParameters@,SharpDX.Direct2D1.Layer)"/> is called without <see cref="F:SharpDX.Direct2D1.LayerOptions.InitializeForCleartype"/> (and the corresponding {{PopLayer}} has not  been called yet), then the default text  antialiasing mode is grayscale.  	
            </remarks>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Default">
            <summary>	
            Use the system default. See Remarks. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Cleartype">
            <summary>	
            Use ClearType antialiasing. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Grayscale">
            <summary>	
            Use grayscale antialiasing. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.TextAntialiasMode.Aliased">
            <summary>	
            Do not use antialiasing. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapInterpolationMode">
            <summary>	
            Specifies the algorithm that is used when images are scaled or rotated.	
            </summary>	
            <remarks>	
            To stretch an image, each pixel in the original image must be mapped to a group of pixels in the larger image. To shrink an image, groups of pixels in the original image must be mapped to single pixels in the smaller image. The effectiveness of the algorithms that perform these mappings determines the quality of a scaled image. Algorithms that produce higher-quality scaled images tend to require more processing time. D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR provides faster but lower-quality interpolation, while D2D1_BITMAP_INTERPOLATION_MODE_LINEAR provides higher-quality interpolation.  	
            </remarks>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapInterpolationMode.NearestNeighbor">
            <summary>	
            Use the exact color of the nearest bitmap pixel to the current rendering pixel. 	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapInterpolationMode.Linear">
            <summary>	
            Interpolate a color from the four bitmap pixels that are the nearest to the rendering pixel. 	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawTextOptions">
            <summary>	
            Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. This enumeration allows a bitwise combination of its member values.	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.NoSnap">
            <summary>	
            Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated.  	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.Clip">
            <summary>	
            Text is clipped to the layout rectangle. 	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawTextOptions.None">
            <summary>	
            Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle.  	
            </summary>	
            <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ArcSize">
            <summary>	
            Specifies whether an arc should be greater than 180 degrees.	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSize.Small">
            <summary>	
            An arc's sweep should be 180 degrees or less. 	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSize.Large">
            <summary>	
            An arc's sweep should be 180 degrees or greater. 	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CapStyle">
            <summary>	
            Describes the shape at the end of a line or segment.	
            </summary>	
            <remarks>	
            The following illustration shows the available cap styles for lines or segments. The red portion of the line shows the extra area added by the line cap setting.  ?  Illustration of four cap styles ? 	
            </remarks>	
            <unmanaged>D2D1_CAP_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Flat">
            <summary>	
            A cap that does not extend past the last point of the line. Comparable to cap used for objects other than lines.  	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Square">
            <summary>	
            Half of a square that has a length equal to the line thickness. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Round">
            <summary>	
            A semicircle that has a diameter equal to the line thickness. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CapStyle.Triangle">
            <summary>	
            An isosceles right triangle whose hypotenuse is equal in length to the thickness of the line. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DashStyle">
            <summary>	
            Describes the sequence of dashes and gaps in a stroke. 	
            </summary>	
            <remarks>	
            The following illustration shows several available dash styles. For more information, see the {{Stroke Style Example}}. ?  Illustration of available dash styles ? 	
            </remarks>	
            <unmanaged>D2D1_DASH_STYLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Solid">
            <summary>	
            A solid line with no breaks. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Dash">
            <summary>	
            A dash followed by a gap of equal length. The dash and the gap are each twice as long as the stroke thickness. The equivalent dash  array for  D2D1_DASH_STYLE_DASH is {2, 2}. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Dot">
            <summary>	
            A dot followed by a longer gap. The equivalent dash  array for  D2D1_DASH_STYLE_DOT is {0, 2}. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.DashDot">
            <summary>	
            A dash, followed by a gap, followed by a dot, followed by another gap. The equivalent dash array for  D2D1_DASH_STYLE_DASH_DOT is {2, 2, 0, 2}. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.DashDotDot">
            <summary>	
            A dash, followed by a gap, followed by a dot, followed by another gap, followed by another dot, followed by another gap. The equivalent dash array for  D2D1_DASH_STYLE_DASH_DOT_DOT is {2, 2, 0, 2, 0, 2}. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DashStyle.Custom">
            <summary>	
            The dash pattern is specified by an array of floating-point values. 	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LineJoin">
            <summary>	
            Describes the shape that joins two lines or segments.  	
            </summary>	
            <remarks>	
            A miter limit affects how sharp miter joins are allowed to be. If the line join style is D2D1_LINE_JOIN_MITER_OR_BEVEL, then the join will be mitered with regular angular vertices if it doesn't extend beyond the miter limit; otherwise, the line join will be beveled. The following illustration shows  different line join settings for the same stroked path geometry.  For more information, see {{Stroke Style Example}}.  ?  Illustration of line join settings ? 	
            </remarks>	
            <unmanaged>D2D1_LINE_JOIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Miter">
            <summary>	
            Regular angular vertices.  	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Bevel">
            <summary>	
            Beveled vertices.    	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.Round">
            <summary>	
            Rounded vertices.  	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LineJoin.MiterOrBevel">
            <summary>	
            Regular angular vertices unless the join would extend beyond the miter limit; otherwise, beveled vertices.   	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CombineMode">
            <summary>	
            Specifies the different methods by which two geometries can be combined.	
            </summary>	
            <remarks>	
            The following illustration shows the different geometry combine modes.	
             ?  Illustration of two geometries and the resulting shapes after various geometry combine modes ? 	
            </remarks>	
            <unmanaged>D2D1_COMBINE_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Union">
            <summary>	
            The two regions are combined by taking the union of both. Given two geometries, A and B, the resulting geometry is geometry A + geometry B. 	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Intersect">
            <summary>	
            The two regions are combined by taking their intersection. The new area consists of the overlapping region between the two geometries.  	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Xor">
            <summary>	
            The two regions are combined by taking the area that exists in the first region but not the second and the area that exists in the second region but not the first. Given two geometries, A and B, the new region consists of (A-B) + (B-A).  	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CombineMode.Exclude">
            <summary>	
            The second region is excluded from the first. Given two geometries, A and B, the area of geometry B is removed from the area of geometry A, producing a region that is A-B. 	
            </summary>	
            <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometryRelation">
            <summary>	
            Describes how one geometry object is spatially related to another geometry object. 	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Unknown">
            <summary>	
            The relationship between the two geometries cannot be determined. This value is never returned by any D2D method.   	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Disjoint">
            <summary>	
            The two geometries do not intersect at all. 	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.IsContained">
            <summary>	
            The instance geometry is entirely contained by  the passed-in geometry. 	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Contains">
            <summary>	
            The instance geometry entirely contains the passed-in geometry. 	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometryRelation.Overlap">
            <summary>	
            The two geometries overlap but neither completely contains the other.  	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySimplificationOption">
            <summary>	
            Specifies how a geometry is simplified to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometrySimplificationOption.CubicsAndLines">
            <summary>	
            The output can contain cubic Bezier curves and line segments. 	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GeometrySimplificationOption.Lines">
            <summary>	
            The output is flattened so that it contains only line segments.  	
            </summary>	
            <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FigureBegin">
            <summary>	
            Indicates whether a specific<see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> figure is filled or hollow. 	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureBegin.Filled">
            <summary>	
            The figure is filled.  	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureBegin.Hollow">
            <summary>	
            The figure is hollow. 	
            </summary>	
            <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FigureEnd">
            <summary>	
            Indicates whether a specific <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> figure is open or closed. 	
            </summary>	
            <unmanaged>D2D1_FIGURE_END</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureEnd.Open">
            <summary>	
            The figure is open. 	
            </summary>	
            <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FigureEnd.Closed">
            <summary>	
            The figure is closed. 	
            </summary>	
            <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PathSegment">
            <summary>	
            Indicates whether a segment should be stroked and whether the join between this segment and the previous one should be smooth. This enumeration allows a bitwise combination of its member values. 	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.None">
            <summary>	
            The segment is joined  as specified by the <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> interface, and it is stroked.  	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.ForceUnstroked">
            <summary>	
            The segment is not stroked. 	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PathSegment.ForceRoundLineJoin">
            <summary>	
            The segment is always joined with the one preceding it using a round line join, regardless of which <see cref="T:SharpDX.Direct2D1.LineJoin"/>enumeration is specified by the <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> interface. If this segment is the first segment and the figure is closed, a round line join is used to connect the closing segment with the first segment. If the figure is not closed, this setting has no effect on the first segment of the figure. If <see cref="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetSegmentFlags(SharpDX.Direct2D1.PathSegment)"/> is called just before <see cref="M:SharpDX.Direct2D1.SimplifiedGeometrySink.EndFigure(SharpDX.Direct2D1.FigureEnd)"/>, the join between the closing segment and the last explicitly specified segment is affected. 	
            </summary>	
            <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SweepDirection">
            <summary>	
            Defines the direction that an elliptical arc is drawn.  	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.SweepDirection.CounterClockwise">
            <summary>	
            Arcs are drawn in a counterclockwise (negative-angle) direction.  	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.SweepDirection.Clockwise">
            <summary>	
            Arcs are drawn in a clockwise (positive-angle) direction.  	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FillMode">
            <summary>	
            Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry. 	
            </summary>	
            <remarks>	
            Use the D2D1_FILL_MODE enumeration when creating an <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> with the {{CreateGeometryGroup}} method, or when modifying the fill mode of an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> with the <see cref="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetFillMode(SharpDX.Direct2D1.FillMode)"/> method. Direct2D fills the interior of a path by using one of the two fill modes specified by this enumeration: D2D1_FILL_MODE_ALTERNATE (alternate) or D2D1_FILL_MODE_WINDING (winding). Because the modes determine how to fill the interior of a closed shape, all shapes are treated as closed when they are filled.  If there is a gap in a segment in a shape, draw an imaginary line to close it.   To see the difference between the winding and alternate fill modes, assume that you have four circles with the same center and a different radius, as shown in the following illustration. The first one has the radius of 25, the second 50, the third 75, and the fourth 100. ?  Illustration of four concentric circles with different radius values ? The following  illustration shows the shape filled by using the alternate fill mode. Notice that the center and third ring are not filled. This is because a ray drawn from any point in either of those two rings passes through an even number of segments.  ?  Illustration of concentric circles with the second and fourth rings filled ? The following illustration explains this process.  ?  Illustration of concentric circles with points in the second and third rings and two arbitrary rays extending from each point ? The following illustration shows how the same shape is filled when the winding fill mode is specified.  ?  Illustration of concentric circles with all rings filled ? Notice that all the rings are filled. This is because all the segments run in the same direction, so a ray drawn from any point will cross one or more segments, and the sum of the crossings will not equal zero.  The following illustration explains this process. The red arrows represent the direction in which the segments are drawn and the black arrow represents an arbitrary ray that runs from a point in the innermost ring. Starting with a value of zero, for each segment that the ray crosses, a value of one is added for every clockwise intersection. All points lie in the fill region in this illustration, because the count does not equal zero.  ?  Illustration of concentric circles with a ray from within the first ring that crosses all four rings ? 	
            </remarks>	
            <unmanaged>D2D1_FILL_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FillMode.Alternate">
            <summary>	
            Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction, and then counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is in the fill region; if even, the point is outside the fill region.   	
            </summary>	
            <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FillMode.Winding">
            <summary>	
            Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction, and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left,  as long as left and right are seen from the perspective of the ray. After counting the crossings, if the result is zero, then the point is outside the path. Otherwise, it is inside the path.   	
            </summary>	
            <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LayerOptions">
            <summary>	
            Specifies options that can be applied when a layer resource is applied to create a layer.	
            </summary>	
            <remarks>	
            ClearType antialiasing must use the current contents of the render target to blend properly. When a pushed layer requests initializing for ClearType, Direct 2D copies the current contents of the render target into the layer so that ClearType antialiasing can be performed. Rendering ClearType text into a transparent layer does not produce the desired results. A small performance hit from re-copying content occurs when <see cref="M:SharpDX.Direct2D1.RenderTarget.Clear(System.Nullable{SharpDX.Color4})"/> is called. 	
            </remarks>	
            <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerOptions.None">
            <summary>	
            The text in this layer does not use ClearType antialiasing. 	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerOptions.InitializeForCleartype">
            <summary>	
            The layer renders correctly for ClearType text. If the render target is set to ClearType, the  layer continues to render ClearType. If the render target is set to ClearType and this option is not specified, the render target will be set to render gray-scale until the layer is popped. The caller can override this default by calling {{SetTextAntialiasMode}} while within the layer. This flag is slightly slower than the default.  	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.WindowState">
            <summary>	
            Describes whether a window is occluded. 	
            </summary>	
            <remarks>	
            If the window was occluded the last time  {{EndDraw}} was called, the next time the render target calls {{CheckWindowState}}, it will return D2D1_WINDOW_STATE_OCCLUDED regardless of the current window state. If you want to use CheckWindowState to determine the current window state, you should call CheckWindowState after every EndDraw call and ignore its return value. This will ensure that your next call to CheckWindowState state will return the actual window state. 	
            </remarks>	
            <unmanaged>D2D1_WINDOW_STATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.WindowState.None">
            <summary>	
            The window is not occluded. 	
            </summary>	
            <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.WindowState.Occluded">
            <summary>	
            The window is occluded. 	
            </summary>	
            <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetType">
            <summary>	
            Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.	
            </summary>	
            <remarks>	
            Not every render target supports hardware rendering. For more information, see the {{Render Targets Overview}}.  	
            </remarks>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Default">
            <summary>	
            The render target uses hardware rendering, if available; otherwise, it uses software rendering. 	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Software">
            <summary>	
            The render target uses software rendering only. 	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetType.Hardware">
            <summary>	
            The render target uses hardware rendering only.  	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FeatureLevel">
            <summary>	
            Describes the minimum DirectX support required for hardware rendering by a render target.	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT">
            <summary>	
            Direct2D determines whether the video card provides adequate hardware rendering support. 	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_9">
            <summary>	
            The video card must support DirectX 9. 	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FeatureLevel.Level_10">
            <summary>	
            The video card must support DirectX 10.  	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetUsage">
            <summary>	
            Describes how a render target is remoted and whether it should be GDI-compatible. This enumeration allows a bitwise combination of its member values.	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.None">
            <summary>	
            The render target attempts to use Direct3D command-stream remoting and uses bitmap remoting if stream remoting fails. The render target is not GDI-compatible. 	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.ForceBitmapRemoting">
            <summary>	
            The render target renders content locally and sends it to the terminal services client as a bitmap.  	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetUsage.GdiCompatible">
            <summary>	
            The render target can be used efficiently with GDI. 	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PresentOptions">
            <summary>	
            Describes how a render target behaves when it presents its content. This enumeration allows a bitwise combination of its member values.	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.None">
            <summary>	
            The render target waits until the display refreshes to present and discards the frame upon presenting. 	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.RetainContents">
            <summary>	
            The render target does not discard the frame upon presenting. 	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PresentOptions.Immediately">
            <summary>	
            The render target does not wait until the display refreshes to present. 	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.CompatibleRenderTargetOptions">
            <summary>	
            Specifies additional features supportable by a compatible render target when it is created.  This enumeration allows a bitwise combination of its member values.	
            </summary>	
            <remarks>	
            Use this enumeration when creating a compatible render target with the {{CreateCompatibleRenderTarget}} method. For more information about compatible render targets, see the {{Render Targets Overview}}.  The D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE option may only be requested if the parent render target was created with <see cref="F:SharpDX.Direct2D1.RenderTargetUsage.GdiCompatible"/> (for most render targets) or D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE (for render targets created by the {{CreateCompatibleRenderTarget}} method). 	
            </remarks>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CompatibleRenderTargetOptions.None">
            <summary>	
            The render target supports no additional features. 	
            </summary>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.CompatibleRenderTargetOptions.GdiCompatible">
            <summary>	
            The render target supports interoperability with the Windows Graphics Device Interface  (GDI).  	
            </summary>	
            <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DeviceContextInitializeMode">
            <summary>	
            Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target.	
            </summary>	
            <remarks>	
            Use this enumeration with the <see cref="M:SharpDX.Direct2D1.GdiInteropRenderTarget.GetDC(SharpDX.Direct2D1.DeviceContextInitializeMode)"/> method to specify how the device context is  initialized for GDI rendering. 	
            </remarks>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DeviceContextInitializeMode.Copy">
            <summary>	
            The current contents of the render target are copied to the device context when it is initialized.  	
            </summary>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DeviceContextInitializeMode.Clear">
            <summary>	
            The device context is cleared to transparent black when it is initialized. 	
            </summary>	
            <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DebugLevel">
            <summary>	
            Indicates the type of information provided by the {{Direct2D Debug Layer}}.  	
            </summary>	
            <remarks>	
            To receive debugging messages, you must install the {{Direct2D Debug Layer}}. 	
            </remarks>	
            <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.None">
            <summary>	
            Direct2D does not produce any debugging output.  	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Error">
            <summary>	
            Direct2D sends error messages to the debug layer. 	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Warning">
            <summary>	
            Direct2D sends error messages and warnings to the debug layer. 	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DebugLevel.Information">
            <summary>	
            Direct2D sends error messages, warnings, and additional diagnostic information that can help improve performance to the debug layer.   	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FactoryType">
            <summary>	
            Specifies whether Direct2D provides synchronization for an <see cref="T:SharpDX.Direct2D1.Factory"/> and the resources it creates, so that they may be safely accessed from multiple threads. 	
            </summary>	
            <remarks>	
            When you create a factory, you can specify whether it is multithreaded or singlethreaded. A singlethreaded factory provides no serialization against any other single threaded instance within Direct2D, so this mechanism provides a very large degree of scaling on the CPU. You can also create a multithreaded factory instance. In this case, the factory and all derived objects can be used from any thread, and each render target can be rendered to independently. Direct2D serializes calls to these objects, so a single multithreaded Direct2D instance won't scale as well on the CPU as many single threaded instances. However, the resources can be shared within the multithreaded instance. Note the qualifier "On the CPU": GPUs generally take advantage of fine-grained parallelism more so than CPUs. For example, multithreaded calls from the CPU might still end up being serialized when being sent to the GPU; however, a whole bank of pixel and vertex shaders will run in parallel to perform the rendering.  	
            </remarks>	
            <unmanaged>D2D1_FACTORY_TYPE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryType.SingleThreaded">
            <summary>	
            No synchronization is provided for accessing or writing to the factory or the objects it creates. If the factory or the objects are called from multiple threads, it is up to the application to provide access locking. 	
            </summary>	
            <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryType.MultiThreaded">
            <summary>	
            Direct2D provides synchronization for accessing and writing to the factory and the objects it creates, enabling safe access from multiple threads. 	
            </summary>	
            <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.D2D1">
            <summary>
            D2D1 Functions.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.CreateFactory(SharpDX.Direct2D1.FactoryType,System.Guid,System.Nullable{SharpDX.Direct2D1.FactoryOptions},System.IntPtr@)">
            <summary>	
            Creates a factory object  that can be used to create Direct2D resources.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.Direct2D1.Factory"/> interface provides the starting point for  Direct2D. In general, objects created from a single instance of a factory object can be used with other resources created from that instance, but not with resources created by other factory instances.    	
            </remarks>	
            <param name="factoryType">The threading model of the factory and the resources it creates. </param>
            <param name="riid">A reference to the IID of <see cref="T:SharpDX.Direct2D1.Factory"/> that is obtained by using __uuidof(ID2D1Factory). </param>
            <param name="factoryOptionsRef">The level of detail provided to the debugging layer. </param>
            <param name="iFactoryRef">When this method returns, contains the address to a reference to the new factory. </param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT D2D1CreateFactory([In] D2D1_FACTORY_TYPE factoryType,[In] GUID* riid,[In, Optional] const D2D1_FACTORY_OPTIONS* pFactoryOptions,[Out] void** ppIFactory)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.MakeRotateMatrix(System.Single,System.Drawing.PointF,SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Creates a rotation transformation that rotates by the specified angle about the specified point.	
            </summary>	
            <remarks>	
            Rotation occurs in the plane of the 2-D surface. 	
            </remarks>	
            <param name="angle">The clockwise rotation angle, in degrees.  </param>
            <param name="center">The point about which to rotate. </param>
            <param name="matrix">When this method returns, contains the new rotation transformation. You must allocate storage for this parameter.   </param>
            <unmanaged>void D2D1MakeRotateMatrix([In] float angle,[In] D2D1_POINT_2F center,[Out] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.MakeSkewMatrix(System.Single,System.Single,System.Drawing.PointF,SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point. 	
            </summary>	
            <param name="angleX">The x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. </param>
            <param name="angleY">The y-axis skew angle, which is measured in degrees counterclockwise from the x-axis. </param>
            <param name="center">The center point of the skew operation. </param>
            <param name="matrix">When this method returns, contains the rotation transformation. You must allocate storate for this parameter. </param>
            <unmanaged>void D2D1MakeSkewMatrix([In] float angleX,[In] float angleY,[In] D2D1_POINT_2F center,[Out] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.IsMatrixInvertible(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Indicates whether the specified matrix is invertible.	
            </summary>	
            <param name="matrix">The matrix to test. </param>
            <returns>BOOLtrue if the matrix was inverted; otherwise, false. </returns>
            <unmanaged>BOOL D2D1IsMatrixInvertible([In] const D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.D2D1.InvertMatrix(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Attempts to invert the specified matrix.	
            </summary>	
            <param name="matrix">The matrix to invert. </param>
            <returns>BOOLtrue if the matrix was inverted; otherwise, false. </returns>
            <unmanaged>BOOL D2D1InvertMatrix([InOut] D2D1_MATRIX_3X2_F* matrix)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GradientStopCollection">
            <summary>	
            Represents an collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> objects for linear and radial gradient brushes.	
            </summary>	
            <unmanaged>ID2D1GradientStopCollection</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetGradientStopCount">
            <summary>	
            Retrieves the number of gradient stops in the collection.	
            </summary>	
            <returns>UINT32The number of gradient stops in the collection. </returns>
            <unmanaged>int ID2D1GradientStopCollection::GetGradientStopCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetGradientStops(SharpDX.Direct2D1.GradientStop[],System.Int32)">
            <summary>	
            Copies the gradient stops from the collection into an array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures.	
            </summary>	
            <remarks>	
            Gradient stops are copied in order of position, starting with the gradient stop with the smallest position value and progressing to the gradient stop with the largest position value. 	
            </remarks>	
            <param name="gradientStops">A reference to a one-dimensional array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures. When this method returns, the array contains copies of the collection's gradient stops. You must allocate the memory for this array. </param>
            <param name="gradientStopsCount">A value indicating the number of gradient stops to copy. If the value is less than the number of gradient stops in the collection, the remaining gradient stops are omitted. If the value is larger than the number of gradient stops in the collection, the extra gradient stops are set to NULL. To obtain the number of gradient stops in the collection, use the {{GetGradientStopCount}} method. </param>
            <unmanaged>void ID2D1GradientStopCollection::GetGradientStops([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[None] int gradientStopsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetColorInterpolationGamma">
            <summary>	
            Indicates the gamma space in which the gradient stops are interpolated. 	
            </summary>	
            <returns>D2D1_GAMMAThe gamma space in which the gradient stops are interpolated.  </returns>
            <unmanaged>D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.GetExtendMode">
            <summary>	
            Indicates the behavior of the gradient outside the normalized gradient range. 	
            </summary>	
            <returns>D2D1_EXTEND_MODEThe behavior of the gradient outside the [0,1] normalized gradient range. </returns>
            <unmanaged>D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[])">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, a Gamma StandardRgb, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color Gamma.StandardRgb, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.Gamma)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and ExtendMode.Clamp.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GradientStopCollection.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.GradientStop[],SharpDX.Direct2D1.Gamma,SharpDX.Direct2D1.ExtendMode)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> from the specified gradient stops, color interpolation gamma, and extend mode.  	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <unmanaged>HRESULT CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[None] UINT gradientStopsCount,[None] D2D1_GAMMA colorInterpolationGamma,[None] D2D1_EXTEND_MODE extendMode,[Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.GradientStopCount">
            <summary>	
            Retrieves the number of gradient stops in the collection.	
            </summary>	
            <unmanaged>int ID2D1GradientStopCollection::GetGradientStopCount()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.ColorInterpolationGamma">
            <summary>	
            Indicates the gamma space in which the gradient stops are interpolated. 	
            </summary>	
            <unmanaged>D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GradientStopCollection.ExtendMode">
            <summary>	
            Indicates the behavior of the gradient outside the normalized gradient range. 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SolidColorBrush">
            <summary>	
            Paints an area with a solid color. 	
            </summary>	
            <unmanaged>ID2D1SolidColorBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.SetColor(SharpDX.Color4)">
            <summary>	
            Specifies the color of this solid color brush. 	
            </summary>	
            <remarks>	
            To help create colors, Direct2D provides the {{ColorF}} class. It offers several helper methods for creating colors and provides a set or predefined colors.  	
            </remarks>	
            <param name="color">The color of this solid color brush. </param>
            <unmanaged>void ID2D1SolidColorBrush::SetColor([In] const D2D1_COLOR_F* color)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.GetColor">
            <summary>	
            Retrieves the color of the solid color brush.	
            </summary>	
            <returns>The color of this solid color brush. </returns>
            <unmanaged>D2D1_COLOR_F ID2D1SolidColorBrush::GetColor()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Color4)">
            <summary>	
            Creates a new <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.SolidColorBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Color4,System.Nullable{SharpDX.Direct2D1.BrushProperties})">
            <summary>	
            Creates a new <see cref="T:SharpDX.Direct2D1.SolidColorBrush"/> that has the specified color and opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="brushProperties">The base opacity of the brush.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.SolidColorBrush.Color">
            <summary>	
            Retrieves the color of the solid color brush.	
            </summary>	
            <unmanaged>D2D1_COLOR_F ID2D1SolidColorBrush::GetColor()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LinearGradientBrush">
            <summary>	
            Paints an area with a linear gradient.  	
            </summary>	
            <unmanaged>ID2D1LinearGradientBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.SetStartPoint(System.Drawing.PointF)">
            <summary>	
            Sets the starting coordinates of the linear gradient in the brush's coordinate space.  	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <param name="startPoint">The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space. </param>
            <unmanaged>void ID2D1LinearGradientBrush::SetStartPoint([None] D2D1_POINT_2F startPoint)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.SetEndPoint(System.Drawing.PointF)">
            <summary>	
            Sets the ending coordinates of the linear gradient in the brush's coordinate space.	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <param name="endPoint">The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space. </param>
            <unmanaged>void ID2D1LinearGradientBrush::SetEndPoint([None] D2D1_POINT_2F endPoint)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetStartPoint">
            <summary>	
            Retrieves the starting coordinates of the linear gradient. 	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <returns>The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space. </returns>
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetEndPoint">
            <summary>	
            Retrieves the ending coordinates of the linear gradient. 	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <returns>The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space. </returns>
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.GetGradientStopCollection(SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> associated with this linear gradient brush.	
            </summary>	
            <remarks>	
            <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> contains an array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures and information, such as the extend mode and the color interpolation mode. 	
            </remarks>	
            <param name="gradientStopCollection">The  <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> object associated with this linear gradient brush object. This parameter is passed uninitialized.  </param>
            <unmanaged>void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.LinearGradientBrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
            <unmanaged>HRESULT CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.LinearGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.LinearGradientBrushProperties,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
            <unmanaged>HRESULT CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.StartPoint">
            <summary>	
            Retrieves the starting coordinates of the linear gradient. 	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.EndPoint">
            <summary>	
            Retrieves the ending coordinates of the linear gradient. 	
            </summary>	
            <remarks>	
            The start point and end point are described in the brush's space and are mapped to the render target when the brush is used.  If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed. 	
            </remarks>	
            <unmanaged>D2D1_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.LinearGradientBrush.GradientStopCollection">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> associated with this linear gradient brush.	
            </summary>	
            <remarks>	
            <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> contains an array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures and information, such as the extend mode and the color interpolation mode. 	
            </remarks>	
            <unmanaged>void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RadialGradientBrush">
            <summary>	
            Paints an area with a radial gradient.	
            </summary>	
            <unmanaged>ID2D1RadialGradientBrush</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetCenter(System.Drawing.PointF)">
            <summary>	
            Specifies the center of the gradient ellipse in the brush's coordinate space. 	
            </summary>	
            <param name="center">The center of the gradient ellipse, in the brush's coordinate space. </param>
            <unmanaged>void ID2D1RadialGradientBrush::SetCenter([None] D2D1_POINT_2F center)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetGradientOriginOffset(System.Drawing.PointF)">
            <summary>	
            Specifies the offset of the gradient origin relative to the gradient ellipse's center.	
            </summary>	
            <param name="gradientOriginOffset">The offset of the gradient origin from the center of the gradient ellipse. </param>
            <unmanaged>void ID2D1RadialGradientBrush::SetGradientOriginOffset([None] D2D1_POINT_2F gradientOriginOffset)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetRadiusX(System.Single)">
            <summary>	
            Specifies the x-radius of the gradient ellipse, in the brush's coordinate space.	
            </summary>	
            <param name="radiusX">The x-radius of the gradient ellipse. This value is in the brush's coordinate space. </param>
            <unmanaged>void ID2D1RadialGradientBrush::SetRadiusX([None] float radiusX)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.SetRadiusY(System.Single)">
            <summary>	
            Specifies the y-radius of the gradient ellipse, in the brush's coordinate space. 	
            </summary>	
            <param name="radiusY">The y-radius of the gradient ellipse. This value is in the brush's coordinate space. </param>
            <unmanaged>void ID2D1RadialGradientBrush::SetRadiusY([None] float radiusY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetCenter">
            <summary>	
            Retrieves the center of the gradient ellipse.  	
            </summary>	
            <returns>The center of the gradient ellipse. This value is expressed in the brush's coordinate space. </returns>
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetCenter()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetGradientOriginOffset">
            <summary>	
            Retrieves the offset of the gradient origin relative to the gradient ellipse's center. 	
            </summary>	
            <returns>The offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space. </returns>
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetRadiusX">
            <summary>	
            Retrieves the x-radius of the gradient ellipse. 	
            </summary>	
            <returns>FLOATThe x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space. </returns>
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusX()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetRadiusY">
            <summary>	
            Retrieves the y-radius of the gradient ellipse. 	
            </summary>	
            <returns>FLOATThe y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space. </returns>
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusY()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.GetGradientStopCollection(SharpDX.Direct2D1.GradientStopCollection@)">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> associated with this radial gradient brush object.	
            </summary>	
            <remarks>	
            <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> contains an array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures and additional information, such as the extend mode and the color interpolation mode. 	
            </remarks>	
            <param name="gradientStopCollection">The  <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> object associated with this linear gradient brush object. This parameter is passed uninitialized. </param>
            <unmanaged>void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties@,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties,SharpDX.Direct2D1.BrushProperties,SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RadialGradientBrush.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.RadialGradientBrushProperties@,System.Nullable{SharpDX.Direct2D1.BrushProperties},SharpDX.Direct2D1.GradientStopCollection)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/> that contains the specified gradient stops and has the specified transform and base opacity. 	
            </summary>
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="brushProperties">The transform and base opacity of the new brush, or NULL. If this value is NULL, the brush defaults to a base opacity of 1.0f and the identity matrix as its transformation.</param>
            <param name="gradientStopCollection">A collection of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
            <unmanaged>HRESULT CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.Center">
            <summary>	
            Retrieves the center of the gradient ellipse.  	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetCenter()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.GradientOriginOffset">
            <summary>	
            Retrieves the offset of the gradient origin relative to the gradient ellipse's center. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.RadiusX">
            <summary>	
            Retrieves the x-radius of the gradient ellipse. 	
            </summary>	
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusX()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.RadiusY">
            <summary>	
            Retrieves the y-radius of the gradient ellipse. 	
            </summary>	
            <unmanaged>float ID2D1RadialGradientBrush::GetRadiusY()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.RadialGradientBrush.GradientStopCollection">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> associated with this radial gradient brush object.	
            </summary>	
            <remarks>	
            <see cref="T:SharpDX.Direct2D1.GradientStopCollection"/> contains an array of <see cref="T:SharpDX.Direct2D1.GradientStop"/> structures and additional information, such as the extend mode and the color interpolation mode. 	
            </remarks>	
            <unmanaged>void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.StrokeStyle">
            <summary>	
            Describes the caps, miter limit, line join, and dash information for a stroke.	
            </summary>	
            <unmanaged>ID2D1StrokeStyle</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetStartCap">
            <summary>	
            Retrieves the type of shape used at the beginning of a stroke.  	
            </summary>	
            <returns>The type of shape used at the beginning of a stroke. </returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetEndCap">
            <summary>	
            Retrieves the type of shape used at the end of a stroke. 	
            </summary>	
            <returns>The type of shape used at the end of a stroke. </returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashCap">
            <summary>	
            Gets a value that specifies how the ends of each dash are drawn. 	
            </summary>	
            <returns>A value that specifies how the ends of each dash are drawn. </returns>
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetMiterLimit">
            <summary>	
            Retrieves the limit on the ratio of the miter length to half the stroke's thickness. 	
            </summary>	
            <returns>FLOATA positive number greater than or equal to 1.0f that describes the limit on the ratio of the miter length to half the stroke's thickness. </returns>
            <unmanaged>float ID2D1StrokeStyle::GetMiterLimit()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetLineJoin">
            <summary>	
            Retrieves the type of joint used at the vertices of a shape's outline.  	
            </summary>	
            <returns>A value that specifies the type of joint used at the vertices of a shape's outline. </returns>
            <unmanaged>D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashOffset">
            <summary>	
            Retrieves a value that specifies how far in the dash sequence the stroke will start.  	
            </summary>	
            <returns>FLOATA value that specifies how far in the dash sequence the stroke will start.  </returns>
            <unmanaged>float ID2D1StrokeStyle::GetDashOffset()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashStyle">
            <summary>	
            Gets a value that describes the stroke's dash pattern. 	
            </summary>	
            <remarks>	
            If a custom dash style is specified, the dash pattern is described by the dashes array, which can be retrieved by calling the {{GetDashes}} method. 	
            </remarks>	
            <returns>A value that describes the predefined dash pattern used, or <see cref="F:SharpDX.Direct2D1.DashStyle.Custom"/> if a custom dash style is used. </returns>
            <unmanaged>D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashesCount">
            <summary>	
            Retrieves the number of entries in the dashes array. 	
            </summary>	
            <returns>UINT32The number of entries in the dashes array if the stroke is dashed; otherwise, 0. </returns>
            <unmanaged>int ID2D1StrokeStyle::GetDashesCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.GetDashes(System.Single[],System.Int32)">
            <summary>	
            Copies the dash pattern to the specified array. 	
            </summary>	
            <remarks>	
            The dashes are specified in units that are a multiple of the stroke width, with subsequent members of the array indicating the dashes and gaps between dashes: the first entry indicates a filled dash, the second a gap, and so on.  	
            </remarks>	
            <param name="dashes">A reference to an array that will receive the dash pattern. The array must be able to contain at least as many elements as specified by dashesCount. You must allocate storage for this array. </param>
            <param name="dashesCount">The number of dashes to copy. If this value is less than the number of dashes in the stroke style's dashes array, the returned dashes are truncated to dashesCount. If this value is greater than the number of dashes in the stroke style's dashes array, the extra dashes are set to 0.0f. To obtain the actual number of dashes in the stroke style's dashes array, use the {{GetDashesCount}} method.  </param>
            <unmanaged>void ID2D1StrokeStyle::GetDashes([Out, Buffer] float* dashes,[None] int dashesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.StrokeStyleProperties)">
            <summary>
            Creates an <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">a definition for this render target</param>
        </member>
        <member name="M:SharpDX.Direct2D1.StrokeStyle.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.StrokeStyleProperties,System.Single[])">
            <summary>
            Creates an <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke.</param>
            <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width. </param>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.StartCap">
            <summary>	
            Retrieves the type of shape used at the beginning of a stroke.  	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.EndCap">
            <summary>	
            Retrieves the type of shape used at the end of a stroke. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashCap">
            <summary>	
            Gets a value that specifies how the ends of each dash are drawn. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.MiterLimit">
            <summary>	
            Retrieves the limit on the ratio of the miter length to half the stroke's thickness. 	
            </summary>	
            <unmanaged>float ID2D1StrokeStyle::GetMiterLimit()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.LineJoin">
            <summary>	
            Retrieves the type of joint used at the vertices of a shape's outline.  	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashOffset">
            <summary>	
            Retrieves a value that specifies how far in the dash sequence the stroke will start.  	
            </summary>	
            <unmanaged>float ID2D1StrokeStyle::GetDashOffset()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashStyle">
            <summary>	
            Gets a value that describes the stroke's dash pattern. 	
            </summary>	
            <remarks>	
            If a custom dash style is specified, the dash pattern is described by the dashes array, which can be retrieved by calling the {{GetDashes}} method. 	
            </remarks>	
            <unmanaged>D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.StrokeStyle.DashesCount">
            <summary>	
            Retrieves the number of entries in the dashes array. 	
            </summary>	
            <unmanaged>int ID2D1StrokeStyle::GetDashesCount()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Geometry">
            <summary>	
            Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes.  Interfaces that inherit from ID2D1Geometry define specific shapes.	
            </summary>	
            <unmanaged>ID2D1Geometry</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Geometry.DefaultFlatteningTolerance">
            <summary>
            Default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Geometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetBounds(System.Nullable{SharpDX.Direct2D1.Matrix3x2})">
            <summary>	
            Retrieves the bounds of the geometry.	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry before calculating its bounds, or NULL. </param>
            <returns>When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left &gt; bounds.right. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="strokeStyle">The style of the stroke that widens the geometry. </param>
            <param name="worldTransform">A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="worldTransform">The transform to apply to the stroked geometry.  </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment, or NULL. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:SharpDX.Direct2D1.GeometryRelation.IsContained"/> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:SharpDX.Direct2D1.GeometryRelation"/>. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify_(SharpDX.Direct2D1.GeometrySimplificationOption,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves. </param>
            <param name="worldTransform">The transform to apply to the simplified geometry, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Geometry::Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate_(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance. 	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink"/> to which the tessellated is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Geometry::Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine_(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance. </param>
            <param name="combineMode">The type of combine operation to perform. </param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.  </param>
            <param name="geometrySink">The result of the combine operation. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Geometry::CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline_(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties:   The output geometry contains no transverse intersections; that is, segments may touch, but they never cross. The outermost figures in the output geometry are all oriented counterclockwise.  The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.  Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
             	
            </remarks>	
            <param name="worldTransform">The transform to apply to the geometry outline, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Geometry::Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry before computing its area, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single)">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <param name="worldTransform">The transform to apply to the geometry before calculating its length, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.Drawing.PointF@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="worldTransform">The transform to apply to the geometry before calculating the specified point and tangent, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen_(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,System.IntPtr)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry. </param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL. </param>
            <param name="worldTransform">The transform to apply to the geometry after widening it, or NULL. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Geometry::Widen([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Combine(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.CombineMode,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Combines this geometry with the specified geometry and stores the result in an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.  	
            </summary>	
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The result of the combine operation.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[None] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:SharpDX.Direct2D1.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:SharpDX.Direct2D1.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Compare(SharpDX.Direct2D1.Geometry,System.Single)">
            <summary>	
            Describes the intersection between this geometry and the specified geometry. The comparison is performed by using the specified flattening tolerance.	
            </summary>	
            <remarks>	
            When interpreting the returned relation value, it is important to remember that the member <see cref="F:SharpDX.Direct2D1.GeometryRelation.IsContained" /> of the  D2D1_GEOMETRY_RELATION enumeration type means that this geometry is contained  inside inputGeometry, not that this geometry contains inputGeometry.  For  more information about how to interpret other possible return values, see <see cref="T:SharpDX.Direct2D1.GeometryRelation" />. 	
            </remarks>	
            <param name="inputGeometry">The geometry to test.  </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to a value that describes how this geometry is related to inputGeometry. You must allocate storage for this parameter.   </returns>
            <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D1_MATRIX_3X2_F* inputGeometryTransform,[None] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeArea(System.Single)">
            <summary>	
            Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this this method returns, contains a reference to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* area)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputeLength(System.Single)">
            <summary>	
            Calculates the length of the geometry as though each segment were unrolled into a line. 	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a reference to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] float* length)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Drawing.PointF@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.ComputePointAtLength(System.Single,System.Single,System.Drawing.PointF@)">
            <summary>	
            Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="unitTangentVector">Whenthis method returns, contains a reference to the tangent vector at the specified distance along the geometry. If the geometry is empty,  this vector contains NaN as its x and y values. You must allocate storage for this parameter. </param>
            <returns>The location at the specified distance along the geometry. If the geometry is empty,  this point contains NaN as its x and y values. </returns>
            <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([None] float length,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out, Optional] D2D1_POINT_2F* point,[Out, Optional] D2D1_POINT_2F* unitTangentVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.PointF,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.FillContainsPoint(System.Drawing.Point,SharpDX.Direct2D1.Matrix3x2,System.Single)">
            <summary>	
            Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance. 	
            </summary>	
            <param name="point">The point to test. </param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment, or NULL. </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains a bool value that is true if the area filled by the geometry contains point; otherwise, false.You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([None] D2D1_POINT_2F point,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetBounds">
            <summary>	
            Retrieves the bounds of the geometry.	
            </summary>	
            <returns>When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left &gt; bounds.right. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.GetWidenedBounds(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Single)">
            <summary>	
            Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline. </param>
            <param name="strokeStyle">The style of the stroke that widens the geometry. </param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.  </param>
            <returns>When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] D2D1_RECT_F* bounds)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Outline(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Computes the outline of the geometry and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <remarks>	
            The {{Outline}} method allows the caller to produce a geometry with an equivalent fill to the input geometry, with the following additional properties: The output geometry contains no transverse intersections; that is, segments may touch, but they never cross.The outermost figures in the output geometry are all oriented counterclockwise. The output geometry is fill-mode invariant; that is, the fill of the geometry does not depend on the choice of the fill mode. For more information about the fill mode, see <see cref="T:SharpDX.Direct2D1.FillMode"/>.Additionally, the  {{Outline}} method can be useful in removing redundant portions of said geometries to simplify complex geometries. It can also be useful in combination with <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> to create unions among several geometries simultaneously.	
            </remarks>	
            <param name="worldTransform">The transform to apply to the geometry outline, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the geometry's transformed outline is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Outline([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Simplify(SharpDX.Direct2D1.GeometrySimplificationOption,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/>.	
            </summary>	
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="geometrySink"> The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the simplified geometry is appended. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Simplify([None] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.PointF,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.StrokeContainsPoint(System.Drawing.Point,System.Single,SharpDX.Direct2D1.StrokeStyle,SharpDX.Direct2D1.Matrix3x2,System.Single)">
            <summary>	
            Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. 	
            </summary>	
            <param name="point">The point to test for containment. </param>
            <param name="strokeWidth">The thickness of the stroke to apply. </param>
            <param name="strokeStyle">The style of stroke to apply. </param>
            <param name="transform">The transform to apply to the stroked geometry.  </param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside.  Smaller values produce more accurate results but cause slower execution. </param>
            <returns>When this method returns, contains a boolean value set to true if the geometry's stroke contains the specified point; otherwise, false. You must allocate storage for this parameter. </returns>
            <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([None] D2D1_POINT_2F point,[None] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink" /> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(System.Single,SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Tessellate(System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.TessellationSink)">
            <summary>	
            Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance	
            </summary>	
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. </param>
            <param name="tessellationSink">The <see cref="T:SharpDX.Direct2D1.TessellationSink"/> to which the tessellated is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Tessellate([In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Geometry.Widen(System.Single,SharpDX.Direct2D1.StrokeStyle,System.Nullable{SharpDX.Direct2D1.Matrix3x2},System.Single,SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Widens the geometry by the specified stroke and writes the result to an <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> after it has been transformed by the specified matrix and flattened using the specified tolerance.	
            </summary>	
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it, or NULL.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
            <param name="geometrySink">The <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySink"/> to which the widened geometry is appended.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Widen([None] FLOAT strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D1_MATRIX_3X2_F* worldTransform,[None] FLOAT flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Geometry.FlatteningTolerance">
            <summary>
            Get or set the default flattening tolerance used for all methods that are not explicitly using it. Default is set to 0.25f.
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.RectangleGeometry">
            <summary>	
            Describes a two-dimensional rectangle.  	
            </summary>	
            <unmanaged>ID2D1RectangleGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.GetRectangle(SharpDX.RectangleF@)">
            <summary>	
            Retrieves the rectangle that describes the rectangle geometry's dimensions.	
            </summary>	
            <param name="rect">Contains a reference to a rectangle that describes the rectangle geometry's dimensions when this method returns. You must allocate storage for this parameter.  </param>
            <unmanaged>void ID2D1RectangleGeometry::GetRect([Out] D2D1_RECT_F* rect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RectangleGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.RectangleF)">
            <summary>	
             Creates an <see cref="T:SharpDX.Direct2D1.RectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="rectangle">The coordinates of the rectangle geometry. </param>
        </member>
        <member name="P:SharpDX.Direct2D1.RectangleGeometry.Rectangle">
            <summary>	
            Retrieves the rectangle that describes the rectangle geometry's dimensions.	
            </summary>	
            <unmanaged>void ID2D1RectangleGeometry::GetRect([Out] D2D1_RECT_F* rect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RoundedRectangleGeometry">
            <summary>	
            Describes a rounded rectangle. 	
            </summary>	
            <unmanaged>ID2D1RoundedRectangleGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RoundedRectangleGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.GetRoundedRect(SharpDX.Direct2D1.RoundedRect@)">
            <summary>	
            Retrieves a rounded rectangle that describes this rounded rectangle geometry. 	
            </summary>	
            <param name="roundedRect">A reference that receives a rounded rectangle that describes this rounded rectangle geometry. You must allocate storage for this parameter.  </param>
            <unmanaged>void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RoundedRectangleGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RoundedRect)">
            <summary>	
             Creates an <see cref="T:SharpDX.Direct2D1.RoundedRectangleGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.RoundedRectangleGeometry.RoundedRect">
            <summary>	
            Retrieves a rounded rectangle that describes this rounded rectangle geometry. 	
            </summary>	
            <unmanaged>void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.EllipseGeometry">
            <summary>	
            Represents an ellipse. 	
            </summary>	
            <unmanaged>ID2D1EllipseGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.EllipseGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.GetEllipse(SharpDX.Direct2D1.Ellipse@)">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct2D1.Ellipse"/> structure that describes this ellipse geometry. 	
            </summary>	
            <param name="ellipse">When this method returns, contains the <see cref="T:SharpDX.Direct2D1.Ellipse"/> that describes the size and position of the ellipse. You must allocate storage for this parameter. </param>
            <unmanaged>void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.EllipseGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.Ellipse)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.EllipseGeometry"/>. 	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="ellipse">A value that describes the center point, x-radius, and y-radius of the ellipse geometry.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.EllipseGeometry.Ellipse">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct2D1.Ellipse"/> structure that describes this ellipse geometry. 	
            </summary>	
            <unmanaged>void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometryGroup">
            <summary>	
            Represents a composite geometry, composed of other <see cref="T:SharpDX.Direct2D1.Geometry"/> objects. 	
            </summary>	
            <unmanaged>ID2D1GeometryGroup</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetFillMode">
            <summary>	
            Indicates how the intersecting areas of the geometries contained in this geometry group are combined.	
            </summary>	
            <returns>A value that indicates how the intersecting areas of the geometries contained in this geometry group are combined.   </returns>
            <unmanaged>D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometryCount">
            <summary>	
            Indicates the number of geometry objects in the geometry group. 	
            </summary>	
            <returns>UINT32The number of geometries in the <see cref="T:SharpDX.Direct2D1.GeometryGroup"/>. </returns>
            <unmanaged>int ID2D1GeometryGroup::GetSourceGeometryCount()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometries(SharpDX.Direct2D1.Geometry[],System.Int32)">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <param name="geometries">When this method returns, contains the address of a reference to an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter. If the array is NULL, then this method performs no operation. You must allocate the memory for this array. </param>
            <param name="geometriesCount">A value indicating the number of geometries to return in the geometries array. If this value is less than the number of geometries in the geometry group, the remaining geometries are omitted. If this value is larger than the number of geometries in the geometry group, the extra geometries are set to NULL. To obtain the number of geometries currently in the geometry group, use the {{GetSourceGeometryCount}} method. </param>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.FillMode,SharpDX.Direct2D1.Geometry[])">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GeometryGroup"/>, which is an object that holds other geometries.	
            </summary>	
            <remarks>	
            Geometry groups are a convenient way to group several geometries simultaneously so all figures of several distinct geometries are concatenated into one. To create a  <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> object, call  the CreateGeometryGroup method on the <see cref="T:SharpDX.Direct2D1.Factory"/> object, passing in the fillMode with possible values of   <see cref="F:SharpDX.Direct2D1.FillMode.Alternate"/> (alternate) and D2D1_FILL_MODE_WINDING, an array of geometry objects to add to the geometry group, and the number of elements in this array. 	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="fillMode">A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry. </param>
            <param name="geometries">An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the geometriesCount parameter.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometry">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometryGroup.GetSourceGeometry(System.Int32)">
            <summary>	
            Retrieves the geometries in the geometry group. 	
            </summary>	
            <remarks>	
            The returned geometries are referenced and  counted, and the caller must release them. 	
            </remarks>	
            <param name="geometriesCount">A value indicating the number of geometries to return in the geometries array. If this value is less than the number of geometries in the geometry group, the remaining geometries are omitted. If this value is larger than the number of geometries in the geometry group, the extra geometries are set to NULL. To obtain the number of geometries currently in the geometry group, use the {{GetSourceGeometryCount}} method. </param>
            <returns>an array of geometries to be filled by this method. The length of the array is specified by the geometryCount parameter.</returns>
            <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GeometryGroup.FillMode">
            <summary>	
            Indicates how the intersecting areas of the geometries contained in this geometry group are combined.	
            </summary>	
            <unmanaged>D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.GeometryGroup.SourceGeometryCount">
            <summary>	
            Indicates the number of geometry objects in the geometry group. 	
            </summary>	
            <unmanaged>int ID2D1GeometryGroup::GetSourceGeometryCount()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TransformedGeometry">
            <summary>	
            Represents a geometry that has been transformed. 	
            </summary>	
            <unmanaged>ID2D1TransformedGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.GetSourceGeometry(SharpDX.Direct2D1.Geometry@)">
            <summary>	
            Retrieves the source geometry of this transformed geometry object. 	
            </summary>	
            <param name="sourceGeometry">When this method returns, contains a reference to a reference to the source geometry for this transformed geometry object. This parameter is passed uninitialized. </param>
            <unmanaged>void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.GetTransform(SharpDX.Direct2D1.Matrix3x2@)">
            <summary>	
            Retrieves the matrix used to transform the <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> object's source geometry. 	
            </summary>	
            <param name="transform">A reference that receives the matrix used to transform the <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> object's source geometry. You must allocate storage for this parameter.   </param>
            <unmanaged>void ID2D1TransformedGeometry::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TransformedGeometry.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Matrix3x2)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/>.
            </summary>
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="geometrySource"></param>
            <param name="matrix3X2"></param>
        </member>
        <member name="P:SharpDX.Direct2D1.TransformedGeometry.SourceGeometry">
            <summary>	
            Retrieves the source geometry of this transformed geometry object. 	
            </summary>	
            <unmanaged>void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.TransformedGeometry.Transform">
            <summary>	
            Retrieves the matrix used to transform the <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> object's source geometry. 	
            </summary>	
            <unmanaged>void ID2D1TransformedGeometry::GetTransform([Out] D2D1_MATRIX_3X2_F* transform)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySink">
            <summary>	
            Describes a geometric path that does not contain quadratic bezier curves or arcs. 	
            </summary>	
            <unmanaged>ID2D1SimplifiedGeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetFillMode(SharpDX.Direct2D1.FillMode)">
            <summary>	
            Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.  	
            </summary>	
            <remarks>	
            The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call SetFillMode before the first call to {{BeginFigure}}. Not doing will put the geometry sink in an error state. 	
            </remarks>	
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
            <unmanaged>void SetFillMode([None] D2D1_FILL_MODE fillMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.SetSegmentFlags(SharpDX.Direct2D1.PathSegment)">
            <summary>	
            Specifies stroke and join options to be applied to new segments added to the geometry sink. 	
            </summary>	
            <remarks>	
            After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.     	
            </remarks>	
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
            <unmanaged>void SetSegmentFlags([None] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.BeginFigure(System.Drawing.PointF,SharpDX.Direct2D1.FigureBegin)">
            <summary>	
            Starts a new figure at the specified point. 	
            </summary>	
            <remarks>	
            If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail.	
            </remarks>	
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
            <unmanaged>void BeginFigure([None] D2D1_POINT_2F startPoint,[None] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.AddLines(System.Drawing.PointF[])">
            <summary>	
             Creates a sequence of lines using the specified points and adds them to the geometry sink.	
            </summary>	
            <param name="ointsRef">A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.   </param>
            <unmanaged>void AddLines([In, Buffer] const D2D1_POINT_2F* points,[None] UINT pointsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.AddBeziers(SharpDX.Direct2D1.BezierSegment[])">
            <summary>	
            Creates a sequence of cubic Bezier curves and adds them to the geometry sink. 	
            </summary>	
            <param name="beziers">A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
            <unmanaged>void AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.EndFigure(SharpDX.Direct2D1.FigureEnd)">
            <summary>	
             Ends the current figure; optionally, closes it.	
            </summary>	
            <remarks>	
            Calling this method without a matching call to {{BeginFigure}} places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the {{Close}} method is called.	
            </remarks>	
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by {{BeginFigure}}.</param>
            <unmanaged>void EndFigure([None] D2D1_FIGURE_END figureEnd)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySink.Close">
            <summary>	
            Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state. 	
            </summary>	
            <remarks>	
            Do not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one {{EndFigure}} call for each call to {{BeginFigure}}.After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction.	
            </remarks>	
            <unmanaged>HRESULT Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySink">
            <summary>	
            Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves. 	
            </summary>	
            <unmanaged>ID2D1GeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddLine(System.Drawing.PointF)">
            <summary>	
            Creates a line segment between the current point and the specified end point and adds it to the geometry sink. 	
            </summary>	
            <param name="point">The end point of the line to draw.</param>
            <unmanaged>void AddLine([None] D2D1_POINT_2F point)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddBezier(SharpDX.Direct2D1.BezierSegment)">
            <summary>	
             Creates  a cubic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control points and endpoint of the Bezier curve to add. </param>
            <unmanaged>void AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddQuadraticBezier(SharpDX.Direct2D1.QuadraticBezierSegment)">
            <summary>	
            Creates  a quadratic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control point and the endpoint of the quadratic Bezier curve to add.</param>
            <unmanaged>void AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddQuadraticBeziers(SharpDX.Direct2D1.QuadraticBezierSegment[])">
            <summary>	
            Adds a sequence of quadratic Bezier segments as an array in a single call.	
            </summary>	
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
            <unmanaged>void AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySink.AddArc(SharpDX.Direct2D1.ArcSegment)">
            <summary>	
            Adds a single arc to the path geometry.	
            </summary>	
            <param name="arc">The arc segment to add to the figure.</param>
            <unmanaged>void AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSink">
            <summary>	
            Populates an <see cref="T:SharpDX.Direct2D1.Mesh"/> object with triangles. 	
            </summary>	
            <unmanaged>ID2D1TessellationSink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSink.AddTriangles(SharpDX.Direct2D1.Triangle[])">
            <summary>	
            Copies the specified triangles to the sink.  	
            </summary>	
            <param name="triangles">An array of <see cref="T:SharpDX.Direct2D1.Triangle"/> structures that describe the triangles to add to the sink.</param>
            <unmanaged>void AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[None] UINT trianglesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSink.Close">
            <summary>	
             Closes the sink.	
            </summary>	
            <unmanaged>HRESULT Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PathGeometry">
            <summary>	
            Represents a complex shape that may be composed of arcs, curves, and lines.  	
            </summary>	
            <unmanaged>ID2D1PathGeometry</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.PathGeometry"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Open">
            <summary>	
            Retrieves the geometry sink that is used to populate the path geometry with figures and segments. 	
            </summary>	
            <remarks>	
            Because path geometries are immutable and can only be populated once, it is an error to call Open on a path geometry more than once. Note that the fill mode defaults to <see cref="F:SharpDX.Direct2D1.FillMode.Alternate"/>. To set the fill mode, call {{SetFillMode}} before the first call to {{BeginFigure}}. Failure to do so will put the geometry sink in an error state.  	
            </remarks>	
            <returns>When this method returns, geometrySink contains the address of a reference to the geometry sink that is used to populate the path geometry with figures and segments. This parameter is passed uninitialized. </returns>
            <unmanaged>HRESULT ID2D1PathGeometry::Open([Out] ID2D1GeometrySink** geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Stream_(System.IntPtr)">
            <summary>	
            Copies the contents of the path geometry to the specified <see cref="T:SharpDX.Direct2D1.GeometrySink"/>.	
            </summary>	
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1PathGeometry::Stream([In] ID2D1GeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.GetSegmentCount(System.Int32@)">
            <summary>	
            Retrieves the number of segments in the path geometry. 	
            </summary>	
            <param name="count">A reference that receives the number of segments in the path geometry when this method returns. You must allocate storage for this parameter.    </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1PathGeometry::GetSegmentCount([Out] int* count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.GetFigureCount(System.Int32@)">
            <summary>	
            Retrieves the number of figures in the path geometry. 	
            </summary>	
            <param name="count">A reference that receives the number of figures in the path geometry when this method returns. You must allocate storage for this parameter. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1PathGeometry::GetFigureCount([Out] int* count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.#ctor(SharpDX.Direct2D1.Factory)">
            <summary>	
            Creates an empty <see cref="T:SharpDX.Direct2D1.PathGeometry"/>.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
        </member>
        <member name="M:SharpDX.Direct2D1.PathGeometry.Stream(SharpDX.Direct2D1.GeometrySink)">
            <summary>	
            Copies the contents of the path geometry to the specified <see cref="T:SharpDX.Direct2D1.GeometrySink"/>.	
            </summary>	
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <unmanaged>HRESULT Stream([In] ID2D1GeometrySink* geometrySink)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.PathGeometry.SegmentCount">
            <summary>	
            Retrieves the number of segments in the path geometry. 	
            </summary>	
            <unmanaged>HRESULT ID2D1PathGeometry::GetSegmentCount([Out] int* count)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.PathGeometry.FigureCount">
            <summary>	
            Retrieves the number of figures in the path geometry. 	
            </summary>	
            <unmanaged>HRESULT ID2D1PathGeometry::GetFigureCount([Out] int* count)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Mesh">
            <summary>	
            Represents a set of vertices that form a list of triangles.  	
            </summary>	
            <unmanaged>ID2D1Mesh</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Mesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.Open_(SharpDX.Direct2D1.TessellationSink@)">
            <summary>	
            Opens the mesh for population.	
            </summary>	
            <param name="tessellationSink">When this method returns, contains a reference to a reference to an <see cref="T:SharpDX.Direct2D1.TessellationSink"/> that is used to populate the mesh. This parameter is passed uninitialized. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Mesh::Open([Out] ID2D1TessellationSink** tessellationSink)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Create a mesh that uses triangles to describe a shape.	
            </summary>	
            <remarks>	
            To populate a mesh, use its {{Open}} method to obtain an <see cref="T:SharpDX.Direct2D1.TessellationSink"/>. To draw the mesh, use the render target's {{FillMesh}} method.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <unmanaged>HRESULT CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.#ctor(SharpDX.Direct2D1.RenderTarget,SharpDX.Direct2D1.Triangle[])">
            <summary>	
            Create a mesh that uses triangles to describe a shape and populates it with triangles.
            </summary>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="triangles">An array of <see cref="T:SharpDX.Direct2D1.Triangle"/> structures that describe the triangles to add to this mesh.</param>
            <unmanaged>HRESULT CreateMesh([Out] ID2D1Mesh** mesh)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Mesh.Open">
            <summary>	
            Opens the mesh for population.	
            </summary>	
            <returns>When this method returns, contains a pointer to a pointer to an <see cref="T:SharpDX.Direct2D1.TessellationSink"/> that is used to populate the mesh. This parameter is passed uninitialized.</returns>
            <unmanaged>HRESULT Open([Out] ID2D1TessellationSink** tessellationSink)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Layer">
            <summary>	
            Represents the backing store required to render a layer. 	
            </summary>	
            <unmanaged>ID2D1Layer</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Layer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.GetSize">
            <summary>	
            Gets the size of the layer in device-independent pixels. 	
            </summary>	
            <returns>The size of the layer in device-independent pixels. </returns>
            <unmanaged>D2D1_SIZE_F ID2D1Layer::GetSize()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(SharpDX.Direct2D1.RenderTarget)">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size. The layer resource is allocated to the minimum size when {{PushLayer}} is called.
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <unmanaged>HRESULT CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Layer.#ctor(SharpDX.Direct2D1.RenderTarget,System.Nullable{System.Drawing.SizeF})">
            <summary>	
            Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.  	
            </summary>	
            <remarks>	
            Regardless of whether a size is initially specified, the layer automatically resizes as needed.	
            </remarks>	
            <param name="renderTarget">an instance of <see cref="T:SharpDX.Direct2D1.RenderTarget"/></param>
            <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when {{PushLayer}} is called.</param>
            <unmanaged>HRESULT CreateLayer([In, Optional] const D2D1_SIZE_F* size,[Out] ID2D1Layer** layer)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.Layer.Size">
            <summary>	
            Gets the size of the layer in device-independent pixels. 	
            </summary>	
            <unmanaged>D2D1_SIZE_F ID2D1Layer::GetSize()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawingStateBlock">
            <summary>	
            Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options. 	
            </summary>	
            <unmanaged>ID2D1DrawingStateBlock</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.GetDescription(SharpDX.Direct2D1.DrawingStateDescription@)">
            <summary>	
            Retrieves the antialiasing mode, transform, and tags portion of the drawing state.	
            </summary>	
            <param name="stateDescription">When this method returns, contains the antialiasing mode, transform, and tags portion of the drawing state. You must allocate storage for this parameter. </param>
            <unmanaged>void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.SetDescription(SharpDX.Direct2D1.DrawingStateDescription@)">
            <summary>	
            Specifies the antialiasing mode, transform, and tags portion of the drawing state.	
            </summary>	
            <param name="stateDescription">The antialiasing mode, transform, and tags portion of the drawing state. </param>
            <unmanaged>void ID2D1DrawingStateBlock::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.SetTextRenderingParams(SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Specifies the text-rendering configuration of the drawing state.	
            </summary>	
            <param name="textRenderingParams">The text-rendering configuration of the drawing state, or NULL to use default settings. </param>
            <unmanaged>void ID2D1DrawingStateBlock::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.GetTextRenderingParams(SharpDX.DirectWrite.RenderingParams@)">
            <summary>	
            Retrieves the text-rendering configuration of the drawing state.	
            </summary>	
            <param name="textRenderingParams">When this method returns, contains the address of a reference to an <see cref="T:SharpDX.DirectWrite.RenderingParams"/> object that describes the text-rendering configuration of the drawing state. </param>
            <unmanaged>void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.DrawingStateDescription)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="M:SharpDX.Direct2D1.DrawingStateBlock.#ctor(SharpDX.Direct2D1.Factory,System.Nullable{SharpDX.Direct2D1.DrawingStateDescription},SharpDX.DirectWrite.RenderingParams)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information.</param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.  </param>
        </member>
        <member name="P:SharpDX.Direct2D1.DrawingStateBlock.Description">
            <summary>	
            Retrieves the antialiasing mode, transform, and tags portion of the drawing state.	
            </summary>	
            <unmanaged>void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct2D1.DrawingStateBlock.TextRenderingParams">
            <summary>	
            Retrieves the text-rendering configuration of the drawing state.	
            </summary>	
            <unmanaged>void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.WindowRenderTarget">
            <summary>	
            Renders drawing instructions to a window.	
            </summary>	
            <unmanaged>ID2D1HwndRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.CheckWindowState">
            <summary>	
            Indicates whether the HWND associated with this render target is occluded. 	
            </summary>	
            <remarks>	
            Note??If the window was occluded the last time  {{EndDraw}} was called, the next time the render target calls CheckWindowState, it will return <see cref="F:SharpDX.Direct2D1.WindowState.Occluded"/> regardless of the current window state. If you want to use CheckWindowState to determine the current window state, you should call CheckWindowState after every EndDraw call and ignore its return value. This will ensure that your next call to CheckWindowState state will return the actual window state. 	
            </remarks>	
            <returns>D2D1_WINDOW_STATEA value that indicates whether the HWND associated with this render target is occluded. </returns>
            <unmanaged>D2D1_WINDOW_STATE ID2D1HwndRenderTarget::CheckWindowState()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.Resize(System.Drawing.Size)">
            <summary>	
            Changes the size of the render target to the specified pixel size.	
            </summary>	
            <remarks>	
            After this method is called, the contents of the render target's back-buffer are not defined, even if the <see cref="F:SharpDX.Direct2D1.PresentOptions.RetainContents"/> option was specified when the render target was created. 	
            </remarks>	
            <param name="ixelSizeRef">The new size of the render target in device pixels. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1HwndRenderTarget::Resize([In] const D2D1_SIZE_U* pixelSize)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.GetHwnd">
            <summary>	
            Returns the HWND associated with this render target.	
            </summary>	
            <returns>HWNDThe HWND associated with this render target. </returns>
            <unmanaged>void* ID2D1HwndRenderTarget::GetHwnd()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.WindowRenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RenderTargetProperties,SharpDX.Direct2D1.HwndRenderTargetProperties)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, a render target that renders to a window.	
            </summary>	
            <remarks>	
            When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the {{D2DERR_RECREATE_TARGET}} error is received. When you receive this error, you need to recreate the render target (and any resources it created).	
            </remarks>
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
            <param name="hwndProperties">The window handle, initial size (in pixels), and present options.</param>
        </member>
        <member name="P:SharpDX.Direct2D1.WindowRenderTarget.Hwnd">
            <summary>	
            Returns the HWND associated with this render target.	
            </summary>	
            <unmanaged>void* ID2D1HwndRenderTarget::GetHwnd()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DeviceContextRenderTarget">
            <summary>	
            Issues drawing commands to a GDI device context. 	
            </summary>	
            <unmanaged>ID2D1DCRenderTarget</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.BindDeviceContext(System.IntPtr,SharpDX.Rectangle)">
            <summary>	
            Binds the render target to the device context to which it issues drawing commands.	
            </summary>	
            <remarks>	
            Before you can render with the DC render target, you must use its BindDC method to associate it with a GDI DC.  You do this each time you  use a different DC, or the size of the area you want to draw to changes. 	
            </remarks>	
            <param name="hDC">The device context to which the render target issues drawing commands. </param>
            <param name="subRectRef">The dimensions of the handle to a device context (HDC) to which the render target is bound.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1DCRenderTarget::BindDC([In] const void* hDC,[In] const RECT* pSubRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.DeviceContextRenderTarget.#ctor(SharpDX.Direct2D1.Factory,SharpDX.Direct2D1.RenderTargetProperties)">
            <summary>	
            Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.	
            </summary>	
            <remarks>	
            Before you can render with a DC render target, you must use the render target's {{BindDC}} method to associate it with a GDI DC.  Do this for each different DC and whenever there is a change in the size of the area you want to draw to.To enable the DC render target to work with GDI, set the render target's DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE.Your application should create render targets once and hold on to them for the life of the application or until the render target's  {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, recreate the render target (and any resources it created).	
            </remarks>	
            <param name="factory">an instance of <see cref="T:SharpDX.Direct2D1.Factory"/></param>
            <param name="properties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.  To enable the device context (DC) render target to work with GDI, set the DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and the alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE. For more information about pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}.</param>
        </member>
        <member name="T:SharpDX.Direct2D1.Factory">
            <summary>	
            Creates Direct2D resources.	
            </summary>	
            <unmanaged>ID2D1Factory</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.ReloadSystemMetrics">
            <summary>	
            Forces the factory to refresh any system defaults that it might have changed since factory creation.	
            </summary>	
            <remarks>	
            You should call this method before calling the {{GetDesktopDpi}} method, to ensure that the system DPI is current. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::ReloadSystemMetrics()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.GetDesktopDpi(System.Single@,System.Single@)">
            <summary>	
            Retrieves the current desktop dots per inch (DPI). To refresh this value, call {{ReloadSystemMetrics}}.	
            </summary>	
            <remarks>	
            Use this method to obtain the system DPI when setting physical pixel values, such as when you specify the size of a window. 	
            </remarks>	
            <param name="dpiX">When this method returns, contains the horizontal DPI of the desktop. You must allocate storage for this parameter. </param>
            <param name="dpiY">When this method returns, contains the vertical DPI of the desktop. You must allocate storage for this parameter.  </param>
            <unmanaged>void ID2D1Factory::GetDesktopDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateRectangleGeometry(SharpDX.RectangleF,SharpDX.Direct2D1.RectangleGeometry@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RectangleGeometry"/>. 	
            </summary>	
            <param name="rectangle">The coordinates of the rectangle geometry.  </param>
            <param name="rectangleGeometry">When this method returns, contains the address of the reference to the rectangle geometry created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateRectangleGeometry([In] const D2D1_RECT_F* rectangle,[Out] ID2D1RectangleGeometry** rectangleGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateRoundedRectangleGeometry(SharpDX.Direct2D1.RoundedRect@,SharpDX.Direct2D1.RoundedRectangleGeometry@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.RoundedRectangleGeometry"/>. 	
            </summary>	
            <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry. </param>
            <param name="roundedRectangleGeometry">When this method returns, contains the address of the reference to the rounded rectangle geometry created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateRoundedRectangleGeometry([In] const D2D1_ROUNDED_RECT* roundedRectangle,[Out] ID2D1RoundedRectangleGeometry** roundedRectangleGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateEllipseGeometry(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.EllipseGeometry@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.EllipseGeometry"/>. 	
            </summary>	
            <param name="ellipse">A value that describes the center point, x-radius, and y-radius of the ellipse geometry. </param>
            <param name="ellipseGeometry">When this method returns, contains the address of the reference to the ellipse geometry created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateEllipseGeometry([In] const D2D1_ELLIPSE* ellipse,[Out] ID2D1EllipseGeometry** ellipseGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateGeometryGroup(SharpDX.Direct2D1.FillMode,SharpDX.Direct2D1.Geometry[],System.Int32,SharpDX.Direct2D1.GeometryGroup@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.GeometryGroup"/>, which is an object that holds other geometries.	
            </summary>	
            <remarks>	
            Geometry groups are a convenient way to group several geometries simultaneously so all figures of several distinct geometries are concatenated into one. To create a  <see cref="T:SharpDX.Direct2D1.GeometryGroup"/> object, call  the CreateGeometryGroup method on the <see cref="T:SharpDX.Direct2D1.Factory"/> object, passing in the fillMode with possible values of   <see cref="F:SharpDX.Direct2D1.FillMode.Alternate"/> (alternate) and D2D1_FILL_MODE_WINDING, an array of geometry objects to add to the geometry group, and the number of elements in this array.  	
            </remarks>	
            <param name="fillMode">A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry.  </param>
            <param name="geometries">An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the geometriesCount parameter. </param>
            <param name="geometriesCount">The number of elements in geometries. </param>
            <param name="geometryGroup">When this method returns, contains the address of a reference to the geometry group created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateGeometryGroup([None] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[None] int geometriesCount,[Out] ID2D1GeometryGroup** geometryGroup)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateTransformedGeometry(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Matrix3x2@,SharpDX.Direct2D1.TransformedGeometry@)">
            <summary>	
            Transforms the specified geometry and stores the result as an <see cref="T:SharpDX.Direct2D1.TransformedGeometry"/> object.  	
            </summary>	
            <remarks>	
            Like other resources, a transformed geometry the inherits the resource space and threading policy of the factory that created it. This object is immutable. When stroking a transformed geometry with the {{DrawGeometry}} method, the stroke width is not affected by the transform applied to the geometry.  The stroke width is only affected by the world transform. 	
            </remarks>	
            <param name="sourceGeometry">The geometry to transform. </param>
            <param name="transform">The transformation to apply.  </param>
            <param name="transformedGeometry">When this method returns, contains the address of the reference to the new transformed geometry object. The transformed geometry stores  the result of transforming sourceGeometry by transform. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateTransformedGeometry([In] ID2D1Geometry* sourceGeometry,[In] const D2D1_MATRIX_3X2_F* transform,[Out] ID2D1TransformedGeometry** transformedGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreatePathGeometry(SharpDX.Direct2D1.PathGeometry@)">
            <summary>	
            Creates an empty <see cref="T:SharpDX.Direct2D1.PathGeometry"/>.	
            </summary>	
            <param name="athGeometryRef">When this method returns, contains the address to a reference to the path geometry created by this method.  </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreatePathGeometry([Out] ID2D1PathGeometry** pathGeometry)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateStrokeStyle(SharpDX.Direct2D1.StrokeStyleProperties@,System.Single[],System.Int32,SharpDX.Direct2D1.StrokeStyle@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.StrokeStyle"/> that describes start cap, dash pattern, and other features of a stroke.	
            </summary>	
            <param name="strokeStyleProperties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke. </param>
            <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width.  </param>
            <param name="dashesCount">The number of elements in the dashes array.  </param>
            <param name="strokeStyle">When this method returns, contains the address of the reference to the stroke style created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[None] int dashesCount,[Out] ID2D1StrokeStyle** strokeStyle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDrawingStateBlock(System.Nullable{SharpDX.Direct2D1.DrawingStateDescription},SharpDX.DirectWrite.RenderingParams,SharpDX.Direct2D1.DrawingStateBlock@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.DrawingStateBlock"/> that can be used with the {{SaveDrawingState}} and {{RestoreDrawingState}} methods of a render target.	
            </summary>	
            <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags  information. </param>
            <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.   </param>
            <param name="drawingStateBlock">When this method returns, contains the address of a reference to the new drawing state block created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out] ID2D1DrawingStateBlock** drawingStateBlock)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateHwndRenderTarget(SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.HwndRenderTargetProperties@,SharpDX.Direct2D1.WindowRenderTarget@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, a render target that renders to a window.	
            </summary>	
            <remarks>	
            When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the {{D2DERR_RECREATE_TARGET}} error is received. When you receive this error, you need to recreate the render target (and any resources it created). 	
            </remarks>	
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}. </param>
            <param name="hwndRenderTargetProperties">The window handle, initial size (in pixels), and present options. </param>
            <param name="hwndRenderTarget">When this method returns, contains the address of the reference to the <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> object created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateHwndRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[In] const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties,[Out] ID2D1HwndRenderTarget** hwndRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDxgiSurfaceRenderTarget(SharpDX.DXGI.Surface,SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.RenderTarget@)">
            <summary>	
            Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. 	
            </summary>	
            <remarks>	
            To write to a Direct3D surface, you obtain an <see cref="T:SharpDX.DXGI.Surface"/> and pass it to the {{CreateDxgiSurfaceRenderTarget}} method to create a DXGI surface render target; you can then use the DXGI surface render target to draw 2-D content to the DXGI surface.   A DXGI surface render target is a type of <see cref="T:SharpDX.Direct2D1.RenderTarget"/>. Like other Direct2D render targets, you can use it to create resources and issue drawing commands.  The DXGI surface render target and the DXGI surface must use the same DXGI format. If you specify the {{DXGI_FORMAT_UNKOWN}} format when you create the render target, it will automatically use the surface's format. The DXGI surface render target does not perform DXGI surface synchronization.  To work with Direct2D, the Direct3D device that provides the <see cref="T:SharpDX.DXGI.Surface"/> must be created with the D3D10_CREATE_DEVICE_BGRA_SUPPORT flag. For more information about creating and using DXGI surface render targets, see the {{Direct2D and Direct3D Interoperability Overview}}. When you create a render target and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the render target's {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, you need to recreate the render target (and any resources it created).   	
            </remarks>	
            <param name="dxgiSurface">The IDXGISurface to which the render target will draw.  </param>
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}. </param>
            <param name="renderTarget">When this method returns, contains the address of the reference to the <see cref="T:SharpDX.Direct2D1.RenderTarget"/> object created by this method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDxgiSurfaceRenderTarget([In] IDXGISurface* dxgiSurface,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out] ID2D1RenderTarget** renderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.CreateDCRenderTarget(SharpDX.Direct2D1.RenderTargetProperties@,SharpDX.Direct2D1.DeviceContextRenderTarget@)">
            <summary>	
            Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.	
            </summary>	
            <remarks>	
            Before you can render with a DC render target, you must use the render target's {{BindDC}} method to associate it with a GDI DC.  Do this for each different DC and whenever there is a change in the size of the area you want to draw to. To enable the DC render target to work with GDI, set the render target's DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE. Your application should create render targets once and hold on to them for the life of the application or until the render target's  {{EndDraw}} method returns the {{D2DERR_RECREATE_TARGET}} error. When you receive this error, recreate the render target (and any resources it created). 	
            </remarks>	
            <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.  To enable the device context (DC) render target to work with GDI, set the DXGI format to <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> and the alpha mode to <see cref="F:SharpDX.Direct2D1.AlphaMode.Premultiplied"/> or D2D1_ALPHA_MODE_IGNORE. For more information about pixel formats, see  {{Supported Pixel  Formats and Alpha Modes}}. </param>
            <param name="dcRenderTarget">When this method returns, dcRenderTarget contains the address of the reference to the  <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> created by the method. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1Factory::CreateDCRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out] ID2D1DCRenderTarget** dcRenderTarget)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(SharpDX.Direct2D1.FactoryType)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Factory.#ctor(SharpDX.Direct2D1.FactoryType,SharpDX.Direct2D1.DebugLevel)">
            <summary>
            Default Constructor for a <see cref="T:SharpDX.Direct2D1.Factory"/>.
            </summary>
        </member>
        <member name="P:SharpDX.Direct2D1.Factory.DesktopDpi">
            <summary>	
            Retrieves the current desktop dots per inch (DPI). To refresh this value, call {{ReloadSystemMetrics}}.	
            </summary>	
            <remarks>	
            Use this method to obtain the system DPI when setting physical pixel values, such as when you specify the size of a window. 	
            </remarks>	
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySinkNative">
            <summary>	
            Describes a geometric path that does not contain quadratic bezier curves or arcs. 	
            </summary>	
            <unmanaged>ID2D1SimplifiedGeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.SimplifiedGeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.SetFillMode_(SharpDX.Direct2D1.FillMode)">
            <summary>	
            Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.  	
            </summary>	
            <remarks>	
            The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call SetFillMode before the first call to {{BeginFigure}}. Not doing will put the geometry sink in an error state.  	
            </remarks>	
            <param name="fillMode">The method used to determine whether a given point is part of the geometry. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::SetFillMode([None] D2D1_FILL_MODE fillMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.SetSegmentFlags_(SharpDX.Direct2D1.PathSegment)">
            <summary>	
            Specifies stroke and join options to be applied to new segments added to the geometry sink. 	
            </summary>	
            <remarks>	
            After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.      	
            </remarks>	
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::SetSegmentFlags([None] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.BeginFigure_(System.Drawing.PointF,SharpDX.Direct2D1.FigureBegin)">
            <summary>	
            Starts a new figure at the specified point. 	
            </summary>	
            <remarks>	
            If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail. 	
            </remarks>	
            <param name="startPoint">The point at which to begin the new figure. </param>
            <param name="figureBegin">Whether the new figure should be hollow or filled. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::BeginFigure([None] D2D1_POINT_2F startPoint,[None] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.AddLines_(System.Drawing.PointF[],System.Int32)">
            <summary>	
            Creates a sequence of lines using the specified points and adds them to the geometry sink.	
            </summary>	
            <param name="ointsRef">A reference to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.    </param>
            <param name="pointsCount">The number of points in the points array. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::AddLines([In, Buffer] const D2D1_POINT_2F* points,[None] int pointsCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.AddBeziers_(SharpDX.Direct2D1.BezierSegment[],System.Int32)">
            <summary>	
            Creates a sequence of cubic Bezier curves and adds them to the geometry sink. 	
            </summary>	
            <param name="beziers">A reference to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point. </param>
            <param name="beziersCount">The number of Bezier segments in the beziers array. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[None] int beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.EndFigure_(SharpDX.Direct2D1.FigureEnd)">
            <summary>	
            Ends the current figure; optionally, closes it.	
            </summary>	
            <remarks>	
            Calling this method without a matching call to {{BeginFigure}} places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the {{Close}} method is called. 	
            </remarks>	
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by {{BeginFigure}}. </param>
            <unmanaged>void ID2D1SimplifiedGeometrySink::EndFigure([None] D2D1_FIGURE_END figureEnd)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.SimplifiedGeometrySinkNative.Close_">
            <summary>	
            Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state. 	
            </summary>	
            <remarks>	
            Do not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one {{EndFigure}} call for each call to {{BeginFigure}}. After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1SimplifiedGeometrySink::Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySinkNative">
            <summary>	
            Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves. 	
            </summary>	
            <unmanaged>ID2D1GeometrySink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.GeometrySinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddLine_(System.Drawing.PointF)">
            <summary>	
            Creates a line segment between the current point and the specified end point and adds it to the geometry sink. 	
            </summary>	
            <param name="point">The end point of the line to draw. </param>
            <unmanaged>void ID2D1GeometrySink::AddLine([None] D2D1_POINT_2F point)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddBezier_(SharpDX.Direct2D1.BezierSegment@)">
            <summary>	
            Creates  a cubic Bezier curve between the current point and the specified end point.	
            </summary>	
            <param name="bezier">A structure that describes the control points and end point of the Bezier curve to add. </param>
            <unmanaged>void ID2D1GeometrySink::AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddQuadraticBezier_(SharpDX.Direct2D1.QuadraticBezierSegment)">
            <summary>	
            Creates  a quadratic Bezier curve between the current point and the specified endpoint.	
            </summary>	
            <param name="bezier">A structure that describes the control point and the endpoint of the quadratic Bezier curve to add. </param>
            <unmanaged>void ID2D1GeometrySink::AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddQuadraticBeziers_(SharpDX.Direct2D1.QuadraticBezierSegment[],System.Int32)">
            <summary>	
            Adds a sequence of quadratic Bezier segments as an array in a single call.	
            </summary>	
            <param name="beziers">An array of a sequence of quadratic Bezier segments. </param>
            <param name="beziersCount">A value indicating the number of quadratic Bezier segments in beziers.  </param>
            <unmanaged>void ID2D1GeometrySink::AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[None] int beziersCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.GeometrySinkNative.AddArc_(SharpDX.Direct2D1.ArcSegment@)">
            <summary>	
            Adds a single arc to the path geometry.	
            </summary>	
            <param name="arc">The arc segment to add to the figure. </param>
            <unmanaged>void ID2D1GeometrySink::AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSinkNative">
            <summary>	
            Populates an <see cref="T:SharpDX.Direct2D1.Mesh"/> object with triangles. 	
            </summary>	
            <unmanaged>ID2D1TessellationSink</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.TessellationSinkNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.AddTriangles_(SharpDX.Direct2D1.Triangle[],System.Int32)">
            <summary>	
            Copies the specified triangles to the sink.  	
            </summary>	
            <param name="triangles">An array of <see cref="T:SharpDX.Direct2D1.Triangle"/> structures that describe the triangles to add to the sink. </param>
            <param name="trianglesCount">The number of triangles to copy from the triangles array. </param>
            <unmanaged>void ID2D1TessellationSink::AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[None] int trianglesCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.TessellationSinkNative.Close_">
            <summary>	
            Closes the sink and returns its error status.	
            </summary>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT ID2D1TessellationSink::Close()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.PixelFormat">
            <summary>	
            Contains the data format and alpha mode for a bitmap or render target. 	
            </summary>	
            <remarks>	
            For more information about the pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}. 	
            </remarks>	
            <unmanaged>D2D1_PIXEL_FORMAT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PixelFormat.Format">
            <summary>	
            A value that specifies the size and arrangement of channels in each pixel. 	
            </summary>	
            <unmanaged>DXGI_FORMAT format</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.PixelFormat.AlphaMode">
            <summary>	
            A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unkown.   	
            </summary>	
            <unmanaged>D2D1_ALPHA_MODE alphaMode</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.PixelFormat.#ctor(SharpDX.DXGI.Format,SharpDX.Direct2D1.AlphaMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.PixelFormat"/> struct.
            </summary>
            <param name="format">A value that specifies the size and arrangement of channels in each pixel.</param>
            <param name="alphaMode">A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unkown.</param>
        </member>
        <member name="T:SharpDX.Direct2D1.GradientStop">
            <summary>	
            Contains the position and color of a gradient stop. 	
            </summary>	
            <remarks>	
            Gradient stops can be specified in any order if they are at different positions. Two stops may share a position. In this case, the first stop specified is treated as the "low" stop (nearer 0.0f) and subsequent stops are treated as "higher" (nearer 1.0f). This behavior is useful if a caller wants an instant transition in the middle of a stop. Typically, there are at least two points in a collection, although creation with only one stop is permitted. For example, one point is at position 0.0f, another point is at position 1.0f, and additional points are distributed in the [0, 1] range. Where the gradient progression is beyond the range of [0, 1], the stops are stored, but may affect the gradient.  When drawn, the [0, 1] range of positions is mapped to the brush, in a brush-dependent way. For details, see <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> and <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/>.  Gradient stops with a position outside the [0, 1] range cannot be seen explicitly, but they can still affect the colors produced in the [0, 1] range. For example, a two-stop gradient {{0.0f, Black}, {2.0f, White}} is indistinguishable visually from {{0.0f, Black}, {1.0f, Mid-level gray}}. Also, the colors are clamped before interpolation. 	
            </remarks>	
            <unmanaged>D2D1_GRADIENT_STOP</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GradientStop.Position">
            <summary>	
            A value that indicates the relative position of the gradient stop in the brush. This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen explicitly.  	
            </summary>	
            <unmanaged>float position</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.GradientStop.Color">
            <summary>	
            The color of the gradient stop. 	
            </summary>	
            <unmanaged>D2D1_COLOR_F color</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BrushProperties">
            <summary>	
            Describes the opacity and transformation of a brush.	
            </summary>	
            <remarks>	
            This structure is used when creating a brush. For convenience, Direct2D provides the {{D2D1::BrushProperties}} function for creating D2D1_BRUSH_PROPERTIES structures. After creating a brush, you can change its opacity or transform by calling the {{SetOpacity}} or {{SetTransform}} methods. 	
            </remarks>	
            <unmanaged>D2D1_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BrushProperties.Opacity">
            <summary>	
            A value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush. 	
            </summary>	
            <unmanaged>float opacity</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BrushProperties.Transform">
            <summary>	
            The transformation that is applied to the brush. 	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F transform</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BitmapBrushProperties">
            <summary>	
            Describes the extend modes and the interpolation mode of an <see cref="T:SharpDX.Direct2D1.BitmapBrush"/>.	
            </summary>	
            <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.ExtendModeX">
            <summary>	
            A value that describes how the brush horizontally tiles those areas that extend past its bitmap. 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE extendModeX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.ExtendModeY">
            <summary>	
            A value that describes how the brush vertically tiles those areas that extend past its bitmap. 	
            </summary>	
            <unmanaged>D2D1_EXTEND_MODE extendModeY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BitmapBrushProperties.InterpolationMode">
            <summary>	
            A value that specifies how the bitmap is interpolated when it is scaled or rotated. 	
            </summary>	
            <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE interpolationMode</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LinearGradientBrushProperties">
            <summary>	
            Contains the starting point and endpoint of the gradient axis for an <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/>. 	
            </summary>	
            <remarks>	
            Use this method when creating new <see cref="T:SharpDX.Direct2D1.LinearGradientBrush"/> objects with the {{CreateLinearGradientBrush}} method. For convenience, Direct2D provides the {{D2D1::LinearGradientBrushProperties}} helper function for creating new D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES structures. The following illustration shows how a linear gradient changes as you change its start and end points.  For the first gradient, the start point is set to (0,0) and the end point to (150, 50); this creates a diagonal gradient that starts at the upper-left corner and extends to the lower-right corner of the area being painted. When you set the start point to (0, 25) and the end point to (150, 25), a horizontal gradient is created. Similarly, setting the start point  to (75, 0) and the end point to (75, 50) creates a vertical gradient. Setting the start point to  (0, 50) and the end point to (150, 0)  creates a diagonal gradient that starts at the lower-left corner and extends to the upper-right corner of the area being painted.  ?  Illustration of four gradients with different axes ? 	
            </remarks>	
            <unmanaged>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LinearGradientBrushProperties.StartPoint">
            <summary>	
            In the brush's coordinate space, the starting point  of the gradient axis.  	
            </summary>	
            <unmanaged>D2D1_POINT_2F startPoint</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LinearGradientBrushProperties.EndPoint">
            <summary>	
            In the brush's coordinate space, the endpoint  of the gradient axis.   	
            </summary>	
            <unmanaged>D2D1_POINT_2F endPoint</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RadialGradientBrushProperties">
            <summary>	
            Contains the gradient origin offset and the size and position of the gradient ellipse for an <see cref="T:SharpDX.Direct2D1.RadialGradientBrush"/>. 	
            </summary>	
            <remarks>	
            Different values for center,  gradientOriginOffset,  radiusX and/or radiusY produce different gradients.   The following illustration shows several radial gradients that have different gradient origin offsets, creating the appearance of the light illuminating the circles from different angles.  ?  Illustration of four circles with radial gradients that have different origin offsets ? For convenience, Direct2D provides the {{D2D1::RadialGradientBrushProperties}} function for creating new D2D1_RADIAL_GRADIENT_BRUSH structures. 	
            </remarks>	
            <unmanaged>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.Center">
            <summary>	
            In the brush's coordinate space, the center of the gradient ellipse. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F center</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.GradientOriginOffset">
            <summary>	
            In the brush's coordinate space, the offset of the gradient origin relative to the gradient ellipse's center. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F gradientOriginOffset</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.RadiusX">
            <summary>	
            In the brush's coordinate space, the x-radius  of the gradient ellipse. 	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RadialGradientBrushProperties.RadiusY">
            <summary>	
            In the brush's coordinate space, the y-radius  of the gradient ellipse. 	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.BezierSegment">
            <summary>	
            Represents a cubic bezier segment drawn  between two points.	
            </summary>	
            <remarks>	
            A cubic Bezier curve is defined by four points: a start point, an end point (point3), and two control points (point1 and point2). A Bezier segment does not contain a property for the starting point of the curve; it defines only the end point. The beginning point of the curve is the current point of the path to which the Bezier curve is added.  The two control points of a cubic Bezier curve behave like magnets, attracting portions of what would otherwise be a straight line toward themselves and producing a curve. The first control point, point1, affects the beginning portion of the curve; the second control point, point2, affects the ending portion of the curve.  Note??The curve doesn't necessarily pass through either of the control points; each control point moves its portion of the line toward itself, but not through itself. 	
            </remarks>	
            <unmanaged>D2D1_BEZIER_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point1">
            <summary>	
            The first control point for the Bezier segment. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point2">
            <summary>	
            The second control point for the Bezier segment. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.BezierSegment.Point3">
            <summary>	
            The end point for the Bezier segment. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.Triangle">
            <summary>	
            Contains the three vertices that describe a triangle.	
            </summary>	
            <unmanaged>D2D1_TRIANGLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point1">
            <summary>	
            The first vertex of a triangle. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point2">
            <summary>	
            The second vertex of a triangle. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.Triangle.Point3">
            <summary>	
            The third vertex of a triangle. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point3</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.ArcSegment">
            <summary>	
            Describes an elliptical arc between two points.	
            </summary>	
            <unmanaged>D2D1_ARC_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.Point">
            <summary>	
            The end point of the arc. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.Size">
            <summary>	
            The x-radius and y-radius of the arc. 	
            </summary>	
            <unmanaged>D2D1_SIZE_F size</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.RotationAngle">
            <summary>	
            A value that specifies how many degrees in the clockwise direction the ellipse is rotated relative to the current coordinate system. 	
            </summary>	
            <unmanaged>float rotationAngle</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.SweepDirection">
            <summary>	
            A value that specifies whether the arc sweep is clockwise or counterclockwise. 	
            </summary>	
            <unmanaged>D2D1_SWEEP_DIRECTION sweepDirection</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.ArcSegment.ArcSize">
            <summary>	
            A value that specifies whether the given arc is larger than 180 degrees. 	
            </summary>	
            <unmanaged>D2D1_ARC_SIZE arcSize</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.QuadraticBezierSegment">
            <summary>	
            Contains the control point and end point for a quadratic Bezier segment.	
            </summary>	
            <unmanaged>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.QuadraticBezierSegment.Point1">
            <summary>	
            The control point of the quadratic Bezier segment. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.QuadraticBezierSegment.Point2">
            <summary>	
            The end point of the quadratic Bezier segment. 	
            </summary>	
            <unmanaged>D2D1_POINT_2F point2</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RoundedRect">
            <summary>	
            Contains the dimensions and corner radii of a rounded rectangle.	
            </summary>	
            <remarks>	
            Each corner of the rectangle specified by the rect is replaced with a quarter ellipse, with a radius in each direction specified by radiusX and radiusY.  If the radiusX is greater than or equal to half the width of the rectangle, and the radiusY is greater than or equal to one-half the height, the rounded rectangle is an ellipse with the same width and height of the rect.  Even when both radiuX and radiusY are zero, the rounded rectangle is different from a rectangle., When stroked, the corners of the rounded rectangle are roundly joined, not mitered (square).  	
            </remarks>	
            <unmanaged>D2D1_ROUNDED_RECT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.Rect">
            <summary>	
            The coordinates of the rectangle. 	
            </summary>	
            <unmanaged>D2D1_RECT_F rect</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.RadiusX">
            <summary>	
            The x-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. 	
            </summary>	
            <unmanaged>float radiusX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RoundedRect.RadiusY">
            <summary>	
            The y-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. 	
            </summary>	
            <unmanaged>float radiusY</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.StrokeStyleProperties">
            <summary>	
            Describes the stroke that outlines a shape. 	
            </summary>	
            <remarks>	
            The following illustration shows different dashOffset values for the same custom dash style.  ?  Illustration of four dashes with the same style and different dashOffset values ? 	
            </remarks>	
            <unmanaged>D2D1_STROKE_STYLE_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.StartCap">
            <summary>	
            The cap applied to the start of all the open figures in a stroked geometry. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE startCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.EndCap">
            <summary>	
            The cap applied to the end of all the open figures in a stroked geometry. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE endCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashCap">
            <summary>	
            The shape  at either end of each dash segment. 	
            </summary>	
            <unmanaged>D2D1_CAP_STYLE dashCap</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.LineJoin">
            <summary>	
            A value that describes how segments are joined. This value is ignored for a vertex if the segment flags specify that the segment should have a smooth join.  	
            </summary>	
            <unmanaged>D2D1_LINE_JOIN lineJoin</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.MiterLimit">
            <summary>	
            The limit of the thickness of the join on a mitered corner. This value is always treated as though it is greater than or equal to 1.0f.  	
            </summary>	
            <unmanaged>float miterLimit</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashStyle">
            <summary>	
            A value that specifies whether the stroke has a dash pattern and, if so, the dash style.  	
            </summary>	
            <unmanaged>D2D1_DASH_STYLE dashStyle</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.StrokeStyleProperties.DashOffset">
            <summary>	
            A value that specifies an offset in the dash sequence.   A positive dash offset value  shifts the dash pattern, in units of  stroke width, toward the start of the stroked geometry.  A negative dash offset value  shifts the dash pattern, in units of  stroke width, toward the end of the stroked geometry. 	
            </summary>	
            <unmanaged>float dashOffset</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.LayerParameters">
            <summary>	
            Contains the content bounds, mask information, opacity settings, and other options for a layer resource. 	
            </summary>	
            <unmanaged>D2D1_LAYER_PARAMETERS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.ContentBounds">
            <summary>	
            The content bounds of the layer. Content outside these bounds is not guaranteed to render. 	
            </summary>	
            <unmanaged>D2D1_RECT_F contentBounds</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.GeometricMask">
            <summary>	
            The geometric mask specifies the area of the layer that is composited into the render target.  	
            </summary>	
            <unmanaged>ID2D1Geometry* geometricMask</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.MaskAntialiasMode">
            <summary>	
            A value that specifies the antialiasing mode for the geometricMask.   	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.MaskTransform">
            <summary>	
            A value that specifies the transform that is applied to the geometric mask when composing the layer. 	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F maskTransform</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.Opacity">
            <summary>	
            An opacity value that is applied uniformly to all resources in the layer when compositing to the target. 	
            </summary>	
            <unmanaged>float opacity</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.OpacityBrush">
            <summary>	
            A brush that is used to modify the opacity of the layer. The brush 	
            is mapped to the layer, and the alpha channel of each mapped brush pixel is multiplied against the corresponding layer pixel.  	
            </summary>	
            <unmanaged>ID2D1Brush* opacityBrush</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.LayerParameters.LayerOptions">
            <summary>	
            A value that specifies whether the layer intends to render text with ClearType antialiasing. 	
            </summary>	
            <unmanaged>D2D1_LAYER_OPTIONS layerOptions</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.RenderTargetProperties">
            <summary>	
            Contains rendering options (hardware or software), pixel format, DPI information, remoting options, and Direct3D support requirements for a render target. 	
            </summary>	
            <remarks>	
            Use this structure when creating a render target, or use it with the <see cref="M:SharpDX.Direct2D1.RenderTarget.IsSupported(SharpDX.Direct2D1.RenderTargetProperties@)"/> method to check the properties supported by an existing render target. As a convenience, Direct2D provides the {{D2D1::RenderTargetProperties}} helper function for creating D2D1_RENDER_TARGET_PROPERTIES structures. An easy way to create a D2D1_RENDER_TARGET_PROPERTIES structure that works for most render targets is to call the function without specifying any parameters. Doing so creates a D2D1_RENDER_TARGET_PROPERTIES structure that has its fields set to default values. For more information, see   {{D2D1::RenderTargetProperties}}. Not all render targets support hardware rendering. For a list, see the {{Render Targets Overview}}. Using Default DPI Settings To use the default DPI, set dpiX and dpiY to 0. The default DPI varies depending on the render target:  For a compatible render target, the default DPI is the DPI of the parent render target. For a <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>, the default DPI is the system DPI obtained from the render target's <see cref="T:SharpDX.Direct2D1.Factory"/>. For other render targets, the default DPI is 96.  To use the default DPI setting, both dpiX and dpiY must be set to 0. Setting only one value to 0 causes an  {{E_INVALIDARG}} error when attempting to create a render target. 	
            </remarks>	
            <unmanaged>D2D1_RENDER_TARGET_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.Type">
            <summary>	
            A value that specifies whether the render target should force hardware or software rendering. A value of <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/> specifies that the render target should use hardware rendering if it is available; otherwise, it uses software rendering. Note that WIC bitmap render targets do not support hardware rendering. 	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_TYPE type</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.PixelFormat">
            <summary>	
            The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}. 	
            </summary>	
            <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.DpiX">
            <summary>	
            The horizontal DPI of the render target.  To use the default DPI, set dpiX and dpiY to 0. For more information, see the Remarks section.  	
            </summary>	
            <unmanaged>float dpiX</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.DpiY">
            <summary>	
            The vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0.  For more information, see the Remarks section.  	
            </summary>	
            <unmanaged>float dpiY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.Usage">
            <summary>	
            A value that specifies how the render target is remoted and whether it should be GDI-compatible.  Set to <see cref="F:SharpDX.Direct2D1.RenderTargetUsage.None"/> to create a render target that is not compatible with GDI and uses Direct3D command-stream remoting if it  is available.  	
            </summary>	
            <unmanaged>D2D1_RENDER_TARGET_USAGE usage</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.RenderTargetProperties.MinLevel">
            <summary>	
            A value that specifies the minimum Direct3D feature level required for hardware rendering. If the specified minimum level is not available, the render target uses software rendering if the type  member is set to <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/>; if  type  is set to to D2D1_RENDER_TARGET_TYPE_HARDWARE, render target creation fails. A value of <see cref="F:SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT"/> indicates that Direct2D should determine whether the Direct3D feature level of the device is adequate. This field is used only when creating <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> and <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> objects. 	
            </summary>	
            <unmanaged>D2D1_FEATURE_LEVEL minLevel</unmanaged>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTargetProperties.#ctor(SharpDX.Direct2D1.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTargetProperties"/> struct.
            </summary>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
        </member>
        <member name="M:SharpDX.Direct2D1.RenderTargetProperties.#ctor(SharpDX.Direct2D1.RenderTargetType,SharpDX.Direct2D1.PixelFormat,System.Single,System.Single,SharpDX.Direct2D1.RenderTargetUsage,SharpDX.Direct2D1.FeatureLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct2D1.RenderTargetProperties"/> struct.
            </summary>
            <param name="type">A value that specifies whether the render target should force hardware or software rendering. A value of <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/> specifies that the render target should use hardware rendering if it is available; otherwise, it uses software rendering. Note that WIC bitmap render targets do not support hardware rendering.</param>
            <param name="pixelFormat">The pixel format and alpha mode of the render target. You can use the {{D2D1::PixelFormat}} function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see {{Supported Pixel Formats and Alpha Modes}}.</param>
            <param name="dpiX">The horizontal DPI of the render target.  To use the default DPI, set dpiX and dpiY to 0. For more information, see the Remarks section. 	</param>
            <param name="dpiY">The vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0.  For more information, see the Remarks section. 	</param>
            <param name="usage">A value that specifies how the render target is remoted and whether it should be GDI-compatible.  Set to <see cref="F:SharpDX.Direct2D1.RenderTargetUsage.None"/> to create a render target that is not compatible with GDI and uses Direct3D command-stream remoting if it  is available.</param>
            <param name="minLevel">A value that specifies the minimum Direct3D feature level required for hardware rendering. If the specified minimum level is not available, the render target uses software rendering if the type  member is set to <see cref="F:SharpDX.Direct2D1.RenderTargetType.Default"/>; if  type  is set to to D2D1_RENDER_TARGET_TYPE_HARDWARE, render target creation fails. A value of <see cref="F:SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT"/> indicates that Direct2D should determine whether the Direct3D feature level of the device is adequate. This field is used only when creating <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/> and <see cref="T:SharpDX.Direct2D1.DeviceContextRenderTarget"/> objects.	</param>  
        </member>
        <member name="T:SharpDX.Direct2D1.HwndRenderTargetProperties">
            <summary>	
            Contains the HWND, pixel size, and presentation options for an <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>.	
            </summary>	
            <remarks>	
            Use this structure when you call the {{CreateHwndRenderTarget}} method to create a new <see cref="T:SharpDX.Direct2D1.WindowRenderTarget"/>. For convenience, Direct2D provides the {{D2D1::HwndRenderTargetProperties}} function for creating new D2D1_HWND_RENDER_TARGET_PROPERTIES structures. 	
            </remarks>	
            <unmanaged>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.Hwnd">
            <summary>	
            The HWND to which the render target issues the output from its drawing commands. 	
            </summary>	
            <unmanaged>void* hwnd</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.PixelSize">
            <summary>	
            The size of the render target, in pixels. 	
            </summary>	
            <unmanaged>D2D1_SIZE_U pixelSize</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.HwndRenderTargetProperties.PresentOptions">
            <summary>	
            A value that specifies whether the render target retains the frame after it is presented and whether the render target waits for the device to refresh before presenting. 	
            </summary>	
            <unmanaged>D2D1_PRESENT_OPTIONS presentOptions</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.DrawingStateDescription">
            <summary>	
            Describes the drawing state of a render target.  	
            </summary>	
            <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.AntialiasMode">
            <summary>	
            The antialiasing mode for subsequent nontext drawing operations.  	
            </summary>	
            <unmanaged>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.TextAntialiasMode">
            <summary>	
            The antialiasing mode for subsequent text and glyph drawing operations. 	
            </summary>	
            <unmanaged>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Tag1">
            <summary>	
            A label for subsequent drawing operations. 	
            </summary>	
            <unmanaged>D2D1_TAG tag1</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Tag2">
            <summary>	
            A label for subsequent drawing operations. 	
            </summary>	
            <unmanaged>D2D1_TAG tag2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.DrawingStateDescription.Transform">
            <summary>	
            The transformation to apply to subsequent drawing operations. 	
            </summary>	
            <unmanaged>D2D1_MATRIX_3X2_F transform</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.FactoryOptions">
            <summary>	
            Contains the debugging level of an <see cref="T:SharpDX.Direct2D1.Factory"/> object. 	
            </summary>	
            <remarks>	
            To enable debugging, you must install the {{Direct2D Debug Layer}}. 	
            </remarks>	
            <unmanaged>D2D1_FACTORY_OPTIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct2D1.FactoryOptions.DebugLevel">
            <summary>	
            The debugging level of the <see cref="T:SharpDX.Direct2D1.Factory"/> object. 	
            </summary>	
            <unmanaged>D2D1_DEBUG_LEVEL debugLevel</unmanaged>
        </member>
        <member name="T:SharpDX.Direct2D1.GeometrySinkCallback">
            <summary>
            Internal GeometrySink Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.SimplifiedGeometrySinkCallback">
            <summary>
            Internal SimplifiedGeometrySink Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.TessellationSinkCallback">
            <summary>
            Internal TessellationSink Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct2D1.Matrix3x2">
            <summary>
            Direct2D Matrix 3x2. Use <see cref="T:SharpDX.Matrix"/> and explicit cast to <see cref="T:SharpDX.Direct2D1.Matrix3x2"/>.
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M11">
            <summary>
            Element (1,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M12">
            <summary>
            Element (1,2)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M21">
            <summary>
            Element (2,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M22">
            <summary>
            Element (2,2)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M31">
            <summary>
            Element (3,1)
            </summary>
        </member>
        <member name="F:SharpDX.Direct2D1.Matrix3x2.M32">
            <summary>
            Element (3,2)
            </summary>
        </member>
        <member name="M:SharpDX.Direct2D1.Matrix3x2.op_Explicit(SharpDX.Matrix)~SharpDX.Direct2D1.Matrix3x2">
            <summary>
            Performs an explicit conversion from <see cref="T:SharpDX.Matrix"/> to <see cref="T:SharpDX.Direct2D1.Matrix3x2"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpDX.Direct2D1.Matrix3x2.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
    </members>
</doc>

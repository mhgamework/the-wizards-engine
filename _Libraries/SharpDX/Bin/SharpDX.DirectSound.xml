<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.DirectSound</name>
    </assembly>
    <members>
        <member name="T:SharpDX.DirectSound.Buffer3DSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DBUFFER</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Buffer3DSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Buffer3DSettings"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.Position">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.Velocity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vVelocity</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.InsideConeAngle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwInsideConeAngle</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.OutsideConeAngle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwOutsideConeAngle</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.ConeOrientation">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vConeOrientation</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.ConeOutsideVolume">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lConeOutsideVolume</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.MinDistance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVALUE flMinDistance</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.MaxDistance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVALUE flMaxDistance</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Buffer3DSettings.Mode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwMode</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Capabilities">
            <summary>	
            The DSCAPS structure describes the capabilities of a device. It is used by the {{IDirectSound8::GetCaps}} method.	
            </summary>	
            <unmanaged>DSCAPS</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Capabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Capabilities"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.Size">
            <summary>	
            Size of the structure, in bytes. This member must be initialized before the structure is used. 	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.Flags">
            <summary>	
            Flags describing device capabilities. Can include the values shown in the following table.  Value	
            Description	
             DSCAPS_CERTIFIED	
            The driver has been tested and certified by Microsoft. This flag is always set for WDM drivers. To test for certification, use <see cref="M:SharpDX.DirectSound.DirectSound.VerifyCertification(System.Int32@)"/>.	
             DSCAPS_CONTINUOUSRATE	
            The device supports all sample rates between the dwMinSecondarySampleRate and dwMaxSecondarySampleRate member values. Typically, this means that the actual output rate will be within +/- 10 hertz (Hz) of the requested frequency.	
             DSCAPS_EMULDRIVER	
            The device does not have a DirectSound driver installed, so it is being emulated through the waveform-audio functions. Performance degradation should be expected.	
             DSCAPS_PRIMARY16BIT	
            The device supports a primary buffer with 16-bit samples.	
             DSCAPS_PRIMARY8BIT	
            The device supports primary buffers with 8-bit samples.	
             DSCAPS_PRIMARYMONO	
            The device supports monophonic primary buffers.	
             DSCAPS_PRIMARYSTEREO	
            The device supports stereo primary buffers.	
             DSCAPS_SECONDARY16BIT	
            The device supports hardware-mixed secondary sound buffers with 16-bit samples.	
             DSCAPS_SECONDARY8BIT	
            The device supports hardware-mixed secondary buffers with 8-bit samples.	
             DSCAPS_SECONDARYMONO	
            The device supports hardware-mixed monophonic secondary buffers.	
             DSCAPS_SECONDARYSTEREO	
            The device supports hardware-mixed stereo secondary buffers.	
              	
            </summary>	
            <unmanaged>DSCAPS_FLAGS dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MinSecondarySampleRate">
            <summary>	
            Minimum and maximum sample rate specifications that are supported by this device's hardware secondary sound buffers. 	
            </summary>	
            <unmanaged>int dwMinSecondarySampleRate</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxSecondarySampleRate">
            <summary>	
            Number of primary buffers supported. This value will always be 1. 	
            </summary>	
            <unmanaged>int dwMaxSecondarySampleRate</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.PrimaryBuffers">
            <summary>	
            Number of buffers that can be mixed in hardware. This member can be less than the sum of dwMaxHwMixingStaticBuffers and dwMaxHwMixingStreamingBuffers. Resource tradeoffs frequently occur.  	
            </summary>	
            <unmanaged>int dwPrimaryBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardwareMixingAllBuffers">
            <summary>	
            Maximum number of static buffers. 	
            </summary>	
            <unmanaged>int dwMaxHwMixingAllBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardwareMixingStaticBuffers">
            <summary>	
            Maximum number of streaming sound buffers.  	
            </summary>	
            <unmanaged>int dwMaxHwMixingStaticBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardwareMixingStreamingBuffers">
            <summary>	
            Number of unallocated buffers. On WDM drivers, this includes dwFreeHw3DAllBuffers. 	
            </summary>	
            <unmanaged>int dwMaxHwMixingStreamingBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardwareMixingAllBuffers">
            <summary>	
            Number of unallocated static buffers. 	
            </summary>	
            <unmanaged>int dwFreeHwMixingAllBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardwareMixingStaticBuffers">
            <summary>	
            Number of unallocated streaming buffers. 	
            </summary>	
            <unmanaged>int dwFreeHwMixingStaticBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardwareMixingStreamingBuffers">
            <summary>	
            Maximum number of 3D buffers. 	
            </summary>	
            <unmanaged>int dwFreeHwMixingStreamingBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardware3DAllBuffers">
            <summary>	
            Maximum number of static 3D buffers. 	
            </summary>	
            <unmanaged>int dwMaxHw3DAllBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardware3DStaticBuffers">
            <summary>	
            Maximum number of streaming 3D buffers. 	
            </summary>	
            <unmanaged>int dwMaxHw3DStaticBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxHardware3DStreamingBuffers">
            <summary>	
            Number of unallocated 3D buffers. 	
            </summary>	
            <unmanaged>int dwMaxHw3DStreamingBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardware3DAllBuffers">
            <summary>	
            Number of unallocated static 3D buffers. 	
            </summary>	
            <unmanaged>int dwFreeHw3DAllBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardware3DStaticBuffers">
            <summary>	
            Number of unallocated streaming 3D buffers. 	
            </summary>	
            <unmanaged>int dwFreeHw3DStaticBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardware3DStreamingBuffers">
            <summary>	
            Size, in bytes, of the amount of memory on the sound card that stores static sound buffers. 	
            </summary>	
            <unmanaged>int dwFreeHw3DStreamingBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.TotalHardwareMemBytes">
            <summary>	
            Size, in bytes, of the free memory on the sound card. 	
            </summary>	
            <unmanaged>int dwTotalHwMemBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.FreeHardwareMemBytes">
            <summary>	
            Size, in bytes, of the largest contiguous block of free memory on the sound card. 	
            </summary>	
            <unmanaged>int dwFreeHwMemBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.MaxContigFreeHardwareMemBytes">
            <summary>	
            The rate, in kilobytes per second, at which data can be transferred to hardware static sound buffers. This and the number of bytes transferred determines the duration of a call to the {{IDirectSoundBuffer8::Unlock}} method. 	
            </summary>	
            <unmanaged>int dwMaxContigFreeHwMemBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.UnlockTransferRateHardwareBuffers">
            <summary>	
            The processing overhead, as a percentage of main processor cycles, needed to mix software buffers. This varies according to the bus type, the processor type, and the clock speed. 	
            </summary>	
            <unmanaged>int dwUnlockTransferRateHwBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.PlayCpuOverheadSwBuffers">
            <summary>	
            Not used. 	
            </summary>	
            <unmanaged>int dwPlayCpuOverheadSwBuffers</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.Reserved1">
            <summary>	
            Not used. 	
            </summary>	
            <unmanaged>int dwReserved1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Capabilities.Reserved2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved2</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundCaptureBuffer8</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBufferBase">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundCaptureBuffer</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Lock(System.Int32,System.Int32,SharpDX.DirectSound.LockFlags,SharpDX.DataStream@)">
            <summary>	
            The Lock method locks a portion of the buffer. Locking the buffer returns references into the buffer, allowing the application to read or write audio data into memory.	
            </summary>	
            <param name="offset">Offset, in bytes, from the start of the buffer to the point where the lock begins. </param>
            <param name="sizeBytes">Size, in bytes, of the portion of the buffer to lock. Because the buffer is conceptually circular, this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
            <param name="flags"> Flags modifying the lock event. The following flags are defined:  ValueDescription DSBLOCK_FROMWRITECURSORStart the lock at the write cursor. The dwOffset parameter is ignored. DSBLOCK_ENTIREBUFFERLock the entire buffer. The dwBytes parameter is ignored.  </param>
            <param name="secondPart"> Address of a variable that receives a pointer to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
            <returns>Address of a variable that receives a pointer to the first locked part of the buffer.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Unlock(SharpDX.DataStream,SharpDX.DataStream)">
            <summary>	
            The Unlock method releases a locked sound buffer.	
            </summary>	
            <param name="dataPart1"> Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
            <param name="dataPart2"> Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundBuffer8::Lock method. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Read``1(``0[],System.Int32,SharpDX.DirectSound.LockFlags)">
            <summary>
            Writes data to the buffer.
            </summary>
            <returns />
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Read``1(``0[],System.Int32,System.Int32,System.Int32,SharpDX.DirectSound.LockFlags)">
            <summary>
            Writes data to the buffer.
            </summary>
            <returns />
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureBufferBase"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.GetCapabilities(SharpDX.DirectSound.CaptureBufferCapabilities@)">
            <summary>	
            The GetCaps method retrieves the capabilities of the buffer.	
            </summary>	
            <param name="pDSCBCaps">Pointer to a <see cref="T:SharpDX.DirectSound.CaptureBufferCapabilities"/> structure that receives information about the capture buffer. On input, the dwSize member must specify the size of the structure in bytes. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCaps([Out] LPDSCBCAPS pDSCBCaps)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.GetCurrentPosition(System.Int32@,System.Int32@)">
            <summary>	
            The GetCurrentPosition method retrieves the positions of the capture and read cursors in the buffer.	
            </summary>	
            <param name="capturePosition">Address of a variable that receives the offset from the start of the buffer, in bytes, of the capture cursor. The parameter can be NULL if this value is not wanted.  </param>
            <param name="readPosition">Address of a variable that receives the offset from the start of the buffer, in bytes, of the read cursor. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCurrentPosition([Out, Optional] int* pdwCapturePosition,[Out, Optional] int* pdwReadPosition)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.GetFormat(System.IntPtr,System.Int32,System.Int32@)">
            <summary>	
            The GetFormat method retrieves the waveform format of the capture buffer.	
            </summary>	
            <param name="wfxFormatRef">Address of a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure that receives a description of the sound data in the capture buffer. To retrieve the buffer size needed to contain the format description, specify NULL.; in this case, the DWORD pointed to by the pdwSizeWritten parameter receives the size of the structure needed to receive complete format information. </param>
            <param name="sizeAllocated">Size, in bytes, of the WAVEFORMATEX structure. DirectSoundCapture writes, at most, dwSizeAllocated bytes to the structure. </param>
            <param name="sizeWritten">Address of a variable that receives the number of bytes written to the WAVEFORMATEX structure; or, if pwfxFormat is NULL, the size of the WAVEFORMATEX structure that would be necessary to receive the information. This parameter can be NULL if the value is not wanted. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetFormat([In] void* pwfxFormat,[None] int dwSizeAllocated,[Out, Optional] int* pdwSizeWritten)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.GetCaptureStatus(SharpDX.DirectSound.CaptureBufferStatusFlags@)">
            <summary>	
            The GetStatus method retrieves the status of the capture buffer.	
            </summary>	
            <param name="status">Address of a variable that receives the status of the capture buffer. The status can be set to one or more of the following: ValueDescription DSCBSTATUS_CAPTURINGThe buffer is capturing audio data. DSCBSTATUS_LOOPINGThe buffer is looping.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetStatus([Out] DSCBSTATUS_FLAGS* pdwStatus)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Lock(System.Int32,System.Int32,System.IntPtr@,System.Int32@,System.IntPtr@,System.Int32@,System.Int32)">
            <summary>	
            The Lock method locks a portion of the buffer. Locking the buffer returns references into the buffer, allowing the application to read or write audio data into memory.	
            </summary>	
            <param name="offset">Offset, in bytes, from the start of the buffer to the point where the lock begins. </param>
            <param name="bytes">Size, in bytes, of the portion of the buffer to lock. Because the buffer is conceptually circular, this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
            <param name="audioPtr1">Address of a variable that receives a reference to the first locked part of the buffer. </param>
            <param name="audioBytes1">Address of a variable that receives the number of bytes in the block at ppvAudioPtr1. If this value is less than dwBytes, the lock has wrapped and ppvAudioPtr2 points to a second block of data at the beginning of the buffer. </param>
            <param name="audioPtr2">Address of a variable that receives a reference to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
            <param name="audioBytes2">Address of a variable that receives the number of bytes in the block at ppvAudioPtr2. If ppvAudioPtr2 is NULL, this value is zero. </param>
            <param name="flags">Flags modifying the lock event. This value can be zero or the following flag: ValueDescription DSCBLOCK_ENTIREBUFFERIgnore dwBytes and lock the entire capture buffer.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Start(System.Boolean)">
            <summary>	
            The Start method begins capturing data into the buffer. If the buffer is already capturing, the method has no effect.	
            </summary>	
            <param name="flags">Flags that specify the behavior of the buffer when capturing sound data. The following flag is defined:   ValueDescription DSCBSTART_LOOPINGAfter the end of the buffer is reached, capture restarts at the beginning and continues until explicitly stopped.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::Start([None] BOOL dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Stop">
            <summary>	
            The Stop method stops the buffer so that it is no longer capturing data. If the buffer is not capturing, the method has no effect.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::Stop()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferBase.Unlock(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            The Unlock method unlocks the buffer.	
            </summary>	
            <param name="vAudioPtr1Ref">Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
            <param name="audioBytes1">Number of bytes read from the pvAudioPtr1 parameter. See Remarks. </param>
            <param name="vAudioPtr2Ref">Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundCaptureBuffer8::Lock method. </param>
            <param name="audioBytes2">Number of bytes read from the pvAudioPtr2 parameter. See Remarks. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.Capturing">
            <summary>
            True if the buffer is currently capturing.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.CurrentCapturePosition">
            <summary>
            The offset from the start of the buffer, in bytes, of the capture cursor.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.CurrentRealPosition">
            <summary>
            The offset from the start of the buffer, in bytes, of the read cursor.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.Looping">
            <summary>
            True if the capture buffer is looping.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.Format">
            <summary>
            Gets the waveform format of the capture buffer.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.Capabilities">
            <summary>	
            The GetCaps method retrieves the capabilities of the buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCaps([Out] LPDSCBCAPS pDSCBCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferBase.CaptureStatus">
            <summary>	
            The GetStatus method retrieves the status of the capture buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetStatus([Out] DSCBSTATUS_FLAGS* pdwStatus)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.#ctor(SharpDX.DirectSound.DirectSoundCapture,SharpDX.DirectSound.CaptureBufferDescription)">
            <summary>	
            Creates a buffer for capturing waveform audio.	
            </summary>
            <param name="capture">a reference to an instance of <see cref="T:SharpDX.DirectSound.DirectSoundCapture"/></param>
            <param name="description">a <see cref="T:SharpDX.DirectSound.CaptureBufferDescription"/> structure containing values for the capture buffer being created. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCapture::CreateCaptureBuffer([In] LPCDSCBUFFERDESC pcDSCBufferDesc,[Out] LPDIRECTSOUNDCAPTUREBUFFER* ppDSCBuffer,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.GetEffect``1(System.Int32)">
            <summary>	
            Retrieves an interface to an effect object associated with the buffer.	
            </summary>	
            <param name="index">Index of the object within objects of that class in the path. See Remarks.  </param>
            <returns>an effect object associated with the buffer</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetObjectInPath([In] GUID* rguidObject,[None] int dwIndex,[In] GUID* rguidInterface,[Out] void** ppObject)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.GetEffectStatus(System.Int32)">
            <summary>
            Retrieves the status of capture effects.
            </summary>
            <param name="effectCount" />
            <returns />
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.SetNotificationPositions(SharpDX.DirectSound.NotificationPosition[])">
            <summary>
            Sets the notification positions.
            </summary>
            <param name="positions">The positions.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.GetEffect(System.Guid,System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            The GetObjectInPath method retrieves an interface to an effect object associated with the buffer.	
            </summary>	
            <param name="rguidObject">Value of type REFGUID that specifies the unique class identifier of the object being searched for, such as GUID_DSCFX_CLASS_AEC. </param>
            <param name="index">Index of the object within objects of that class in the path. See Remarks.  </param>
            <param name="rguidInterface">Unique identifier of the desired interface, such as IID_IDirectSoundCaptureFXAec8. </param>
            <param name="objectRef">Address of a variable that receives the desired interface reference. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetObjectInPath([In] GUID* rguidObject,[None] int dwIndex,[In] GUID* rguidInterface,[Out] void** ppObject)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBuffer.GetEffectStatus(System.Int32,SharpDX.DirectSound.CaptureEffectResult[])">
            <summary>	
            The GetFXStatus method retrieves the status of capture effects.	
            </summary>	
            <param name="effectsCount">Number of elements in the pdwFXStatus array.  </param>
            <param name="fXStatus">Address of an array of DWORD variables that receive the status of each effect. This should contain the same number of elements as the array passed in the dwFXCount member of the <see cref="T:SharpDX.DirectSound.CaptureBufferDescription"/> structure passed to {{DirectSoundFullDuplexCreate8}} or {{IDirectSoundCapture8::CreateCaptureBuffer}}. The possible values returned in the array are as follows: ValueDescription DSCFXR_LOCHARDWAREEffect is instantiated in hardware. DSCFXR_LOCSOFTWAREEffect is instantiated in software.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetFXStatus([None] int dwEffectsCount,[Out, Buffer] DSCFX_ENUM* pdwFXStatus)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBufferCapabilities">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureBufferCapabilities"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilities.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilities.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS_FLAGS dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilities.BufferBytes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwBufferBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilities.Reserved">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBufferDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBUFFERDESC</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureBufferDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureBufferDescription"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS_FLAGS dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.BufferBytes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwBufferBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.Reserved">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.FormatPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>WAVEFORMATEX* lpwfxFormat</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.EffectCount">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwFXCount</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferDescription.EffectDescriptionPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>LPDSCEFFECTDESC lpDSCFXDesc</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferDescription.WaveMapped">
            <summary>
            Gets a value indicating whether [wave mapped].
            </summary>
            <value><c>true</c> if [wave mapped]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferDescription.ControlEffects">
            <summary>
            Gets a value indicating whether [control effects].
            </summary>
            <value><c>true</c> if [control effects]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferDescription.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:SharpDX.DirectSound.CaptureBufferDescription.EffectDescriptions">
            <summary>
            Describes effects supported by hardware for the buffer.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureCapabilities">
            <summary>	
            The DSCCAPS structure describes the capabilities of the capture device. It is used by the {{IDirectSoundCapture8::GetCaps}} method.	
            </summary>	
            <unmanaged>DSCCAPS</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureCapabilities"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilities.Size">
            <summary>	
            Size of the structure, in bytes. This member must be initialized before the structure is used. 	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilities.Flags">
            <summary>	
            Specifies device capabilities. Can be zero or one or more of the following flags.   Value	
            Description	
             DSCCAPS_CERTIFIED	
            The driver for the device is a certified WDM driver.	
             DSCCAPS_EMULDRIVER	
            There is no DirectSoundCapture driver for the device, so the standard waveform audio functions are being used.	
             DSCCAPS_MULTIPLECAPTURE	
            Multiple capture objects can be used simultaneously on the capture device.	
              	
            </summary>	
            <unmanaged>int dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilities.Formats">
            <summary>	
            Standard formats that are supported. These are equivalent to the values in the WAVEINCAPS structure used in the Win32 waveform audio functions, and are defined in MMSystem.h in the Platform SDK. 	
            </summary>	
            <unmanaged>int dwFormats</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilities.Channels">
            <summary>	
            Number of channels supported by the device, where 1 is mono, 2 is stereo, and so on. 	
            </summary>	
            <unmanaged>int dwChannels</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureEffectDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCEFFECTDESC</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.CaptureEffectDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.CaptureEffectDescription"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_ENUM dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.CaptureEffectClass">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>GUID guidDSCFXClass</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.CaptureEffectInstance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>GUID guidDSCFXInstance</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.Reserved1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectDescription.Reserved2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved2</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Chorus">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXChorus</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DelayDefault">
            <summary>
            Default number of milliseconds the input is delayed before it is played back. The default value is 50. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DelayMax">
            <summary>
            Maximum number of milliseconds the input is delayed before it is played back. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DelayMin">
            <summary>
            Minimum number of milliseconds the input is delayed before it is played back. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DepthDefault">
            <summary>
            Default percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point. The default value is 10.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DepthMax">
            <summary>
            Maximum percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.DepthMin">
            <summary>
            Minimum percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FeedbackDefault">
            <summary>
            Default percentage of output signal to feed back into the effect's input. The default value is 25.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FeedbackMax">
            <summary>
            Maximum percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FeedbackMin">
            <summary>
            Minimum percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FrequencyDefault">
            <summary>
            Default frequency of the LFO. The default value is 1.1. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FrequencyMax">
            <summary>
            Maximum frequency of the LFO.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.FrequencyMin">
            <summary>
            Minimum frequency of the LFO.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.Phase180">
            <summary>
            Positive 180 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.Phase90">
            <summary>
            Positive 90 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseDefault">
            <summary>
            Default phase differential between left and right LFOs. The default value is Phase90.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseMax">
            <summary>
            Maximum phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseMin">
            <summary>
            Minimum phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseNegative180">
            <summary>
            Negative 180 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseNegative90">
            <summary>
            Negative 90 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.PhaseZero">
            <summary>
            Zero phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WaveformDefault">
            <summary>
            Default waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WaveformSin">
            <summary>
            Sine waveform shape of the LFO.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WaveformTriangle">
            <summary>
            Triangle waveform shape of the LFO.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WetDryMixDefault">
            <summary>
            Default ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WetDryMixMax">
            <summary>
            Maximum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Chorus.WetDryMixMin">
            <summary>
            Minimum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Chorus.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Chorus"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Chorus.SetAllParameters(SharpDX.DirectSound.ChorusSettings@)">
            <summary>	
            The SetAllParameters method sets the chorus parameters of a buffer.	
            </summary>	
            <param name="pcDsFxChorus">Address of a <see cref="T:SharpDX.DirectSound.ChorusSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXChorus::SetAllParameters([In] LPCDSFXChorus pcDsFxChorus)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Chorus.GetAllParameters(SharpDX.DirectSound.ChorusSettings@)">
            <summary>	
            The GetAllParameters method retrieves the chorus parameters of a buffer.	
            </summary>	
            <param name="pDsFxChorus">Address of a <see cref="T:SharpDX.DirectSound.ChorusSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXChorus::GetAllParameters([Out] LPDSFXChorus pDsFxChorus)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Chorus.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the chorus parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXChorus::GetAllParameters([Out] LPDSFXChorus pDsFxChorus)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Compressor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXCompressor</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.AttackDefault">
            <summary>
            Default time before compression reaches its full value, in decibels (dB). The default value is 10 ms.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.AttackMax">
            <summary>
            Maximum time before compression reaches its full value, in decibels (dB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.AttackMin">
            <summary>
            Minimum time before compression reaches its full value, in decibels (dB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.GainDefault">
            <summary>
            Default output gain of signal after compression, in decibels (dB). The default value is 0 dB. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.GainMax">
            <summary>
            Maximum output gain of signal after compression, in decibels (dB). 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.GainMin">
            <summary>
            Minimum output gain of signal after compression, in decibels (dB). 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.PreDelayDefault">
            <summary>
            Default time after threshold is reached before attack phase is started, in milliseconds. The default value is 4 ms. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.PreDelayMax">
            <summary>
            Maximum time after threshold is reached before attack phase is started, in milliseconds. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.PreDelayMin">
            <summary>
            Minimum time after threshold is reached before attack phase is started, in milliseconds. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.RatioDefault">
            <summary>
            Default compression ratio. The default value is 3, which means 3:1 compression. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.RatioMax">
            <summary>
            Maximum compression ratio.  
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.RatioMin">
            <summary>
            Minimum compression ratio. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ReleaseDefault">
            <summary>
            Default speed at which compression is stopped after input drops below Threshold, in miliseconds. The default value is 200 ms.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ReleaseMax">
            <summary>
            Maximum speed at which compression is stopped after input drops below Threshold, in miliseconds. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ReleaseMin">
            <summary>
            Minimum speed at which compression is stopped after input drops below Threshold, in miliseconds. 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ThresholdDefault">
            <summary>
            Default point at which compression begins, in decibels, in decibels (dB). The default value is -20 dB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ThresholdMax">
            <summary>
            Maximum point at which compression begins, in decibels, in decibels (dB). 
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Compressor.ThresholdMin">
            <summary>
            Minimum point at which compression begins, in decibels, in decibels (dB).
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Compressor.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Compressor"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Compressor.SetAllParameters(SharpDX.DirectSound.CompressorSettings@)">
            <summary>	
            The SetAllParameters method sets the compression parameters of a buffer.	
            </summary>	
            <param name="pcDsFxCompressor">Address of a <see cref="T:SharpDX.DirectSound.CompressorSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXCompressor::SetAllParameters([In] LPCDSFXCompressor pcDsFxCompressor)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Compressor.GetAllParameters(SharpDX.DirectSound.CompressorSettings@)">
            <summary>	
            The GetAllParameters method retrieves the compression parameters of a buffer.	
            </summary>	
            <param name="pDsFxCompressor">Address of a <see cref="T:SharpDX.DirectSound.CompressorSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXCompressor::GetAllParameters([Out] LPDSFXCompressor pDsFxCompressor)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Compressor.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the compression parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXCompressor::GetAllParameters([Out] LPDSFXCompressor pDsFxCompressor)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.DeviceInformation">
            <summary>
            Contains information about a DirectSound device.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.DeviceInformation.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DeviceInformation"/> class.
            </summary>
            <param name="driverGuid">The driver GUID.</param>
            <param name="description">The description.</param>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="P:SharpDX.DirectSound.DeviceInformation.DriverGuid">
            <summary>
            Identifies the DirectSound driver being enumerated
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.DeviceInformation.Description">
            <summary>
            String that provides a textual description of the DirectSound device.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.DeviceInformation.ModuleName">
            <summary>
            String that specifies the module name of the DirectSound driver corresponding to this device.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.DirectSound">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSound8</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.DirectSoundBase">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSound</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSoundBase"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.CreateSoundBuffer(SharpDX.DirectSound.SoundBufferDescription@,System.IntPtr@,SharpDX.ComObject)">
            <summary>	
            The CreateSoundBuffer method creates a sound buffer object to manage audio samples.	
            </summary>	
            <param name="pcDSBufferDesc">Address of a <see cref="T:SharpDX.DirectSound.SoundBufferDescription"/> structure that describes the sound buffer to create. </param>
            <param name="dSBufferRef">Address of a variable that receives the IDirectSoundBuffer interface of the new buffer object. Use QueryInterface to obtain <see cref="T:SharpDX.DirectSound.SecondarySoundBuffer"/>. IDirectSoundBuffer8 is not available for the primary buffer. </param>
            <param name="unkOuterRef">Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::CreateSoundBuffer([In] LPCDSBUFFERDESC pcDSBufferDesc,[Out] void* ppDSBuffer,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.GetCapabilities(SharpDX.DirectSound.Capabilities@)">
            <summary>	
            The GetCaps method retrieves the capabilities of the hardware device that is represented by the device object.	
            </summary>	
            <param name="pDSCaps">Address of a <see cref="T:SharpDX.DirectSound.Capabilities"/> structure that receives the capabilities of this sound device. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::GetCaps([Out] LPDSCAPS pDSCaps)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.DuplicateSoundBuffer(SharpDX.DirectSound.SoundBuffer,System.IntPtr@)">
            <summary>	
            The DuplicateSoundBuffer method creates a new secondary buffer that shares the original buffer's memory.	
            </summary>	
            <param name="pDSBufferOriginal">Address of the IDirectSoundBuffer or <see cref="T:SharpDX.DirectSound.SecondarySoundBuffer"/> interface of the buffer to duplicate. </param>
            <param name="dSBufferDuplicateRef">Address of a variable that receives the IDirectSoundBuffer interface reference for the new buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::DuplicateSoundBuffer([In] LPDIRECTSOUNDBUFFER pDSBufferOriginal,[Out] void* ppDSBufferDuplicate)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.SetCooperativeLevel(System.IntPtr,SharpDX.DirectSound.CooperativeLevel)">
            <summary>	
            The SetCooperativeLevel method sets the cooperative level of the application for this sound device.	
            </summary>	
            <param name="hwnd">Handle to the application window. </param>
            <param name="level">Requested level. Specify one of the values shown in the following table.  ValueDescription DSSCL_EXCLUSIVEFor DirectX 8.0 and later, has the same effect as DSSCL_PRIORITY. For previous versions, sets the application to the exclusive level. This means that when it has the input focus, the application will be the only one audible; sounds from applications with the DSBCAPS_GLOBALFOCUS flag set will be muted. With this level, it also has all the privileges of the DSSCL_PRIORITY level. DirectSound will restore the hardware format, as specified by the most recent call to the {{SetFormat}} method, after the application gains the input focus. DSSCL_NORMALSets the normal level. This level has the smoothest multitasking and resource-sharing behavior, but because it does not allow the primary buffer format to change, output is restricted to the default 8-bit format. DSSCL_PRIORITYSets the priority level. Applications with this cooperative level can call the {{SetFormat}} and {{Compact}} methods. DSSCL_WRITEPRIMARYSets the write-primary level. The application has write access to the primary buffer. No secondary buffers can be played. This level cannot be set if the DirectSound driver is being emulated for the device; that is, if the {{GetCaps}} method returns the DSCAPS_EMULDRIVER flag in the <see cref="T:SharpDX.DirectSound.Capabilities"/> structure.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::SetCooperativeLevel([None] void* hwnd,[None] DSSCL_ENUM dwLevel)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.Compact">
            <summary>	
            The Compact method has no effect.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::Compact()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.GetSpeakerConfiguration(System.Int32@)">
            <summary>	
            The GetSpeakerConfig method retrieves the speaker configuration.	
            </summary>	
            <param name="speakerConfig">Address of the speaker configuration (see remarks in {{IDirectSound8::SetSpeakerConfig}}). </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::GetSpeakerConfig([Out] int* pdwSpeakerConfig)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundBase.SetSpeakerConfiguration(System.Int32)">
            <summary>	
            The SetSpeakerConfig method specifies the speaker configuration of the device.	
            </summary>	
            <param name="speakerConfig">The speaker configuration. See remarks. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound::SetSpeakerConfig([None] int dwSpeakerConfig)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.DirectSoundBase.Capabilities">
            <summary>	
            The GetCaps method retrieves the capabilities of the hardware device that is represented by the device object.	
            </summary>	
            <unmanaged>HRESULT IDirectSound::GetCaps([Out] LPDSCAPS pDSCaps)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSound"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.GetSpeakerConfiguration(SharpDX.DirectSound.SpeakerConfiguration@,SharpDX.DirectSound.SpeakerGeometry@)">
            <summary>
            Retrieves the speaker configuration of the device.
            </summary>
            <param name="speakerSet" />
            <param name="geometry" />
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.SetSpeakerConfiguration(SharpDX.DirectSound.SpeakerConfiguration,SharpDX.DirectSound.SpeakerGeometry)">
            <summary>
            Sets the speaker configuration of the device.
            </summary>
            <param name="speakerSet" />
            <param name="geometry" />
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.GetDevices">
            <summary>
            Enumerates the DirectSound devices installed in the system.
            </summary>
            <returns>A collection of the devices found.</returns>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSound"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.DirectSound.VerifyCertification(System.Int32@)">
            <summary>	
            The VerifyCertification method ascertains whether the device driver is certified for DirectX.	
            </summary>	
            <param name="certified">Address of a DWORD variable that receives one of the values shown in the following table. ValueDescription DS_CERTIFIEDDriver is certified for DirectSound. DS_UNCERTIFIEDDriver is not certified for DirectSound.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound8::VerifyCertification([Out] int* pdwCertified)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.DirectSound.IsCeritified">
            <summary>
            Verifies the certification.
            </summary>
            <returns>Return true if the driver is certified</returns>
        </member>
        <member name="T:SharpDX.DirectSound.DirectSoundCapture">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundCapture</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSoundCapture" /> class.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSoundCapture" /> class.
            </summary>
            <param name="device" />
            <returns />
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.GetDevices">
            <summary>
            Enumerates the DirectSoundCapture devices installed in the system.
            </summary>
            <returns>A collection of the devices found.</returns>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.DirectSoundCapture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.CreateCaptureBuffer(SharpDX.DirectSound.CaptureBufferDescription@,SharpDX.DirectSound.CaptureBufferBase@,SharpDX.ComObject)">
            <summary>	
            The CreateCaptureBuffer method creates a buffer for capturing waveform audio.	
            </summary>	
            <param name="pcDSCBufferDesc">Pointer to a <see cref="T:SharpDX.DirectSound.CaptureBufferDescription"/> structure containing values for the capture buffer being created. </param>
            <param name="dSCBufferRef">Address of a variable that receives an IDirectSoundCaptureBuffer interface reference. Use QueryInterface to obtain <see cref="T:SharpDX.DirectSound.CaptureBuffer"/>. See Remarks. </param>
            <param name="unkOuterRef">Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCapture::CreateCaptureBuffer([In] LPCDSCBUFFERDESC pcDSCBufferDesc,[Out] LPDIRECTSOUNDCAPTUREBUFFER* ppDSCBuffer,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DirectSoundCapture.GetCapabilities(SharpDX.DirectSound.CaptureCapabilities@)">
            <summary>	
            The GetCaps method retrieves the capabilities of the capture device.	
            </summary>	
            <param name="pDSCCaps">Pointer to a <see cref="T:SharpDX.DirectSound.CaptureCapabilities"/> structure to be receive information about the capture device. When the method is called, the dwSize member must specify the size of the structure in bytes. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCapture::GetCaps([Out] LPDSCCAPS pDSCCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.DirectSoundCapture.Capabilities">
            <summary>	
            The GetCaps method retrieves the capabilities of the capture device.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCapture::GetCaps([Out] LPDSCCAPS pDSCCaps)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Distortion">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXDistortion</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.EdgeDefault">
            <summary>
            Default percentage of distortion intensity.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.EdgeMax">
            <summary>
            Maximum percentage of distortion intensity.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.EdgeMin">
            <summary>
            Minimum percentage of distortion intensity.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.GainDefault">
            <summary>
            Default amount of signal change after distortion.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.GainMax">
            <summary>
            Maximum amount of signal change after distortion.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.GainMin">
            <summary>
            Minimum amount of signal change after distortion.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQBandwidthDefault">
            <summary>
            Default width of frequency band that determines range of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQBandwidthMax">
            <summary>
            Maximum width of frequency band that determines range of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQBandwidthMin">
            <summary>
            Minimum width of frequency band that determines range of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQCenterFrequencyDefault">
            <summary>
            Default center frequency of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQCenterFrequencyMax">
            <summary>
            Maximum center frequency of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PostEQCenterFrequencyMin">
            <summary>
            Minimum center frequency of harmonic content addition.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PreLowPassCutoffDefault">
            <summary>
            Default filter cutoff for high-frequency harmonics attenuation.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PreLowPassCutoffMax">
            <summary>
            Maximum filter cutoff for high-frequency harmonics attenuation.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Distortion.PreLowPassCutoffMin">
            <summary>
            Minimum filter cutoff for high-frequency harmonics attenuation.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Distortion.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Distortion"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Distortion.SetAllParameters(SharpDX.DirectSound.DistortionSettings@)">
            <summary>	
            The SetAllParameters method sets the distortion parameters of a buffer.	
            </summary>	
            <param name="pcDsFxDistortion">Address of a <see cref="T:SharpDX.DirectSound.DistortionSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXDistortion::SetAllParameters([In] LPCDSFXDistortion pcDsFxDistortion)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Distortion.GetAllParameters(SharpDX.DirectSound.DistortionSettings@)">
            <summary>	
            The GetAllParameters method retrieves the distortion parameters of a buffer.	
            </summary>	
            <param name="pDsFxDistortion">Address of a <see cref="T:SharpDX.DirectSound.DistortionSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXDistortion::GetAllParameters([Out] LPDSFXDistortion pDsFxDistortion)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Distortion.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the distortion parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXDistortion::GetAllParameters([Out] LPDSFXDistortion pDsFxDistortion)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Echo">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXEcho</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.FeedbackDefault">
            <summary>
            Default percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.FeedbackMax">
            <summary>
            Maximum percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.FeedbackMin">
            <summary>
            Minimum percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.LeftDelayDefault">
            <summary>
            Default delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.LeftDelayMax">
            <summary>
            Maximum delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.LeftDelayMin">
            <summary>
            Minimum delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.PanDelayDefault">
            <summary>
            Default value that specifies whether to swap left and right delays with each successive echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.PanDelayMax">
            <summary>
            Maximum value that specifies whether to swap left and right delays with each successive echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.PanDelayMin">
            <summary>
            Minimum value that specifies whether to swap left and right delays with each successive echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.RightDelayDefault">
            <summary>
            Default delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.RightDelayMax">
            <summary>
            Maximum delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.RightDelayMin">
            <summary>
            Minimum delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.WetDryMixDefault">
            <summary>
            Default ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.WetDryMixMax">
            <summary>
            Maximum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Echo.WetDryMixMin">
            <summary>
            Minimum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Echo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Echo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Echo.SetAllParameters(SharpDX.DirectSound.EchoSettings@)">
            <summary>	
            The SetAllParameters method sets the echo parameters of a buffer.	
            </summary>	
            <param name="pcDsFxEcho">Address of a <see cref="T:SharpDX.DirectSound.EchoSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXEcho::SetAllParameters([In] LPCDSFXEcho pcDsFxEcho)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Echo.GetAllParameters(SharpDX.DirectSound.EchoSettings@)">
            <summary>	
            The GetAllParameters method retrieves the echo parameters of a buffer.	
            </summary>	
            <param name="pDsFxEcho">Address of a <see cref="T:SharpDX.DirectSound.EchoSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXEcho::GetAllParameters([Out] LPDSFXEcho pDsFxEcho)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Echo.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the echo parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXEcho::GetAllParameters([Out] LPDSFXEcho pDsFxEcho)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SoundBuffer3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSound3DBuffer</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.DefaultConeAngle">
            <summary>
            Default cone angle, in degrees.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.DefaultConeOutsideVolume">
            <summary>
            Default outside cone volume. Volume levels are expressed as attenuation, in hundredths of a decibel.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.DefaultMaxDistance">
            <summary>
            Default maximum distance, in meters.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.DefaultMinDistance">
            <summary>
            Default minimum distance, in meters.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.MaxConeAngle">
            <summary>
            Maximum cone angle, in degrees.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBuffer3D.MinConeAngle">
            <summary>
            Minimum cone angle, in degrees.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.#ctor(SharpDX.DirectSound.SoundBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBuffer3D" /> class.
            </summary>
            <param name="soundBuffer" />
            <returns />
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBuffer3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetAllParameters(SharpDX.DirectSound.Buffer3DSettings@)">
            <summary>	
            The GetAllParameters method retrieves the 3D properties of the sound buffer.	
            </summary>	
            <param name="pDs3dBuffer">Address of a <see cref="T:SharpDX.DirectSound.Buffer3DSettings"/> structure that receives the information describing the 3D characteristics of the sound buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetAllParameters([Out] LPDS3DBUFFER pDs3dBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetConeAngles(System.Int32@,System.Int32@)">
            <summary>	
            The GetConeAngles method retrieves the inside and outside angles of the sound projection cone.	
            </summary>	
            <param name="insideConeAngle">Addresses of a variable that receives the inside angle of the sound projection cone, in degrees. This is the angle within which the sound is at its normal volume. </param>
            <param name="outsideConeAngle">Addresses of a variable that receives the outside angle of the sound projection cone, in degrees. This is the angle outside of which the sound is at its outside volume. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetConeAngles([Out] int* pdwInsideConeAngle,[Out] int* pdwOutsideConeAngle)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetConeOrientation(SharpDX.Vector3@)">
            <summary>	
            The GetConeOrientation method retrieves the orientation of the sound projection cone.	
            </summary>	
            <param name="vOrientationRef">Address of a D3DVECTOR structure that receives the orientation of the sound projection cone. The vector information represents the center of the sound cone. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetConeOrientation([Out] D3DVECTOR* pvOrientation)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetConeOutsideVolume(System.Int32@)">
            <summary>	
            The GetConeOutsideVolume method retrieves the volume of the sound outside the outside angle of the sound projection cone.	
            </summary>	
            <param name="lConeOutsideVolumeRef">Address of a variable that receives the cone outside volume for this buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetConeOutsideVolume([Out] int* plConeOutsideVolume)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetMaxDistance(System.Single@)">
            <summary>	
            The GetMaxDistance method retrieves the maximum distance, which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.	
            </summary>	
            <param name="flMaxDistanceRef">Address of a variable that receives the maximum distance, in meters by default. D3DVALUE is defined as float.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetMaxDistance([Out] D3DVALUE* pflMaxDistance)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetMinDistance(System.Single@)">
            <summary>	
            The GetMinDistance method retrieves the minimum distance, which is the distance from the listener at which sounds in this buffer begin to be attenuated.	
            </summary>	
            <param name="flMinDistanceRef">Address of a variable that receives the minimum distance, in meters by default. D3DVALUE is defined as float.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetMinDistance([Out] D3DVALUE* pflMinDistance)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetMode(System.Int32@)">
            <summary>	
            The GetMode method retrieves the operation mode for 3D sound processing.	
            </summary>	
            <param name="mode">Address of a variable that receives the mode setting. This value will be one of those in the following table.  ValueDescription DS3DMODE_DISABLEProcessing of 3D sound is disabled. The sound seems to originate from the center of the listener's head. DS3DMODE_HEADRELATIVESound parameters (position, velocity, and orientation) are relative to the listener's parameters. In this mode, the absolute parameters of the sound are updated automatically as the listener's parameters change, so that the relative parameters remain constant. DS3DMODE_NORMALNormal processing. This is the default mode.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetMode([Out] int* pdwMode)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetPosition(SharpDX.Vector3@)">
            <summary>	
            The GetPosition method retrieves the position of the sound source.	
            </summary>	
            <param name="vPositionRef">Address of a <see cref="T:SharpDX.Vector3"/> structure that receives the position of the sound buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetPosition([Out] D3DVECTOR* pvPosition)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.GetVelocity(SharpDX.Vector3@)">
            <summary>	
            The GetVelocity method retrieves the velocity of the sound source.	
            </summary>	
            <param name="vVelocityRef">Address of a <see cref="T:SharpDX.Vector3"/> structure that receives the sound buffer's velocity, in meters per second by default. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::GetVelocity([Out] D3DVECTOR* pvVelocity)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetAllParameters(SharpDX.DirectSound.Buffer3DSettings@,System.Int32)">
            <summary>	
            The SetAllParameters method sets all 3D sound buffer properties.	
            </summary>	
            <param name="pcDs3dBuffer">Address of a <see cref="T:SharpDX.DirectSound.Buffer3DSettings"/> structure that describes the 3D characteristics of the sound buffer. </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetAllParameters([In] LPCDS3DBUFFER pcDs3dBuffer,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetConeAngles(System.Int32,System.Int32,System.Int32)">
            <summary>	
            The SetConeAngles method sets the inside and outside angles of the sound projection cone.	
            </summary>	
            <param name="insideConeAngle">Inside cone angle, in degrees. This is the angle within which the sound is at its normal volume. </param>
            <param name="outsideConeAngle">Outside cone angle, in degrees. This is the angle outside of which the sound is at its outside volume. </param>
            <param name="apply">Value that indicates when the setting should be applied. Must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetConeAngles([None] int dwInsideConeAngle,[None] int dwOutsideConeAngle,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetConeOrientation(System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetConeOrientation method sets the orientation of the sound projection cone.	
            </summary>	
            <param name="x">Value that specifies the x coordinate of the sound cone orientation vector. D3DVALUE is defined as float.  </param>
            <param name="y">Value that specifies the y coordinate of the sound cone orientation vector. D3DVALUE is defined as float.   </param>
            <param name="z">Value that specifies the z coordinate of the sound cone orientation vector. D3DVALUE is defined as float.  	 </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetConeOrientation([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetConeOutsideVolume(System.Int32,System.Int32)">
            <summary>	
            The SetConeOutsideVolume method sets the volume of the sound outside the outside angle of the sound projection cone.	
            </summary>	
            <param name="coneOutsideVolume">Cone outside volume, in hundredths of a decibel. </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the those shown in the following table. ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetConeOutsideVolume([None] int lConeOutsideVolume,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetMaxDistance(System.Single,System.Int32)">
            <summary>	
            The SetMaxDistance method sets the maximum distance, which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.	
            </summary>	
            <param name="maxDistance">Maximum distance, in meters by default. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetMaxDistance([None] D3DVALUE flMaxDistance,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetMinDistance(System.Single,System.Int32)">
            <summary>	
            The SetMinDistance method sets the minimum distance, which is the distance from the listener at which sounds in this buffer begin to be attenuated.	
            </summary>	
            <param name="minDistance">Minimum distance, in meters by default. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetMinDistance([None] D3DVALUE flMinDistance,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetMode(System.Int32,System.Int32)">
            <summary>	
            The SetMode method sets the operation mode for 3D sound processing.	
            </summary>	
            <param name="mode">Flag specifying the 3D sound processing mode to be set. The flags in the following table are defined. ValueDescription DS3DMODE_DISABLEProcessing of 3D sound is disabled. The sound seems to originate from the center of the listener's head. DS3DMODE_HEADRELATIVESound parameters (position, velocity, and orientation) are relative to the listener's parameters. In this mode, the absolute parameters of the sound are updated automatically as the listener's parameters change, so that the relative parameters remain constant. DS3DMODE_NORMALNormal processing. This is the default mode.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of those in the following table.  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetMode([None] int dwMode,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetPosition(System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetPosition method sets the position of the sound source.	
            </summary>	
            <param name="x">Value that specifies the x coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="y">Value that specifies the y coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="z">Value that specifies the z coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetPosition([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer3D.SetVelocity(System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetVelocity method sets the velocity of the sound source.	
            </summary>	
            <param name="x">Value that specifies the x coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="y">Value that specifies the y coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="z">Value that specifies the z coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DBuffer::SetVelocity([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.AllParameters">
            <summary>
            Gets or sets all the  parameters of a buffer
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.ConeOrientation">
            <summary>
            The orientation of the sound projection cone.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.ConeOutsideVolume">
            <summary>
            The volume of the sound outside the outside angle of the sound projection cone.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.Deferred">
            <summary>
            Settings are not applied until the application calls the SoundListener3D.CommitDeferredSettings() if true.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.InsideConeAngle">
            <summary>
            The inside angle of the sound projection cone.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.MaxDistance">
            <summary>
            The maximum distance, which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.MinDistance">
            <summary>
            The minimum distance, which is the distance from the listener at which sounds in this buffer begin to be attenuated.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.Mode">
            <summary>
            The operation mode for 3-D sound processing.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.OutsideConeAngle">
            <summary>
            The outside angle of the sound projection cone.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.Position">
            <summary>
            The position of the sound source.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer3D.Velocity">
            <summary>
            The velocity of the sound source.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.SoundBufferEffectDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSEFFECTDESC</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBufferEffectDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBufferEffectDescription"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferEffectDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferEffectDescription.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferEffectDescription.idDSFXClass">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>GUID guidDSFXClass</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferEffectDescription.Reserved1">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int* dwReserved1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferEffectDescription.Reserved2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int* dwReserved2</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.EnumDelegateCallback">
            <summary>
            Enumerator callback for DirectSound and DirectCaptureSound.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.EnumDelegateCallback.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.EnumDelegateCallback"/> class.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.EnumDelegateCallback.NativePointer">
            <summary>
            Natives the pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpDX.DirectSound.EnumDelegateCallback.Informations">
            <summary>
            Gets or sets the informations.
            </summary>
            <value>The informations.</value>
        </member>
        <member name="T:SharpDX.DirectSound.Flanger">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXFlanger</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DelayDefault">
            <summary>
            Default number of milliseconds the input is delayed before it is played back.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DelayMax">
            <summary>
            Maximum number of milliseconds the input is delayed before it is played back.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DelayMin">
            <summary>
            Minimum number of milliseconds the input is delayed before it is played back.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DepthDefault">
            <summary>
            Default percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DepthMax">
            <summary>
            Maximum percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.DepthMin">
            <summary>
            Minimum percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FeedbackDefault">
            <summary>
            Default percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FeedbackMax">
            <summary>
            Maximum percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FeedbackMin">
            <summary>
            Minimum percentage of output signal to feed back into the effect's input.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FrequencyDefault">
            <summary>
            Default frequency of the LFO(low-frequency oscillator).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FrequencyMax">
            <summary>
            Maximum frequency of the LFO(low-frequency oscillator).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.FrequencyMin">
            <summary>
            Minimum frequency of the LFO(low-frequency oscillator).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.Phase180">
            <summary>
            Positive 180 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.Phase90">
            <summary>
            Positive 90 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseDefault">
            <summary>
            Default phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseMax">
            <summary>
            Maximum phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseMin">
            <summary>
            Minimum phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseNegative180">
            <summary>
            Negative 180 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseNegative90">
            <summary>
            Negative 90 phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.PhaseZero">
            <summary>
            Zero phase differential between left and right LFOs.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WaveformDefault">
            <summary>
            Default waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WaveformSin">
            <summary>
            Sine waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WaveformTriangle">
            <summary>
            Triangular waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WetDryMixDefault">
            <summary>
            Default ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WetDryMixMax">
            <summary>
            Maximum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Flanger.WetDryMixMin">
            <summary>
            Minimum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Flanger.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Flanger"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Flanger.SetAllParameters(SharpDX.DirectSound.FlangerSettings@)">
            <summary>	
            The SetAllParameters method sets the flange parameters of a buffer.	
            </summary>	
            <param name="pcDsFxFlanger">Address of a <see cref="T:SharpDX.DirectSound.FlangerSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXFlanger::SetAllParameters([In] LPCDSFXFlanger pcDsFxFlanger)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Flanger.GetAllParameters(SharpDX.DirectSound.FlangerSettings@)">
            <summary>	
            The GetAllParameters method retrieves the flange parameters of a buffer.	
            </summary>	
            <param name="pDsFxFlanger">Address of a <see cref="T:SharpDX.DirectSound.FlangerSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXFlanger::GetAllParameters([Out] LPDSFXFlanger pDsFxFlanger)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Flanger.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the flange parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXFlanger::GetAllParameters([Out] LPDSFXFlanger pDsFxFlanger)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.FullDuplex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFullDuplex</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.FullDuplex.#ctor(System.Guid,System.Guid,SharpDX.DirectSound.CaptureBufferDescription,SharpDX.DirectSound.SoundBufferDescription,System.IntPtr,SharpDX.DirectSound.CooperativeLevel,SharpDX.DirectSound.CaptureBuffer@,SharpDX.DirectSound.SecondarySoundBuffer@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.FullDuplex" /> class.
            </summary>
            <param name="captureDevice" />
            <param name="playbackDevice" />
            <param name="captureDescription" />
            <param name="bufferDescription" />
            <param name="windowHandle" />
            <param name="level" />
            <param name="captureBuffer" />
            <param name="secondaryBuffer" />
        </member>
        <member name="M:SharpDX.DirectSound.FullDuplex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.FullDuplex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.DirectSound.Gargle">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXGargle</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.RateDefault">
            <summary>
            Default rate of modulation, in Hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.RateMax">
            <summary>
            Maximum rate of modulation, in Hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.RateMin">
            <summary>
            Minimum rate of modulation, in Hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.WaveShapeDefault">
            <summary>
            Default shape of the modulation waveform.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.WaveShapeSquare">
            <summary>
            Square shape of the modulation waveform.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.Gargle.WaveShapeTriangle">
            <summary>
            Triangular shape of the modulation waveform.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.Gargle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Gargle"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.Gargle.SetAllParameters(SharpDX.DirectSound.GargleSettings)">
            <summary>	
            The SetAllParameters method sets the amplitude modulation parameters of a buffer.	
            </summary>	
            <param name="pcDsFxGargle">Address of a <see cref="T:SharpDX.DirectSound.GargleSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXGargle::SetAllParameters([In] LPCDSFXGargle pcDsFxGargle)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Gargle.GetAllParameters(SharpDX.DirectSound.GargleSettings@)">
            <summary>	
            The GetAllParameters method retrieves the amplitude modulation parameters of a buffer.	
            </summary>	
            <param name="pDsFxGargle">Address of a <see cref="T:SharpDX.DirectSound.GargleSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXGargle::GetAllParameters([Out] LPDSFXGargle pDsFxGargle)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.Gargle.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the amplitude modulation parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXGargle::GetAllParameters([Out] LPDSFXGargle pDsFxGargle)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SoundEffectResult">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSOUND_ENUM_0</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.Present">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_PRESENT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.LocatedInHardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_LOCHARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.LocatedInSoftware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_LOCSOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.Unallocated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_UNALLOCATED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.Failed">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_FAILED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_UNKNOWN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectResult.DsfxrSendloop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXR_SENDLOOP</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.I3DL2MaterialPreset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSOUND_ENUM_1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Singlewindow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Doublewindow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Thindoor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_THINDOOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Thickdoor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Woodwall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_WOODWALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Brickwall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Stonewall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_STONEWALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2MaterialPreset.Curtain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_MATERIAL_PRESET_CURTAIN</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.I3DL2ReverbPreset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSOUND_ENUM_2</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Default">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Generic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.PaddedCell">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Room">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Bathroom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.LivingRoom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.StoneRoom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Auditorium">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.ConcertHall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Cave">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Arena">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Hangar">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.CarpetedHallway">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Hallway">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.StoneCorridor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Alley">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Forest">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.City">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_CITY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Mountains">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Quarry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Plain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.ParkingLot">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.SewerPipe">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Underwater">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.SmallRoom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.MediumRoom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.LargeRoom">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.MediumHall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.LargeHall">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbPreset.Plate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CapabilitiesFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.PrimaryBufferMono">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_PRIMARYMONO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.PrimaryBufferStereo">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_PRIMARYSTEREO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.PrimaryBuffer8Bit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_PRIMARY8BIT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.PrimaryBuffer16Bit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_PRIMARY16BIT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.ContinousRate">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_CONTINUOUSRATE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.EmulatedDriver">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_EMULDRIVER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.Certified">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_CERTIFIED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.SecondaryBufferMono">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_SECONDARYMONO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.SecondaryBufferStereo">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_SECONDARYSTEREO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.SecondaryBufer8Bit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_SECONDARY8BIT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.SecondaryBufer16Bit">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCAPS_SECONDARY16BIT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CapabilitiesFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SpeakerConfiguration">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_ENUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.DirectOut">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_DIRECTOUT</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.Headphone">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_HEADPHONE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.Mono">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_MONO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.Quadrophonic">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_QUAD</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.Stereo">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_STEREO</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.Surround">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_SURROUND</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.FivePointOne">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_5POINT1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.SevenPointOne">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_7POINT1</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.SevenPointOneSurround">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_7POINT1_SURROUND</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.FivePointOneSurround">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_5POINT1_SURROUND</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.SevenPointOneWide">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_7POINT1_WIDE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerConfiguration.FivePointOneBack">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_5POINT1_BACK</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SpeakerGeometry">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_GEOMETRY_ENUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerGeometry.Minimum">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_GEOMETRY_MIN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerGeometry.Narrow">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_GEOMETRY_NARROW</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerGeometry.Wide">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_GEOMETRY_WIDE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SpeakerGeometry.Maximum">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSPEAKER_GEOMETRY_MAX</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.BufferFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.PrimaryBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_PRIMARYBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Static">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_STATIC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Hardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_LOCHARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Software">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_LOCSOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Control3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRL3D</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.ControlFrequency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRLFREQUENCY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.ControlPan">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRLPAN</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.ControlVolume">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRLVOLUME</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.ControlPositionNotify">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRLPOSITIONNOTIFY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.ControlEffects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_CTRLFX</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.StickyFocus">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_STICKYFOCUS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.GlobalFocus">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_GLOBALFOCUS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.GetCurrentPosition2">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_GETCURRENTPOSITION2</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Mute3DAtMaxDistance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_MUTE3DATMAXDISTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Defer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_LOCDEFER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.Trueplayposition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_TRUEPLAYPOSITION</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.PlayFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.Looping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_LOOPING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.Hardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_LOCHARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.Software">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_LOCSOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.TerminateByTime">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_TERMINATEBY_TIME</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.TerminateByDistance">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_TERMINATEBY_DISTANCE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.TerminateByPriority">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPLAY_TERMINATEBY_PRIORITY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.PlayFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.BufferStatus">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.Playing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_PLAYING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.BufferLost">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_BUFFERLOST</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.Looping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_LOOPING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.Hardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_LOCHARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.Software">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_LOCSOFTWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.Terminated">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBSTATUS_TERMINATED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferStatus.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBufferCapabilitiesFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilitiesFlags.WaveMapped">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS_WAVEMAPPED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilitiesFlags.ControlEffects">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBCAPS_CTRLFX</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferCapabilitiesFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureCapabilitiesFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCCAPS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilitiesFlags.EmulateDriver">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCCAPS_EMULDRIVER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilitiesFlags.Certified">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCCAPS_CERTIFIED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilitiesFlags.MultipleCapture">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCCAPS_MULTIPLECAPTURE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureCapabilitiesFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureBufferStatusFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBSTATUS_FLAGS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferStatusFlags.Capturing">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBSTATUS_CAPTURING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferStatusFlags.Looping">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCBSTATUS_LOOPING</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureBufferStatusFlags.None">
            <summary>	
            None.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.LockFlags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBLOCK_ENUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.LockFlags.FromWriteCursor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBLOCK_FROMWRITECURSOR</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.LockFlags.EntireBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBLOCK_ENTIREBUFFER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.LockFlags.None">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CooperativeLevel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSCL_ENUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CooperativeLevel.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSCL_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CooperativeLevel.Priority">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSCL_PRIORITY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CooperativeLevel.Exclusive">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSCL_EXCLUSIVE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CooperativeLevel.WritePrimary">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSSCL_WRITEPRIMARY</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.Mode3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DMODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Mode3D.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DMODE_NORMAL</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Mode3D.HeadRelative">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DMODE_HEADRELATIVE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Mode3D.Disable">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DMODE_DISABLE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureEffectResult">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_ENUM</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectResult.LocatedInHardware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_LOCHARDWARE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectResult.LocatedInSoftware">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_LOCSOFTWARE</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.AcousticEchoCancelMode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_MODE</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelMode.PassThrough">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_MODE_PASS_THROUGH</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelMode.HalfDuplex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_MODE_HALF_DUPLEX</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelMode.FullDuplex">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_MODE_FULL_DUPLEX</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.AcousticEchoCancelStatus">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_STATUS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelStatus.HistoryUninitialized">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelStatus.HistoryContinuouslyConverged">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelStatus.HistoryPreviouslyDiverged">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelStatus.CurrentlyConverged">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_STATUS_CURRENTLY_CONVERGED</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.DSound">
            <summary>
            DSound Functions.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.DSound.AllObjects">
            <summary>Constant None.</summary>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.#cctor">
            <summary>
            Load DLLs and bind functions
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.Create(System.Nullable{System.Guid},SharpDX.DirectSound.DirectSoundBase@,SharpDX.ComObject)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pcGuidDevice">No documentation.</param>
            <param name="dSRef">No documentation.</param>
            <param name="unkOuterRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND* ppDS,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.EnumerateA(SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pDSEnumCallback">No documentation.</param>
            <param name="contextRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.EnumerateW(SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pDSEnumCallback">No documentation.</param>
            <param name="contextRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.CaptureCreate(System.Nullable{System.Guid},SharpDX.DirectSound.DirectSoundCapture@,SharpDX.ComObject)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pcGuidDevice">No documentation.</param>
            <param name="dSCRef">No documentation.</param>
            <param name="unkOuterRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCaptureCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE* ppDSC,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.CaptureEnumerateA(SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pDSEnumCallback">No documentation.</param>
            <param name="contextRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCaptureEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.CaptureEnumerateW(SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pDSEnumCallback">No documentation.</param>
            <param name="contextRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCaptureEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.Create8(System.Nullable{System.Guid},SharpDX.DirectSound.DirectSound@,SharpDX.ComObject)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pcGuidDevice">No documentation.</param>
            <param name="dS8Ref">No documentation.</param>
            <param name="unkOuterRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND8* ppDS8,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.CaptureCreate8(System.Nullable{System.Guid},SharpDX.DirectSound.DirectSoundCapture@,SharpDX.ComObject)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pcGuidDevice">No documentation.</param>
            <param name="dSC8Ref">No documentation.</param>
            <param name="unkOuterRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT DirectSoundCaptureCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE8* ppDSC8,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.FullDuplexCreate(System.Nullable{System.Guid},System.Nullable{System.Guid},SharpDX.DirectSound.CaptureBufferDescription@,SharpDX.DirectSound.SoundBufferDescription@,System.IntPtr,System.Int32,SharpDX.DirectSound.FullDuplex@,SharpDX.DirectSound.CaptureBuffer@,SharpDX.DirectSound.SecondarySoundBuffer@,SharpDX.ComObject)">
            <summary>	
            The DirectSoundFullDuplexCreate function is documented under a different name. For complete documentation of this function, see {{DirectSoundFullDuplexCreate8}}. 	
            </summary>	
            <param name="pcGuidCaptureDevice">No documentation.</param>
            <param name="pcGuidRenderDevice">No documentation.</param>
            <param name="pcDSCBufferDesc">No documentation.</param>
            <param name="pcDSBufferDesc">No documentation.</param>
            <param name="hWnd">No documentation.</param>
            <param name="dwLevel">No documentation.</param>
            <param name="dSFDRef">No documentation.</param>
            <param name="dSCBuffer8Ref">No documentation.</param>
            <param name="dSBuffer8Ref">No documentation.</param>
            <param name="unkOuterRef">No documentation.</param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT DirectSoundFullDuplexCreate([In, Optional] LPCGUID pcGuidCaptureDevice,[In, Optional] LPCGUID pcGuidRenderDevice,[In] LPCDSCBUFFERDESC pcDSCBufferDesc,[In] LPCDSBUFFERDESC pcDSBufferDesc,[None] void* hWnd,[None] int dwLevel,[Out] LPDIRECTSOUNDFULLDUPLEX* ppDSFD,[Out] LPDIRECTSOUNDCAPTUREBUFFER8* ppDSCBuffer8,[Out] LPDIRECTSOUNDBUFFER8* ppDSBuffer8,[None] IUnknown* pUnkOuter)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.DSound.GetDeviceID(System.Nullable{System.Guid},System.Guid@)">
            <summary>	
            The GetDeviceId method gets the device identifier of the device that is represented by the device-topology object. 	
            </summary>	
            <remarks>	
            The device identifier obtained from this method can be used as an input parameter to the {{IMMDeviceEnumerator::GetDevice}} method. For a code example that uses the GetDeviceId method, see {{Using the IKsControl Interface to Access Audio Properties}}. 	
            </remarks>	
            <param name="pGuidSrc">Pointer to a reference variable into which the method writes the address of a null-terminated, wide-character string that contains the device identifier. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the CoTaskMemFree function. If the GetDeviceId call fails,  *ppwstrDeviceId is NULL. For information about CoTaskMemFree, see the Windows SDK documentation. </param>
            <param name="pGuidDest">No documentation.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.  Return codeDescription  D_POINTER Pointer ppwstrDeviceId is NULL.   E_OUTOFMEMORY Out of memory.   ? </returns>
            <unmanaged>HRESULT GetDeviceID([In, Optional] LPCGUID pGuidSrc,[Out] LPGUID pGuidDest)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CaptureEffectGuid">
            <summary>
            CaptureEffectGuid Functions.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.AcousticEchoCancellationCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.MicrosoftAcousticEchoCancellationCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.SystemAcousticEchoCancellationCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.NoiseSuppressionCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.MicrosoftNoiseSuppressionCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.CaptureEffectGuid.SystemNoiseSuppressionCaptureEffect">
            <summary>Constant None.</summary>
        </member>
        <member name="T:SharpDX.DirectSound.SoundEffectGuid">
            <summary>
            SoundEffectGuid Functions.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardGargle">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardChorus">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardFlanger">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardEcho">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardDistortion">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardCompressor">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardParameq">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.StandardI3DL2REVERB">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundEffectGuid.WavesReverb">
            <summary>Constant None.</summary>
        </member>
        <member name="T:SharpDX.DirectSound.DirectSound3DAlgorithmGuid">
            <summary>
            DirectSound3DAlgorithmGuid Functions.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.DirectSound3DAlgorithmGuid.Default3DAlgorithm">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.DirectSound3DAlgorithmGuid.FullHrt3DAlgorithm">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.DirectSound3DAlgorithmGuid.LightHrt3DAlgorithm">
            <summary>Constant None.</summary>
        </member>
        <member name="F:SharpDX.DirectSound.DirectSound3DAlgorithmGuid.NoVirtualization3DAlgorithm">
            <summary>Constant None.</summary>
        </member>
        <member name="T:SharpDX.DirectSound.SoundBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundBuffer</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetCapabilities(SharpDX.DirectSound.BufferCapabilities@)">
            <summary>	
            The GetCaps method retrieves the capabilities of the buffer object.	
            </summary>	
            <param name="pDSBufferCaps">Address of a <see cref="T:SharpDX.DirectSound.BufferCapabilities"/> structure to contain the capabilities of this sound buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetCaps([Out] LPDSBCAPS pDSBufferCaps)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetCurrentPosition(System.Int32@,System.Int32@)">
            <summary>	
            The GetCurrentPosition method retrieves the position of the play and write cursors in the sound buffer.	
            </summary>	
            <param name="currentPlayCursor">Address of a variable that receives the offset, in bytes, of the play cursor. This parameter can be NULL if the value is not wanted. </param>
            <param name="currentWriteCursor">Address of a variable that receives the offset, in bytes, of the write cursor. This parameter can be NULL if the value is not wanted. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetCurrentPosition([Out, Optional] int* pdwCurrentPlayCursor,[Out, Optional] int* pdwCurrentWriteCursor)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetFormat(SharpDX.Multimedia.WaveFormat[],System.Int32,System.Int32@)">
            <summary>	
            The GetFormat method retrieves a description of the format of the sound data in the buffer, or the buffer size needed to retrieve the format description.	
            </summary>	
            <param name="wfxFormatRef">Address of a <see cref="T:SharpDX.Multimedia.WaveFormat"/> or <see cref="T:SharpDX.Multimedia.WaveFormatExtensible"/> structure that receives a description of the sound data in the buffer. To retrieve the buffer size needed to contain the format description, specify NULL. In this case the variable at pdwSizeWritten receives the size of the structure needed to receive the data. </param>
            <param name="sizeAllocated">Size, in bytes, of the structure at pwfxFormat. If pwfxFormat is not NULL, this value must be equal to or greater than the size of the expected data. </param>
            <param name="sizeWritten">Address of a variable that receives the number of bytes written to the structure at pwfxFormat. This parameter can be NULL. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetFormat([Out, Buffer, Optional] WAVEFORMATEX* pwfxFormat,[None] int dwSizeAllocated,[Out, Optional] int* pdwSizeWritten)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetVolume(System.Int32@)">
            <summary>	
            The GetVolume method retrieves the attenuation of the sound.	
            </summary>	
            <param name="lVolumeRef">Address of a variable that receives the attenuation, in hundredths of a decibel. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetVolume([Out] int* plVolume)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetPan(System.Int32@)">
            <summary>	
            The GetPan method retrieves the relative volume of the left and right audio channels.	
            </summary>	
            <param name="lPanRef">Address of a variable that receives the relative volume, in hundredths of a decibel. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetPan([Out] int* plPan)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetFrequency(System.Int32@)">
            <summary>	
            The GetFrequency method retrieves the frequency, in samples per second, at which the buffer is playing.	
            </summary>	
            <param name="frequency">Address of a variable that receives the frequency at which the audio buffer is being played, in hertz. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetFrequency([Out] int* pdwFrequency)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.GetStatus(System.Int32@)">
            <summary>	
            The GetStatus method retrieves the status of the sound buffer.	
            </summary>	
            <param name="status">Address of a variable that receives the status of the sound buffer. The status can be a combination of the following flags:   ValueDescription DSBSTATUS_BUFFERLOSTThe buffer is lost and must be restored before it can be played or locked. DSBSTATUS_LOOPINGThe buffer is being looped. If this value is not set, the buffer will stop when it reaches the end of the sound data. This value is returned only in combination with DSBSTATUS_PLAYING. DSBSTATUS_PLAYINGThe buffer is playing. If this value is not set, the buffer is stopped. DSBSTATUS_LOCSOFTWAREThe buffer is playing in software. Set only for buffers created with the DSBCAPS_LOCDEFER flag. DSBSTATUS_LOCHARDWAREThe buffer is playing in hardware. Set only for buffers created with the DSBCAPS_LOCDEFER flag. DSBSTATUS_TERMINATEDThe buffer was prematurely terminated by the voice manager and is not playing. Set only for buffers created with the DSBCAPS_LOCDEFER flag.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Initialize(SharpDX.DirectSound.DirectSoundBase,SharpDX.DirectSound.SoundBufferDescription@)">
            <summary>	
            The Initialize method initializes a sound buffer object if it has not yet been initialized.	
            </summary>	
            <param name="pDirectSound">Address of the device object associated with this buffer. </param>
            <param name="pcDSBufferDesc">Address of a <see cref="T:SharpDX.DirectSound.SoundBufferDescription"/> structure that contains the values used to initialize this sound buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Initialize([In] LPDIRECTSOUND pDirectSound,[In] LPCDSBUFFERDESC pcDSBufferDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Lock(System.Int32,System.Int32,System.IntPtr@,System.Int32@,System.IntPtr@,System.Int32@,SharpDX.DirectSound.LockFlags)">
            <summary>	
            The Lock method readies all or part of the buffer for a data write and returns references to which data can be written.	
            </summary>	
            <param name="offset">Offset, in bytes, from the start of the buffer to the point where the lock begins. This parameter is ignored if DSBLOCK_FROMWRITECURSOR is specified in the dwFlags parameter. </param>
            <param name="bytes">Size, in bytes, of the portion of the buffer to lock. The buffer is conceptually circular, so this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
            <param name="audioPtr1">Address of a variable that receives a reference to the first locked part of the buffer. </param>
            <param name="audioBytes1">Address of a variable that receives the number of bytes in the block at ppvAudioPtr1. If this value is less than dwBytes, the lock has wrapped and ppvAudioPtr2 points to a second block of data at the beginning of the buffer. </param>
            <param name="audioPtr2">Address of a variable that receives a reference to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
            <param name="audioBytes2">Address of a variable that receives the number of bytes in the block at ppvAudioPtr2. If ppvAudioPtr2 is NULL, this value is zero. </param>
            <param name="flags">Flags modifying the lock event. The following flags are defined:  ValueDescription DSBLOCK_FROMWRITECURSORStart the lock at the write cursor. The dwOffset parameter is ignored. DSBLOCK_ENTIREBUFFERLock the entire buffer. The dwBytes parameter is ignored.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] DSBLOCK_ENUM dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Play(System.Int32,System.Int32,SharpDX.DirectSound.PlayFlags)">
            <summary>	
            The Play method causes the sound buffer to play, starting at the play cursor.	
            </summary>	
            <param name="reserved1">Reserved. Must be 0. </param>
            <param name="priority">Priority for the sound, used by the voice manager when assigning hardware mixing resources. The lowest priority is 0, and the highest priority is 0xFFFFFFFF. If the buffer was not created with the DSBCAPS_LOCDEFER flag, this value must be 0.  </param>
            <param name="flags">Flags specifying how to play the buffer. The following flags are defined:  Looping flag  ValueDescription DSBPLAY_LOOPINGAfter the end of the audio buffer is reached, play restarts at the beginning of the buffer. Play continues until explicitly stopped. This flag must be set when playing a primary buffer.  Voice allocation flags The voice allocation flags are valid only for buffers created with the DSBCAPS_LOCDEFER flag. One of the following flags can be used to force the processing of the sound into hardware or software. If neither DBSPLAY_LOCHARDWARE nor DBSPLAY_LOCSOFTWARE is set, the sound is played in either software or hardware, depending on the availability of resources at the time the method is called. See Remarks.  ValueDescription DSBPLAY_LOCHARDWAREPlay this voice in a hardware buffer only. If the hardware has no available voices and no voice management flags are set, the call to IDirectSoundBuffer8::Play fails. This flag cannot be combined with DSBPLAY_LOCSOFTWARE. DSBPLAY_LOCSOFTWAREPlay this voice in a software buffer only. This flag cannot be combined with DSBPLAY_LOCHARDWARE or any voice management flag.  Voice management flags The voice management flags are valid only for buffers created with the DSBCAPS_LOCDEFER flag, and are used for sounds that are to play in hardware. These flags enable hardware resources that are already in use to be yielded to the current sound. Only buffers created with the DSBCAPS_LOCDEFER flag are candidates for premature termination. See Remarks.  ValueDescription DSBPLAY_TERMINATEBY_TIMEIf the hardware has no available voices, a currently playing nonlooping buffer will be stopped to make room for the new buffer. The buffer prematurely terminated is the one with the least time left to play. DSBPLAY_TERMINATEBY_DISTANCEIf the hardware has no available voices, a currently playing buffer will be stopped to make room for the new buffer. The buffer prematurely terminated will be selected from buffers that have the buffer's DSBCAPS_ MUTE3DATMAXDISTANCE flag set and are beyond their maximum distance. If there are no such buffers, the method fails. DSBPLAY_TERMINATEBY_PRIORITYIf the hardware has no available voices, a currently playing buffer will be stopped to make room for the new buffer. The buffer prematurely terminated will be the one with the lowest priority as set by the dwPriority parameter passed to IDirectSoundBuffer8::Play for the buffer.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Play([None] int dwReserved1,[None] int dwPriority,[None] DSBPLAY_FLAGS dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetCurrentPosition(System.Int32)">
            <summary>	
            The SetCurrentPosition method sets the position of the play cursor, which is the point at which the next byte of data is read from the buffer.	
            </summary>	
            <param name="newPosition">Offset of the play cursor, in bytes, from the beginning of the buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::SetCurrentPosition([None] int dwNewPosition)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetFormat(SharpDX.Multimedia.WaveFormat@)">
            <summary>	
            The SetFormat method sets the format of the primary buffer. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format.	
            </summary>	
            <param name="pcfxFormat">Address of a <see cref="T:SharpDX.Multimedia.WaveFormat"/> structure that describes the new format for the primary sound buffer. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::SetFormat([In] LPCWAVEFORMATEX pcfxFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetVolume(System.Int32)">
            <summary>	
            The SetVolume method sets the attenuation of the sound.	
            </summary>	
            <param name="volume">Attenuation, in hundredths of a decibel (dB). </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::SetVolume([None] int lVolume)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetPan(System.Int32)">
            <summary>	
            The SetPan method sets the relative volume of the left and right channels.	
            </summary>	
            <param name="pan">Relative volume between the left and right channels. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::SetPan([None] int lPan)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetFrequency(System.Int32)">
            <summary>	
            The SetFrequency method sets the frequency at which the audio samples are played.	
            </summary>	
            <param name="frequency">Frequency, in hertz (Hz), at which to play the audio samples. A value of DSBFREQUENCY_ORIGINAL resets the frequency to the default value of the buffer format. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::SetFrequency([None] int dwFrequency)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Stop">
            <summary>	
            The Stop method causes the sound buffer to stop playing.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Stop()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Unlock(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            The Unlock method releases a locked sound buffer.	
            </summary>	
            <param name="vAudioPtr1Ref">Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
            <param name="audioBytes1">Number of bytes written to the portion of the buffer at pvAudioPtr1. See Remarks. </param>
            <param name="vAudioPtr2Ref">Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundBuffer8::Lock method. </param>
            <param name="audioBytes2">Number of bytes written to the portion of the buffer at pvAudioPtr2. See Remarks. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Restore">
            <summary>	
            The Restore method restores the memory allocation for a lost sound buffer.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Restore()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Play(System.Int32,SharpDX.DirectSound.PlayFlags)">
            <unmanaged>HRESULT IDirectSoundBuffer::Play([None] int dwReserved1,[None] int dwPriority,[None] int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Lock(System.Int32,System.Int32,SharpDX.DirectSound.LockFlags,SharpDX.DataStream@)">
            <summary>	
            The Lock method readies all or part of the buffer for a data write and returns pointers to which data can be written.	
            </summary>	
            <param name="offset"> Offset, in bytes, from the start of the buffer to the point where the lock begins. This parameter is ignored if DSBLOCK_FROMWRITECURSOR is specified in the dwFlags parameter. </param>
            <param name="sizeBytes"> Size, in bytes, of the portion of the buffer to lock. The buffer is conceptually circular, so this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
            <param name="flags"> Flags modifying the lock event. The following flags are defined:  ValueDescription DSBLOCK_FROMWRITECURSORStart the lock at the write cursor. The dwOffset parameter is ignored. DSBLOCK_ENTIREBUFFERLock the entire buffer. The dwBytes parameter is ignored.  </param>
            <param name="secondPart"> Address of a variable that receives a pointer to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
            <returns>Address of a variable that receives a pointer to the first locked part of the buffer.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Unlock(SharpDX.DataStream,SharpDX.DataStream)">
            <summary>	
            The Unlock method releases a locked sound buffer.	
            </summary>	
            <param name="dataPart1"> Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
            <param name="dataPart2"> Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundBuffer8::Lock method. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Write``1(``0[],System.Int32,SharpDX.DirectSound.LockFlags)">
            <summary>
            Writes data to the buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="bufferOffset">The buffer offset.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.Write``1(``0[],System.Int32,System.Int32,System.Int32,SharpDX.DirectSound.LockFlags)">
            <summary>
            Writes data to the buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="bufferOffset">The buffer offset.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBuffer.SetNotificationPositions(SharpDX.DirectSound.NotificationPosition[])">
            <summary>
            Sets the notification positions.
            </summary>
            <param name="positions">The positions.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Capabilities">
            <summary>	
            The GetCaps method retrieves the capabilities of the buffer object.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::GetCaps([Out] LPDSBCAPS pDSBufferCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Volume">
            <summary>	
            The GetVolume method retrieves the attenuation of the sound.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::GetVolume([Out] int* plVolume)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Pan">
            <summary>	
            The GetPan method retrieves the relative volume of the left and right audio channels.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::GetPan([Out] int* plPan)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Frequency">
            <summary>	
            The GetFrequency method retrieves the frequency, in samples per second, at which the buffer is playing.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::GetFrequency([Out] int* pdwFrequency)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Status">
            <summary>	
            The GetStatus method retrieves the status of the sound buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.CurrentPosition">
            <summary>	
            The SetCurrentPosition method sets the position of the play cursor, which is the point at which the next byte of data is read from the buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::SetCurrentPosition([None] int dwNewPosition)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.SoundBuffer.Format">
            <summary>	
            The SetFormat method sets the format of the primary buffer. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundBuffer::SetFormat([In] LPCWAVEFORMATEX pcfxFormat)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SecondarySoundBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundBuffer8</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SecondarySoundBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.SetEffect(System.Int32,SharpDX.DirectSound.SoundBufferEffectDescription[],SharpDX.DirectSound.SoundEffectResult[])">
            <summary>	
            The SetFX method enables effects on a buffer.	
            </summary>	
            <param name="effectsCount">Number of elements in the pDSFXDesc and pdwResultCodes arrays. If this value is 0, pDSFXDesc and pdwResultCodes must both be NULL. Set to 0 to remove all effects from the buffer. </param>
            <param name="pDSFXDesc">Address of an array of <see cref="T:SharpDX.DirectSound.SoundBufferEffectDescription"/> structures, of size dwEffectsCount, that specifies the effects wanted on the buffer. Must be NULL if dwEffectsCount is 0. </param>
            <param name="resultCodes">Address of an array of DWORD elements, of size dwEffectsCount. Each element receives one of the values shown in the following table, indicating the result of the attempt to create the corresponding effect in the pDSFXDesc array. Note This parameter must be NULL if dwEffectsCount is 0, or can be NULL if results are not wanted.  ValueDescription DSFXR_LOCHARDWAREEffect is instantiated in hardware. DSFXR_LOCSOFTWAREEffect is instantiated in software. DSFXR_UNALLOCATEDEffect has not yet been assigned to hardware or software. This value is returned if the buffer was created with the DSBCAPS_LOCDEFER flag in <see cref="T:SharpDX.DirectSound.SoundBufferDescription"/>. DSFXR_FAILEDNo effect was created because resources weren't available. DSFXR_PRESENTEffect is available but was not created because one of the other effects requested could not be created. If any of the effects requested cannot be created, none of them are, and the call fails. DSFXR_UNKNOWNEffect is not registered on the system, and the method failed as a result.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer8::SetFX([None] int dwEffectsCount,[In, Buffer, Optional] LPDSEFFECTDESC pDSFXDesc,[InOut, Buffer] DSOUND_ENUM_0* pdwResultCodes)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.AcquireResources(System.Int32,System.Int32,System.Int32[])">
            <summary>	
            The AcquireResources method allocates resources for a buffer that was created with the DSBCAPS_LOCDEFER flag in the <see cref="T:SharpDX.DirectSound.SoundBufferDescription"/> structure.	
            </summary>	
            <param name="flags">Flags specifying how resources are to be allocated for a buffer created with the DSBCAPS_LOCDEFER flag. For a list of values, see the voice management and voice allocation flags for {{Play}}. </param>
            <param name="effectsCount">Number of elements in the pdwResultFlags array, or 0 if pdwResultCodes is NULL. </param>
            <param name="resultCodes">Address of an array of DWORD variables that receives information about the effects associated with the buffer. This array must contain one element for each effect that was assigned to the buffer by {{SetFX}}. For each effect, one of the values shown in the following table is returned. Note This parameter can be NULL if result codes are not wanted.  ValueDescription DSFXR_LOCHARDWAREEffect is instantiated in hardware. DSFXR_LOCSOFTWAREEffect is instantiated in software. DSFXR_FAILEDNo effect was created because resources weren't available. DSFXR_PRESENTThe effect is available but was not created because the method failed for some other reason. DSFXR_UNKNOWNNo effect was created because the effect isn't registered on the system.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer8::AcquireResources([None] int dwFlags,[None] int dwEffectsCount,[Out, Buffer] int* pdwResultCodes)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.GetEffect(System.Guid,System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            The GetObjectInPath method retrieves an interface for an effect object associated with the buffer.	
            </summary>	
            <param name="rguidObject">Unique class identifier of the object being searched for, such as GUID_DSFX_STANDARD_ECHO. Set this parameter to GUID_All_Objects to search for objects of any class. </param>
            <param name="index">Index of the object within objects of that class in the path. See Remarks.  </param>
            <param name="rguidInterface">Unique identifier of the desired interface. See Remarks. </param>
            <param name="objectRef">Address of a variable that receives the desired interface reference. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer8::GetObjectInPath([In] GUID* rguidObject,[None] int dwIndex,[In] GUID* rguidInterface,[Out] void** ppObject)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.#ctor(SharpDX.DirectSound.DirectSound,SharpDX.DirectSound.SoundBufferDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SecondarySoundBuffer"/> class.
            </summary>
            <param name="dSound">an instance of the <see cref="T:SharpDX.DirectSound.DirectSound"/></param>
            <param name="bufferDescription">The buffer description.</param>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.GetEffect``1(System.Int32)">
            <summary>	
            Retrieves an interface to an effect object associated with the buffer.	
            </summary>	
            <param name="index">Index of the object within objects of that class in the path. See Remarks.  </param>
            <returns>an effect object associated with the buffer</returns>
            <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetObjectInPath([In] GUID* rguidObject,[None] int dwIndex,[In] GUID* rguidInterface,[Out] void** ppObject)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SecondarySoundBuffer.SetEffect(System.Guid[])">
            <summary>	
            Enables effects on a buffer.	
            </summary>	
            <param name="effects">Effects guids</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundBuffer8::SetFX([None] int dwEffectsCount,[In, Buffer, Optional] LPDSEFFECTDESC pDSFXDesc,[Out, Buffer, Optional] int* pdwResultCodes)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.SoundListener3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSound3DListener</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.DefaultDistanceFactor">
            <summary>
            Default distance factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.DefaultDopplerFactor">
            <summary>
            Default Doppler factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.DefaultRolloffFactor">
            <summary>
            Default rolloff factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MaxDistanceFactor">
            <summary>
            Maximum distance factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MaxDopplerFactor">
            <summary>
            Maximum Doppler factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MaxRolloffFactor">
            <summary>
            Maximum rolloff factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MinDistanceFactor">
            <summary>
            Minimum distance factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MinDopplerFactor">
            <summary>
            Minimum Doppler factor. The default value is (1.0).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundListener3D.MinRolloffFactor">
            <summary>
            Minimum rolloff factor. The default value is (1.0).
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundListener3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetAllParameters(SharpDX.DirectSound.Listener3DSettings@)">
            <summary>	
            The GetAllParameters method retrieves all 3D parameters of the sound environment and the listener.	
            </summary>	
            <param name="pListener">Address of a <see cref="T:SharpDX.DirectSound.Listener3DSettings"/> structure that receives the state of the 3D world and listener. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetAllParameters([Out] LPDS3DLISTENER pListener)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetDistanceFactor(System.Single@)">
            <summary>	
            The GetDistanceFactor method retrieves the distance factor, which is the number of meters in a vector unit.	
            </summary>	
            <param name="flDistanceFactorRef">Address of a variable that receives the distance factor value. D3DVALUE is defined as float.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetDistanceFactor([Out] D3DVALUE* pflDistanceFactor)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetDopplerFactor(System.Single@)">
            <summary>	
            The GetDopplerFactor method retrieves the multiplier for the Doppler effect.	
            </summary>	
            <param name="flDopplerFactorRef">Address of a variable that receives the Doppler factor value. D3DVALUE is defined as float.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetDopplerFactor([Out] D3DVALUE* pflDopplerFactor)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetOrientation(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>	
            The GetOrientation method retrieves the orientation of the listener's head.	
            </summary>	
            <param name="vOrientFrontRef">Address of a <see cref="T:SharpDX.Vector3"/> structure that receives the listener's front orientation vector. </param>
            <param name="vOrientTopRef">Address of a D3DVECTOR structure that receives the listener's top orientation vector. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetOrientation([Out] D3DVECTOR* pvOrientFront,[Out] D3DVECTOR* pvOrientTop)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetPosition(SharpDX.Vector3@)">
            <summary>	
            The GetPosition method retrieves the listener's position.	
            </summary>	
            <param name="vPositionRef">Address of a <see cref="T:SharpDX.Vector3"/> structure that receives the listener's position vector. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetPosition([Out] D3DVECTOR* pvPosition)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetRolloffFactor(System.Single@)">
            <summary>	
            The GetRolloffFactor method retrieves the rolloff factor, which determines the rate of attenuation over distance.	
            </summary>	
            <param name="flRolloffFactorRef">Address of a variable that receives the rolloff factor. D3DVALUE is defined as float.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetRolloffFactor([Out] D3DVALUE* pflRolloffFactor)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.GetVelocity(SharpDX.Vector3@)">
            <summary>	
            The GetVelocity method retrieves the listener's velocity.	
            </summary>	
            <param name="vVelocityRef">Address of a <see cref="T:SharpDX.Vector3"/> structure that receives the listener's velocity. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::GetVelocity([Out] D3DVECTOR* pvVelocity)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetAllParameters(SharpDX.DirectSound.Listener3DSettings@,System.Int32)">
            <summary>	
            The SetAllParameters method sets all 3D parameters of the sound environment and the listener.	
            </summary>	
            <param name="pcListener">Address of a <see cref="T:SharpDX.DirectSound.Listener3DSettings"/> structure that contains information describing all 3D listener parameters. </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetAllParameters([In] LPCDS3DLISTENER pcListener,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetDistanceFactor(System.Single,System.Int32)">
            <summary>	
            The SetDistanceFactor method sets the distance factor, which is the number of meters in a vector unit.	
            </summary>	
            <param name="distanceFactor">Distance factor. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetDistanceFactor([None] D3DVALUE flDistanceFactor,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetDopplerFactor(System.Single,System.Int32)">
            <summary>	
            The SetDopplerFactor method sets the multiplier for the Doppler effect.	
            </summary>	
            <param name="dopplerFactor">Doppler factor. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetDopplerFactor([None] D3DVALUE flDopplerFactor,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetOrientation(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetOrientation method sets the orientation of the listener's head.	
            </summary>	
            <param name="xFront">Value that specifies the x coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
            <param name="yFront">Value that specifies the y coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
            <param name="zFront">Value that specifies the z coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
            <param name="xTop">Value that specifies the x coordinates of the top orientation vector. </param>
            <param name="yTop">Value that specifies the y coordinates of the top orientation vector. </param>
            <param name="zTop">Value that specifies the z coordinates of the top orientation vector. </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetOrientation([None] D3DVALUE xFront,[None] D3DVALUE yFront,[None] D3DVALUE zFront,[None] D3DVALUE xTop,[None] D3DVALUE yTop,[None] D3DVALUE zTop,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetPosition(System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetPosition method sets the listener's position.	
            </summary>	
            <param name="x">Value that specifies the x coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="y">Value that specifies the y coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="z">Value that specifies the z coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetPosition([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetRolloffFactor(System.Single,System.Int32)">
            <summary>	
            The SetRolloffFactor method sets the rolloff factor, which determines the rate of attenuation over distance.	
            </summary>	
            <param name="rolloffFactor">Rolloff factor. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetRolloffFactor([None] D3DVALUE flRolloffFactor,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.SetVelocity(System.Single,System.Single,System.Single,System.Int32)">
            <summary>	
            The SetVelocity method sets the listener's velocity.	
            </summary>	
            <param name="x">Value that specifies the x coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="y">Value that specifies the y coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="z">Value that specifies the z coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
            <param name="apply">Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::SetVelocity([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.CommitDeferredSettings">
            <summary>	
            The CommitDeferredSettings method commits any deferred settings made since the last call to this method.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSound3DListener::CommitDeferredSettings()</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundListener3D.#ctor(SharpDX.DirectSound.SoundBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundListener3D" /> class
            with a previously created sound buffer.
            </summary>
            <param name="soundBuffer">The SlimDX::DirectSound::SoundBuffer object.</param>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.Deferred">
            <summary>
            Determines if settings are set immediately or deferred.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.DistanceFactor">
            <summary>
            Gets or sets the distance factor, which is the number of meters in a vector unit.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.DopplerFactor">
            <summary>
            Gets or sets the multiplier for the Doppler effect.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.FrontOrientation">
            <summary>
            Describes the listener's front orientation.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.Position">
            <summary>
            Gets or sets the listener's position.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.RolloffFactor">
            <summary>
            Gets or sets the rolloff factor, which determines the rate of attenuation over distance.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.TopOrientation">
            <summary>
            Describes the listener's top orientation.
            </summary>
        </member>
        <member name="P:SharpDX.DirectSound.SoundListener3D.Velocity">
            <summary>
            Gets or sets the listener's velocity.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.SoundBufferNotifier">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundNotify</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBufferNotifier.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBufferNotifier"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.SoundBufferNotifier.SetNotificationPositions(System.Int32,SharpDX.DirectSound.NotificationPosition[])">
            <summary>	
            The SetNotificationPositions method sets the notification positions. During capture or playback, whenever the read or play cursor reaches one of the specified offsets, the associated event is signaled.	
            </summary>	
            <param name="positionNotifies">Number of <see cref="T:SharpDX.DirectSound.NotificationPosition"/> structures. </param>
            <param name="pcPositionNotifies">Pointer to an array of DSBPOSITIONNOTIFY structures (the maximum array size is DSBNOTIFICATIONS_MAX). </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundNotify::SetNotificationPositions([None] int dwPositionNotifies,[In, Buffer] LPCDSBPOSITIONNOTIFY pcPositionNotifies)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.ParametricEqualizer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXParamEq</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.BandwidthDefault">
            <summary>
            Default bandwidth, in semitones.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.BandwidthMax">
            <summary>
            Maximum bandwidth, in semitones.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.BandwidthMin">
            <summary>
            Minimum bandwidth, in semitones.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.CenterDefault">
            <summary>
            Default center frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.CenterMax">
            <summary>
            Maximum center frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.CenterMin">
            <summary>
            Minimum center frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.GainDefault">
            <summary>
            Default gain.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.GainMax">
            <summary>
            Maximum gain.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizer.GainMin">
            <summary>
            Minimum gain.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.ParametricEqualizer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.ParametricEqualizer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.ParametricEqualizer.SetAllParameters(SharpDX.DirectSound.ParametricEqualizerSettings)">
            <summary>	
            The SetAllParameters method sets the parametric equalizer parameters of a buffer.	
            </summary>	
            <param name="pcDsFxParamEq">Address of a <see cref="T:SharpDX.DirectSound.ParametricEqualizerSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXParamEq::SetAllParameters([In] LPCDSFXParamEq pcDsFxParamEq)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.ParametricEqualizer.GetAllParameters(SharpDX.DirectSound.ParametricEqualizerSettings@)">
            <summary>	
            The GetAllParameters method retrieves the parametric equalizer parameters of a buffer.	
            </summary>	
            <param name="pDsFxParamEq">Address of a <see cref="T:SharpDX.DirectSound.ParametricEqualizerSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXParamEq::GetAllParameters([Out] LPDSFXParamEq pDsFxParamEq)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.ParametricEqualizer.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the parametric equalizer parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXParamEq::GetAllParameters([Out] LPDSFXParamEq pDsFxParamEq)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.I3DL2Reverb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXI3DL2Reverb</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayHFRatioDefault">
            <summary>
            Default ratio of the decay time at high frequencies to the decay time at low frequencies.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayHFRatioMax">
            <summary>
            Maximum ratio of the decay time at high frequencies to the decay time at low frequencies.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayHFRatioMin">
            <summary>
            Minimum ratio of the decay time at high frequencies to the decay time at low frequencies.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayTimeDefault">
            <summary>
            Default decay time, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayTimeMax">
            <summary>
            Maximum decay time, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DecayTimeMin">
            <summary>
            Minimum decay time, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DensityDefault">
            <summary>
            Default modal density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DensityMax">
            <summary>
            Maximum modal density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DensityMin">
            <summary>
            Minimum modal density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DiffusionDefault">
            <summary>
            Default echo density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DiffusionMax">
            <summary>
            Maximum echo density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.DiffusionMin">
            <summary>
            Minimum echo density in the late reverberation decay, in percent.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.HFReferenceDefault">
            <summary>
            Default reference high frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.HFReferenceMax">
            <summary>
            Maximum reference high frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.HFReferenceMin">
            <summary>
            Minimum reference high frequency, in hertz.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsDefault">
            <summary>
            Default attenuation of early reflections relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsDelayDefault">
            <summary>
            Default delay time of the first reflection relative to the direct path, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsDelayMax">
            <summary>
            Maximum delay time of the first reflection relative to the direct path, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsDelayMin">
            <summary>
            Minimum delay time of the first reflection relative to the direct path, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsMax">
            <summary>
            Maximum attenuation of early reflections relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReflectionsMin">
            <summary>
            Minimum attenuation of early reflections relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbDefault">
            <summary>
            Default attenuation of late reverberation relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbDelayDefault">
            <summary>
            Default time limit between the early reflections and the late reverberation relative to the time of the first reflection, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbDelayMax">
            <summary>
            Maximum time limit between the early reflections and the late reverberation relative to the time of the first reflection, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbDelayMin">
            <summary>
            Minimum time limit between the early reflections and the late reverberation relative to the time of the first reflection, in seconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbMax">
            <summary>
            Maximum attenuation of late reverberation relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.ReverbMin">
            <summary>
            Minimum attenuation of late reverberation relative to Room, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomDefault">
            <summary>
            Default attenuation of the room effect, in millibels (mB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomHFDefault">
            <summary>
            Default attenuation of the room high-frequency effect, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomHFMax">
            <summary>
            Maximum attenuation of the room high-frequency effect, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomHFMin">
            <summary>
            Minimum attenuation of the room high-frequency effect, in mB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomMax">
            <summary>
            Maximum attenuation of the room effect, in millibels (mB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomMin">
            <summary>
            Minimum attenuation of the room effect, in millibels (mB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomRolloffFactorDefault">
            <summary>
            Default rolloff factor for the reflected signals. The rolloff factor for the direct path is controlled by the DirectSound listener.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomRolloffFactorMax">
            <summary>
            Maximum rolloff factor for the reflected signals. The rolloff factor for the direct path is controlled by the DirectSound listener.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2Reverb.RoomRolloffFactorMin">
            <summary>
            Minimum rolloff factor for the reflected signals. The rolloff factor for the direct path is controlled by the DirectSound listener.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.I3DL2Reverb"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.SetAllParameters(SharpDX.DirectSound.I3DL2ReverbSettings@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pcDsFxI3DL2Reverb">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetAllParameters([In] LPCDSFXI3DL2Reverb pcDsFxI3DL2Reverb)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.GetAllParameters(SharpDX.DirectSound.I3DL2ReverbSettings@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="pDsFxI3DL2Reverb">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetAllParameters([Out] LPDSFXI3DL2Reverb pDsFxI3DL2Reverb)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.SetPreset(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="preset">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetPreset([None] int dwPreset)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.GetPreset(System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="resetRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetPreset([Out] int* pdwPreset)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.SetQuality(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="quality">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetQuality([None] int lQuality)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.I3DL2Reverb.GetQuality(System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="lQualityRef">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetQuality([Out] int* plQuality)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.I3DL2Reverb.AllParameters">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetAllParameters([Out] LPDSFXI3DL2Reverb pDsFxI3DL2Reverb)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.I3DL2Reverb.Preset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetPreset([Out] int* pdwPreset)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.I3DL2Reverb.Quality">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetQuality([Out] int* plQuality)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.WavesReverb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundFXWavesReverb</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.HighFrequencyRTRatioDefault">
            <summary>
            Default high-frequency reverb time ratio.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.HighFrequencyRTRatioMax">
            <summary>
            Maximum high-frequency reverb time ratio.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.HighFrequencyRTRatioMin">
            <summary>
            Minimum high-frequency reverb time ratio.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.InGainDefault">
            <summary>
            Default input gain of signal, in decibels (dB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.InGainMax">
            <summary>
            Maximum input gain of signal, in decibels (dB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.InGainMin">
            <summary>
            Minimum input gain of signal, in decibels (dB).
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbMixDefault">
            <summary>
            Default reverb mix, in dB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbMixMax">
            <summary>
            Maximum reverb mix, in dB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbMixMin">
            <summary>
            Minimum reverb mix, in dB.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbTimeDefault">
            <summary>
            Default reverb time, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbTimeMax">
            <summary>
            Maximum reverb time, in milliseconds.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverb.ReverbTimeMin">
            <summary>
            Minimum reverb time, in milliseconds.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.WavesReverb.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.WavesReverb"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.WavesReverb.SetAllParameters(SharpDX.DirectSound.WavesReverbSettings)">
            <summary>	
            The SetAllParameters method sets the music reverberation parameters of a buffer.	
            </summary>	
            <param name="pcDsFxWavesReverb">Address of a <see cref="T:SharpDX.DirectSound.WavesReverbSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXWavesReverb::SetAllParameters([In] LPCDSFXWavesReverb pcDsFxWavesReverb)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.WavesReverb.GetAllParameters(SharpDX.DirectSound.WavesReverbSettings@)">
            <summary>	
            The GetAllParameters method retrieves the music reverberation parameters of a buffer.	
            </summary>	
            <param name="pDsFxWavesReverb">Address of a <see cref="T:SharpDX.DirectSound.WavesReverbSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundFXWavesReverb::GetAllParameters([Out] LPDSFXWavesReverb pDsFxWavesReverb)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.WavesReverb.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the music reverberation parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundFXWavesReverb::GetAllParameters([Out] LPDSFXWavesReverb pDsFxWavesReverb)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.AcousticEchoCancel">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundCaptureFXAec</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.AcousticEchoCancel.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.AcousticEchoCancel"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.AcousticEchoCancel.SetAllParameters(SharpDX.DirectSound.AcousticEchoCancelSettings)">
            <summary>	
            The SetAllParameters method sets the acoustic echo cancellation parameters of a buffer.	
            </summary>	
            <param name="pDscFxAec">Address of a <see cref="T:SharpDX.DirectSound.AcousticEchoCancelSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::SetAllParameters([In] LPCDSCFXAec pDscFxAec)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.AcousticEchoCancel.GetAllParameters(SharpDX.DirectSound.AcousticEchoCancelSettings@)">
            <summary>	
            The GetAllParameters method retrieves the acoustic echo cancellation parameters of a buffer.	
            </summary>	
            <param name="pDscFxAec">Address of a <see cref="T:SharpDX.DirectSound.AcousticEchoCancelSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetAllParameters([Out] LPDSCFXAec pDscFxAec)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.AcousticEchoCancel.GetStatus(SharpDX.DirectSound.AcousticEchoCancelStatus@)">
            <summary>	
            The IDirectSoundCaptureFXAec8::GetStatus method retrieves the status of the effect.	
            </summary>	
            <param name="status">Address of a DWORD variable to receive the status. The following flags are defined. See Remarks.  ConstantValue DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED0x0 DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED0x1 DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED0x2 DSCFX_AEC_STATUS_CURRENTLY_CONVERGED0x8  </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetStatus([Out] DSCFX_AEC_STATUS* pdwStatus)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.AcousticEchoCancel.Reset">
            <summary>	
            The IDirectSoundCaptureFXAec8::Reset method resets the effect to its initial state.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::Reset()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.AcousticEchoCancel.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the acoustic echo cancellation parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetAllParameters([Out] LPDSCFXAec pDscFxAec)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.AcousticEchoCancel.Status">
            <summary>	
            The IDirectSoundCaptureFXAec8::GetStatus method retrieves the status of the effect.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetStatus([Out] DSCFX_AEC_STATUS* pdwStatus)</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.NoiseSuppress">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>IDirectSoundCaptureFXNoiseSuppress</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.NoiseSuppress.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.NoiseSuppress"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DirectSound.NoiseSuppress.SetAllParameters(SharpDX.DirectSound.NoiseSuppressSettings)">
            <summary>	
            The SetAllParameters method sets the noise suppression parameters of a buffer.	
            </summary>	
            <param name="pcDscFxNoiseSuppress">Address of a <see cref="T:SharpDX.DirectSound.NoiseSuppressSettings"/> structure that specifies the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::SetAllParameters([In] LPCDSCFXNoiseSuppress pcDscFxNoiseSuppress)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.NoiseSuppress.GetAllParameters(SharpDX.DirectSound.NoiseSuppressSettings@)">
            <summary>	
            The GetAllParameters method retrieves the noise suppression parameters of a buffer.	
            </summary>	
            <param name="pDscFxNoiseSuppress">Address of a <see cref="T:SharpDX.DirectSound.NoiseSuppressSettings"/> structure that receives the effect parameters. </param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::GetAllParameters([Out] LPDSCFXNoiseSuppress pDscFxNoiseSuppress)</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.NoiseSuppress.Reset">
            <summary>	
            The IDirectSoundCaptureFXNoiseSuppress8::Reset method resets the effect to its initial state.	
            </summary>	
            <returns>No documentation.</returns>
            <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::Reset()</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.NoiseSuppress.AllParameters">
            <summary>	
            The GetAllParameters method retrieves the noise suppression parameters of a buffer.	
            </summary>	
            <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::GetAllParameters([Out] LPDSCFXNoiseSuppress pDscFxNoiseSuppress)</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.NoiseSuppress.Enabled">
            <summary>
            Gets or sets he noise suppression parameters of a buffer.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.BufferCapabilities">
            <summary>	
            The DSBCAPS structure describes the capabilities of a DirectSound buffer object. It is used by the {{IDirectSoundBuffer8::GetCaps}} method.	
            </summary>	
            <unmanaged>DSBCAPS</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferCapabilities.Size">
            <summary>	
            Size of the structure, in bytes. This member must be initialized before the structure is used. 	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferCapabilities.Flags">
            <summary>	
            Flags that specify buffer-object capabilities. Use one or more of the values shown in the following table.  Value	
            Description	
             DSBCAPS_CTRL3D	
            The buffer has 3D control capability.	
             DSBCAPS_CTRLFREQUENCY	
            The buffer has frequency control capability.	
             DSBCAPS_CTRLFX	
            The buffer supports effects processing.	
             DSBCAPS_CTRLPAN	
            The buffer has pan control capability.	
             DSBCAPS_CTRLVOLUME	
            The buffer has volume control capability.	
             DSBCAPS_CTRLPOSITIONNOTIFY	
            The buffer has position notification capability. See the Remarks for <see cref="T:SharpDX.DirectSound.CaptureBufferDescription"/>.	
             DSBCAPS_GETCURRENTPOSITION2	
            The buffer uses the new behavior of the play cursor when {{IDirectSoundBuffer8::GetCurrentPosition}} is called. In the first version of DirectSound, the play cursor was significantly ahead of the actual playing sound on emulated sound cards; it was directly behind the write cursor. Now, if the DSBCAPS_GETCURRENTPOSITION2 flag is specified, the application can get a more accurate play cursor. If this flag is not specified, the old behavior is preserved for compatibility. This flag affects only emulated devices; if a DirectSound driver is present, the play cursor is accurate for DirectSound in all versions of DirectX.	
             DSBCAPS_GLOBALFOCUS	
            The buffer is a global sound buffer. With this flag set, an application using DirectSound can continue to play its buffers if the user switches focus to another application, even if the new application uses DirectSound. The one exception is if you switch focus to a DirectSound application that uses the DSSCL_WRITEPRIMARY flag for its cooperative level. In this case, the global sounds from other applications will not be audible.	
             DSBCAPS_LOCDEFER	
            The buffer can be assigned to a hardware or software resource at play time, or when <see cref="M:SharpDX.DirectSound.SecondarySoundBuffer.AcquireResources(System.Int32,System.Int32,System.Int32[])"/> is called.	
             DSBCAPS_LOCHARDWARE	
            The buffer uses hardware mixing.	
             DSBCAPS_LOCSOFTWARE	
            The buffer is in software memory and uses software mixing.	
             DSBCAPS_MUTE3DATMAXDISTANCE	
            The sound is reduced to silence at the maximum distance. The buffer will stop playing when the maximum distance is exceeded, so that processor time is not wasted. Applies only to software buffers.	
             DSBCAPS_PRIMARYBUFFER	
            The buffer is a primary buffer.	
             DSBCAPS_STATIC	
            The buffer is in on-board hardware memory.	
             DSBCAPS_STICKYFOCUS	
            The buffer has sticky focus. If the user switches to another application not using DirectSound, the buffer is still audible. However, if the user switches to another DirectSound application, the buffer is muted.	
             DSBCAPS_TRUEPLAYPOSITION	
            Force {{IDirectSoundBuffer8::GetCurrentPosition}} to return the buffer's true play position. This flag is only valid in Windows Vista.	
              	
            </summary>	
            <unmanaged>DSBCAPS_FLAGS dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferCapabilities.BufferBytes">
            <summary>	
            Size of this buffer, in bytes. 	
            </summary>	
            <unmanaged>int dwBufferBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferCapabilities.UnlockTransferRate">
            <summary>	
            The rate, in kilobytes per second, at which data is transferred to the buffer memory when {{IDirectSoundBuffer8::Unlock}} is called. High-performance applications can use this value to determine the time required for IDirectSoundBuffer8::Unlock to execute. For software buffers located in system memory, the rate will be very high because no processing is required. For hardware buffers, the rate might be slower because the buffer might have to be downloaded to the sound card, which might have a limited transfer rate. 	
            </summary>	
            <unmanaged>int dwUnlockTransferRate</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.BufferCapabilities.PlayCpuOverhead">
            <summary>	
            The processing overhead as a percentage of main processor cycles needed to mix this sound buffer. For hardware buffers, this member will be zero because the mixing is performed by the sound device. For software buffers, this member depends on the buffer format and the speed of the system processor. 	
            </summary>	
            <unmanaged>int dwPlayCpuOverhead</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.BufferCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.BufferCapabilities"/> class.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.SoundBufferDescription">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBUFFERDESC</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBCAPS_FLAGS dwFlags</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.BufferBytes">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwBufferBytes</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.Reserved">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwReserved</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.pFormat">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>WAVEFORMATEX* lpwfxFormat</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.AlgorithmFor3D">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>GUID guid3DAlgorithm</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.SoundBufferDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.SoundBufferDescription"/> class.
            </summary>
        </member>
        <member name="F:SharpDX.DirectSound.SoundBufferDescription.Format">
            <summary>
            WaveFormat of this sound buffer description
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.Listener3DSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DS3DLISTENER</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.Size">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwSize</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.Position">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vPosition</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.Velocity">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vVelocity</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.OrientFront">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vOrientFront</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.OrientTop">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVECTOR vOrientTop</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.DistanceFactor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVALUE flDistanceFactor</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.RolloffFactor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVALUE flRolloffFactor</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.Listener3DSettings.DopplerFactor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>D3DVALUE flDopplerFactor</unmanaged>
        </member>
        <member name="M:SharpDX.DirectSound.Listener3DSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.Listener3DSettings"/> class.
            </summary>
        </member>
        <member name="T:SharpDX.DirectSound.NotificationPosition">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSBPOSITIONNOTIFY</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.NotificationPosition.Offset">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwOffset</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.NotificationPosition.EventNotifyHandlerPointer">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>void* hEventNotify</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.NotificationPosition.WaitHandle">
            <summary>
            Gets or sets the wait handle.
            </summary>
            <value>The wait handle.</value>
        </member>
        <member name="T:SharpDX.DirectSound.GargleSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXGargle</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.GargleSettings.RateHz">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwRateHz</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.GargleSettings.WaveShape">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int dwWaveShape</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.ChorusSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXChorus</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.WetDryMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fWetDryMix</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Depth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fDepth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Feedback">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fFeedback</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Frequency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fFrequency</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Waveform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lWaveform</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Delay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ChorusSettings.Phase">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lPhase</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.FlangerSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXFlanger</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.WetDryMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fWetDryMix</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Depth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fDepth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Feedback">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fFeedback</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Frequency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fFrequency</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Waveform">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lWaveform</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Delay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.FlangerSettings.Phase">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lPhase</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.EchoSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXEcho</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.EchoSettings.WetDryMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fWetDryMix</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.EchoSettings.Feedback">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fFeedback</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.EchoSettings.LeftDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fLeftDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.EchoSettings.RightDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fRightDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.EchoSettings.PanDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lPanDelay</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.DistortionSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXDistortion</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.DistortionSettings.Gain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fGain</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.DistortionSettings.Edge">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fEdge</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.DistortionSettings.PostEQCenterFrequency">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fPostEQCenterFrequency</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.DistortionSettings.PostEQBandwidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fPostEQBandwidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.DistortionSettings.PreLowpassCutoff">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fPreLowpassCutoff</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.CompressorSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXCompressor</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Gain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fGain</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Attack">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fAttack</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Release">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fRelease</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Threshold">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fThreshold</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Ratio">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fRatio</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.CompressorSettings.Predelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fPredelay</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.ParametricEqualizerSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXParamEq</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizerSettings.Center">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fCenter</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizerSettings.Bandwidth">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fBandwidth</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.ParametricEqualizerSettings.Gain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fGain</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.I3DL2ReverbSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXI3DL2Reverb</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.Room">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lRoom</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.RoomHF">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lRoomHF</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.RoomRolloffFactor">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flRoomRolloffFactor</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.DecayTime">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flDecayTime</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.DecayHFRatio">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flDecayHFRatio</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.Reflections">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lReflections</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.ReflectionsDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flReflectionsDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.Reverb">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>int lReverb</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.ReverbDelay">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flReverbDelay</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.Diffusion">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flDiffusion</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.Density">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flDensity</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.I3DL2ReverbSettings.HFReference">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float flHFReference</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.WavesReverbSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSFXWavesReverb</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverbSettings.InGain">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fInGain</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverbSettings.ReverbMix">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fReverbMix</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverbSettings.ReverbTime">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fReverbTime</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.WavesReverbSettings.HighFreqRTRatio">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>float fHighFreqRTRatio</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.AcousticEchoCancelSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFXAec</unmanaged>
        </member>
        <member name="F:SharpDX.DirectSound.AcousticEchoCancelSettings.Mode">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFX_AEC_MODE dwMode</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.AcousticEchoCancelSettings.Enable">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL fEnable</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.AcousticEchoCancelSettings.NoiseFill">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL fNoiseFill</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.NoiseSuppressSettings">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>DSCFXNoiseSuppress</unmanaged>
        </member>
        <member name="P:SharpDX.DirectSound.NoiseSuppressSettings.Enable">
            <summary>	
            No documentation.	
            </summary>	
            <unmanaged>BOOL fEnable</unmanaged>
        </member>
        <member name="T:SharpDX.DirectSound.PrimarySoundBuffer">
            <summary>
            A Primary DirectSound Buffer.
            </summary>
        </member>
        <member name="M:SharpDX.DirectSound.PrimarySoundBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.PrimarySoundBuffer"/> class.
            </summary>
            <param name="basePtr">The base PTR.</param>
        </member>
        <member name="M:SharpDX.DirectSound.PrimarySoundBuffer.#ctor(SharpDX.DirectSound.DirectSound,SharpDX.DirectSound.SoundBufferDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DirectSound.PrimarySoundBuffer"/> class.
            </summary>
            <param name="dSound">an instance of the <see cref="T:SharpDX.DirectSound.DirectSound"/></param>
            <param name="bufferDescription">The buffer description.</param>
        </member>
    </members>
</doc>

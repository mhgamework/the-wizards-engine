<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bbv.Common.StateMachine</name>
    </assembly>
    <members>
        <member name="T:bbv.Common.StateMachine.ActiveStateMachine`2">
            <summary>
            An active state machine.
            This state machine reacts to events on its own worker thread and the <see cref="M:bbv.Common.StateMachine.ActiveStateMachine`2.Fire(`1,System.Object[])"/> or
            <see cref="M:bbv.Common.StateMachine.ActiveStateMachine`2.FirePriority(`1,System.Object[])"/> methods return immediately back to the caller.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.IStateMachine`2">
            <summary>
            A state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.In(`0)">
            <summary>
            Define the behavior of a state.
            </summary>
            <param name="state">The state.</param>
            <returns>Syntax to build state behavior.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.DefineHierarchyOn(`0,`0,bbv.Common.StateMachine.HistoryType,`0[])">
            <summary>
            Defines a state hierarchy.
            </summary>
            <param name="superStateId">The super state id.</param>
            <param name="initialSubStateId">The initial sub state id.</param>
            <param name="historyType">Type of the history.</param>
            <param name="subStateIds">The sub state ids.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.Fire(`1,System.Object[])">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.FirePriority(`1,System.Object[])">
            <summary>
            Fires the specified priority event. The event will be handled before any already queued event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.Initialize(`0)">
            <summary>
            Initializes the state machine to the specified initial state.
            </summary>
            <param name="initialState">The state to which the state machine is initialized.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.Start">
            <summary>
            Starts the state machine. Events will be processed.
            If the state machine is not started then the events will be queued until the state machine is started.
            Already queued events are processed
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.Stop">
            <summary>
            Stops the state machine. Events will be queued until the state machine is started.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.AddExtension(bbv.Common.StateMachine.IExtension{`0,`1})">
            <summary>
            Adds an extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachine`2.Report(bbv.Common.StateMachine.IStateMachineReport{`0,`1})">
            <summary>
            Creates a state machine report with the specified generator.
            </summary>
            <param name="reportGenerator">The report generator.</param>
        </member>
        <member name="E:bbv.Common.StateMachine.IStateMachine`2.TransitionDeclined">
            <summary>
            Occurs when no transition could be executed.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.IStateMachine`2.ExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.IStateMachine`2.TransitionExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside a transition of the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.IStateMachine`2.TransitionBegin">
            <summary>
            Occurs when a transition begins.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.IStateMachine`2.TransitionCompleted">
            <summary>
            Occurs when a transition completed.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.IStateMachine`2.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running. The state machine is running if if was started and not yet stopped.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:bbv.Common.StateMachine.ActiveStateMachine`2.stateMachine">
            <summary>
            The internal state machine.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ActiveStateMachine`2.moduleController">
            <summary>
            The module controller used to make this state machine active.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.ActiveStateMachine`2"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.ActiveStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine. Used in log messages.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.#ctor(System.String,bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.ActiveStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.#ctor(System.String,bbv.Common.StateMachine.Internals.IFactory{`0,`1},bbv.Common.AsyncModule.IModuleController)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.ActiveStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine.</param>
            <param name="factory">The factory.</param>
            <param name="moduleController">The module controller.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.In(`0)">
            <summary>
            Define the behavior of a state.
            </summary>
            <param name="state">The state.</param>
            <returns>Syntax to build state behavior.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.DefineHierarchyOn(`0,`0,bbv.Common.StateMachine.HistoryType,`0[])">
            <summary>
            Defines a state hierarchy.
            </summary>
            <param name="superStateId">The super state id.</param>
            <param name="initialSubStateId">The initial state id.</param>
            <param name="historyType">Type of the history.</param>
            <param name="subStateIds">The sub state ids.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Fire(`1,System.Object[])">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.FirePriority(`1,System.Object[])">
            <summary>
            Fires the specified priority event. The event will be handled before any already queued event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Initialize(`0)">
            <summary>
            Initializes the state machine to the specified initial state.
            </summary>
            <param name="initialState">The state to which the state machine is initialized.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Start">
            <summary>
            Starts the state machine. Events will be processed.
            If the state machine is not started then the events will be queued until the state machine is started.
            Already queued events are processed
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Stop">
            <summary>
            Stops the state machine. Events will be queued until the state machine is started.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.AddExtension(bbv.Common.StateMachine.IExtension{`0,`1})">
            <summary>
            Adds the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Report(bbv.Common.StateMachine.IStateMachineReport{`0,`1})">
            <summary>
            Creates a state machine report with the specified generator.
            </summary>
            <param name="reportGenerator">The report generator.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Execute(bbv.Common.StateMachine.Internals.EventInformation{`1})">
            <summary>
            Fires an event to the state machine.
            </summary>
            <param name="message">The message containing the event information.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.Initialize(bbv.Common.StateMachine.Internals.InitializationInformation)">
            <summary>
            Initializes the state machine on the worker thread.
            </summary>
            <param name="message">The message containing the initial state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.ActiveStateMachine`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="E:bbv.Common.StateMachine.ActiveStateMachine`2.TransitionDeclined">
            <summary>
            Occurs when no transition could be executed.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.ActiveStateMachine`2.ExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.ActiveStateMachine`2.TransitionExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside a transition of the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.ActiveStateMachine`2.TransitionBegin">
            <summary>
            Occurs when a transition begins.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.ActiveStateMachine`2.TransitionCompleted">
            <summary>
            Occurs when a transition completed.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.ActiveStateMachine`2.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running. The state machine is running if if was started and not yet stopped.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.ExceptionEventArgs`2">
            <summary>
            Event arguments providing exception information.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ContextEventArgs`2">
            <summary>
            Event arguments holding context information.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.ContextEventArgs`2.stateContext">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ContextEventArgs`2.#ctor(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.ContextEventArgs`2"/> class.
            </summary>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ContextEventArgs`2.StateContext">
            <summary>
            Gets the event context.
            </summary>
            <value>The event context.</value>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionEventArgs`2.exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionEventArgs`2.#ctor(bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.ExceptionEventArgs`2"/> class.
            </summary>
            <param name="stateContext">The event context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.ExceptionEventArgs`2.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.ExceptionMessages">
            <summary>
            Holds all exception messages
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.ValueNotInitialized">
            <summary>
            Value is not initialized.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.StateMachineIsAlreadyInitialized">
            <summary>
            State machine is already initialized.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.StateMachineNotInitialized">
            <summary>
            State machine is not initialized.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.StateMachineHasNotYetEnteredInitialState">
            <summary>
            State machine has not yet entered initial state.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.OnlyOneTransitionMayHaveNoGuard">
            <summary>
            There must not be more than one transition for a single event of a state with no guard.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.ExceptionMessages.TransitionWithoutGuardHasToBeLast">
            <summary>
            Transition without guard has to be last declared one.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.StateCannotBeItsOwnSuperState(System.String)">
            <summary>
            State cannot be its own super-state..
            </summary>
            <param name="state">The state.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.StateCannotBeTheInitialSubStateToItself(System.String)">
            <summary>
            State cannot be the initial sub-state to itself.
            </summary>
            <param name="state">The state.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.StateCannotBeTheInitialStateOfSuperStateBecauseItIsNotADirectSubState(System.String,System.String)">
            <summary>
            State cannot be the initial state of super state because it is not a direct sub-state.
            </summary>
            <param name="state">The state.</param>
            <param name="superState">State of the super.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.CannotSetStateAsASuperStateBecauseASuperStateIsAlreadySet``2(``0,System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{``0,``1}})">
            <summary>
            Cannot set state as a super state because the children states do already have a super state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="newSuperStateId">The new super state id.</param>
            <param name="statesAlreadyHavingASuperState">State of the states already having A super.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.TransitionDoesAlreadyExist``2(bbv.Common.StateMachine.Internals.ITransition{``0,``1},bbv.Common.StateMachine.Internals.IState{``0,``1})">
            <summary>
            Transition cannot be added to the state because it has already been added to the state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="transition">The transition.</param>
            <param name="state">The state.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.TransitionDeclined``2(``0,``1)">
            <summary>
            Transition declined.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="stateId">The state id.</param>
            <param name="eventId">The event id.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.CannotPassMultipleArgumentsToSingleArgumentAction(System.Object[],System.String)">
            <summary>
            Cannot pass multiple arguments to single argument action.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="action">The action.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.CannotCastArgumentToActionArgument(System.Object,System.String)">
            <summary>
            Cannot cast argument to action argument.
            </summary>
            <param name="argument">The argument.</param>
            <param name="action">The action.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.CannotPassMultipleArgumentsToSingleArgumentGuard(System.Object[],System.String)">
            <summary>
            Cannot pass multiple arguments to single argument guard.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="guard">The guard.</param>
            <returns>error message</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.ExceptionMessages.CannotCastArgumentToGuardArgument(System.Object,System.String)">
            <summary>
            Cannot cast argument to guard argument.
            </summary>
            <param name="argument">The argument.</param>
            <param name="guard">The guard.</param>
            <returns>error message</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Extensions.ExtensionBase`2">
            <summary>
            Base class for state machine extensions with empty implementation.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.IExtension`2">
            <summary>
            Extensions for a state machine have to implement this interface.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.StartedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1})">
            <summary>
            Called after the state machine was started.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.StoppedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1})">
            <summary>
            Called after the state machine stopped.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.EventQueued(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1,System.Object[])">
            <summary>
            Called after an events was queued.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.EventQueuedWithPriority(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1,System.Object[])">
            <summary>
            Called after an events was queued with priority.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.SwitchedState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Called after the state machine switched states.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.InitializingStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0@)">
            <summary>
            Called when the state machine is initializing.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="initialState">The initial state. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.InitializedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0)">
            <summary>
            Called when the state machine was initialized.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.EnteringInitialState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0)">
            <summary>
            Called when the state machine enters the initial state.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.EnteredInitialState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0,bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Called when the state machine entered the initial state.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.FiringEvent(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1@,System.Object[]@)">
            <summary>
            Called when an event is firing on the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id. Can be replaced by the extension.</param>
            <param name="eventArguments">The event arguments. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.FiredEvent(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Called when an event was fired on the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="context">The transition context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandlingEntryActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception@)">
            <summary>
            Called before an entry action exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandledEntryActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Called after an entry action exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandlingExitActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception@)">
            <summary>
            Called before an exit action exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandledExitActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Called after an exit action exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandlingGuardException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception@)">
            <summary>
            Called before a guard exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandledGuardException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Called after a guard exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandlingTransitionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception@)">
            <summary>
            Called before a transition exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="context">The context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.IExtension`2.HandledTransitionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Called after a transition exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.StartedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1})">
            <summary>
            Starteds the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.StoppedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1})">
            <summary>
            Stoppeds the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.EventQueued(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1,System.Object[])">
            <summary>
            Events the queued.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.EventQueuedWithPriority(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1,System.Object[])">
            <summary>
            Events the queued with priority.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.SwitchedState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Called after the state machine switched states.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.InitializingStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0@)">
            <summary>
            Called when the state machine is initializing.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="initialState">The initial state. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.InitializedStateMachine(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0)">
            <summary>
            Called when the state machine was initialized.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.EnteringInitialState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0)">
            <summary>
            Called when the state machine enters the initial state.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.EnteredInitialState(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`0,bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Called when the state machine entered the initial state.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.FiringEvent(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},`1@,System.Object[]@)">
            <summary>
            Called when an event is firing on the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="eventId">The event id. Can be replaced by the extension.</param>
            <param name="eventArguments">The event arguments. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.FiredEvent(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Called when an event was fired on the state machine.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="context">The transition context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandlingEntryActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception@)">
            <summary>
            Called before an entry action exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandledEntryActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Called after an entry action exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandlingExitActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception@)">
            <summary>
            Called before an exit action exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandledExitActionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Called after an exit action exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="state">The state.</param>
            <param name="stateContext">The state context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandlingGuardException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception@)">
            <summary>
            Called before a guard exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandledGuardException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Called after a guard exception was handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandlingTransitionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception@)">
            <summary>
            Called before a transition exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="context">The context.</param>
            <param name="exception">The exception. Can be replaced by the extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Extensions.ExtensionBase`2.HandledTransitionException(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.ITransition{`0,`1},bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Called after a transition exception is handled.
            </summary>
            <param name="stateMachine">The state machine.</param>
            <param name="transition">The transition.</param>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.HistoryType">
            <summary>
            Defines the history behavior of a state (on re-entrance of a super state).
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.HistoryType.None">
            <summary>
            The state enters into its initial sub-state. The sub-state itself enters its initial sub-state and so on
            until the innermost nested state is reached.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.HistoryType.Shallow">
            <summary>
            The state enters into its last active sub-state. The sub-state itself enters its initial sub-state and so on
            until the innermost nested state is reached.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.HistoryType.Deep">
            <summary>
            The state enters into its last active sub-state. The sub-state itself enters into-its last active state and so on
            until the innermost nested state is reached.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ActionHolder">
            <summary>
            Wraps a parameterless action.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IActionHolder">
            <summary>
            Wrapper for parameterless actions and actions with parameters.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IActionHolder.Execute">
            <summary>
            Executes the wrapped action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IActionHolder.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.ActionHolder.action">
            <summary>
            the wrapped action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.ActionHolder"/> class.
            </summary>
            <param name="action">The wrapped action.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder.Execute">
            <summary>
            Executes the wrapped action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ActionHolder`1">
            <summary>
            Wraps an action with a single parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the action.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.ActionHolder`1.action">
            <summary>
            the wrapped action
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.ActionHolder`1.parameter">
            <summary>
            the parameter that is passed to the action on execution.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.ActionHolder`1"/> class.
            </summary>
            <param name="action">The wrapped action.</param>
            <param name="parameter">The parameter that is passed to the action on execution.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder`1.Execute">
            <summary>
            Executes the wrapped action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ActionHolder`1.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ArgumentLessGuardHolder">
            <summary>
            Holds an argumente less guard.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IGuardHolder">
            <summary>
            Holds a guard.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGuardHolder.Execute(System.Object[])">
            <summary>
            Executes the guard.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
            <returns>Result of the guard execution.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGuardHolder.Describe">
            <summary>
            Describes the guard.
            </summary>
            <returns>Description of the guard.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessGuardHolder.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.ArgumentLessGuardHolder"/> class.
            </summary>
            <param name="guard">The guard.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessGuardHolder.Execute(System.Object[])">
            <summary>
            Executes the guard.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
            <returns>Result of the guard execution.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessGuardHolder.Describe">
            <summary>
            Describes the guard.
            </summary>
            <returns>Description of the guard.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ArgumentLessTransitionActionHolder">
            <summary>
            Holds an argument less action.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ITransitionActionHolder">
            <summary>
            Holds a transition action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ITransitionActionHolder.Execute(System.Object[])">
            <summary>
            Executes the transition action.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ITransitionActionHolder.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessTransitionActionHolder.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.ArgumentLessTransitionActionHolder"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessTransitionActionHolder.Execute(System.Object[])">
            <summary>
            Executes the transition action.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ArgumentLessTransitionActionHolder.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.EventInformation`1">
            <summary>
            Provides information about an event: event-id and arguments.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.EventInformation`1.#ctor(`0,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.EventInformation`1"/> class.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.EventInformation`1.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.EventInformation`1.EventArguments">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.GuardHolder">
            <summary>
            Holds a guard.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.GuardHolder.#ctor(System.Func{System.Object[],System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.GuardHolder"/> class.
            </summary>
            <param name="guard">The guard.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.GuardHolder.Execute(System.Object[])">
            <summary>
            Executes the guard.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
            <returns>Result of the guard execution.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.GuardHolder.Describe">
            <summary>
            Describes the guard.
            </summary>
            <returns>Description of the guard.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IExtensionHost`2">
            <summary>
            Interface to execute actions on all extensions of the event broker.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IExtensionHost`2.ForEach(System.Action{bbv.Common.StateMachine.IExtension{`0,`1}})">
            <summary>
            Executes the specified action for all extensions.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IFactory`2">
            <summary>
            Provides creation methods for all objects needed inside the state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateState(`0)">
            <summary>
            Creates a state.
            </summary>
            <param name="id">The id of the state.</param>
            <returns>A newly created state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateTransition">
            <summary>
            Creates a transition.
            </summary>
            <returns>A newly created transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateActionHolder(System.Action)">
            <summary>
            Creates an action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateActionHolder``1(System.Action{``0},``0)">
            <summary>
            Creates an action holder.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter.</param>
            <returns>A newly created action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateTransitionActionHolder(System.Action{System.Object[]})">
            <summary>
            Creates a transition action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created transition action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateTransitionActionHolder(System.Action)">
            <summary>
            Creates a transition action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created transition action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateTransitionActionHolder``1(System.Action{``0})">
            <summary>
            Creates a transition action holder.
            </summary>
            <typeparam name="T">Type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <returns>
            A newly created transition action holder.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateGuardHolder(System.Func{System.Object[],System.Boolean})">
            <summary>
            Creates a guard holder.
            </summary>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateGuardHolder(System.Func{System.Boolean})">
            <summary>
            Creates a guard holder.
            </summary>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateGuardHolder``1(System.Func{``0,System.Boolean})">
            <summary>
            Creates a guard holder.
            </summary>
            <typeparam name="T">Type of the guard argument.</typeparam>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateStateContext(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Creates a state context.
            </summary>
            <param name="state">The state.</param>
            <param name="notifier">The notifier.</param>
            <returns>A newly created state context.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateTransitionContext(bbv.Common.StateMachine.Internals.IState{`0,`1},`1,System.Object[],bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Creates a transition context.
            </summary>
            <param name="state">The state.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
            <param name="notifier">The notifier.</param>
            <returns>A newly created transition context.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IFactory`2.CreateStateMachineInitializer(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Creates a state machine initializer.
            </summary>
            <param name="initialState">The initial state.</param>
            <param name="stateContext">The state context.</param>
            <returns>A newly created initializer.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.Initializable`1">
            <summary>
            An initializable value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Initializable`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Initializable`1.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized (has a set value).
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.InitializationInformation">
            <summary>
            Message used to delay entering initial state in active state machine.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.INotifier`2">
            <summary>
            Provides functionalities to notify events.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.INotifier`2.OnExceptionThrown(bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Called when an exception was thrown.
            </summary>
            <param name="stateContext">The context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.INotifier`2.OnExceptionThrown(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Called when an exception was thrown in a transition.
            </summary>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.INotifier`2.OnTransitionBegin(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Called before a transition is executed.
            </summary>
            <param name="transitionContext">The context.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IState`2">
            <summary>
            Represents a state of the state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.Fire(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the specified event id on this state.
            </summary>
            <param name="context">The event context.</param>
            <returns>The result of the transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.Entry(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state.
            </summary>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.Exit(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Exits this state.
            </summary>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.EnterByHistory(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state by its history depending on <see cref="P:bbv.Common.StateMachine.Internals.State`2.HistoryType"/>.
            The <see cref="M:bbv.Common.StateMachine.Internals.State`2.Entry(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})"/> method has to be called already.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>
            The active state (depends on <see cref="P:bbv.Common.StateMachine.Internals.State`2.HistoryType"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.EnterShallow(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state is shallow mode:
            The entry action is executed and the initial state is entered in shallow mode if there is one.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>The active state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.EnterDeep(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state is deep mode:
            The entry action is executed and the initial state is entered in deep mode if there is one.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>The active state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IState`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.Id">
            <summary>
            Gets the id of this state.
            </summary>
            <value>The id of this state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.InitialState">
            <summary>
            Gets or sets the initial sub-state. Null if this state has no sub-states.
            </summary>
            <value>The initial sub-state. Null if this state has no sub-states.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.SuperState">
            <summary>
            Gets or sets the super-state. Null if this is a root state.
            </summary>
            <value>The super-state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.SubStates">
            <summary>
            Gets the sub-states.
            </summary>
            <value>The sub-states.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.Transitions">
            <summary>
            Gets the transitions.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.Level">
            <summary>
            Gets or sets the level in the hierarchy.
            </summary>
            <value>The level in the hierarchy.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.LastActiveState">
            <summary>
            Gets or sets the last active state of this state.
            </summary>
            <value>The last state of the active.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.EntryActions">
            <summary>
            Gets the entry actions.
            </summary>
            <value>The entry actions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.ExitActions">
            <summary>
            Gets the exit actions.
            </summary>
            <value>The exit actions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IState`2.HistoryType">
            <summary>
            Gets or sets the history type of this state.
            </summary>
            <value>The type of the history.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IStateContext`2">
            <summary>
            Provides information about the current state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IStateContext`2.AddRecord(`0,bbv.Common.StateMachine.Internals.RecordType)">
            <summary>
            Adds a record.
            </summary>
            <param name="stateId">The state id.</param>
            <param name="recordType">Type of the record.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IStateContext`2.GetRecords">
            <summary>
            Gets all records in string representation.
            </summary>
            <returns>All records in string representation.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IStateContext`2.OnExceptionThrown(System.Exception)">
            <summary>
            Called when an exception should be notified.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IStateContext`2.State">
            <summary>
            Gets the source state of the transition.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IStateContext`2.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IStateDictionary`2">
            <summary>
            Manages the states of a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IStateDictionary`2.GetStates">
            <summary>
            Gets all states defined in this dictionary.
            </summary>
            <returns>All states in this directory.</returns>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.IStateDictionary`2.Item(`0)">
            <summary>
            Gets the <see cref="T:bbv.Common.StateMachine.Internals.IState`2"/> with the specified state id.
            </summary>
            <value>State with the specified id.</value>
            <param name="stateId">The State id.</param>
            <returns>The State with the specified id.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ITransition`2">
            <summary>
            Represents a transition in the state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ITransition`2.Fire(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the transition.
            </summary>
            <param name="context">The event context.</param>
            <returns>The result of the transition.</returns>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransition`2.Source">
            <summary>
            Gets or sets the source state of the transition.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransition`2.Target">
            <summary>
            Gets or sets the target state of the transition.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransition`2.Actions">
            <summary>
            Gets the actions of this transition.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransition`2.Guard">
            <summary>
            Gets or sets the guard of this transition.
            </summary>
            <value>The guard.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ITransitionContext`2">
            <summary>
            Provides information about the current transition.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.ITransitionContext`2.OnTransitionBegin">
            <summary>
            Called when a transition beginning should be notified.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransitionContext`2.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransitionContext`2.EventArguments">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.ITransitionResult`2">
            <summary>
            Represents the result of a transition.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransitionResult`2.Fired">
            <summary>
            Gets a value indicating whether this <see cref="T:bbv.Common.StateMachine.Internals.ITransitionResult`2"/> is fired.
            </summary>
            <value><c>true</c> if fired; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.ITransitionResult`2.NewState">
            <summary>
            Gets the new state.
            </summary>
            <value>The new state.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.RecordType">
            <summary>
            Specifies the type of the record.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.RecordType.Enter">
            <summary>
            A state was entered.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.RecordType.Exit">
            <summary>
            A state was exited.
            </summary>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.SingleArgumentGuardHolder`1">
            <summary>
            Holds a single argument guard.
            </summary>
            <typeparam name="T">Type of the argument of the guard.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentGuardHolder`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.SingleArgumentGuardHolder`1"/> class.
            </summary>
            <param name="guard">The guard.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentGuardHolder`1.Execute(System.Object[])">
            <summary>
            Executes the guard.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
            <returns>Result of the guard execution.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentGuardHolder`1.Describe">
            <summary>
            Describes the guard.
            </summary>
            <returns>Description of the guard.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.SingleArgumentTransitionActionHolder`1">
            <summary>
            Holds a transition action with exactly one argument.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentTransitionActionHolder`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.SingleArgumentTransitionActionHolder`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentTransitionActionHolder`1.Execute(System.Object[])">
            <summary>
            Executes the transition action.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.SingleArgumentTransitionActionHolder`1.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StandardFactory`2">
            <summary>
            Standard implementation of the state machine factory.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.#ctor(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IExtensionHost{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StandardFactory`2"/> class.
            </summary>
            <param name="stateMachineInformation">The state machine information.</param>
            <param name="extensionHost">The extension host.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateState(`0)">
            <summary>
            Creates a state.
            </summary>
            <param name="id">The id of the state.</param>
            <returns>A newly created state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateTransition">
            <summary>
            Creates a transition.
            </summary>
            <returns>A newly created transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateActionHolder(System.Action)">
            <summary>
            Creates an action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateActionHolder``1(System.Action{``0},``0)">
            <summary>
            Creates an action holder.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter.</param>
            <returns>A newly created action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateTransitionActionHolder(System.Action{System.Object[]})">
            <summary>
            Creates a transition action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created transition action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateTransitionActionHolder(System.Action)">
            <summary>
            Creates the transition action holder.
            </summary>
            <param name="action">The action.</param>
            <returns>A newly created transition action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateTransitionActionHolder``1(System.Action{``0})">
            <summary>
            Creates the transition action holder.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <returns>A newly created transition action holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateGuardHolder(System.Func{System.Object[],System.Boolean})">
            <summary>
            Creates a guard holder.
            </summary>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateGuardHolder(System.Func{System.Boolean})">
            <summary>
            Creates the guard holder.
            </summary>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateGuardHolder``1(System.Func{``0,System.Boolean})">
            <summary>
            Creates the guard holder.
            </summary>
            <typeparam name="T">The type of the guard argument.</typeparam>
            <param name="guard">The guard.</param>
            <returns>A newly created guard holder.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateStateContext(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Creates a state context.
            </summary>
            <param name="state">The state.</param>
            <param name="notifier">The notifier.</param>
            <returns>A newly created state context.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateTransitionContext(bbv.Common.StateMachine.Internals.IState{`0,`1},`1,System.Object[],bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Creates a transition context.
            </summary>
            <param name="state">The state.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
            <param name="notifier">The notifier.</param>
            <returns>A newly created transition context.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StandardFactory`2.CreateStateMachineInitializer(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Creates a state machine initializer.
            </summary>
            <param name="initialState">The initial state.</param>
            <param name="stateContext">The state context.</param>
            <returns>A newly created initializer.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.State`2">
            <summary>
            A state of the state machine.
            A state can be a sub-state or super-state of another state.
            </summary>
            <typeparam name="TState">The type of the state id.</typeparam>
            <typeparam name="TEvent">The type of the event id.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.subStates">
            <summary>
            Collection of the sub-states of this state.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.transitions">
            <summary>
            Collection of transitions that start in this state (<see cref="P:bbv.Common.StateMachine.Internals.ITransition`2.Source"/> is equal to this state).
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.level">
            <summary>
            The level of this state within the state hierarchy [1..maxLevel]
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.superState">
            <summary>
            The super-state of this state. Null for states with <see cref="F:bbv.Common.StateMachine.Internals.State`2.level"/> equal to 1.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.initialState">
            <summary>
            The initial sub-state of this state.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.State`2.historyType">
            <summary>
            The <see cref="P:bbv.Common.StateMachine.Internals.State`2.HistoryType"/> of this state.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.#ctor(`0,bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IExtensionHost{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.State`2"/> class.
            </summary>
            <param name="id">The unique id of this state.</param>
            <param name="stateMachineInformation">The state machine information.</param>
            <param name="extensionHost">The extension host.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.Fire(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Goes recursively up the state hierarchy until a state is found that can handle the event.
            </summary>
            <param name="context">The event context.</param>
            <returns>The result of the transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.Entry(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state.
            </summary>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.Exit(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Exits this state, executes the exit action and sets the <see cref="P:bbv.Common.StateMachine.Internals.State`2.LastActiveState"/> on the super-state.
            </summary>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterByHistory(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state by its history depending on <see cref="P:bbv.Common.StateMachine.Internals.State`2.HistoryType"/>.
            The <see cref="M:bbv.Common.StateMachine.Internals.State`2.Entry(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})"/> method has to be called already.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>
            The active state (depends on <see cref="P:bbv.Common.StateMachine.Internals.State`2.HistoryType"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterShallow(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state is shallow mode:
            The entry action is executed and the initial state is entered in shallow mode if there is one.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>The entered state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterDeep(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this state is deep mode:
            The entry action is executed and the initial state is entered in deep mode if there is one.
            </summary>
            <param name="stateContext">The event context.</param>
            <returns>The active state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.HandleException(System.Exception,bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Handles the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="stateContext">The state context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.SetInitialLevel">
            <summary>
            Sets the initial level depending on the level of the super state of this instance.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.SetLevelOfSubStates">
            <summary>
            Sets the level of all sub states.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.SetThisStateAsLastStateOfSuperState">
            <summary>
            Sets this instance as the last state of this instance's super state.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterHistoryDeep(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this instance with history type = deep.
            </summary>
            <param name="stateContext">The state context.</param>
            <returns>The entered state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterHistoryShallow(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this instance with history type = shallow.
            </summary>
            <param name="stateContext">The state context.</param>
            <returns>The entered state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.EnterHistoryNone(bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Enters this instance with history type = none.
            </summary>
            <param name="stateContext">The state context.</param>
            <returns>The entered state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.CheckSuperStateIsNotThisInstance(bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Throws an exception if the new super state is this instance.
            </summary>
            <param name="newSuperState">The value.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.CheckInitialStateIsNotThisInstance(bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Throws an exception if the new initial state is this instance.
            </summary>
            <param name="newInitialState">The value.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.State`2.CheckInitialStateIsASubState(bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Throws an exception if the new initial state is not a sub-state of this instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.LastActiveState">
            <summary>
            Gets or sets the last active state of this state.
            </summary>
            <value>The last state of the active.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.Id">
            <summary>
            Gets the unique id of this state.
            </summary>
            <value>The id of this state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.EntryActions">
            <summary>
            Gets the entry actions.
            </summary>
            <value>The entry actions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.ExitActions">
            <summary>
            Gets the exit actions.
            </summary>
            <value>The exit action.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.InitialState">
            <summary>
            Gets or sets the initial sub state of this state.
            </summary>
            <value>The initial sub state of this state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.SuperState">
            <summary>
            Gets or sets the super-state of this state.
            </summary>
            <remarks>
            The <see cref="P:bbv.Common.StateMachine.Internals.State`2.Level"/> of this state is changed accordingly to the super-state.
            </remarks>
            <value>The super-state of this super.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.Level">
            <summary>
            Gets or sets the level of this state in the state hierarchy.
            When set then the levels of all sub-states are changed accordingly.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.HistoryType">
            <summary>
            Gets or sets the history type of this state.
            </summary>
            <value>The type of the history.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.SubStates">
            <summary>
            Gets the sub-states of this state.
            </summary>
            <value>The sub-states of this state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.State`2.Transitions">
            <summary>
            Gets the transitions that start in this state.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateBuilder`2">
            <summary>
            Provides operations to build a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IEntryActionSyntax`2">
            <summary>
            Defines the entry action syntax.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IExitActionSyntax`2">
            <summary>
            Defines the exit action syntax.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IEventSyntax`2">
            <summary>
            Defines the event syntax.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IEventSyntax`2.On(`1)">
            <summary>
            Defines an event that is accepted.
            </summary>
            <param name="eventId">The event id.</param>
            <returns>On syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IExitActionSyntax`2.ExecuteOnExit(System.Action[])">
            <summary>
            Defines exit actions.
            </summary>
            <param name="actions">The actions.</param>
            <returns>Event syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IExitActionSyntax`2.ExecuteOnExit``1(System.Action{``0},``0)">
            <summary>
            Defines an exit action.
            </summary>
            <typeparam name="T">Type of the parameter of the exit action method.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter that will be passed to the exit action.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IEntryActionSyntax`2.ExecuteOnEntry(System.Action[])">
            <summary>
            Defines entry actions.
            </summary>
            <param name="actions">The actions.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IEntryActionSyntax`2.ExecuteOnEntry``1(System.Action{``0},``0)">
            <summary>
            Defines an entry action.
            </summary>
            <typeparam name="T">Type of the parameter of the entry action method.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter that will be passed to the entry action.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IGotoInIfSyntax`2">
            <summary>
            Defines the Goto syntax inside an If.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IIfOrOtherwiseSyntax`2">
            <summary>
            Defines the syntax for If or Otherwise.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfOrOtherwiseSyntax`2.If(System.Func{System.Object[],System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfOrOtherwiseSyntax`2.If``1(System.Func{``0,System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <typeparam name="T">The type of the guaard argument.</typeparam>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfOrOtherwiseSyntax`2.If(System.Func{System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfOrOtherwiseSyntax`2.Otherwise">
            <summary>
            Defines the transition that is taken when the guards of all other transitions did not match.
            </summary>
            <returns>Default syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoInIfSyntax`2.Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoInIfSyntax`2.Execute(System.Action[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoInIfSyntax`2.Execute``1(System.Action{``0}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IOtherwiseSyntax`2">
            <summary>
            Defines the Otherwise syntax
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOtherwiseSyntax`2.Goto(`0)">
            <summary>
            Defines the target state of the transition.
            </summary>
            <param name="target">The target.</param>
            <returns>Goto syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOtherwiseSyntax`2.Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOtherwiseSyntax`2.Execute(System.Action[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOtherwiseSyntax`2.Execute``1(System.Action{``0}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IGotoSyntax`2">
            <summary>
            Defines the syntax after Goto.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoSyntax`2.Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoSyntax`2.Execute(System.Action[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IGotoSyntax`2.Execute``1(System.Action{``0}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IIfSyntax`2">
            <summary>
            Defines the If syntax.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfSyntax`2.Goto(`0)">
            <summary>
            Defines the target state of the transition.
            </summary>
            <param name="target">The target.</param>
            <returns>Goto syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfSyntax`2.Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfSyntax`2.Execute(System.Action[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IIfSyntax`2.Execute``1(System.Action{``0}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.IOnSyntax`2">
            <summary>
            Defines the syntax after On.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.Goto(`0)">
            <summary>
            Defines the target state of the transition.
            </summary>
            <param name="target">The target.</param>
            <returns>Goto syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.Execute(System.Action[])">
            <summary>
            Defines the transition actions.
            </summary>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.Execute``1(System.Action{``0}[])">
            <summary>
            Defines the transition actions.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="actions">The actions to execute when the transition is taken.</param>
            <returns>Event syntax</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.If(System.Func{System.Object[],System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.If``1(System.Func{``0,System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <typeparam name="T">The type of the guard argument.</typeparam>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.IOnSyntax`2.If(System.Func{System.Boolean})">
            <summary>
            Defines a transition guard. The transition is only taken if the guard is fulfilled.
            </summary>
            <param name="guard">The guard.</param>
            <returns>If syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.#ctor(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateDictionary{`0,`1},bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateBuilder`2"/> class.
            </summary>
            <param name="state">The state to build.</param>
            <param name="stateDictionary">The state dictionary of the state machine.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IEntryActionSyntax{TState@TEvent}#ExecuteOnEntry(System.Action[])">
            <summary>
            Defines entry actions.
            </summary>
            <param name="actions">The actions.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IEntryActionSyntax{TState@TEvent}#ExecuteOnEntry``1(System.Action{``0},``0)">
            <summary>
            Defines an entry action.
            </summary>
            <typeparam name="T">Type of the parameter of the entry action method.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter that will be passed to the entry action.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IExitActionSyntax{TState@TEvent}#ExecuteOnExit(System.Action[])">
            <summary>
            Defines exit actions.
            </summary>
            <param name="actions">The actions.</param>
            <returns>Event syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IExitActionSyntax{TState@TEvent}#ExecuteOnExit``1(System.Action{``0},``0)">
            <summary>
            Defines an exit action.
            </summary>
            <typeparam name="T">Type of the parameter of the exit action method.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter that will be passed to the exit action.</param>
            <returns>Exit action syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IEventSyntax{TState@TEvent}#On(`1)">
            <summary>
            Builds a transition.
            </summary>
            <param name="eventId">The event that triggers the transition.</param>
            <returns>Syntax to build the transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IOnSyntax{TState@TEvent}#Goto(`0)">
            <summary>
            Defines where to go in response to an event.
            </summary>
            <param name="target">The target.</param>
            <returns>Execute syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IOnSyntax{TState@TEvent}#Execute(System.Action{System.Object[]}[])">
            <summary>
            Defines the actions to execute on a transition.
            </summary>
            <param name="actions">The actions.</param>
            <returns>Guard syntax.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateBuilder`2.bbv#Common#StateMachine#Internals#IOnSyntax{TState@TEvent}#If(System.Func{System.Object[],System.Boolean})">
            <summary>
            Defines a guard for a transition.
            </summary>
            <param name="guard">The guard.</param>
            <returns>Event syntax.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateContext`2">
            <summary>
            Provides context information. Gathers information during executing operations on the state machine
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateContext`2.state">
            <summary>
            The source state of the transition.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateContext`2.exceptions">
            <summary>
            The exceptions that occurred during performing an operation.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateContext`2.records">
            <summary>
            The list of records (state exits, entries)
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateContext`2"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.#ctor(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateContext`2"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.AddRecord(`0,bbv.Common.StateMachine.Internals.RecordType)">
            <summary>
            Adds a record.
            </summary>
            <param name="stateId">The state id.</param>
            <param name="recordType">Type of the record.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.GetRecords">
            <summary>
            Gets all records in string representation.
            </summary>
            <returns>All records in string representation.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.OnExceptionThrown(System.Exception)">
            <summary>
            Called when an exception should be notified.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.AddException(System.Exception)">
            <summary>
            Adds an exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateContext`2.State">
            <summary>
            Gets the source state of the transition.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateContext`2.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateContext`2.Notifier">
            <summary>
            Gets the notifier.
            </summary>
            <value>The notifier.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateContext`2.Record">
            <summary>
            A record of a state exit or entry. Used to log the way taken by transitions and initialization.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.Record.#ctor(`0,bbv.Common.StateMachine.Internals.RecordType)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateContext`2.Record"/> class.
            </summary>
            <param name="stateId">The state id.</param>
            <param name="recordType">Type of the record.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateContext`2.Record.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateContext`2.Record.StateId">
            <summary>
            Gets the state id.
            </summary>
            <value>The state id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateContext`2.Record.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>The type of the record.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateDictionary`2">
            <summary>
            Dictionary mapping state ids to states.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateDictionary`2.dictionary">
            <summary>
            Maps ids to states.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateDictionary`2.#ctor(bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateDictionary`2"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateDictionary`2.GetStates">
            <summary>
            Gets all states defined in this dictionary.
            </summary>
            <returns>All states in this directory.</returns>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateDictionary`2.Item(`0)">
            <summary>
            Gets the <see cref="T:bbv.Common.StateMachine.Internals.IState`2"/> with the specified state id.
            </summary>
            <value>State with the specified id.</value>
            <param name="stateId">The State id.</param>
            <returns>The State with the specified id.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateMachine`2">
            <summary>
            Base implementation of a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.IStateMachineInformation`2">
            <summary>
            Provides information about a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="P:bbv.Common.StateMachine.IStateMachineInformation`2.Name">
            <summary>
            Gets the name of this instance.
            </summary>
            <value>The name of this instance.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.IStateMachineInformation`2.CurrentStateId">
            <summary>
            Gets the id of the current state.
            </summary>
            <value>The id of the current state.</value>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachine`2.states">
            <summary>
            The dictionary of all states.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachine`2.initialStateId">
            <summary>
            The initial state of the state machine.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachine`2.name">
            <summary>
            Name of this state machine used in log messages.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachine`2.extensions">
            <summary>
            Extensions of this state machine.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachine`2.currentState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateMachine`2"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateMachine`2"/> class.
            </summary>
            <param name="name">The name of this state machine used in log messages.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.#ctor(System.String,bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateMachine`2"/> class.
            </summary>
            <param name="name">The name of this state machine used in log messages.</param>
            <param name="factory">The factory used to create internal instances.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.AddExtension(bbv.Common.StateMachine.IExtension{`0,`1})">
            <summary>
            Adds the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.ForEach(System.Action{bbv.Common.StateMachine.IExtension{`0,`1}})">
            <summary>
            Executes the specified action for all extensions.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.In(`0)">
            <summary>
            Define the behavior of a state.
            </summary>
            <param name="state">The state.</param>
            <returns>Syntax to build state behavior.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.Initialize(`0)">
            <summary>
            Initializes the state machine by setting the specified initial state.
            </summary>
            <param name="initialState">The initial state of the state machine.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.EnterInitialState">
            <summary>
            Enters the initial state that was previously set with <see cref="M:bbv.Common.StateMachine.Internals.StateMachine`2.Initialize(`0)"/>.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.Fire(`1)">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventId">The event.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.Fire(`1,System.Object[])">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.DefineHierarchyOn(`0,`0,bbv.Common.StateMachine.HistoryType,`0[])">
            <summary>
            Defines a state hierarchy.
            </summary>
            <param name="superStateId">The super state id.</param>
            <param name="initialSubStateId">The initial state id.</param>
            <param name="historyType">Type of the history.</param>
            <param name="subStateIds">The sub state ids.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.OnExceptionThrown(bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Exception)">
            <summary>
            Fires the <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.ExceptionThrown"/> event.
            </summary>
            <param name="stateContext">The context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.OnExceptionThrown(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Fires the <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionExceptionThrown"/> event.
            </summary>
            <param name="transitionContext">The transition context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.OnTransitionBegin(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionBegin"/> event.
            </summary>
            <param name="transitionContext">The transition context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.Report(bbv.Common.StateMachine.IStateMachineReport{`0,`1})">
            <summary>
            Creates a report with the specified generator.
            </summary>
            <param name="reportGenerator">The report generator.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.OnTransitionDeclined(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionDeclined"/> event.
            </summary>
            <param name="transitionContext">The transition event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.OnTransitionCompleted(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionCompleted"/> event.
            </summary>
            <param name="transitionContext">The transition event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.Initialize(bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Initializes the state machine by setting the specified initial state.
            </summary>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachine`2.RaiseEvent``1(System.EventHandler{``0},``0,bbv.Common.StateMachine.Internals.IStateContext{`0,`1},System.Boolean)">
            <summary>
            Raises an event and catches all exceptions. If an exception is caught then <paramref name="raiseEventOnException"/> specifies whether the
            <see cref="E:bbv.Common.StateMachine.Internals.StateMachine`2.ExceptionThrown"/> event is risen.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="arguments">The arguments.</param>
            <param name="stateContext">The event context.</param>
            <param name="raiseEventOnException">if set to <c>true</c> [raise event on exception].</param>
        </member>
        <member name="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionDeclined">
            <summary>
            Occurs when no transition could be executed.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.Internals.StateMachine`2.ExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside a transition of the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionBegin">
            <summary>
            Occurs when a transition begins.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.Internals.StateMachine`2.TransitionCompleted">
            <summary>
            Occurs when a transition completed.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateMachine`2.Name">
            <summary>
            Gets the name of this instance.
            </summary>
            <value>The name of this instance.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateMachine`2.CurrentStateId">
            <summary>
            Gets the id of the current state.
            </summary>
            <value>The id of the current state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.StateMachine`2.CurrentState">
            <summary>
            Gets or sets the state of the current.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.StateMachineInitializer`2">
            <summary>
            Responsible for entering the initial state of the state machine. 
            All states up in the hierarchy are entered, too.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.initialState">
            <summary>
            The state to enter.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.stateContext">
            <summary>
            Context information of this operation.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.#ctor(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.StateMachineInitializer`2"/> class.
            </summary>
            <param name="initialState">The initial state to enter.</param>
            <param name="stateContext">The state context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.EnterInitialState">
            <summary>
            Enters the initial state by entering all states further up in the hierarchy.
            </summary>
            <returns>The entered state. The initial state or a sub state of the initial state.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.TraverseUpTheStateHierarchy">
            <summary>
            Traverses up the state hierarchy and build the stack of states.
            </summary>
            <returns>The stack containing all states up the state hierarchy.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.StateMachineInitializer`2.TraverseDownTheStateHierarchyAndEnterStates(System.Collections.Generic.Stack{bbv.Common.StateMachine.Internals.IState{`0,`1}})">
            <summary>
            Traverses down the state hierarchy and enter all states along.
            </summary>
            <param name="stack">The stack containing the state hierarchy.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.Transition`2">
            <summary>
            A transition of the state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.Transition`2.actions">
            <summary>
            The actions that are executed when this transition is fired.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.#ctor(bbv.Common.StateMachine.IStateMachineInformation{`0,`1},bbv.Common.StateMachine.Internals.IExtensionHost{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.Transition`2"/> class.
            </summary>
            <param name="stateMachineInformation">The state machine information.</param>
            <param name="extensionHost">The extension host.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.Fire(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Fires the transition.
            </summary>
            <param name="context">The event context.</param>
            <returns>The result of the transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.HandleException(System.Exception,bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Handles an exception thrown during performing the transition or guard evaluation.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.Fire(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},System.Object[],bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Recursively traverses the state hierarchy, exiting states along
            the way, performing the action, and entering states to the target.
            </summary>
            <remarks>
            There exist the following transition scenarios:
            0. there is no target state (internal transition)
               --> handled outside this method.
            1. The source and target state are the same (self transition)
               --> perform the transition directly:
                   Exit source state, perform transition actions and enter target state
            2. The target state is a direct or indirect sub-state of the source state
               --> perform the transition actions, then traverse the hierarchy 
                   from the source state down to the target state,
                   entering each state along the way.
                   No state is exited.
            3. The source state is a sub-state of the target state
               --> traverse the hierarchy from the source up to the target, 
                   exiting each state along the way. 
                   Then perform transition actions.
                   Finally enter the target state.
            4. The source and target state share the same super-state
            5. All other scenarios:
               a. The source and target states reside at the same level in the hierarchy 
                  but do not share the same direct super-state
               --> exit the source state, move up the hierarchy on both sides and enter the target state
               b. The source state is lower in the hierarchy than the target state
               --> exit the source state and move up the hierarchy on the source state side
               c. The target state is lower in the hierarchy than the source state
               --> move up the hierarchy on the target state side, afterward enter target state
            </remarks>
            <param name="source">The source state.</param>
            <param name="target">The target state.</param>
            <param name="eventArguments">The event arguments.</param>
            <param name="context">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.ShouldFire(System.Object[],bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Returns a value indicating whether the transition should fire (according to the <see cref="P:bbv.Common.StateMachine.Internals.Transition`2.Guard"/>).
            </summary>
            <param name="eventArguments">The event arguments.</param>
            <param name="context">The event context.</param>
            <returns>A value indicating whether to execute the transition.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.PerformActions(System.Object[],bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Performs the actions of this transition.
            </summary>
            <param name="eventArguments">The event arguments.</param>
            <param name="context">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.Transition`2.UnwindSubStates(bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IStateContext{`0,`1})">
            <summary>
            Exits all sub-states up the hierarchy up to the <paramref name="origin"/> state.
            </summary>
            <param name="origin">The origin.</param>
            <param name="stateContext">The event context.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Transition`2.Source">
            <summary>
            Gets or sets the source state of this transition.
            </summary>
            <value>The source state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Transition`2.Target">
            <summary>
            Gets or sets the target state of this transition.
            </summary>
            <value>The target state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Transition`2.Guard">
            <summary>
            Gets or sets the guard of this transition.
            </summary>
            <value>The guard.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Transition`2.Actions">
            <summary>
            Gets the actions of this transition.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.Transition`2.InternalTransition">
            <summary>
            Gets a value indicating whether this is an internal transition.
            </summary>
            <value><c>true</c> if this is an internal transition; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.TransitionActionHolder">
            <summary>
            Holds a transition action.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionActionHolder.#ctor(System.Action{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.TransitionActionHolder"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionActionHolder.Execute(System.Object[])">
            <summary>
            Executes the transition action.
            </summary>
            <param name="arguments">The state machine event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionActionHolder.Describe">
            <summary>
            Describes the action.
            </summary>
            <returns>Description of the action.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.TransitionContext`2">
            <summary>
            Provides context information during a transition.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.TransitionContext`2.eventId">
            <summary>
            The event that causes the transition.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.TransitionContext`2.eventArguments">
            <summary>
            The event arguments.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionContext`2.#ctor(bbv.Common.StateMachine.Internals.IState{`0,`1},`1,System.Object[],bbv.Common.StateMachine.Internals.INotifier{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.TransitionContext`2"/> class.
            </summary>
            <param name="state">The source state.</param>
            <param name="eventId">The event id.</param>
            <param name="eventArguments">The event arguments.</param>
            <param name="notifier">The notifier to fire events about transition events and exceptions.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionContext`2.OnExceptionThrown(System.Exception)">
            <summary>
            Called when an exception should be notified.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionContext`2.OnTransitionBegin">
            <summary>
            Called when a transition beginning should be notified.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionContext`2.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionContext`2.EventArguments">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.TransitionDictionary`2">
            <summary>
            Manages the transitions of a state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.TransitionDictionary`2.transitions">
            <summary>
            The transitions.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.TransitionDictionary`2.state">
            <summary>
            The state this transition dictionary belongs to.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.#ctor(bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.TransitionDictionary`2"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.Add(`1,bbv.Common.StateMachine.Internals.ITransition{`0,`1})">
            <summary>
            Adds the specified event id.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.GetTransitions">
            <summary>
            Gets all transitions.
            </summary>
            <returns>All transitions.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.CheckTransitionDoesNotYetExist(bbv.Common.StateMachine.Internals.ITransition{`0,`1})">
            <summary>
            Throws an exception if the specified transition is already defined on this state.
            </summary>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.MakeSureEventExistsInTransitionList(`1)">
            <summary>
            If there is no entry in the <see cref="F:bbv.Common.StateMachine.Internals.TransitionDictionary`2.transitions"/> dictionary then one is created.
            </summary>
            <param name="eventId">The event id.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.GetTransitionsOfEvent(`1,System.Collections.Generic.List{bbv.Common.StateMachine.Internals.TransitionDictionary{`0,`1}.TransitionInfo})">
            <summary>
            Gets all the transitions associated to the specified event.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="list">The list to add the transition.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.Item(`1)">
            <summary>
            Gets the transitions for the specified event id.
            </summary>
            <value>transitions for the event id.</value>
            <param name="eventId">Id of the event.</param>
            <returns>The transitions for the event id.</returns>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo">
            <summary>
            Describes a transition.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.#ctor(`1,bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IState{`0,`1},bbv.Common.StateMachine.Internals.IGuardHolder,System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.ITransitionActionHolder})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo"/> class.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="guard">The guard.</param>
            <param name="actions">The actions.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.Guard">
            <summary>
            Gets the guard.
            </summary>
            <value>The guard.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionDictionary`2.TransitionInfo.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Internals.TransitionResult`2">
            <summary>
            Represents the result of a transition.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.Internals.TransitionResult`2.NotFired">
            <summary>
            This value represents that no transition was fired.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.Internals.TransitionResult`2.#ctor(System.Boolean,bbv.Common.StateMachine.Internals.IState{`0,`1},System.Collections.Generic.ICollection{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Internals.TransitionResult`2"/> class.
            </summary>
            <param name="fired">if set to <c>true</c> [fired].</param>
            <param name="newState">The new state.</param>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionResult`2.Fired">
            <summary>
            Gets a value indicating whether this <see cref="T:bbv.Common.StateMachine.Internals.ITransitionResult`2"/> is fired.
            </summary>
            <value><c>true</c> if fired; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionResult`2.NewState">
            <summary>
            Gets the new state the state machine is in.
            </summary>
            <value>The new state.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.Internals.TransitionResult`2.Exceptions">
            <summary>
            Gets all exceptions that occurred during executing the transition.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.IStateMachineReport`2">
            <summary>
            Generates a report of the state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.IStateMachineReport`2.Report(System.String,System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{`0,`1}},bbv.Common.StateMachine.Internals.Initializable{`0})">
            <summary>
            Generates a report of the state machine.
            </summary>
            <param name="name">The name of the state machine.</param>
            <param name="states">The states.</param>
            <param name="initialStateId">The initial state id.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.PassiveStateMachine`2">
            <summary>
            A passive state machine.
            This state machine reacts to events on the current thread.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.PassiveStateMachine`2.stateMachine">
            <summary>
            The internal state machine.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.PassiveStateMachine`2.events">
            <summary>
            List of all queued events.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.PassiveStateMachine`2.initialized">
            <summary>
            Whether the state machin eis initialized.
            </summary>
        </member>
        <member name="F:bbv.Common.StateMachine.PassiveStateMachine`2.executing">
            <summary>
            Whether this state machine is executing an event. Allows that events can be added while executing.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.PassiveStateMachine`2"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.PassiveStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine. Used in log messages.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.#ctor(System.String,bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.PassiveStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine. Used in log messages.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.In(`0)">
            <summary>
            Define the behavior of a state.
            </summary>
            <param name="state">The state.</param>
            <returns>Syntax to build state behavior.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.DefineHierarchyOn(`0,`0,bbv.Common.StateMachine.HistoryType,`0[])">
            <summary>
            Defines a state hierarchy.
            </summary>
            <param name="superStateId">The super state id.</param>
            <param name="initialSubStateId">The initial state id.</param>
            <param name="historyType">Type of the history.</param>
            <param name="subStateIds">The sub state ids.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Fire(`1,System.Object[])">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.FirePriority(`1,System.Object[])">
            <summary>
            Fires the specified priority event. The event will be handled before any already queued event.
            </summary>
            <param name="eventId">The event.</param>
            <param name="eventArguments">The event arguments.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Initialize(`0)">
            <summary>
            Initializes the state machine to the specified initial state.
            </summary>
            <param name="initialState">The state to which the state machine is initialized.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Start">
            <summary>
            Starts the state machine. Events will be processed.
            If the state machine is not started then the events will be queued until the state machine is started.
            Already queued events are processed.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Report(bbv.Common.StateMachine.IStateMachineReport{`0,`1})">
            <summary>
            Creates a state machine report with the specified generator.
            </summary>
            <param name="reportGenerator">The report generator.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Stop">
            <summary>
            Stops the state machine. Events will be queued until the state machine is started.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.AddExtension(bbv.Common.StateMachine.IExtension{`0,`1})">
            <summary>
            Adds an extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.Execute">
            <summary>
            Executes all queued events.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.ProcessQueuedEvents">
            <summary>
            Processes the queued events.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.GetNextEventToProcess">
            <summary>
            Gets the next event to process for the queue.
            </summary>
            <returns>The next queued event.</returns>
        </member>
        <member name="M:bbv.Common.StateMachine.PassiveStateMachine`2.FireEventOnStateMachine(bbv.Common.StateMachine.Internals.EventInformation{`1})">
            <summary>
            Fires the event on state machine.
            </summary>
            <param name="e">The event to fire.</param>
        </member>
        <member name="E:bbv.Common.StateMachine.PassiveStateMachine`2.TransitionDeclined">
            <summary>
            Occurs when no transition could be executed.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.PassiveStateMachine`2.ExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.PassiveStateMachine`2.TransitionExceptionThrown">
            <summary>
            Occurs when an exception was thrown inside a transition of the state machine.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.PassiveStateMachine`2.TransitionBegin">
            <summary>
            Occurs when a transition begins.
            </summary>
        </member>
        <member name="E:bbv.Common.StateMachine.PassiveStateMachine`2.TransitionCompleted">
            <summary>
            Occurs when a transition completed.
            </summary>
        </member>
        <member name="P:bbv.Common.StateMachine.PassiveStateMachine`2.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running. The state machine is running if if was started and not yet stopped.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.Reports.CsvStateMachineReportGenerator`2">
            <summary>
            Generator for csv reports of states and transitions of a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvStateMachineReportGenerator`2.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Reports.CsvStateMachineReportGenerator`2"/> class.
            </summary>
            <param name="statesStream">The stream where the states are written to.</param>
            <param name="transitionsStream">The stream where the transitions are written to.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvStateMachineReportGenerator`2.Report(System.String,System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{`0,`1}},bbv.Common.StateMachine.Internals.Initializable{`0})">
            <summary>
            Generates a report of the state machine.
            </summary>
            <param name="name">The name of the state machine.</param>
            <param name="states">The states.</param>
            <param name="initialStateId">The initial state id.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Reports.CsvStatesWriter`2">
            <summary>
            Writes the states of a state machine to a stream as csv.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvStatesWriter`2.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Reports.CsvStatesWriter`2"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvStatesWriter`2.Write(System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{`0,`1}})">
            <summary>
            Writes the specified states.
            </summary>
            <param name="states">The states.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Reports.CsvTransitionsWriter`2">
            <summary>
            Writes the transitions of a state machine to a stream as csv.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvTransitionsWriter`2.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.Reports.CsvTransitionsWriter`2"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.CsvTransitionsWriter`2.Write(System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{`0,`1}})">
            <summary>
            Writes the transitions of the specified states.
            </summary>
            <param name="states">The states.</param>
        </member>
        <member name="T:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2">
            <summary>
            Creates a textual report of a state machine.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2.Report(System.String,System.Collections.Generic.IEnumerable{bbv.Common.StateMachine.Internals.IState{`0,`1}},bbv.Common.StateMachine.Internals.Initializable{`0})">
            <summary>
            Generates a report of the state machine.
            </summary>
            <param name="name">The name of the state machine.</param>
            <param name="states">The states.</param>
            <param name="initialStateId">The initial state id.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2.ReportStateNameInitialStateHistoryTypeEntryAndExitAction(System.Text.StringBuilder,System.String,bbv.Common.StateMachine.Internals.IState{`0,`1})">
            <summary>
            Reports the state name, initial state, history type, entry and exit action.
            </summary>
            <param name="report">The report.</param>
            <param name="indentation">The current indentation.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2.ReportTransition(System.Text.StringBuilder,System.String,bbv.Common.StateMachine.Internals.TransitionDictionary{`0,`1}.TransitionInfo)">
            <summary>
            Reports the transition.
            </summary>
            <param name="report">The report.</param>
            <param name="indentation">The indentation.</param>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2.ReportState(bbv.Common.StateMachine.Internals.IState{`0,`1},System.Text.StringBuilder,System.String)">
            <summary>
            Creates the part of the report for the specified state.
            </summary>
            <param name="state">The state.</param>
            <param name="report">The report to add to.</param>
            <param name="indentation">The current indentation level.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.Reports.StateMachineReportGenerator`2.Result">
            <summary>
            Gets the resulting report.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.TransitionCompletedEventArgs`2">
            <summary>
            Provides information about a completed transition.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:bbv.Common.StateMachine.TransitionEventArgs`2">
            <summary>
            Event arguments providing a transition context.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.TransitionEventArgs`2.#ctor(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.TransitionEventArgs`2"/> class.
            </summary>
            <param name="context">The event context.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.TransitionEventArgs`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionEventArgs`2.StateId">
            <summary>
            Gets the id of the source state of the transition.
            </summary>
            <value>The id of the source state of the transition.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionEventArgs`2.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionEventArgs`2.EventArguments">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionEventArgs`2.TransitionContext">
            <summary>
            Gets the event context.
            </summary>
            <value>The event context.</value>
        </member>
        <member name="F:bbv.Common.StateMachine.TransitionCompletedEventArgs`2.newStateId">
            <summary>
            The new state the state machine is in after the transition.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.TransitionCompletedEventArgs`2.#ctor(`0,bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.TransitionCompletedEventArgs`2"/> class.
            </summary>
            <param name="newStateId">The new state id.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionCompletedEventArgs`2.NewStateId">
            <summary>
            Gets the new state id the state machine is in after the transition.
            </summary>
            <value>The new state id the state machine is in after the transition.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.TransitionExceptionEventArgs`2">
            <summary>
            Event arguments providing transition exceptions.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="F:bbv.Common.StateMachine.TransitionExceptionEventArgs`2.exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.TransitionExceptionEventArgs`2.#ctor(bbv.Common.StateMachine.Internals.ITransitionContext{`0,`1},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.TransitionExceptionEventArgs`2"/> class.
            </summary>
            <param name="context">The event context.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:bbv.Common.StateMachine.TransitionExceptionEventArgs`2.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:bbv.Common.StateMachine.UnitTestStateMachine`2">
            <summary>
            Special state machine that can be used in unit tests for easier exception testing.
            This state machine does not only signal exception cases and declined transitions with events
            but throws exceptions, too. This guarantees that these exception cases don't stay hidden in
            unit tests.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.UnitTestStateMachine`2"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.UnitTestStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine. Used in log messages.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.#ctor(System.String,bbv.Common.StateMachine.Internals.IFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.StateMachine.UnitTestStateMachine`2"/> class.
            </summary>
            <param name="name">The name of the state machine. Used in log messages.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.HandleTransitionDeclined(System.Object,bbv.Common.StateMachine.TransitionEventArgs{`0,`1})">
            <summary>
            Throws an exception when a transition declined event is received.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:bbv.Common.StateMachine.TransitionEventArgs`2"/> instance containing the event data.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.HandleExceptionThrown(System.Object,bbv.Common.StateMachine.ExceptionEventArgs{`0,`1})">
            <summary>
            Throws the exception received in the event arguments. The stack trace of the original exception is restored.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:bbv.Common.StateMachine.ExceptionEventArgs`2"/> instance containing the event data.</param>
        </member>
        <member name="M:bbv.Common.StateMachine.UnitTestStateMachine`2.HandleTranistionExceptionThrown(System.Object,bbv.Common.StateMachine.TransitionExceptionEventArgs{`0,`1})">
            <summary>
            Throws the exception received in the event arguments. The stack trace of the original exception is restored.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:bbv.Common.StateMachine.ExceptionEventArgs`2"/> instance containing the event data.</param>
        </member>
    </members>
</doc>

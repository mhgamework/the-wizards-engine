<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ assembly name="EnvDTE" #>
<#
	///
	/// See http://t4-editor.tangible-engineering.com/blog/walking-the-visual-studio-code-model-with-t4-template.html
	///

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE))
                      as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile)
                                     .ContainingProject as EnvDTE.Project;

	var	tNamespace = "MHGameWork.TheWizards.RTSTestCase1.Goblins.Components";

	var namespaceParts = tNamespace.Split('.');

	
#>
// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace <#=tNamespace#>{
  class MyFirstGeneratedClass{
     public static void main (string[] args ){
       <#
	 EnvDTE.Project f = project;
	System.Console.WriteLine();
	#><#=f.CodeModel.CodeElements.Count #>;<#

	//foreach (var source in f.CodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>())
	EnvDTE.CodeNamespace current;
	foreach (var part in namespaceParts)
    {
		if (current == null)
        {

        }
		var n = 
		#><#=source.FullName #>;<#
		
    }

            /*var mine = f.CodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>()
             .First(g => g.FullName == "MHGameWork.TheWizards.RTSTestCase1.Goblins.Components");
            foreach (var source in mine.Members.OfType<EnvDTE.CodeClass>())
            {

                var interfaces = source.ImplementedInterfaces.OfType<EnvDTE.CodeInterface>();
                foreach (var i in interfaces)
                {
                    System.Console.WriteLine(i.Name);
                }
            }*/

		#>
	   
     }
  static string GetDataForTable(string table){
     // TODO - will be implemented later...
     return "";
    }
  }
}
 
<#+  
  // Insert any template procedures here
  void getWeatherDataCodeGen(string Input) {
	System.Xml.Linq.XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
	
	
	var Tables = from c in XmlDoc.Descendants("Table") 
	   			 select new {Name = c.Attribute("name").Value, Table = c};

    foreach (var aTable in Tables) {
	#>
	 System.Console.Write(GetDataForTable("<#= aTable.Name #>"));
	<#+
	}
	
  }
#>